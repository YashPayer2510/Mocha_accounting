========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-18 03:46:18
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'Faker': '37.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: Faker-37.8.0, rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="aa23d92a55f845ebb7a4a227ed274f8c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="aa23d92a55f845ebb7a4a227ed274f8c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd794298900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560e6bbf1cba <unknown>
E       #1 0x560e6b6668e0 <unknown>
E       #2 0x560e6b6b8580 <unknown>
E       #3 0x560e6b6b8771 <unknown>
E       #4 0x560e6b706864 <unknown>
E       #5 0x560e6b6de09d <unknown>
E       #6 0x560e6b703c63 <unknown>
E       #7 0x560e6b6dde43 <unknown>
E       #8 0x560e6b6aa9a8 <unknown>
E       #9 0x560e6b6ab621 <unknown>
E       #10 0x560e6bbb58b8 <unknown>
E       #11 0x560e6bbb95e2 <unknown>
E       #12 0x560e6bb9c683 <unknown>
E       #13 0x560e6bbba135 <unknown>
E       #14 0x560e6bb8180f <unknown>
E       #15 0x560e6bbde4c8 <unknown>
E       #16 0x560e6bbde6a2 <unknown>
E       #17 0x560e6bbf0dc3 <unknown>
E       #18 0x7f75b509caa4 <unknown>
E       #19 0x7f75b5129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 03:46:21,297 - INFO - Test data loaded successfully.
2025-09-18 03:46:21,297 - INFO - Starting test with Chrome browser
2025-09-18 03:46:21,297 - INFO - ====== WebDriver manager ======
2025-09-18 03:46:23,230 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:46:23,304 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:46:23,358 - INFO - There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
2025-09-18 03:46:23,358 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:46:23,564 - INFO - WebDriver version 140.0.7339.185 selected
2025-09-18 03:46:23,568 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-18 03:46:23,568 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-18 03:46:23,673 - INFO - Driver downloading response is 200
2025-09-18 03:46:23,927 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:46:24,111 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
2025-09-18 03:46:37,062 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.185 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-18 03:46:37,063 - INFO - Starting the test case for valid credentials
2025-09-18 03:46:37,455 - INFO - User enters the email-id
2025-09-18 03:46:39,226 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 03:48:40,912 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a7a2e612aef2ca85c60c1d91e15acd1a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a7a2e612aef2ca85c60c1d91e15acd1a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e758a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f1e3a5bcba <unknown>
E       #1 0x55f1e34d08e0 <unknown>
E       #2 0x55f1e3522580 <unknown>
E       #3 0x55f1e3522771 <unknown>
E       #4 0x55f1e3570864 <unknown>
E       #5 0x55f1e354809d <unknown>
E       #6 0x55f1e356dc63 <unknown>
E       #7 0x55f1e3547e43 <unknown>
E       #8 0x55f1e35149a8 <unknown>
E       #9 0x55f1e3515621 <unknown>
E       #10 0x55f1e3a1f8b8 <unknown>
E       #11 0x55f1e3a235e2 <unknown>
E       #12 0x55f1e3a06683 <unknown>
E       #13 0x55f1e3a24135 <unknown>
E       #14 0x55f1e39eb80f <unknown>
E       #15 0x55f1e3a484c8 <unknown>
E       #16 0x55f1e3a486a2 <unknown>
E       #17 0x55f1e3a5adc3 <unknown>
E       #18 0x7fe9cec9caa4 <unknown>
E       #19 0x7fe9ced29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 03:48:41,163 - INFO - Starting test with Chrome browser
2025-09-18 03:48:41,164 - INFO - ====== WebDriver manager ======
2025-09-18 03:48:41,232 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:48:41,307 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:48:41,389 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 03:48:43,046 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-18 03:48:43,046 - INFO - Starting the test case for valid credentials
2025-09-18 03:48:43,190 - INFO - User enters the email-id
2025-09-18 03:48:44,882 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 03:50:46,481 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e702dc695caee3497993bdc7b3ef5b9b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e702dc695caee3497993bdc7b3ef5b9b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd7959ba3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562ad5970cba <unknown>
E       #1 0x562ad53e58e0 <unknown>
E       #2 0x562ad5437580 <unknown>
E       #3 0x562ad5437771 <unknown>
E       #4 0x562ad5485864 <unknown>
E       #5 0x562ad545d09d <unknown>
E       #6 0x562ad5482c63 <unknown>
E       #7 0x562ad545ce43 <unknown>
E       #8 0x562ad54299a8 <unknown>
E       #9 0x562ad542a621 <unknown>
E       #10 0x562ad59348b8 <unknown>
E       #11 0x562ad59385e2 <unknown>
E       #12 0x562ad591b683 <unknown>
E       #13 0x562ad5939135 <unknown>
E       #14 0x562ad590080f <unknown>
E       #15 0x562ad595d4c8 <unknown>
E       #16 0x562ad595d6a2 <unknown>
E       #17 0x562ad596fdc3 <unknown>
E       #18 0x7f7386e9caa4 <unknown>
E       #19 0x7f7386f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 03:50:46,547 - INFO - Starting test with Chrome browser
2025-09-18 03:50:46,548 - INFO - ====== WebDriver manager ======
2025-09-18 03:50:46,616 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:50:46,673 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:50:46,743 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 03:50:48,286 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-18 03:50:48,287 - INFO - Starting the test case for valid credentials
2025-09-18 03:50:48,438 - INFO - User enters the email-id
2025-09-18 03:50:50,086 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 03:52:51,746 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="32a299bc6ad8af9df477133e9c5d8c20")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="32a299bc6ad8af9df477133e9c5d8c20")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e756c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5649e38e7cba <unknown>
E       #1 0x5649e335c8e0 <unknown>
E       #2 0x5649e33ae580 <unknown>
E       #3 0x5649e33ae771 <unknown>
E       #4 0x5649e33fc864 <unknown>
E       #5 0x5649e33d409d <unknown>
E       #6 0x5649e33f9c63 <unknown>
E       #7 0x5649e33d3e43 <unknown>
E       #8 0x5649e33a09a8 <unknown>
E       #9 0x5649e33a1621 <unknown>
E       #10 0x5649e38ab8b8 <unknown>
E       #11 0x5649e38af5e2 <unknown>
E       #12 0x5649e3892683 <unknown>
E       #13 0x5649e38b0135 <unknown>
E       #14 0x5649e387780f <unknown>
E       #15 0x5649e38d44c8 <unknown>
E       #16 0x5649e38d46a2 <unknown>
E       #17 0x5649e38e6dc3 <unknown>
E       #18 0x7fc4d089caa4 <unknown>
E       #19 0x7fc4d0929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 03:52:51,846 - INFO - Starting test with Chrome browser
2025-09-18 03:52:51,847 - INFO - ====== WebDriver manager ======
2025-09-18 03:52:51,912 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:52:52,018 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:52:52,095 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 03:52:53,484 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-18 03:52:53,485 - INFO - Starting the test case for valid credentials
2025-09-18 03:52:53,641 - INFO - User enters the email-id
2025-09-18 03:52:55,331 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 03:54:57,024 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3a95c34f130d2e8abe875e461423f9e5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3a95c34f130d2e8abe875e461423f9e5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e75f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55983bff4cba <unknown>
E       #1 0x55983ba698e0 <unknown>
E       #2 0x55983babb580 <unknown>
E       #3 0x55983babb771 <unknown>
E       #4 0x55983bb09864 <unknown>
E       #5 0x55983bae109d <unknown>
E       #6 0x55983bb06c63 <unknown>
E       #7 0x55983bae0e43 <unknown>
E       #8 0x55983baad9a8 <unknown>
E       #9 0x55983baae621 <unknown>
E       #10 0x55983bfb88b8 <unknown>
E       #11 0x55983bfbc5e2 <unknown>
E       #12 0x55983bf9f683 <unknown>
E       #13 0x55983bfbd135 <unknown>
E       #14 0x55983bf8480f <unknown>
E       #15 0x55983bfe14c8 <unknown>
E       #16 0x55983bfe16a2 <unknown>
E       #17 0x55983bff3dc3 <unknown>
E       #18 0x7f8a07e9caa4 <unknown>
E       #19 0x7f8a07f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 03:54:57,090 - INFO - Starting test with Chrome browser
2025-09-18 03:54:57,090 - INFO - ====== WebDriver manager ======
2025-09-18 03:54:57,157 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:54:57,230 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:54:57,295 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 03:54:59,195 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 03:57:00,992 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2cb227aca89a67a3d910ec8c89542848")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2cb227aca89a67a3d910ec8c89542848")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e76020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5622b6170cba <unknown>
E       #1 0x5622b5be58e0 <unknown>
E       #2 0x5622b5c37580 <unknown>
E       #3 0x5622b5c37771 <unknown>
E       #4 0x5622b5c85864 <unknown>
E       #5 0x5622b5c5d09d <unknown>
E       #6 0x5622b5c82c63 <unknown>
E       #7 0x5622b5c5ce43 <unknown>
E       #8 0x5622b5c299a8 <unknown>
E       #9 0x5622b5c2a621 <unknown>
E       #10 0x5622b61348b8 <unknown>
E       #11 0x5622b61385e2 <unknown>
E       #12 0x5622b611b683 <unknown>
E       #13 0x5622b6139135 <unknown>
E       #14 0x5622b610080f <unknown>
E       #15 0x5622b615d4c8 <unknown>
E       #16 0x5622b615d6a2 <unknown>
E       #17 0x5622b616fdc3 <unknown>
E       #18 0x7f0811a9caa4 <unknown>
E       #19 0x7f0811b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 03:57:01,059 - INFO - Starting test with Chrome browser
2025-09-18 03:57:01,059 - INFO - ====== WebDriver manager ======
2025-09-18 03:57:01,128 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:57:01,200 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:57:01,258 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 03:57:02,895 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 03:59:04,621 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5340e1c24f7d3171cc0ffefa66867653")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5340e1c24f7d3171cc0ffefa66867653")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e75da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a1f5464cba <unknown>
E       #1 0x55a1f4ed98e0 <unknown>
E       #2 0x55a1f4f2b580 <unknown>
E       #3 0x55a1f4f2b771 <unknown>
E       #4 0x55a1f4f79864 <unknown>
E       #5 0x55a1f4f5109d <unknown>
E       #6 0x55a1f4f76c63 <unknown>
E       #7 0x55a1f4f50e43 <unknown>
E       #8 0x55a1f4f1d9a8 <unknown>
E       #9 0x55a1f4f1e621 <unknown>
E       #10 0x55a1f54288b8 <unknown>
E       #11 0x55a1f542c5e2 <unknown>
E       #12 0x55a1f540f683 <unknown>
E       #13 0x55a1f542d135 <unknown>
E       #14 0x55a1f53f480f <unknown>
E       #15 0x55a1f54514c8 <unknown>
E       #16 0x55a1f54516a2 <unknown>
E       #17 0x55a1f5463dc3 <unknown>
E       #18 0x7fdbe969caa4 <unknown>
E       #19 0x7fdbe9729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 03:59:04,687 - INFO - Starting test with Chrome browser
2025-09-18 03:59:04,687 - INFO - ====== WebDriver manager ======
2025-09-18 03:59:04,757 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:59:04,829 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 03:59:04,898 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 03:59:06,585 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 04:01:08,335 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="27eb59a29689cfded93124075eef4048")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="27eb59a29689cfded93124075eef4048")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e76840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5638a05cecba <unknown>
E       #1 0x5638a00438e0 <unknown>
E       #2 0x5638a0095580 <unknown>
E       #3 0x5638a0095771 <unknown>
E       #4 0x5638a00e3864 <unknown>
E       #5 0x5638a00bb09d <unknown>
E       #6 0x5638a00e0c63 <unknown>
E       #7 0x5638a00bae43 <unknown>
E       #8 0x5638a00879a8 <unknown>
E       #9 0x5638a0088621 <unknown>
E       #10 0x5638a05928b8 <unknown>
E       #11 0x5638a05965e2 <unknown>
E       #12 0x5638a0579683 <unknown>
E       #13 0x5638a0597135 <unknown>
E       #14 0x5638a055e80f <unknown>
E       #15 0x5638a05bb4c8 <unknown>
E       #16 0x5638a05bb6a2 <unknown>
E       #17 0x5638a05cddc3 <unknown>
E       #18 0x7f01c9c9caa4 <unknown>
E       #19 0x7f01c9d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 04:01:08,401 - INFO - Starting test with Chrome browser
2025-09-18 04:01:08,402 - INFO - ====== WebDriver manager ======
2025-09-18 04:01:08,468 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:01:08,533 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:01:08,605 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 04:01:10,132 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 04:03:11,952 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3f6e079ee4c09e4804d8aceedce75b40")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3f6e079ee4c09e4804d8aceedce75b40")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e76b60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559bd884fcba <unknown>
E       #1 0x559bd82c48e0 <unknown>
E       #2 0x559bd8316580 <unknown>
E       #3 0x559bd8316771 <unknown>
E       #4 0x559bd8364864 <unknown>
E       #5 0x559bd833c09d <unknown>
E       #6 0x559bd8361c63 <unknown>
E       #7 0x559bd833be43 <unknown>
E       #8 0x559bd83089a8 <unknown>
E       #9 0x559bd8309621 <unknown>
E       #10 0x559bd88138b8 <unknown>
E       #11 0x559bd88175e2 <unknown>
E       #12 0x559bd87fa683 <unknown>
E       #13 0x559bd8818135 <unknown>
E       #14 0x559bd87df80f <unknown>
E       #15 0x559bd883c4c8 <unknown>
E       #16 0x559bd883c6a2 <unknown>
E       #17 0x559bd884edc3 <unknown>
E       #18 0x7f17caa9caa4 <unknown>
E       #19 0x7f17cab29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 04:03:12,018 - INFO - Starting test with Chrome browser
2025-09-18 04:03:12,018 - INFO - ====== WebDriver manager ======
2025-09-18 04:03:12,088 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:03:12,167 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:03:12,225 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 04:03:14,122 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 04:05:17,683 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="184d1e8bcb5ccc16bf3fd3e9b8738f65")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="184d1e8bcb5ccc16bf3fd3e9b8738f65")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e768e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5593c634bcba <unknown>
E       #1 0x5593c5dc08e0 <unknown>
E       #2 0x5593c5e12580 <unknown>
E       #3 0x5593c5e12771 <unknown>
E       #4 0x5593c5e60864 <unknown>
E       #5 0x5593c5e3809d <unknown>
E       #6 0x5593c5e5dc63 <unknown>
E       #7 0x5593c5e37e43 <unknown>
E       #8 0x5593c5e049a8 <unknown>
E       #9 0x5593c5e05621 <unknown>
E       #10 0x5593c630f8b8 <unknown>
E       #11 0x5593c63135e2 <unknown>
E       #12 0x5593c62f6683 <unknown>
E       #13 0x5593c6314135 <unknown>
E       #14 0x5593c62db80f <unknown>
E       #15 0x5593c63384c8 <unknown>
E       #16 0x5593c63386a2 <unknown>
E       #17 0x5593c634adc3 <unknown>
E       #18 0x7f9e72a9caa4 <unknown>
E       #19 0x7f9e72b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 04:05:17,750 - INFO - Starting test with Chrome browser
2025-09-18 04:05:17,750 - INFO - ====== WebDriver manager ======
2025-09-18 04:05:17,817 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:05:17,895 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:05:17,950 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 04:05:19,672 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 04:07:23,082 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="38d3733537a99015712aae4ca3f53cef")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="38d3733537a99015712aae4ca3f53cef")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e75da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5643007dfcba <unknown>
E       #1 0x5643002548e0 <unknown>
E       #2 0x5643002a6580 <unknown>
E       #3 0x5643002a6771 <unknown>
E       #4 0x5643002f4864 <unknown>
E       #5 0x5643002cc09d <unknown>
E       #6 0x5643002f1c63 <unknown>
E       #7 0x5643002cbe43 <unknown>
E       #8 0x5643002989a8 <unknown>
E       #9 0x564300299621 <unknown>
E       #10 0x5643007a38b8 <unknown>
E       #11 0x5643007a75e2 <unknown>
E       #12 0x56430078a683 <unknown>
E       #13 0x5643007a8135 <unknown>
E       #14 0x56430076f80f <unknown>
E       #15 0x5643007cc4c8 <unknown>
E       #16 0x5643007cc6a2 <unknown>
E       #17 0x5643007dedc3 <unknown>
E       #18 0x7f7ccf49caa4 <unknown>
E       #19 0x7f7ccf529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 04:07:23,146 - INFO - Starting test with Chrome browser
2025-09-18 04:07:23,147 - INFO - ====== WebDriver manager ======
2025-09-18 04:07:23,214 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:07:23,279 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:07:23,355 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 04:07:25,381 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 04:09:28,846 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="501b47460e762e805639f35d3705be58")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="501b47460e762e805639f35d3705be58")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd793e75940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e434f9acba <unknown>
E       #1 0x55e434a0f8e0 <unknown>
E       #2 0x55e434a61580 <unknown>
E       #3 0x55e434a61771 <unknown>
E       #4 0x55e434aaf864 <unknown>
E       #5 0x55e434a8709d <unknown>
E       #6 0x55e434aacc63 <unknown>
E       #7 0x55e434a86e43 <unknown>
E       #8 0x55e434a539a8 <unknown>
E       #9 0x55e434a54621 <unknown>
E       #10 0x55e434f5e8b8 <unknown>
E       #11 0x55e434f625e2 <unknown>
E       #12 0x55e434f45683 <unknown>
E       #13 0x55e434f63135 <unknown>
E       #14 0x55e434f2a80f <unknown>
E       #15 0x55e434f874c8 <unknown>
E       #16 0x55e434f876a2 <unknown>
E       #17 0x55e434f99dc3 <unknown>
E       #18 0x7ff7c649caa4 <unknown>
E       #19 0x7ff7c6529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-18 04:09:28,911 - INFO - Starting test with Chrome browser
2025-09-18 04:09:28,912 - INFO - ====== WebDriver manager ======
2025-09-18 04:09:28,979 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:09:29,069 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-18 04:09:29,133 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-18 04:09:30,761 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-18 04:11:34,287 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250918_034621/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560e6bbf1cba <unknown>
#1 0x560e6b6668e0 <unknown>
#2 0x560e6b6b8580 <unknown>
#3 0x560e6b6b8771 <unknown>
#4 0x560e6b706864 <unknown>
#5 0x560e6b6de09d <unknown>
#6 0x560e6b703c63 <unknown>
#7 0x560e6b6dde43 <unknown>
#8 0x560e6b6aa9a8 <unknown>
#9 0x560e6b6ab621 <unknown>
#10 0x560e6bbb58b8 <unknown>
#11 0x560e6bbb95e2 <unknown>
#12 0x560e6bb9c683 <unknown>
#13 0x560e6bbba135 <unknown>
#14 0x560e6bb8180f <unknown>
#15 0x560e6bbde4c8 <unknown>
#16 0x560e6bbde6a2 <unknown>
#17 0x560e6bbf0dc3 <unknown>
#18 0x7f75b509caa4 <unknown>
#19 0x7f75b5129c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f1e3a5bcba <unknown>
#1 0x55f1e34d08e0 <unknown>
#2 0x55f1e3522580 <unknown>
#3 0x55f1e3522771 <unknown>
#4 0x55f1e3570864 <unknown>
#5 0x55f1e354809d <unknown>
#6 0x55f1e356dc63 <unknown>
#7 0x55f1e3547e43 <unknown>
#8 0x55f1e35149a8 <unknown>
#9 0x55f1e3515621 <unknown>
#10 0x55f1e3a1f8b8 <unknown>
#11 0x55f1e3a235e2 <unknown>
#12 0x55f1e3a06683 <unknown>
#13 0x55f1e3a24135 <unknown>
#14 0x55f1e39eb80f <unknown>
#15 0x55f1e3a484c8 <unknown>
#16 0x55f1e3a486a2 <unknown>
#17 0x55f1e3a5adc3 <unknown>
#18 0x7fe9cec9caa4 <unknown>
#19 0x7fe9ced29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562ad5970cba <unknown>
#1 0x562ad53e58e0 <unknown>
#2 0x562ad5437580 <unknown>
#3 0x562ad5437771 <unknown>
#4 0x562ad5485864 <unknown>
#5 0x562ad545d09d <unknown>
#6 0x562ad5482c63 <unknown>
#7 0x562ad545ce43 <unknown>
#8 0x562ad54299a8 <unknown>
#9 0x562ad542a621 <unknown>
#10 0x562ad59348b8 <unknown>
#11 0x562ad59385e2 <unknown>
#12 0x562ad591b683 <unknown>
#13 0x562ad5939135 <unknown>
#14 0x562ad590080f <unknown>
#15 0x562ad595d4c8 <unknown>
#16 0x562ad595d6a2 <unknown>
#17 0x562ad596fdc3 <unknown>
#18 0x7f7386e9caa4 <unknown>
#19 0x7f7386f29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5649e38e7cba <unknown>
#1 0x5649e335c8e0 <unknown>
#2 0x5649e33ae580 <unknown>
#3 0x5649e33ae771 <unknown>
#4 0x5649e33fc864 <unknown>
#5 0x5649e33d409d <unknown>
#6 0x5649e33f9c63 <unknown>
#7 0x5649e33d3e43 <unknown>
#8 0x5649e33a09a8 <unknown>
#9 0x5649e33a1621 <unknown>
#10 0x5649e38ab8b8 <unknown>
#11 0x5649e38af5e2 <unknown>
#12 0x5649e3892683 <unknown>
#13 0x5649e38b0135 <unknown>
#14 0x5649e387780f <unknown>
#15 0x5649e38d44c8 <unknown>
#16 0x5649e38d46a2 <unknown>
#17 0x5649e38e6dc3 <unknown>
#18 0x7fc4d089caa4 <unknown>
#19 0x7fc4d0929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55983bff4cba <unknown>
#1 0x55983ba698e0 <unknown>
#2 0x55983babb580 <unknown>
#3 0x55983babb771 <unknown>
#4 0x55983bb09864 <unknown>
#5 0x55983bae109d <unknown>
#6 0x55983bb06c63 <unknown>
#7 0x55983bae0e43 <unknown>
#8 0x55983baad9a8 <unknown>
#9 0x55983baae621 <unknown>
#10 0x55983bfb88b8 <unknown>
#11 0x55983bfbc5e2 <unknown>
#12 0x55983bf9f683 <unknown>
#13 0x55983bfbd135 <unknown>
#14 0x55983bf8480f <unknown>
#15 0x55983bfe14c8 <unknown>
#16 0x55983bfe16a2 <unknown>
#17 0x55983bff3dc3 <unknown>
#18 0x7f8a07e9caa4 <unknown>
#19 0x7f8a07f29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5622b6170cba <unknown>
#1 0x5622b5be58e0 <unknown>
#2 0x5622b5c37580 <unknown>
#3 0x5622b5c37771 <unknown>
#4 0x5622b5c85864 <unknown>
#5 0x5622b5c5d09d <unknown>
#6 0x5622b5c82c63 <unknown>
#7 0x5622b5c5ce43 <unknown>
#8 0x5622b5c299a8 <unknown>
#9 0x5622b5c2a621 <unknown>
#10 0x5622b61348b8 <unknown>
#11 0x5622b61385e2 <unknown>
#12 0x5622b611b683 <unknown>
#13 0x5622b6139135 <unknown>
#14 0x5622b610080f <unknown>
#15 0x5622b615d4c8 <unknown>
#16 0x5622b615d6a2 <unknown>
#17 0x5622b616fdc3 <unknown>
#18 0x7f0811a9caa4 <unknown>
#19 0x7f0811b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a1f5464cba <unknown>
#1 0x55a1f4ed98e0 <unknown>
#2 0x55a1f4f2b580 <unknown>
#3 0x55a1f4f2b771 <unknown>
#4 0x55a1f4f79864 <unknown>
#5 0x55a1f4f5109d <unknown>
#6 0x55a1f4f76c63 <unknown>
#7 0x55a1f4f50e43 <unknown>
#8 0x55a1f4f1d9a8 <unknown>
#9 0x55a1f4f1e621 <unknown>
#10 0x55a1f54288b8 <unknown>
#11 0x55a1f542c5e2 <unknown>
#12 0x55a1f540f683 <unknown>
#13 0x55a1f542d135 <unknown>
#14 0x55a1f53f480f <unknown>
#15 0x55a1f54514c8 <unknown>
#16 0x55a1f54516a2 <unknown>
#17 0x55a1f5463dc3 <unknown>
#18 0x7fdbe969caa4 <unknown>
#19 0x7fdbe9729c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5638a05cecba <unknown>
#1 0x5638a00438e0 <unknown>
#2 0x5638a0095580 <unknown>
#3 0x5638a0095771 <unknown>
#4 0x5638a00e3864 <unknown>
#5 0x5638a00bb09d <unknown>
#6 0x5638a00e0c63 <unknown>
#7 0x5638a00bae43 <unknown>
#8 0x5638a00879a8 <unknown>
#9 0x5638a0088621 <unknown>
#10 0x5638a05928b8 <unknown>
#11 0x5638a05965e2 <unknown>
#12 0x5638a0579683 <unknown>
#13 0x5638a0597135 <unknown>
#14 0x5638a055e80f <unknown>
#15 0x5638a05bb4c8 <unknown>
#16 0x5638a05bb6a2 <unknown>
#17 0x5638a05cddc3 <unknown>
#18 0x7f01c9c9caa4 <unknown>
#19 0x7f01c9d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559bd884fcba <unknown>
#1 0x559bd82c48e0 <unknown>
#2 0x559bd8316580 <unknown>
#3 0x559bd8316771 <unknown>
#4 0x559bd8364864 <unknown>
#5 0x559bd833c09d <unknown>
#6 0x559bd8361c63 <unknown>
#7 0x559bd833be43 <unknown>
#8 0x559bd83089a8 <unknown>
#9 0x559bd8309621 <unknown>
#10 0x559bd88138b8 <unknown>
#11 0x559bd88175e2 <unknown>
#12 0x559bd87fa683 <unknown>
#13 0x559bd8818135 <unknown>
#14 0x559bd87df80f <unknown>
#15 0x559bd883c4c8 <unknown>
#16 0x559bd883c6a2 <unknown>
#17 0x559bd884edc3 <unknown>
#18 0x7f17caa9caa4 <unknown>
#19 0x7f17cab29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5593c634bcba <unknown>
#1 0x5593c5dc08e0 <unknown>
#2 0x5593c5e12580 <unknown>
#3 0x5593c5e12771 <unknown>
#4 0x5593c5e60864 <unknown>
#5 0x5593c5e3809d <unknown>
#6 0x5593c5e5dc63 <unknown>
#7 0x5593c5e37e43 <unknown>
#8 0x5593c5e049a8 <unknown>
#9 0x5593c5e05621 <unknown>
#10 0x5593c630f8b8 <unknown>
#11 0x5593c63135e2 <unknown>
#12 0x5593c62f6683 <unknown>
#13 0x5593c6314135 <unknown>
#14 0x5593c62db80f <unknown>
#15 0x5593c63384c8 <unknown>
#16 0x5593c63386a2 <unknown>
#17 0x5593c634adc3 <unknown>
#18 0x7f9e72a9caa4 <unknown>
#19 0x7f9e72b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5643007dfcba <unknown>
#1 0x5643002548e0 <unknown>
#2 0x5643002a6580 <unknown>
#3 0x5643002a6771 <unknown>
#4 0x5643002f4864 <unknown>
#5 0x5643002cc09d <unknown>
#6 0x5643002f1c63 <unknown>
#7 0x5643002cbe43 <unknown>
#8 0x5643002989a8 <unknown>
#9 0x564300299621 <unknown>
#10 0x5643007a38b8 <unknown>
#11 0x5643007a75e2 <unknown>
#12 0x56430078a683 <unknown>
#13 0x5643007a8135 <unknown>
#14 0x56430076f80f <unknown>
#15 0x5643007cc4c8 <unknown>
#16 0x5643007cc6a2 <unknown>
#17 0x5643007dedc3 <unknown>
#18 0x7f7ccf49caa4 <unknown>
#19 0x7f7ccf529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e434f9acba <unknown>
#1 0x55e434a0f8e0 <unknown>
#2 0x55e434a61580 <unknown>
#3 0x55e434a61771 <unknown>
#4 0x55e434aaf864 <unknown>
#5 0x55e434a8709d <unknown>
#6 0x55e434aacc63 <unknown>
#7 0x55e434a86e43 <unknown>
#8 0x55e434a539a8 <unknown>
#9 0x55e434a54621 <unknown>
#10 0x55e434f5e8b8 <unknown>
#11 0x55e434f625e2 <unknown>
#12 0x55e434f45683 <unknown>
#13 0x55e434f63135 <unknown>
#14 0x55e434f2a80f <unknown>
#15 0x55e434f874c8 <unknown>
#16 0x55e434f876a2 <unknown>
#17 0x55e434f99dc3 <unknown>
#18 0x7ff7c649caa4 <unknown>
#19 0x7ff7c6529c3c <unknown>
================== 12 failed, 7 passed in 1528.82s (0:25:28) ===================
--------------------------------------------
Test Run Finished: 2025-09-18 04:11:50
Duration: 1532 seconds
Status: FAILURE
Exit Code: 1
============================================
