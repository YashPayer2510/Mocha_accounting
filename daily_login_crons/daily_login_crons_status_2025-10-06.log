========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-06 03:47:17
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="76ef4720d3549cc08c02971530f06052")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="76ef4720d3549cc08c02971530f06052")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996c2c8900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559778edffba <unknown>
E       #1 0x5597789646d0 <unknown>
E       #2 0x5597789b62aa <unknown>
E       #3 0x5597789b6541 <unknown>
E       #4 0x559778a046c4 <unknown>
E       #5 0x5597789dbe5d <unknown>
E       #6 0x559778a01b54 <unknown>
E       #7 0x5597789dbc03 <unknown>
E       #8 0x5597789a87a8 <unknown>
E       #9 0x5597789a9421 <unknown>
E       #10 0x559778ea4b28 <unknown>
E       #11 0x559778ea887f <unknown>
E       #12 0x559778e8cc49 <unknown>
E       #13 0x559778ea9405 <unknown>
E       #14 0x559778e724ff <unknown>
E       #15 0x559778ecd258 <unknown>
E       #16 0x559778ecd432 <unknown>
E       #17 0x559778edefa3 <unknown>
E       #18 0x7f349d69caa4 <unknown>
E       #19 0x7f349d729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 03:47:22,659 - INFO - Test data loaded successfully.
2025-10-06 03:47:22,659 - INFO - Starting test with Chrome browser
2025-10-06 03:47:22,659 - INFO - ====== WebDriver manager ======
2025-10-06 03:47:26,982 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:47:27,035 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:47:27,070 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-06 03:47:27,070 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:47:27,169 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-06 03:47:27,173 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-06 03:47:27,173 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-06 03:47:27,217 - INFO - Driver downloading response is 200
2025-10-06 03:47:27,272 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:47:27,417 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-06 03:47:55,259 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-06 03:47:55,260 - INFO - Starting the test case for valid credentials
2025-10-06 03:47:55,690 - INFO - User enters the email-id
2025-10-06 03:47:57,258 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 03:49:58,891 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="115bdb9b67a77eb74cdfebdb42fc0e0e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="115bdb9b67a77eb74cdfebdb42fc0e0e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d9498a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e48b2dcfba <unknown>
E       #1 0x55e48ad616d0 <unknown>
E       #2 0x55e48adb32aa <unknown>
E       #3 0x55e48adb3541 <unknown>
E       #4 0x55e48ae016c4 <unknown>
E       #5 0x55e48add8e5d <unknown>
E       #6 0x55e48adfeb54 <unknown>
E       #7 0x55e48add8c03 <unknown>
E       #8 0x55e48ada57a8 <unknown>
E       #9 0x55e48ada6421 <unknown>
E       #10 0x55e48b2a1b28 <unknown>
E       #11 0x55e48b2a587f <unknown>
E       #12 0x55e48b289c49 <unknown>
E       #13 0x55e48b2a6405 <unknown>
E       #14 0x55e48b26f4ff <unknown>
E       #15 0x55e48b2ca258 <unknown>
E       #16 0x55e48b2ca432 <unknown>
E       #17 0x55e48b2dbfa3 <unknown>
E       #18 0x7fc2f569caa4 <unknown>
E       #19 0x7fc2f5729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 03:49:59,141 - INFO - Starting test with Chrome browser
2025-10-06 03:49:59,142 - INFO - ====== WebDriver manager ======
2025-10-06 03:49:59,205 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:49:59,238 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:49:59,357 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 03:50:00,858 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-06 03:50:00,859 - INFO - Starting the test case for valid credentials
2025-10-06 03:50:01,000 - INFO - User enters the email-id
2025-10-06 03:50:02,685 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 03:52:04,346 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2515b0ba00f073dccd0f30b2236bf0d0")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2515b0ba00f073dccd0f30b2236bf0d0")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996ba4a3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55921da6afba <unknown>
E       #1 0x55921d4ef6d0 <unknown>
E       #2 0x55921d5412aa <unknown>
E       #3 0x55921d541541 <unknown>
E       #4 0x55921d58f6c4 <unknown>
E       #5 0x55921d566e5d <unknown>
E       #6 0x55921d58cb54 <unknown>
E       #7 0x55921d566c03 <unknown>
E       #8 0x55921d5337a8 <unknown>
E       #9 0x55921d534421 <unknown>
E       #10 0x55921da2fb28 <unknown>
E       #11 0x55921da3387f <unknown>
E       #12 0x55921da17c49 <unknown>
E       #13 0x55921da34405 <unknown>
E       #14 0x55921d9fd4ff <unknown>
E       #15 0x55921da58258 <unknown>
E       #16 0x55921da58432 <unknown>
E       #17 0x55921da69fa3 <unknown>
E       #18 0x7f696e69caa4 <unknown>
E       #19 0x7f696e729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 03:52:04,412 - INFO - Starting test with Chrome browser
2025-10-06 03:52:04,412 - INFO - ====== WebDriver manager ======
2025-10-06 03:52:04,476 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:52:04,510 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:52:04,543 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 03:52:05,940 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-06 03:52:05,941 - INFO - Starting the test case for valid credentials
2025-10-06 03:52:06,086 - INFO - User enters the email-id
2025-10-06 03:52:07,833 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 03:54:09,442 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="357e635cf2d453468c492789919bacba")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="357e635cf2d453468c492789919bacba")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d9496c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ef6f39bfba <unknown>
E       #1 0x55ef6ee206d0 <unknown>
E       #2 0x55ef6ee722aa <unknown>
E       #3 0x55ef6ee72541 <unknown>
E       #4 0x55ef6eec06c4 <unknown>
E       #5 0x55ef6ee97e5d <unknown>
E       #6 0x55ef6eebdb54 <unknown>
E       #7 0x55ef6ee97c03 <unknown>
E       #8 0x55ef6ee647a8 <unknown>
E       #9 0x55ef6ee65421 <unknown>
E       #10 0x55ef6f360b28 <unknown>
E       #11 0x55ef6f36487f <unknown>
E       #12 0x55ef6f348c49 <unknown>
E       #13 0x55ef6f365405 <unknown>
E       #14 0x55ef6f32e4ff <unknown>
E       #15 0x55ef6f389258 <unknown>
E       #16 0x55ef6f389432 <unknown>
E       #17 0x55ef6f39afa3 <unknown>
E       #18 0x7f141629caa4 <unknown>
E       #19 0x7f1416329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 03:54:09,539 - INFO - Starting test with Chrome browser
2025-10-06 03:54:09,540 - INFO - ====== WebDriver manager ======
2025-10-06 03:54:09,604 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:54:09,637 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:54:09,669 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 03:54:11,147 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-06 03:54:11,148 - INFO - Starting the test case for valid credentials
2025-10-06 03:54:11,305 - INFO - User enters the email-id
2025-10-06 03:54:12,991 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 03:56:14,609 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f91bd2062e01088cd0dbe76fff5e8443")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f91bd2062e01088cd0dbe76fff5e8443")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d949f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55919d4f3fba <unknown>
E       #1 0x55919cf786d0 <unknown>
E       #2 0x55919cfca2aa <unknown>
E       #3 0x55919cfca541 <unknown>
E       #4 0x55919d0186c4 <unknown>
E       #5 0x55919cfefe5d <unknown>
E       #6 0x55919d015b54 <unknown>
E       #7 0x55919cfefc03 <unknown>
E       #8 0x55919cfbc7a8 <unknown>
E       #9 0x55919cfbd421 <unknown>
E       #10 0x55919d4b8b28 <unknown>
E       #11 0x55919d4bc87f <unknown>
E       #12 0x55919d4a0c49 <unknown>
E       #13 0x55919d4bd405 <unknown>
E       #14 0x55919d4864ff <unknown>
E       #15 0x55919d4e1258 <unknown>
E       #16 0x55919d4e1432 <unknown>
E       #17 0x55919d4f2fa3 <unknown>
E       #18 0x7f7e1ca9caa4 <unknown>
E       #19 0x7f7e1cb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 03:56:14,668 - INFO - Starting test with Chrome browser
2025-10-06 03:56:14,668 - INFO - ====== WebDriver manager ======
2025-10-06 03:56:14,731 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:56:14,764 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:56:14,796 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 03:56:16,311 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 03:58:18,084 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fb1260c1850a07312c6f924a26c99180")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="fb1260c1850a07312c6f924a26c99180")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d94a020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557412dcbfba <unknown>
E       #1 0x5574128506d0 <unknown>
E       #2 0x5574128a22aa <unknown>
E       #3 0x5574128a2541 <unknown>
E       #4 0x5574128f06c4 <unknown>
E       #5 0x5574128c7e5d <unknown>
E       #6 0x5574128edb54 <unknown>
E       #7 0x5574128c7c03 <unknown>
E       #8 0x5574128947a8 <unknown>
E       #9 0x557412895421 <unknown>
E       #10 0x557412d90b28 <unknown>
E       #11 0x557412d9487f <unknown>
E       #12 0x557412d78c49 <unknown>
E       #13 0x557412d95405 <unknown>
E       #14 0x557412d5e4ff <unknown>
E       #15 0x557412db9258 <unknown>
E       #16 0x557412db9432 <unknown>
E       #17 0x557412dcafa3 <unknown>
E       #18 0x7f76fc89caa4 <unknown>
E       #19 0x7f76fc929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 03:58:18,150 - INFO - Starting test with Chrome browser
2025-10-06 03:58:18,150 - INFO - ====== WebDriver manager ======
2025-10-06 03:58:18,215 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:58:18,248 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 03:58:18,280 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 03:58:19,699 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 04:00:21,533 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5f08f0d36b47196ba7c9d07918121b9a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5f08f0d36b47196ba7c9d07918121b9a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d949da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c658fd2fba <unknown>
E       #1 0x55c658a576d0 <unknown>
E       #2 0x55c658aa92aa <unknown>
E       #3 0x55c658aa9541 <unknown>
E       #4 0x55c658af76c4 <unknown>
E       #5 0x55c658acee5d <unknown>
E       #6 0x55c658af4b54 <unknown>
E       #7 0x55c658acec03 <unknown>
E       #8 0x55c658a9b7a8 <unknown>
E       #9 0x55c658a9c421 <unknown>
E       #10 0x55c658f97b28 <unknown>
E       #11 0x55c658f9b87f <unknown>
E       #12 0x55c658f7fc49 <unknown>
E       #13 0x55c658f9c405 <unknown>
E       #14 0x55c658f654ff <unknown>
E       #15 0x55c658fc0258 <unknown>
E       #16 0x55c658fc0432 <unknown>
E       #17 0x55c658fd1fa3 <unknown>
E       #18 0x7fab2309caa4 <unknown>
E       #19 0x7fab23129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 04:00:21,600 - INFO - Starting test with Chrome browser
2025-10-06 04:00:21,600 - INFO - ====== WebDriver manager ======
2025-10-06 04:00:21,664 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:00:21,696 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:00:21,728 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 04:00:23,113 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 04:02:24,853 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a9d4e41b19a0b704421820bdc1ebd1de")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a9d4e41b19a0b704421820bdc1ebd1de")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d94a840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5588e63d8fba <unknown>
E       #1 0x5588e5e5d6d0 <unknown>
E       #2 0x5588e5eaf2aa <unknown>
E       #3 0x5588e5eaf541 <unknown>
E       #4 0x5588e5efd6c4 <unknown>
E       #5 0x5588e5ed4e5d <unknown>
E       #6 0x5588e5efab54 <unknown>
E       #7 0x5588e5ed4c03 <unknown>
E       #8 0x5588e5ea17a8 <unknown>
E       #9 0x5588e5ea2421 <unknown>
E       #10 0x5588e639db28 <unknown>
E       #11 0x5588e63a187f <unknown>
E       #12 0x5588e6385c49 <unknown>
E       #13 0x5588e63a2405 <unknown>
E       #14 0x5588e636b4ff <unknown>
E       #15 0x5588e63c6258 <unknown>
E       #16 0x5588e63c6432 <unknown>
E       #17 0x5588e63d7fa3 <unknown>
E       #18 0x7f33cbe9caa4 <unknown>
E       #19 0x7f33cbf29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 04:02:24,919 - INFO - Starting test with Chrome browser
2025-10-06 04:02:24,919 - INFO - ====== WebDriver manager ======
2025-10-06 04:02:24,982 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:02:25,016 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:02:25,051 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 04:02:26,463 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 04:04:28,191 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9a7456ce8e031539dcea74c30f60567a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9a7456ce8e031539dcea74c30f60567a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d94ab60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562e54ab5fba <unknown>
E       #1 0x562e5453a6d0 <unknown>
E       #2 0x562e5458c2aa <unknown>
E       #3 0x562e5458c541 <unknown>
E       #4 0x562e545da6c4 <unknown>
E       #5 0x562e545b1e5d <unknown>
E       #6 0x562e545d7b54 <unknown>
E       #7 0x562e545b1c03 <unknown>
E       #8 0x562e5457e7a8 <unknown>
E       #9 0x562e5457f421 <unknown>
E       #10 0x562e54a7ab28 <unknown>
E       #11 0x562e54a7e87f <unknown>
E       #12 0x562e54a62c49 <unknown>
E       #13 0x562e54a7f405 <unknown>
E       #14 0x562e54a484ff <unknown>
E       #15 0x562e54aa3258 <unknown>
E       #16 0x562e54aa3432 <unknown>
E       #17 0x562e54ab4fa3 <unknown>
E       #18 0x7f8084e9caa4 <unknown>
E       #19 0x7f8084f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 04:04:29,250 - INFO - Starting test with Chrome browser
2025-10-06 04:04:29,250 - INFO - ====== WebDriver manager ======
2025-10-06 04:04:29,314 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:04:29,349 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:04:29,384 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 04:04:30,837 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 04:06:34,299 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ba2d6aa5d7a5b6b23de9c186266d37cf")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ba2d6aa5d7a5b6b23de9c186266d37cf")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d94a8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c01a2b9fba <unknown>
E       #1 0x55c019d3e6d0 <unknown>
E       #2 0x55c019d902aa <unknown>
E       #3 0x55c019d90541 <unknown>
E       #4 0x55c019dde6c4 <unknown>
E       #5 0x55c019db5e5d <unknown>
E       #6 0x55c019ddbb54 <unknown>
E       #7 0x55c019db5c03 <unknown>
E       #8 0x55c019d827a8 <unknown>
E       #9 0x55c019d83421 <unknown>
E       #10 0x55c01a27eb28 <unknown>
E       #11 0x55c01a28287f <unknown>
E       #12 0x55c01a266c49 <unknown>
E       #13 0x55c01a283405 <unknown>
E       #14 0x55c01a24c4ff <unknown>
E       #15 0x55c01a2a7258 <unknown>
E       #16 0x55c01a2a7432 <unknown>
E       #17 0x55c01a2b8fa3 <unknown>
E       #18 0x7f9af509caa4 <unknown>
E       #19 0x7f9af5129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 04:06:35,357 - INFO - Starting test with Chrome browser
2025-10-06 04:06:35,357 - INFO - ====== WebDriver manager ======
2025-10-06 04:06:35,421 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:06:35,458 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:06:35,489 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 04:06:36,787 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 04:08:40,166 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="04fb89913b49d43379656ebe35b5cf0b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="04fb89913b49d43379656ebe35b5cf0b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d949da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5601801e5fba <unknown>
E       #1 0x56017fc6a6d0 <unknown>
E       #2 0x56017fcbc2aa <unknown>
E       #3 0x56017fcbc541 <unknown>
E       #4 0x56017fd0a6c4 <unknown>
E       #5 0x56017fce1e5d <unknown>
E       #6 0x56017fd07b54 <unknown>
E       #7 0x56017fce1c03 <unknown>
E       #8 0x56017fcae7a8 <unknown>
E       #9 0x56017fcaf421 <unknown>
E       #10 0x5601801aab28 <unknown>
E       #11 0x5601801ae87f <unknown>
E       #12 0x560180192c49 <unknown>
E       #13 0x5601801af405 <unknown>
E       #14 0x5601801784ff <unknown>
E       #15 0x5601801d3258 <unknown>
E       #16 0x5601801d3432 <unknown>
E       #17 0x5601801e4fa3 <unknown>
E       #18 0x7f25fc29caa4 <unknown>
E       #19 0x7f25fc329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 04:08:40,232 - INFO - Starting test with Chrome browser
2025-10-06 04:08:40,232 - INFO - ====== WebDriver manager ======
2025-10-06 04:08:40,296 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:08:40,329 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:08:40,361 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 04:08:41,861 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 04:10:45,375 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="269a5114091681095a4516a5b1f05b3f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="269a5114091681095a4516a5b1f05b3f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f996d949940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x565220ca8fba <unknown>
E       #1 0x56522072d6d0 <unknown>
E       #2 0x56522077f2aa <unknown>
E       #3 0x56522077f541 <unknown>
E       #4 0x5652207cd6c4 <unknown>
E       #5 0x5652207a4e5d <unknown>
E       #6 0x5652207cab54 <unknown>
E       #7 0x5652207a4c03 <unknown>
E       #8 0x5652207717a8 <unknown>
E       #9 0x565220772421 <unknown>
E       #10 0x565220c6db28 <unknown>
E       #11 0x565220c7187f <unknown>
E       #12 0x565220c55c49 <unknown>
E       #13 0x565220c72405 <unknown>
E       #14 0x565220c3b4ff <unknown>
E       #15 0x565220c96258 <unknown>
E       #16 0x565220c96432 <unknown>
E       #17 0x565220ca7fa3 <unknown>
E       #18 0x7fc8bdc9caa4 <unknown>
E       #19 0x7fc8bdd29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-06 04:10:45,442 - INFO - Starting test with Chrome browser
2025-10-06 04:10:45,442 - INFO - ====== WebDriver manager ======
2025-10-06 04:10:45,506 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:10:45,540 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-06 04:10:45,573 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-06 04:10:46,901 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-06 04:12:50,381 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251006_034722/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559778edffba <unknown>
#1 0x5597789646d0 <unknown>
#2 0x5597789b62aa <unknown>
#3 0x5597789b6541 <unknown>
#4 0x559778a046c4 <unknown>
#5 0x5597789dbe5d <unknown>
#6 0x559778a01b54 <unknown>
#7 0x5597789dbc03 <unknown>
#8 0x5597789a87a8 <unknown>
#9 0x5597789a9421 <unknown>
#10 0x559778ea4b28 <unknown>
#11 0x559778ea887f <unknown>
#12 0x559778e8cc49 <unknown>
#13 0x559778ea9405 <unknown>
#14 0x559778e724ff <unknown>
#15 0x559778ecd258 <unknown>
#16 0x559778ecd432 <unknown>
#17 0x559778edefa3 <unknown>
#18 0x7f349d69caa4 <unknown>
#19 0x7f349d729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e48b2dcfba <unknown>
#1 0x55e48ad616d0 <unknown>
#2 0x55e48adb32aa <unknown>
#3 0x55e48adb3541 <unknown>
#4 0x55e48ae016c4 <unknown>
#5 0x55e48add8e5d <unknown>
#6 0x55e48adfeb54 <unknown>
#7 0x55e48add8c03 <unknown>
#8 0x55e48ada57a8 <unknown>
#9 0x55e48ada6421 <unknown>
#10 0x55e48b2a1b28 <unknown>
#11 0x55e48b2a587f <unknown>
#12 0x55e48b289c49 <unknown>
#13 0x55e48b2a6405 <unknown>
#14 0x55e48b26f4ff <unknown>
#15 0x55e48b2ca258 <unknown>
#16 0x55e48b2ca432 <unknown>
#17 0x55e48b2dbfa3 <unknown>
#18 0x7fc2f569caa4 <unknown>
#19 0x7fc2f5729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55921da6afba <unknown>
#1 0x55921d4ef6d0 <unknown>
#2 0x55921d5412aa <unknown>
#3 0x55921d541541 <unknown>
#4 0x55921d58f6c4 <unknown>
#5 0x55921d566e5d <unknown>
#6 0x55921d58cb54 <unknown>
#7 0x55921d566c03 <unknown>
#8 0x55921d5337a8 <unknown>
#9 0x55921d534421 <unknown>
#10 0x55921da2fb28 <unknown>
#11 0x55921da3387f <unknown>
#12 0x55921da17c49 <unknown>
#13 0x55921da34405 <unknown>
#14 0x55921d9fd4ff <unknown>
#15 0x55921da58258 <unknown>
#16 0x55921da58432 <unknown>
#17 0x55921da69fa3 <unknown>
#18 0x7f696e69caa4 <unknown>
#19 0x7f696e729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ef6f39bfba <unknown>
#1 0x55ef6ee206d0 <unknown>
#2 0x55ef6ee722aa <unknown>
#3 0x55ef6ee72541 <unknown>
#4 0x55ef6eec06c4 <unknown>
#5 0x55ef6ee97e5d <unknown>
#6 0x55ef6eebdb54 <unknown>
#7 0x55ef6ee97c03 <unknown>
#8 0x55ef6ee647a8 <unknown>
#9 0x55ef6ee65421 <unknown>
#10 0x55ef6f360b28 <unknown>
#11 0x55ef6f36487f <unknown>
#12 0x55ef6f348c49 <unknown>
#13 0x55ef6f365405 <unknown>
#14 0x55ef6f32e4ff <unknown>
#15 0x55ef6f389258 <unknown>
#16 0x55ef6f389432 <unknown>
#17 0x55ef6f39afa3 <unknown>
#18 0x7f141629caa4 <unknown>
#19 0x7f1416329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55919d4f3fba <unknown>
#1 0x55919cf786d0 <unknown>
#2 0x55919cfca2aa <unknown>
#3 0x55919cfca541 <unknown>
#4 0x55919d0186c4 <unknown>
#5 0x55919cfefe5d <unknown>
#6 0x55919d015b54 <unknown>
#7 0x55919cfefc03 <unknown>
#8 0x55919cfbc7a8 <unknown>
#9 0x55919cfbd421 <unknown>
#10 0x55919d4b8b28 <unknown>
#11 0x55919d4bc87f <unknown>
#12 0x55919d4a0c49 <unknown>
#13 0x55919d4bd405 <unknown>
#14 0x55919d4864ff <unknown>
#15 0x55919d4e1258 <unknown>
#16 0x55919d4e1432 <unknown>
#17 0x55919d4f2fa3 <unknown>
#18 0x7f7e1ca9caa4 <unknown>
#19 0x7f7e1cb29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557412dcbfba <unknown>
#1 0x5574128506d0 <unknown>
#2 0x5574128a22aa <unknown>
#3 0x5574128a2541 <unknown>
#4 0x5574128f06c4 <unknown>
#5 0x5574128c7e5d <unknown>
#6 0x5574128edb54 <unknown>
#7 0x5574128c7c03 <unknown>
#8 0x5574128947a8 <unknown>
#9 0x557412895421 <unknown>
#10 0x557412d90b28 <unknown>
#11 0x557412d9487f <unknown>
#12 0x557412d78c49 <unknown>
#13 0x557412d95405 <unknown>
#14 0x557412d5e4ff <unknown>
#15 0x557412db9258 <unknown>
#16 0x557412db9432 <unknown>
#17 0x557412dcafa3 <unknown>
#18 0x7f76fc89caa4 <unknown>
#19 0x7f76fc929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c658fd2fba <unknown>
#1 0x55c658a576d0 <unknown>
#2 0x55c658aa92aa <unknown>
#3 0x55c658aa9541 <unknown>
#4 0x55c658af76c4 <unknown>
#5 0x55c658acee5d <unknown>
#6 0x55c658af4b54 <unknown>
#7 0x55c658acec03 <unknown>
#8 0x55c658a9b7a8 <unknown>
#9 0x55c658a9c421 <unknown>
#10 0x55c658f97b28 <unknown>
#11 0x55c658f9b87f <unknown>
#12 0x55c658f7fc49 <unknown>
#13 0x55c658f9c405 <unknown>
#14 0x55c658f654ff <unknown>
#15 0x55c658fc0258 <unknown>
#16 0x55c658fc0432 <unknown>
#17 0x55c658fd1fa3 <unknown>
#18 0x7fab2309caa4 <unknown>
#19 0x7fab23129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5588e63d8fba <unknown>
#1 0x5588e5e5d6d0 <unknown>
#2 0x5588e5eaf2aa <unknown>
#3 0x5588e5eaf541 <unknown>
#4 0x5588e5efd6c4 <unknown>
#5 0x5588e5ed4e5d <unknown>
#6 0x5588e5efab54 <unknown>
#7 0x5588e5ed4c03 <unknown>
#8 0x5588e5ea17a8 <unknown>
#9 0x5588e5ea2421 <unknown>
#10 0x5588e639db28 <unknown>
#11 0x5588e63a187f <unknown>
#12 0x5588e6385c49 <unknown>
#13 0x5588e63a2405 <unknown>
#14 0x5588e636b4ff <unknown>
#15 0x5588e63c6258 <unknown>
#16 0x5588e63c6432 <unknown>
#17 0x5588e63d7fa3 <unknown>
#18 0x7f33cbe9caa4 <unknown>
#19 0x7f33cbf29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562e54ab5fba <unknown>
#1 0x562e5453a6d0 <unknown>
#2 0x562e5458c2aa <unknown>
#3 0x562e5458c541 <unknown>
#4 0x562e545da6c4 <unknown>
#5 0x562e545b1e5d <unknown>
#6 0x562e545d7b54 <unknown>
#7 0x562e545b1c03 <unknown>
#8 0x562e5457e7a8 <unknown>
#9 0x562e5457f421 <unknown>
#10 0x562e54a7ab28 <unknown>
#11 0x562e54a7e87f <unknown>
#12 0x562e54a62c49 <unknown>
#13 0x562e54a7f405 <unknown>
#14 0x562e54a484ff <unknown>
#15 0x562e54aa3258 <unknown>
#16 0x562e54aa3432 <unknown>
#17 0x562e54ab4fa3 <unknown>
#18 0x7f8084e9caa4 <unknown>
#19 0x7f8084f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c01a2b9fba <unknown>
#1 0x55c019d3e6d0 <unknown>
#2 0x55c019d902aa <unknown>
#3 0x55c019d90541 <unknown>
#4 0x55c019dde6c4 <unknown>
#5 0x55c019db5e5d <unknown>
#6 0x55c019ddbb54 <unknown>
#7 0x55c019db5c03 <unknown>
#8 0x55c019d827a8 <unknown>
#9 0x55c019d83421 <unknown>
#10 0x55c01a27eb28 <unknown>
#11 0x55c01a28287f <unknown>
#12 0x55c01a266c49 <unknown>
#13 0x55c01a283405 <unknown>
#14 0x55c01a24c4ff <unknown>
#15 0x55c01a2a7258 <unknown>
#16 0x55c01a2a7432 <unknown>
#17 0x55c01a2b8fa3 <unknown>
#18 0x7f9af509caa4 <unknown>
#19 0x7f9af5129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5601801e5fba <unknown>
#1 0x56017fc6a6d0 <unknown>
#2 0x56017fcbc2aa <unknown>
#3 0x56017fcbc541 <unknown>
#4 0x56017fd0a6c4 <unknown>
#5 0x56017fce1e5d <unknown>
#6 0x56017fd07b54 <unknown>
#7 0x56017fce1c03 <unknown>
#8 0x56017fcae7a8 <unknown>
#9 0x56017fcaf421 <unknown>
#10 0x5601801aab28 <unknown>
#11 0x5601801ae87f <unknown>
#12 0x560180192c49 <unknown>
#13 0x5601801af405 <unknown>
#14 0x5601801784ff <unknown>
#15 0x5601801d3258 <unknown>
#16 0x5601801d3432 <unknown>
#17 0x5601801e4fa3 <unknown>
#18 0x7f25fc29caa4 <unknown>
#19 0x7f25fc329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x565220ca8fba <unknown>
#1 0x56522072d6d0 <unknown>
#2 0x56522077f2aa <unknown>
#3 0x56522077f541 <unknown>
#4 0x5652207cd6c4 <unknown>
#5 0x5652207a4e5d <unknown>
#6 0x5652207cab54 <unknown>
#7 0x5652207a4c03 <unknown>
#8 0x5652207717a8 <unknown>
#9 0x565220772421 <unknown>
#10 0x565220c6db28 <unknown>
#11 0x565220c7187f <unknown>
#12 0x565220c55c49 <unknown>
#13 0x565220c72405 <unknown>
#14 0x565220c3b4ff <unknown>
#15 0x565220c96258 <unknown>
#16 0x565220c96432 <unknown>
#17 0x565220ca7fa3 <unknown>
#18 0x7fc8bdc9caa4 <unknown>
#19 0x7fc8bdd29c6c <unknown>
================== 12 failed, 7 passed in 1541.73s (0:25:41) ===================
--------------------------------------------
Test Run Finished: 2025-10-06 04:13:04
Duration: 1547 seconds
Status: FAILURE
Exit Code: 1
============================================
