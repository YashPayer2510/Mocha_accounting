========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-04 03:40:54
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6255cca5003a2de6f667a240913dedc3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6255cca5003a2de6f667a240913dedc3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59e81c900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x556e9070efba <unknown>
E       #1 0x556e901936d0 <unknown>
E       #2 0x556e901e52aa <unknown>
E       #3 0x556e901e5541 <unknown>
E       #4 0x556e902336c4 <unknown>
E       #5 0x556e9020ae5d <unknown>
E       #6 0x556e90230b54 <unknown>
E       #7 0x556e9020ac03 <unknown>
E       #8 0x556e901d77a8 <unknown>
E       #9 0x556e901d8421 <unknown>
E       #10 0x556e906d3b28 <unknown>
E       #11 0x556e906d787f <unknown>
E       #12 0x556e906bbc49 <unknown>
E       #13 0x556e906d8405 <unknown>
E       #14 0x556e906a14ff <unknown>
E       #15 0x556e906fc258 <unknown>
E       #16 0x556e906fc432 <unknown>
E       #17 0x556e9070dfa3 <unknown>
E       #18 0x7f536b29caa4 <unknown>
E       #19 0x7f536b329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:40:56,368 - INFO - Test data loaded successfully.
2025-10-04 03:40:56,369 - INFO - Starting test with Chrome browser
2025-10-04 03:40:56,369 - INFO - ====== WebDriver manager ======
2025-10-04 03:40:57,642 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:40:57,821 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:40:57,871 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-04 03:40:57,872 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:40:58,004 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-04 03:40:58,008 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-04 03:40:58,009 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-04 03:40:58,119 - INFO - Driver downloading response is 200
2025-10-04 03:40:58,370 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:40:58,592 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-04 03:41:05,785 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-04 03:41:05,786 - INFO - Starting the test case for valid credentials
2025-10-04 03:41:06,007 - INFO - User enters the email-id
2025-10-04 03:41:07,529 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 03:43:09,206 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="136f02a15ec53ca4225c1c764a248009")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="136f02a15ec53ca4225c1c764a248009")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f3198a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558c36106fba <unknown>
E       #1 0x558c35b8b6d0 <unknown>
E       #2 0x558c35bdd2aa <unknown>
E       #3 0x558c35bdd541 <unknown>
E       #4 0x558c35c2b6c4 <unknown>
E       #5 0x558c35c02e5d <unknown>
E       #6 0x558c35c28b54 <unknown>
E       #7 0x558c35c02c03 <unknown>
E       #8 0x558c35bcf7a8 <unknown>
E       #9 0x558c35bd0421 <unknown>
E       #10 0x558c360cbb28 <unknown>
E       #11 0x558c360cf87f <unknown>
E       #12 0x558c360b3c49 <unknown>
E       #13 0x558c360d0405 <unknown>
E       #14 0x558c360994ff <unknown>
E       #15 0x558c360f4258 <unknown>
E       #16 0x558c360f4432 <unknown>
E       #17 0x558c36105fa3 <unknown>
E       #18 0x7f4ccf69caa4 <unknown>
E       #19 0x7f4ccf729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:43:09,309 - INFO - Starting test with Chrome browser
2025-10-04 03:43:09,309 - INFO - ====== WebDriver manager ======
2025-10-04 03:43:09,373 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:43:09,419 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:43:09,479 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 03:43:10,866 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-04 03:43:10,867 - INFO - Starting the test case for valid credentials
2025-10-04 03:43:11,012 - INFO - User enters the email-id
2025-10-04 03:43:12,526 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 03:45:14,184 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="83249b99666a9512418a31fe34a90bef")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="83249b99666a9512418a31fe34a90bef")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd5a04923e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562e3ac9cfba <unknown>
E       #1 0x562e3a7216d0 <unknown>
E       #2 0x562e3a7732aa <unknown>
E       #3 0x562e3a773541 <unknown>
E       #4 0x562e3a7c16c4 <unknown>
E       #5 0x562e3a798e5d <unknown>
E       #6 0x562e3a7beb54 <unknown>
E       #7 0x562e3a798c03 <unknown>
E       #8 0x562e3a7657a8 <unknown>
E       #9 0x562e3a766421 <unknown>
E       #10 0x562e3ac61b28 <unknown>
E       #11 0x562e3ac6587f <unknown>
E       #12 0x562e3ac49c49 <unknown>
E       #13 0x562e3ac66405 <unknown>
E       #14 0x562e3ac2f4ff <unknown>
E       #15 0x562e3ac8a258 <unknown>
E       #16 0x562e3ac8a432 <unknown>
E       #17 0x562e3ac9bfa3 <unknown>
E       #18 0x7f76fea9caa4 <unknown>
E       #19 0x7f76feb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:45:14,249 - INFO - Starting test with Chrome browser
2025-10-04 03:45:14,249 - INFO - ====== WebDriver manager ======
2025-10-04 03:45:14,314 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:45:14,361 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:45:14,407 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 03:45:15,673 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-04 03:45:15,673 - INFO - Starting the test case for valid credentials
2025-10-04 03:45:15,823 - INFO - User enters the email-id
2025-10-04 03:45:17,339 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 03:47:18,983 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d958451a79a770ef19aa7ef944afb7b2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d958451a79a770ef19aa7ef944afb7b2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f3196c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55be690dafba <unknown>
E       #1 0x55be68b5f6d0 <unknown>
E       #2 0x55be68bb12aa <unknown>
E       #3 0x55be68bb1541 <unknown>
E       #4 0x55be68bff6c4 <unknown>
E       #5 0x55be68bd6e5d <unknown>
E       #6 0x55be68bfcb54 <unknown>
E       #7 0x55be68bd6c03 <unknown>
E       #8 0x55be68ba37a8 <unknown>
E       #9 0x55be68ba4421 <unknown>
E       #10 0x55be6909fb28 <unknown>
E       #11 0x55be690a387f <unknown>
E       #12 0x55be69087c49 <unknown>
E       #13 0x55be690a4405 <unknown>
E       #14 0x55be6906d4ff <unknown>
E       #15 0x55be690c8258 <unknown>
E       #16 0x55be690c8432 <unknown>
E       #17 0x55be690d9fa3 <unknown>
E       #18 0x7ffb08c9caa4 <unknown>
E       #19 0x7ffb08d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:47:19,050 - INFO - Starting test with Chrome browser
2025-10-04 03:47:19,050 - INFO - ====== WebDriver manager ======
2025-10-04 03:47:19,115 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:47:19,162 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:47:19,207 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 03:47:20,443 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-04 03:47:20,444 - INFO - Starting the test case for valid credentials
2025-10-04 03:47:20,604 - INFO - User enters the email-id
2025-10-04 03:47:22,136 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 03:49:23,785 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8dcfff598cc91b24f1e72c202ac43d75")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8dcfff598cc91b24f1e72c202ac43d75")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f319f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f22becefba <unknown>
E       #1 0x55f22b9536d0 <unknown>
E       #2 0x55f22b9a52aa <unknown>
E       #3 0x55f22b9a5541 <unknown>
E       #4 0x55f22b9f36c4 <unknown>
E       #5 0x55f22b9cae5d <unknown>
E       #6 0x55f22b9f0b54 <unknown>
E       #7 0x55f22b9cac03 <unknown>
E       #8 0x55f22b9977a8 <unknown>
E       #9 0x55f22b998421 <unknown>
E       #10 0x55f22be93b28 <unknown>
E       #11 0x55f22be9787f <unknown>
E       #12 0x55f22be7bc49 <unknown>
E       #13 0x55f22be98405 <unknown>
E       #14 0x55f22be614ff <unknown>
E       #15 0x55f22bebc258 <unknown>
E       #16 0x55f22bebc432 <unknown>
E       #17 0x55f22becdfa3 <unknown>
E       #18 0x7fa105c9caa4 <unknown>
E       #19 0x7fa105d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:49:23,850 - INFO - Starting test with Chrome browser
2025-10-04 03:49:23,850 - INFO - ====== WebDriver manager ======
2025-10-04 03:49:23,915 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:49:23,962 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:49:24,008 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 03:49:25,497 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 03:51:27,196 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="77dad55951ff2ddcfb44e59789501d7a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="77dad55951ff2ddcfb44e59789501d7a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f31a020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5610961fbfba <unknown>
E       #1 0x561095c806d0 <unknown>
E       #2 0x561095cd22aa <unknown>
E       #3 0x561095cd2541 <unknown>
E       #4 0x561095d206c4 <unknown>
E       #5 0x561095cf7e5d <unknown>
E       #6 0x561095d1db54 <unknown>
E       #7 0x561095cf7c03 <unknown>
E       #8 0x561095cc47a8 <unknown>
E       #9 0x561095cc5421 <unknown>
E       #10 0x5610961c0b28 <unknown>
E       #11 0x5610961c487f <unknown>
E       #12 0x5610961a8c49 <unknown>
E       #13 0x5610961c5405 <unknown>
E       #14 0x56109618e4ff <unknown>
E       #15 0x5610961e9258 <unknown>
E       #16 0x5610961e9432 <unknown>
E       #17 0x5610961fafa3 <unknown>
E       #18 0x7f831709caa4 <unknown>
E       #19 0x7f8317129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:51:27,262 - INFO - Starting test with Chrome browser
2025-10-04 03:51:27,262 - INFO - ====== WebDriver manager ======
2025-10-04 03:51:27,329 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:51:27,376 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:51:27,422 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 03:51:29,085 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 03:53:30,846 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bb3ec52ea33106ee4debca50247452ef")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="bb3ec52ea33106ee4debca50247452ef")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f319da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a514830fba <unknown>
E       #1 0x55a5142b56d0 <unknown>
E       #2 0x55a5143072aa <unknown>
E       #3 0x55a514307541 <unknown>
E       #4 0x55a5143556c4 <unknown>
E       #5 0x55a51432ce5d <unknown>
E       #6 0x55a514352b54 <unknown>
E       #7 0x55a51432cc03 <unknown>
E       #8 0x55a5142f97a8 <unknown>
E       #9 0x55a5142fa421 <unknown>
E       #10 0x55a5147f5b28 <unknown>
E       #11 0x55a5147f987f <unknown>
E       #12 0x55a5147ddc49 <unknown>
E       #13 0x55a5147fa405 <unknown>
E       #14 0x55a5147c34ff <unknown>
E       #15 0x55a51481e258 <unknown>
E       #16 0x55a51481e432 <unknown>
E       #17 0x55a51482ffa3 <unknown>
E       #18 0x7f682449caa4 <unknown>
E       #19 0x7f6824529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:53:30,904 - INFO - Starting test with Chrome browser
2025-10-04 03:53:30,904 - INFO - ====== WebDriver manager ======
2025-10-04 03:53:30,969 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:53:31,016 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:53:31,060 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 03:53:32,262 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 03:55:34,009 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5de5a224d164a9ebd4131f8d834db779")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5de5a224d164a9ebd4131f8d834db779")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f31a840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d7a6164fba <unknown>
E       #1 0x55d7a5be96d0 <unknown>
E       #2 0x55d7a5c3b2aa <unknown>
E       #3 0x55d7a5c3b541 <unknown>
E       #4 0x55d7a5c896c4 <unknown>
E       #5 0x55d7a5c60e5d <unknown>
E       #6 0x55d7a5c86b54 <unknown>
E       #7 0x55d7a5c60c03 <unknown>
E       #8 0x55d7a5c2d7a8 <unknown>
E       #9 0x55d7a5c2e421 <unknown>
E       #10 0x55d7a6129b28 <unknown>
E       #11 0x55d7a612d87f <unknown>
E       #12 0x55d7a6111c49 <unknown>
E       #13 0x55d7a612e405 <unknown>
E       #14 0x55d7a60f74ff <unknown>
E       #15 0x55d7a6152258 <unknown>
E       #16 0x55d7a6152432 <unknown>
E       #17 0x55d7a6163fa3 <unknown>
E       #18 0x7fa42289caa4 <unknown>
E       #19 0x7fa422929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:55:34,076 - INFO - Starting test with Chrome browser
2025-10-04 03:55:34,076 - INFO - ====== WebDriver manager ======
2025-10-04 03:55:34,141 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:55:34,186 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:55:34,230 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 03:55:35,653 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 03:57:37,407 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f7d713ed169e6abf8a70c7ff1ce01589")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f7d713ed169e6abf8a70c7ff1ce01589")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f31ab60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c5ed10dfba <unknown>
E       #1 0x55c5ecb926d0 <unknown>
E       #2 0x55c5ecbe42aa <unknown>
E       #3 0x55c5ecbe4541 <unknown>
E       #4 0x55c5ecc326c4 <unknown>
E       #5 0x55c5ecc09e5d <unknown>
E       #6 0x55c5ecc2fb54 <unknown>
E       #7 0x55c5ecc09c03 <unknown>
E       #8 0x55c5ecbd67a8 <unknown>
E       #9 0x55c5ecbd7421 <unknown>
E       #10 0x55c5ed0d2b28 <unknown>
E       #11 0x55c5ed0d687f <unknown>
E       #12 0x55c5ed0bac49 <unknown>
E       #13 0x55c5ed0d7405 <unknown>
E       #14 0x55c5ed0a04ff <unknown>
E       #15 0x55c5ed0fb258 <unknown>
E       #16 0x55c5ed0fb432 <unknown>
E       #17 0x55c5ed10cfa3 <unknown>
E       #18 0x7fba8149caa4 <unknown>
E       #19 0x7fba81529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:57:37,466 - INFO - Starting test with Chrome browser
2025-10-04 03:57:37,466 - INFO - ====== WebDriver manager ======
2025-10-04 03:57:37,530 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:57:37,576 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:57:37,620 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 03:57:39,087 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 03:59:42,379 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="386a881ef07484998315401757cf1b5c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="386a881ef07484998315401757cf1b5c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f31a8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55eb1d3bdfba <unknown>
E       #1 0x55eb1ce426d0 <unknown>
E       #2 0x55eb1ce942aa <unknown>
E       #3 0x55eb1ce94541 <unknown>
E       #4 0x55eb1cee26c4 <unknown>
E       #5 0x55eb1ceb9e5d <unknown>
E       #6 0x55eb1cedfb54 <unknown>
E       #7 0x55eb1ceb9c03 <unknown>
E       #8 0x55eb1ce867a8 <unknown>
E       #9 0x55eb1ce87421 <unknown>
E       #10 0x55eb1d382b28 <unknown>
E       #11 0x55eb1d38687f <unknown>
E       #12 0x55eb1d36ac49 <unknown>
E       #13 0x55eb1d387405 <unknown>
E       #14 0x55eb1d3504ff <unknown>
E       #15 0x55eb1d3ab258 <unknown>
E       #16 0x55eb1d3ab432 <unknown>
E       #17 0x55eb1d3bcfa3 <unknown>
E       #18 0x7fb88d69caa4 <unknown>
E       #19 0x7fb88d729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 03:59:42,445 - INFO - Starting test with Chrome browser
2025-10-04 03:59:42,445 - INFO - ====== WebDriver manager ======
2025-10-04 03:59:42,513 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:59:42,562 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 03:59:42,608 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 03:59:43,927 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 04:01:47,311 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="088ccb8b7fd4df84806c2659aac0f882")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="088ccb8b7fd4df84806c2659aac0f882")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f319da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e179e1cfba <unknown>
E       #1 0x55e1798a16d0 <unknown>
E       #2 0x55e1798f32aa <unknown>
E       #3 0x55e1798f3541 <unknown>
E       #4 0x55e1799416c4 <unknown>
E       #5 0x55e179918e5d <unknown>
E       #6 0x55e17993eb54 <unknown>
E       #7 0x55e179918c03 <unknown>
E       #8 0x55e1798e57a8 <unknown>
E       #9 0x55e1798e6421 <unknown>
E       #10 0x55e179de1b28 <unknown>
E       #11 0x55e179de587f <unknown>
E       #12 0x55e179dc9c49 <unknown>
E       #13 0x55e179de6405 <unknown>
E       #14 0x55e179daf4ff <unknown>
E       #15 0x55e179e0a258 <unknown>
E       #16 0x55e179e0a432 <unknown>
E       #17 0x55e179e1bfa3 <unknown>
E       #18 0x7fdf6f49caa4 <unknown>
E       #19 0x7fdf6f529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 04:01:47,378 - INFO - Starting test with Chrome browser
2025-10-04 04:01:47,378 - INFO - ====== WebDriver manager ======
2025-10-04 04:01:47,443 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 04:01:47,488 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 04:01:47,534 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 04:01:49,094 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 04:03:52,419 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="dc21e0a0b544088270073518048a5c42")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="dc21e0a0b544088270073518048a5c42")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd59f319940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c210c73fba <unknown>
E       #1 0x55c2106f86d0 <unknown>
E       #2 0x55c21074a2aa <unknown>
E       #3 0x55c21074a541 <unknown>
E       #4 0x55c2107986c4 <unknown>
E       #5 0x55c21076fe5d <unknown>
E       #6 0x55c210795b54 <unknown>
E       #7 0x55c21076fc03 <unknown>
E       #8 0x55c21073c7a8 <unknown>
E       #9 0x55c21073d421 <unknown>
E       #10 0x55c210c38b28 <unknown>
E       #11 0x55c210c3c87f <unknown>
E       #12 0x55c210c20c49 <unknown>
E       #13 0x55c210c3d405 <unknown>
E       #14 0x55c210c064ff <unknown>
E       #15 0x55c210c61258 <unknown>
E       #16 0x55c210c61432 <unknown>
E       #17 0x55c210c72fa3 <unknown>
E       #18 0x7f146209caa4 <unknown>
E       #19 0x7f1462129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-04 04:03:52,483 - INFO - Starting test with Chrome browser
2025-10-04 04:03:52,484 - INFO - ====== WebDriver manager ======
2025-10-04 04:03:52,549 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 04:03:52,603 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-04 04:03:52,649 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-04 04:03:54,132 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-04 04:05:57,484 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251004_034056/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x556e9070efba <unknown>
#1 0x556e901936d0 <unknown>
#2 0x556e901e52aa <unknown>
#3 0x556e901e5541 <unknown>
#4 0x556e902336c4 <unknown>
#5 0x556e9020ae5d <unknown>
#6 0x556e90230b54 <unknown>
#7 0x556e9020ac03 <unknown>
#8 0x556e901d77a8 <unknown>
#9 0x556e901d8421 <unknown>
#10 0x556e906d3b28 <unknown>
#11 0x556e906d787f <unknown>
#12 0x556e906bbc49 <unknown>
#13 0x556e906d8405 <unknown>
#14 0x556e906a14ff <unknown>
#15 0x556e906fc258 <unknown>
#16 0x556e906fc432 <unknown>
#17 0x556e9070dfa3 <unknown>
#18 0x7f536b29caa4 <unknown>
#19 0x7f536b329c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558c36106fba <unknown>
#1 0x558c35b8b6d0 <unknown>
#2 0x558c35bdd2aa <unknown>
#3 0x558c35bdd541 <unknown>
#4 0x558c35c2b6c4 <unknown>
#5 0x558c35c02e5d <unknown>
#6 0x558c35c28b54 <unknown>
#7 0x558c35c02c03 <unknown>
#8 0x558c35bcf7a8 <unknown>
#9 0x558c35bd0421 <unknown>
#10 0x558c360cbb28 <unknown>
#11 0x558c360cf87f <unknown>
#12 0x558c360b3c49 <unknown>
#13 0x558c360d0405 <unknown>
#14 0x558c360994ff <unknown>
#15 0x558c360f4258 <unknown>
#16 0x558c360f4432 <unknown>
#17 0x558c36105fa3 <unknown>
#18 0x7f4ccf69caa4 <unknown>
#19 0x7f4ccf729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562e3ac9cfba <unknown>
#1 0x562e3a7216d0 <unknown>
#2 0x562e3a7732aa <unknown>
#3 0x562e3a773541 <unknown>
#4 0x562e3a7c16c4 <unknown>
#5 0x562e3a798e5d <unknown>
#6 0x562e3a7beb54 <unknown>
#7 0x562e3a798c03 <unknown>
#8 0x562e3a7657a8 <unknown>
#9 0x562e3a766421 <unknown>
#10 0x562e3ac61b28 <unknown>
#11 0x562e3ac6587f <unknown>
#12 0x562e3ac49c49 <unknown>
#13 0x562e3ac66405 <unknown>
#14 0x562e3ac2f4ff <unknown>
#15 0x562e3ac8a258 <unknown>
#16 0x562e3ac8a432 <unknown>
#17 0x562e3ac9bfa3 <unknown>
#18 0x7f76fea9caa4 <unknown>
#19 0x7f76feb29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55be690dafba <unknown>
#1 0x55be68b5f6d0 <unknown>
#2 0x55be68bb12aa <unknown>
#3 0x55be68bb1541 <unknown>
#4 0x55be68bff6c4 <unknown>
#5 0x55be68bd6e5d <unknown>
#6 0x55be68bfcb54 <unknown>
#7 0x55be68bd6c03 <unknown>
#8 0x55be68ba37a8 <unknown>
#9 0x55be68ba4421 <unknown>
#10 0x55be6909fb28 <unknown>
#11 0x55be690a387f <unknown>
#12 0x55be69087c49 <unknown>
#13 0x55be690a4405 <unknown>
#14 0x55be6906d4ff <unknown>
#15 0x55be690c8258 <unknown>
#16 0x55be690c8432 <unknown>
#17 0x55be690d9fa3 <unknown>
#18 0x7ffb08c9caa4 <unknown>
#19 0x7ffb08d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f22becefba <unknown>
#1 0x55f22b9536d0 <unknown>
#2 0x55f22b9a52aa <unknown>
#3 0x55f22b9a5541 <unknown>
#4 0x55f22b9f36c4 <unknown>
#5 0x55f22b9cae5d <unknown>
#6 0x55f22b9f0b54 <unknown>
#7 0x55f22b9cac03 <unknown>
#8 0x55f22b9977a8 <unknown>
#9 0x55f22b998421 <unknown>
#10 0x55f22be93b28 <unknown>
#11 0x55f22be9787f <unknown>
#12 0x55f22be7bc49 <unknown>
#13 0x55f22be98405 <unknown>
#14 0x55f22be614ff <unknown>
#15 0x55f22bebc258 <unknown>
#16 0x55f22bebc432 <unknown>
#17 0x55f22becdfa3 <unknown>
#18 0x7fa105c9caa4 <unknown>
#19 0x7fa105d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5610961fbfba <unknown>
#1 0x561095c806d0 <unknown>
#2 0x561095cd22aa <unknown>
#3 0x561095cd2541 <unknown>
#4 0x561095d206c4 <unknown>
#5 0x561095cf7e5d <unknown>
#6 0x561095d1db54 <unknown>
#7 0x561095cf7c03 <unknown>
#8 0x561095cc47a8 <unknown>
#9 0x561095cc5421 <unknown>
#10 0x5610961c0b28 <unknown>
#11 0x5610961c487f <unknown>
#12 0x5610961a8c49 <unknown>
#13 0x5610961c5405 <unknown>
#14 0x56109618e4ff <unknown>
#15 0x5610961e9258 <unknown>
#16 0x5610961e9432 <unknown>
#17 0x5610961fafa3 <unknown>
#18 0x7f831709caa4 <unknown>
#19 0x7f8317129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a514830fba <unknown>
#1 0x55a5142b56d0 <unknown>
#2 0x55a5143072aa <unknown>
#3 0x55a514307541 <unknown>
#4 0x55a5143556c4 <unknown>
#5 0x55a51432ce5d <unknown>
#6 0x55a514352b54 <unknown>
#7 0x55a51432cc03 <unknown>
#8 0x55a5142f97a8 <unknown>
#9 0x55a5142fa421 <unknown>
#10 0x55a5147f5b28 <unknown>
#11 0x55a5147f987f <unknown>
#12 0x55a5147ddc49 <unknown>
#13 0x55a5147fa405 <unknown>
#14 0x55a5147c34ff <unknown>
#15 0x55a51481e258 <unknown>
#16 0x55a51481e432 <unknown>
#17 0x55a51482ffa3 <unknown>
#18 0x7f682449caa4 <unknown>
#19 0x7f6824529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d7a6164fba <unknown>
#1 0x55d7a5be96d0 <unknown>
#2 0x55d7a5c3b2aa <unknown>
#3 0x55d7a5c3b541 <unknown>
#4 0x55d7a5c896c4 <unknown>
#5 0x55d7a5c60e5d <unknown>
#6 0x55d7a5c86b54 <unknown>
#7 0x55d7a5c60c03 <unknown>
#8 0x55d7a5c2d7a8 <unknown>
#9 0x55d7a5c2e421 <unknown>
#10 0x55d7a6129b28 <unknown>
#11 0x55d7a612d87f <unknown>
#12 0x55d7a6111c49 <unknown>
#13 0x55d7a612e405 <unknown>
#14 0x55d7a60f74ff <unknown>
#15 0x55d7a6152258 <unknown>
#16 0x55d7a6152432 <unknown>
#17 0x55d7a6163fa3 <unknown>
#18 0x7fa42289caa4 <unknown>
#19 0x7fa422929c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c5ed10dfba <unknown>
#1 0x55c5ecb926d0 <unknown>
#2 0x55c5ecbe42aa <unknown>
#3 0x55c5ecbe4541 <unknown>
#4 0x55c5ecc326c4 <unknown>
#5 0x55c5ecc09e5d <unknown>
#6 0x55c5ecc2fb54 <unknown>
#7 0x55c5ecc09c03 <unknown>
#8 0x55c5ecbd67a8 <unknown>
#9 0x55c5ecbd7421 <unknown>
#10 0x55c5ed0d2b28 <unknown>
#11 0x55c5ed0d687f <unknown>
#12 0x55c5ed0bac49 <unknown>
#13 0x55c5ed0d7405 <unknown>
#14 0x55c5ed0a04ff <unknown>
#15 0x55c5ed0fb258 <unknown>
#16 0x55c5ed0fb432 <unknown>
#17 0x55c5ed10cfa3 <unknown>
#18 0x7fba8149caa4 <unknown>
#19 0x7fba81529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55eb1d3bdfba <unknown>
#1 0x55eb1ce426d0 <unknown>
#2 0x55eb1ce942aa <unknown>
#3 0x55eb1ce94541 <unknown>
#4 0x55eb1cee26c4 <unknown>
#5 0x55eb1ceb9e5d <unknown>
#6 0x55eb1cedfb54 <unknown>
#7 0x55eb1ceb9c03 <unknown>
#8 0x55eb1ce867a8 <unknown>
#9 0x55eb1ce87421 <unknown>
#10 0x55eb1d382b28 <unknown>
#11 0x55eb1d38687f <unknown>
#12 0x55eb1d36ac49 <unknown>
#13 0x55eb1d387405 <unknown>
#14 0x55eb1d3504ff <unknown>
#15 0x55eb1d3ab258 <unknown>
#16 0x55eb1d3ab432 <unknown>
#17 0x55eb1d3bcfa3 <unknown>
#18 0x7fb88d69caa4 <unknown>
#19 0x7fb88d729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e179e1cfba <unknown>
#1 0x55e1798a16d0 <unknown>
#2 0x55e1798f32aa <unknown>
#3 0x55e1798f3541 <unknown>
#4 0x55e1799416c4 <unknown>
#5 0x55e179918e5d <unknown>
#6 0x55e17993eb54 <unknown>
#7 0x55e179918c03 <unknown>
#8 0x55e1798e57a8 <unknown>
#9 0x55e1798e6421 <unknown>
#10 0x55e179de1b28 <unknown>
#11 0x55e179de587f <unknown>
#12 0x55e179dc9c49 <unknown>
#13 0x55e179de6405 <unknown>
#14 0x55e179daf4ff <unknown>
#15 0x55e179e0a258 <unknown>
#16 0x55e179e0a432 <unknown>
#17 0x55e179e1bfa3 <unknown>
#18 0x7fdf6f49caa4 <unknown>
#19 0x7fdf6f529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c210c73fba <unknown>
#1 0x55c2106f86d0 <unknown>
#2 0x55c21074a2aa <unknown>
#3 0x55c21074a541 <unknown>
#4 0x55c2107986c4 <unknown>
#5 0x55c21076fe5d <unknown>
#6 0x55c210795b54 <unknown>
#7 0x55c21076fc03 <unknown>
#8 0x55c21073c7a8 <unknown>
#9 0x55c21073d421 <unknown>
#10 0x55c210c38b28 <unknown>
#11 0x55c210c3c87f <unknown>
#12 0x55c210c20c49 <unknown>
#13 0x55c210c3d405 <unknown>
#14 0x55c210c064ff <unknown>
#15 0x55c210c61258 <unknown>
#16 0x55c210c61432 <unknown>
#17 0x55c210c72fa3 <unknown>
#18 0x7f146209caa4 <unknown>
#19 0x7f1462129c6c <unknown>
================== 12 failed, 7 passed in 1515.47s (0:25:15) ===================
--------------------------------------------
Test Run Finished: 2025-10-04 04:06:11
Duration: 1517 seconds
Status: FAILURE
Exit Code: 1
============================================
