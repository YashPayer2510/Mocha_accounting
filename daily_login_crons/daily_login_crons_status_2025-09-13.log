========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-13 03:38:25
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1', 'Faker': '37.6.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1, Faker-37.6.0
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5acd6a656e14bd9d799e75d826edd96e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5acd6a656e14bd9d799e75d826edd96e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d40686a20>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5597ccfa694a <unknown>
E       #1 0x5597cca1b8a0 <unknown>
E       #2 0x5597cca6d540 <unknown>
E       #3 0x5597cca6d731 <unknown>
E       #4 0x5597ccabb824 <unknown>
E       #5 0x5597cca9305d <unknown>
E       #6 0x5597ccab8c23 <unknown>
E       #7 0x5597cca92e03 <unknown>
E       #8 0x5597cca5f968 <unknown>
E       #9 0x5597cca605e1 <unknown>
E       #10 0x5597ccf6a548 <unknown>
E       #11 0x5597ccf6e272 <unknown>
E       #12 0x5597ccf51313 <unknown>
E       #13 0x5597ccf6edc5 <unknown>
E       #14 0x5597ccf3649f <unknown>
E       #15 0x5597ccf93158 <unknown>
E       #16 0x5597ccf93332 <unknown>
E       #17 0x5597ccfa5a53 <unknown>
E       #18 0x7fba6c89caa4 <unknown>
E       #19 0x7fba6c929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:38:28,289 - INFO - Test data loaded successfully.
2025-09-13 03:38:28,289 - INFO - Starting test with Chrome browser
2025-09-13 03:38:28,289 - INFO - ====== WebDriver manager ======
2025-09-13 03:38:29,799 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:38:29,865 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:38:29,912 - INFO - There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
2025-09-13 03:38:29,912 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:38:30,043 - INFO - WebDriver version 140.0.7339.82 selected
2025-09-13 03:38:30,047 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-13 03:38:30,047 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-13 03:38:30,096 - INFO - Driver downloading response is 200
2025-09-13 03:38:30,172 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:38:30,329 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
2025-09-13 03:38:39,414 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.82 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-13 03:38:39,415 - INFO - Starting the test case for valid credentials
2025-09-13 03:38:39,680 - INFO - User enters the email-id
2025-09-13 03:38:41,634 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:40:43,255 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="514c2d7517f7a7552369ff35f7eda424")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="514c2d7517f7a7552369ff35f7eda424")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067d800>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5580bfb9894a <unknown>
E       #1 0x5580bf60d8a0 <unknown>
E       #2 0x5580bf65f540 <unknown>
E       #3 0x5580bf65f731 <unknown>
E       #4 0x5580bf6ad824 <unknown>
E       #5 0x5580bf68505d <unknown>
E       #6 0x5580bf6aac23 <unknown>
E       #7 0x5580bf684e03 <unknown>
E       #8 0x5580bf651968 <unknown>
E       #9 0x5580bf6525e1 <unknown>
E       #10 0x5580bfb5c548 <unknown>
E       #11 0x5580bfb60272 <unknown>
E       #12 0x5580bfb43313 <unknown>
E       #13 0x5580bfb60dc5 <unknown>
E       #14 0x5580bfb2849f <unknown>
E       #15 0x5580bfb85158 <unknown>
E       #16 0x5580bfb85332 <unknown>
E       #17 0x5580bfb97a53 <unknown>
E       #18 0x7f65cec9caa4 <unknown>
E       #19 0x7f65ced29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:40:43,440 - INFO - Starting test with Chrome browser
2025-09-13 03:40:43,440 - INFO - ====== WebDriver manager ======
2025-09-13 03:40:43,505 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:40:43,550 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:40:43,613 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:40:45,099 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-13 03:40:45,099 - INFO - Starting the test case for valid credentials
2025-09-13 03:40:45,261 - INFO - User enters the email-id
2025-09-13 03:40:47,229 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:42:48,866 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="502366b04d1aa7adbd6efe907da750d9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="502366b04d1aa7adbd6efe907da750d9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d412e63e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5563b45a294a <unknown>
E       #1 0x5563b40178a0 <unknown>
E       #2 0x5563b4069540 <unknown>
E       #3 0x5563b4069731 <unknown>
E       #4 0x5563b40b7824 <unknown>
E       #5 0x5563b408f05d <unknown>
E       #6 0x5563b40b4c23 <unknown>
E       #7 0x5563b408ee03 <unknown>
E       #8 0x5563b405b968 <unknown>
E       #9 0x5563b405c5e1 <unknown>
E       #10 0x5563b4566548 <unknown>
E       #11 0x5563b456a272 <unknown>
E       #12 0x5563b454d313 <unknown>
E       #13 0x5563b456adc5 <unknown>
E       #14 0x5563b453249f <unknown>
E       #15 0x5563b458f158 <unknown>
E       #16 0x5563b458f332 <unknown>
E       #17 0x5563b45a1a53 <unknown>
E       #18 0x7f0bce69caa4 <unknown>
E       #19 0x7f0bce729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:42:48,927 - INFO - Starting test with Chrome browser
2025-09-13 03:42:48,928 - INFO - ====== WebDriver manager ======
2025-09-13 03:42:48,993 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:42:49,039 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:42:49,084 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:42:50,492 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-13 03:42:50,493 - INFO - Starting the test case for valid credentials
2025-09-13 03:42:50,675 - INFO - User enters the email-id
2025-09-13 03:42:52,553 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:44:54,163 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="be07a1f4405b4e21d430187da52b7d39")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="be07a1f4405b4e21d430187da52b7d39")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067d620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560b4f7a294a <unknown>
E       #1 0x560b4f2178a0 <unknown>
E       #2 0x560b4f269540 <unknown>
E       #3 0x560b4f269731 <unknown>
E       #4 0x560b4f2b7824 <unknown>
E       #5 0x560b4f28f05d <unknown>
E       #6 0x560b4f2b4c23 <unknown>
E       #7 0x560b4f28ee03 <unknown>
E       #8 0x560b4f25b968 <unknown>
E       #9 0x560b4f25c5e1 <unknown>
E       #10 0x560b4f766548 <unknown>
E       #11 0x560b4f76a272 <unknown>
E       #12 0x560b4f74d313 <unknown>
E       #13 0x560b4f76adc5 <unknown>
E       #14 0x560b4f73249f <unknown>
E       #15 0x560b4f78f158 <unknown>
E       #16 0x560b4f78f332 <unknown>
E       #17 0x560b4f7a1a53 <unknown>
E       #18 0x7fe3eb29caa4 <unknown>
E       #19 0x7fe3eb329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:44:54,230 - INFO - Starting test with Chrome browser
2025-09-13 03:44:54,230 - INFO - ====== WebDriver manager ======
2025-09-13 03:44:54,296 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:44:54,341 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:44:54,388 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:44:56,845 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-13 03:44:56,846 - INFO - Starting the test case for valid credentials
2025-09-13 03:44:57,027 - INFO - User enters the email-id
2025-09-13 03:44:58,887 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:47:00,580 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3fd9a5bb488cbfc11e514fee277883a7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3fd9a5bb488cbfc11e514fee277883a7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067dee0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55be1be0294a <unknown>
E       #1 0x55be1b8778a0 <unknown>
E       #2 0x55be1b8c9540 <unknown>
E       #3 0x55be1b8c9731 <unknown>
E       #4 0x55be1b917824 <unknown>
E       #5 0x55be1b8ef05d <unknown>
E       #6 0x55be1b914c23 <unknown>
E       #7 0x55be1b8eee03 <unknown>
E       #8 0x55be1b8bb968 <unknown>
E       #9 0x55be1b8bc5e1 <unknown>
E       #10 0x55be1bdc6548 <unknown>
E       #11 0x55be1bdca272 <unknown>
E       #12 0x55be1bdad313 <unknown>
E       #13 0x55be1bdcadc5 <unknown>
E       #14 0x55be1bd9249f <unknown>
E       #15 0x55be1bdef158 <unknown>
E       #16 0x55be1bdef332 <unknown>
E       #17 0x55be1be01a53 <unknown>
E       #18 0x7f93f0a9caa4 <unknown>
E       #19 0x7f93f0b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:47:00,646 - INFO - Starting test with Chrome browser
2025-09-13 03:47:00,647 - INFO - ====== WebDriver manager ======
2025-09-13 03:47:00,712 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:47:00,760 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:47:00,807 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:47:02,830 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:49:04,604 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c093bb837262fd2b1b996cd77ecb37b3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c093bb837262fd2b1b996cd77ecb37b3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067df80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x555d82db394a <unknown>
E       #1 0x555d828288a0 <unknown>
E       #2 0x555d8287a540 <unknown>
E       #3 0x555d8287a731 <unknown>
E       #4 0x555d828c8824 <unknown>
E       #5 0x555d828a005d <unknown>
E       #6 0x555d828c5c23 <unknown>
E       #7 0x555d8289fe03 <unknown>
E       #8 0x555d8286c968 <unknown>
E       #9 0x555d8286d5e1 <unknown>
E       #10 0x555d82d77548 <unknown>
E       #11 0x555d82d7b272 <unknown>
E       #12 0x555d82d5e313 <unknown>
E       #13 0x555d82d7bdc5 <unknown>
E       #14 0x555d82d4349f <unknown>
E       #15 0x555d82da0158 <unknown>
E       #16 0x555d82da0332 <unknown>
E       #17 0x555d82db2a53 <unknown>
E       #18 0x7f74cc09caa4 <unknown>
E       #19 0x7f74cc129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:49:04,663 - INFO - Starting test with Chrome browser
2025-09-13 03:49:04,663 - INFO - ====== WebDriver manager ======
2025-09-13 03:49:04,729 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:49:04,775 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:49:04,819 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:49:06,280 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:51:08,014 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="148e4ef1e108cc0fdca9e2c4180046bf")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="148e4ef1e108cc0fdca9e2c4180046bf")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067dd00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5575866c094a <unknown>
E       #1 0x5575861358a0 <unknown>
E       #2 0x557586187540 <unknown>
E       #3 0x557586187731 <unknown>
E       #4 0x5575861d5824 <unknown>
E       #5 0x5575861ad05d <unknown>
E       #6 0x5575861d2c23 <unknown>
E       #7 0x5575861ace03 <unknown>
E       #8 0x557586179968 <unknown>
E       #9 0x55758617a5e1 <unknown>
E       #10 0x557586684548 <unknown>
E       #11 0x557586688272 <unknown>
E       #12 0x55758666b313 <unknown>
E       #13 0x557586688dc5 <unknown>
E       #14 0x55758665049f <unknown>
E       #15 0x5575866ad158 <unknown>
E       #16 0x5575866ad332 <unknown>
E       #17 0x5575866bfa53 <unknown>
E       #18 0x7f5ffb09caa4 <unknown>
E       #19 0x7f5ffb129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:51:08,080 - INFO - Starting test with Chrome browser
2025-09-13 03:51:08,080 - INFO - ====== WebDriver manager ======
2025-09-13 03:51:08,144 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:51:08,190 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:51:08,236 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:51:09,853 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:53:11,654 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d925d64d5b0869821e97ae19dc4a9a90")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d925d64d5b0869821e97ae19dc4a9a90")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067e7a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564e27de894a <unknown>
E       #1 0x564e2785d8a0 <unknown>
E       #2 0x564e278af540 <unknown>
E       #3 0x564e278af731 <unknown>
E       #4 0x564e278fd824 <unknown>
E       #5 0x564e278d505d <unknown>
E       #6 0x564e278fac23 <unknown>
E       #7 0x564e278d4e03 <unknown>
E       #8 0x564e278a1968 <unknown>
E       #9 0x564e278a25e1 <unknown>
E       #10 0x564e27dac548 <unknown>
E       #11 0x564e27db0272 <unknown>
E       #12 0x564e27d93313 <unknown>
E       #13 0x564e27db0dc5 <unknown>
E       #14 0x564e27d7849f <unknown>
E       #15 0x564e27dd5158 <unknown>
E       #16 0x564e27dd5332 <unknown>
E       #17 0x564e27de7a53 <unknown>
E       #18 0x7f7fe929caa4 <unknown>
E       #19 0x7f7fe9329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:53:11,720 - INFO - Starting test with Chrome browser
2025-09-13 03:53:11,720 - INFO - ====== WebDriver manager ======
2025-09-13 03:53:11,785 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:53:11,830 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:53:11,875 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:53:13,419 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:55:15,158 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="75d64863ce8faa5c5c9ade9f858d1f1f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="75d64863ce8faa5c5c9ade9f858d1f1f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067eac0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c7caa6694a <unknown>
E       #1 0x55c7ca4db8a0 <unknown>
E       #2 0x55c7ca52d540 <unknown>
E       #3 0x55c7ca52d731 <unknown>
E       #4 0x55c7ca57b824 <unknown>
E       #5 0x55c7ca55305d <unknown>
E       #6 0x55c7ca578c23 <unknown>
E       #7 0x55c7ca552e03 <unknown>
E       #8 0x55c7ca51f968 <unknown>
E       #9 0x55c7ca5205e1 <unknown>
E       #10 0x55c7caa2a548 <unknown>
E       #11 0x55c7caa2e272 <unknown>
E       #12 0x55c7caa11313 <unknown>
E       #13 0x55c7caa2edc5 <unknown>
E       #14 0x55c7ca9f649f <unknown>
E       #15 0x55c7caa53158 <unknown>
E       #16 0x55c7caa53332 <unknown>
E       #17 0x55c7caa65a53 <unknown>
E       #18 0x7fb04309caa4 <unknown>
E       #19 0x7fb043129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:55:15,222 - INFO - Starting test with Chrome browser
2025-09-13 03:55:15,222 - INFO - ====== WebDriver manager ======
2025-09-13 03:55:15,287 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:55:15,332 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:55:15,378 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:55:17,751 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:57:21,392 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0c5c42eea525cb21411b37bf7efd2cb8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0c5c42eea525cb21411b37bf7efd2cb8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067e840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ddc363f94a <unknown>
E       #1 0x55ddc30b48a0 <unknown>
E       #2 0x55ddc3106540 <unknown>
E       #3 0x55ddc3106731 <unknown>
E       #4 0x55ddc3154824 <unknown>
E       #5 0x55ddc312c05d <unknown>
E       #6 0x55ddc3151c23 <unknown>
E       #7 0x55ddc312be03 <unknown>
E       #8 0x55ddc30f8968 <unknown>
E       #9 0x55ddc30f95e1 <unknown>
E       #10 0x55ddc3603548 <unknown>
E       #11 0x55ddc3607272 <unknown>
E       #12 0x55ddc35ea313 <unknown>
E       #13 0x55ddc3607dc5 <unknown>
E       #14 0x55ddc35cf49f <unknown>
E       #15 0x55ddc362c158 <unknown>
E       #16 0x55ddc362c332 <unknown>
E       #17 0x55ddc363ea53 <unknown>
E       #18 0x7f9aa4c9caa4 <unknown>
E       #19 0x7f9aa4d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:57:22,457 - INFO - Starting test with Chrome browser
2025-09-13 03:57:22,457 - INFO - ====== WebDriver manager ======
2025-09-13 03:57:22,521 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:57:22,569 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:57:22,615 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:57:24,041 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 03:59:27,677 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="29532d2720d8f19464257c1c731a4324")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="29532d2720d8f19464257c1c731a4324")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067e2a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558caf15a94a <unknown>
E       #1 0x558caebcf8a0 <unknown>
E       #2 0x558caec21540 <unknown>
E       #3 0x558caec21731 <unknown>
E       #4 0x558caec6f824 <unknown>
E       #5 0x558caec4705d <unknown>
E       #6 0x558caec6cc23 <unknown>
E       #7 0x558caec46e03 <unknown>
E       #8 0x558caec13968 <unknown>
E       #9 0x558caec145e1 <unknown>
E       #10 0x558caf11e548 <unknown>
E       #11 0x558caf122272 <unknown>
E       #12 0x558caf105313 <unknown>
E       #13 0x558caf122dc5 <unknown>
E       #14 0x558caf0ea49f <unknown>
E       #15 0x558caf147158 <unknown>
E       #16 0x558caf147332 <unknown>
E       #17 0x558caf159a53 <unknown>
E       #18 0x7f6acb09caa4 <unknown>
E       #19 0x7f6acb129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 03:59:27,742 - INFO - Starting test with Chrome browser
2025-09-13 03:59:27,743 - INFO - ====== WebDriver manager ======
2025-09-13 03:59:27,807 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:59:27,853 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 03:59:27,897 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 03:59:29,625 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 04:01:33,279 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6cfd05cffdd1a0f073bc0d3e2b526fd3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6cfd05cffdd1a0f073bc0d3e2b526fd3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6d4067d620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5572dac3b94a <unknown>
E       #1 0x5572da6b08a0 <unknown>
E       #2 0x5572da702540 <unknown>
E       #3 0x5572da702731 <unknown>
E       #4 0x5572da750824 <unknown>
E       #5 0x5572da72805d <unknown>
E       #6 0x5572da74dc23 <unknown>
E       #7 0x5572da727e03 <unknown>
E       #8 0x5572da6f4968 <unknown>
E       #9 0x5572da6f55e1 <unknown>
E       #10 0x5572dabff548 <unknown>
E       #11 0x5572dac03272 <unknown>
E       #12 0x5572dabe6313 <unknown>
E       #13 0x5572dac03dc5 <unknown>
E       #14 0x5572dabcb49f <unknown>
E       #15 0x5572dac28158 <unknown>
E       #16 0x5572dac28332 <unknown>
E       #17 0x5572dac3aa53 <unknown>
E       #18 0x7ff266e9caa4 <unknown>
E       #19 0x7ff266f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-13 04:01:33,347 - INFO - Starting test with Chrome browser
2025-09-13 04:01:33,347 - INFO - ====== WebDriver manager ======
2025-09-13 04:01:33,413 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 04:01:33,460 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-13 04:01:33,505 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-13 04:01:35,402 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-13 04:03:39,018 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250913_033828/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5597ccfa694a <unknown>
#1 0x5597cca1b8a0 <unknown>
#2 0x5597cca6d540 <unknown>
#3 0x5597cca6d731 <unknown>
#4 0x5597ccabb824 <unknown>
#5 0x5597cca9305d <unknown>
#6 0x5597ccab8c23 <unknown>
#7 0x5597cca92e03 <unknown>
#8 0x5597cca5f968 <unknown>
#9 0x5597cca605e1 <unknown>
#10 0x5597ccf6a548 <unknown>
#11 0x5597ccf6e272 <unknown>
#12 0x5597ccf51313 <unknown>
#13 0x5597ccf6edc5 <unknown>
#14 0x5597ccf3649f <unknown>
#15 0x5597ccf93158 <unknown>
#16 0x5597ccf93332 <unknown>
#17 0x5597ccfa5a53 <unknown>
#18 0x7fba6c89caa4 <unknown>
#19 0x7fba6c929c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5580bfb9894a <unknown>
#1 0x5580bf60d8a0 <unknown>
#2 0x5580bf65f540 <unknown>
#3 0x5580bf65f731 <unknown>
#4 0x5580bf6ad824 <unknown>
#5 0x5580bf68505d <unknown>
#6 0x5580bf6aac23 <unknown>
#7 0x5580bf684e03 <unknown>
#8 0x5580bf651968 <unknown>
#9 0x5580bf6525e1 <unknown>
#10 0x5580bfb5c548 <unknown>
#11 0x5580bfb60272 <unknown>
#12 0x5580bfb43313 <unknown>
#13 0x5580bfb60dc5 <unknown>
#14 0x5580bfb2849f <unknown>
#15 0x5580bfb85158 <unknown>
#16 0x5580bfb85332 <unknown>
#17 0x5580bfb97a53 <unknown>
#18 0x7f65cec9caa4 <unknown>
#19 0x7f65ced29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5563b45a294a <unknown>
#1 0x5563b40178a0 <unknown>
#2 0x5563b4069540 <unknown>
#3 0x5563b4069731 <unknown>
#4 0x5563b40b7824 <unknown>
#5 0x5563b408f05d <unknown>
#6 0x5563b40b4c23 <unknown>
#7 0x5563b408ee03 <unknown>
#8 0x5563b405b968 <unknown>
#9 0x5563b405c5e1 <unknown>
#10 0x5563b4566548 <unknown>
#11 0x5563b456a272 <unknown>
#12 0x5563b454d313 <unknown>
#13 0x5563b456adc5 <unknown>
#14 0x5563b453249f <unknown>
#15 0x5563b458f158 <unknown>
#16 0x5563b458f332 <unknown>
#17 0x5563b45a1a53 <unknown>
#18 0x7f0bce69caa4 <unknown>
#19 0x7f0bce729c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560b4f7a294a <unknown>
#1 0x560b4f2178a0 <unknown>
#2 0x560b4f269540 <unknown>
#3 0x560b4f269731 <unknown>
#4 0x560b4f2b7824 <unknown>
#5 0x560b4f28f05d <unknown>
#6 0x560b4f2b4c23 <unknown>
#7 0x560b4f28ee03 <unknown>
#8 0x560b4f25b968 <unknown>
#9 0x560b4f25c5e1 <unknown>
#10 0x560b4f766548 <unknown>
#11 0x560b4f76a272 <unknown>
#12 0x560b4f74d313 <unknown>
#13 0x560b4f76adc5 <unknown>
#14 0x560b4f73249f <unknown>
#15 0x560b4f78f158 <unknown>
#16 0x560b4f78f332 <unknown>
#17 0x560b4f7a1a53 <unknown>
#18 0x7fe3eb29caa4 <unknown>
#19 0x7fe3eb329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55be1be0294a <unknown>
#1 0x55be1b8778a0 <unknown>
#2 0x55be1b8c9540 <unknown>
#3 0x55be1b8c9731 <unknown>
#4 0x55be1b917824 <unknown>
#5 0x55be1b8ef05d <unknown>
#6 0x55be1b914c23 <unknown>
#7 0x55be1b8eee03 <unknown>
#8 0x55be1b8bb968 <unknown>
#9 0x55be1b8bc5e1 <unknown>
#10 0x55be1bdc6548 <unknown>
#11 0x55be1bdca272 <unknown>
#12 0x55be1bdad313 <unknown>
#13 0x55be1bdcadc5 <unknown>
#14 0x55be1bd9249f <unknown>
#15 0x55be1bdef158 <unknown>
#16 0x55be1bdef332 <unknown>
#17 0x55be1be01a53 <unknown>
#18 0x7f93f0a9caa4 <unknown>
#19 0x7f93f0b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x555d82db394a <unknown>
#1 0x555d828288a0 <unknown>
#2 0x555d8287a540 <unknown>
#3 0x555d8287a731 <unknown>
#4 0x555d828c8824 <unknown>
#5 0x555d828a005d <unknown>
#6 0x555d828c5c23 <unknown>
#7 0x555d8289fe03 <unknown>
#8 0x555d8286c968 <unknown>
#9 0x555d8286d5e1 <unknown>
#10 0x555d82d77548 <unknown>
#11 0x555d82d7b272 <unknown>
#12 0x555d82d5e313 <unknown>
#13 0x555d82d7bdc5 <unknown>
#14 0x555d82d4349f <unknown>
#15 0x555d82da0158 <unknown>
#16 0x555d82da0332 <unknown>
#17 0x555d82db2a53 <unknown>
#18 0x7f74cc09caa4 <unknown>
#19 0x7f74cc129c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5575866c094a <unknown>
#1 0x5575861358a0 <unknown>
#2 0x557586187540 <unknown>
#3 0x557586187731 <unknown>
#4 0x5575861d5824 <unknown>
#5 0x5575861ad05d <unknown>
#6 0x5575861d2c23 <unknown>
#7 0x5575861ace03 <unknown>
#8 0x557586179968 <unknown>
#9 0x55758617a5e1 <unknown>
#10 0x557586684548 <unknown>
#11 0x557586688272 <unknown>
#12 0x55758666b313 <unknown>
#13 0x557586688dc5 <unknown>
#14 0x55758665049f <unknown>
#15 0x5575866ad158 <unknown>
#16 0x5575866ad332 <unknown>
#17 0x5575866bfa53 <unknown>
#18 0x7f5ffb09caa4 <unknown>
#19 0x7f5ffb129c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564e27de894a <unknown>
#1 0x564e2785d8a0 <unknown>
#2 0x564e278af540 <unknown>
#3 0x564e278af731 <unknown>
#4 0x564e278fd824 <unknown>
#5 0x564e278d505d <unknown>
#6 0x564e278fac23 <unknown>
#7 0x564e278d4e03 <unknown>
#8 0x564e278a1968 <unknown>
#9 0x564e278a25e1 <unknown>
#10 0x564e27dac548 <unknown>
#11 0x564e27db0272 <unknown>
#12 0x564e27d93313 <unknown>
#13 0x564e27db0dc5 <unknown>
#14 0x564e27d7849f <unknown>
#15 0x564e27dd5158 <unknown>
#16 0x564e27dd5332 <unknown>
#17 0x564e27de7a53 <unknown>
#18 0x7f7fe929caa4 <unknown>
#19 0x7f7fe9329c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c7caa6694a <unknown>
#1 0x55c7ca4db8a0 <unknown>
#2 0x55c7ca52d540 <unknown>
#3 0x55c7ca52d731 <unknown>
#4 0x55c7ca57b824 <unknown>
#5 0x55c7ca55305d <unknown>
#6 0x55c7ca578c23 <unknown>
#7 0x55c7ca552e03 <unknown>
#8 0x55c7ca51f968 <unknown>
#9 0x55c7ca5205e1 <unknown>
#10 0x55c7caa2a548 <unknown>
#11 0x55c7caa2e272 <unknown>
#12 0x55c7caa11313 <unknown>
#13 0x55c7caa2edc5 <unknown>
#14 0x55c7ca9f649f <unknown>
#15 0x55c7caa53158 <unknown>
#16 0x55c7caa53332 <unknown>
#17 0x55c7caa65a53 <unknown>
#18 0x7fb04309caa4 <unknown>
#19 0x7fb043129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ddc363f94a <unknown>
#1 0x55ddc30b48a0 <unknown>
#2 0x55ddc3106540 <unknown>
#3 0x55ddc3106731 <unknown>
#4 0x55ddc3154824 <unknown>
#5 0x55ddc312c05d <unknown>
#6 0x55ddc3151c23 <unknown>
#7 0x55ddc312be03 <unknown>
#8 0x55ddc30f8968 <unknown>
#9 0x55ddc30f95e1 <unknown>
#10 0x55ddc3603548 <unknown>
#11 0x55ddc3607272 <unknown>
#12 0x55ddc35ea313 <unknown>
#13 0x55ddc3607dc5 <unknown>
#14 0x55ddc35cf49f <unknown>
#15 0x55ddc362c158 <unknown>
#16 0x55ddc362c332 <unknown>
#17 0x55ddc363ea53 <unknown>
#18 0x7f9aa4c9caa4 <unknown>
#19 0x7f9aa4d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558caf15a94a <unknown>
#1 0x558caebcf8a0 <unknown>
#2 0x558caec21540 <unknown>
#3 0x558caec21731 <unknown>
#4 0x558caec6f824 <unknown>
#5 0x558caec4705d <unknown>
#6 0x558caec6cc23 <unknown>
#7 0x558caec46e03 <unknown>
#8 0x558caec13968 <unknown>
#9 0x558caec145e1 <unknown>
#10 0x558caf11e548 <unknown>
#11 0x558caf122272 <unknown>
#12 0x558caf105313 <unknown>
#13 0x558caf122dc5 <unknown>
#14 0x558caf0ea49f <unknown>
#15 0x558caf147158 <unknown>
#16 0x558caf147332 <unknown>
#17 0x558caf159a53 <unknown>
#18 0x7f6acb09caa4 <unknown>
#19 0x7f6acb129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5572dac3b94a <unknown>
#1 0x5572da6b08a0 <unknown>
#2 0x5572da702540 <unknown>
#3 0x5572da702731 <unknown>
#4 0x5572da750824 <unknown>
#5 0x5572da72805d <unknown>
#6 0x5572da74dc23 <unknown>
#7 0x5572da727e03 <unknown>
#8 0x5572da6f4968 <unknown>
#9 0x5572da6f55e1 <unknown>
#10 0x5572dabff548 <unknown>
#11 0x5572dac03272 <unknown>
#12 0x5572dabe6313 <unknown>
#13 0x5572dac03dc5 <unknown>
#14 0x5572dabcb49f <unknown>
#15 0x5572dac28158 <unknown>
#16 0x5572dac28332 <unknown>
#17 0x5572dac3aa53 <unknown>
#18 0x7ff266e9caa4 <unknown>
#19 0x7ff266f29c3c <unknown>
================== 12 failed, 7 passed in 1527.13s (0:25:27) ===================
--------------------------------------------
Test Run Finished: 2025-09-13 04:03:55
Duration: 1530 seconds
Status: FAILURE
Exit Code: 1
============================================
