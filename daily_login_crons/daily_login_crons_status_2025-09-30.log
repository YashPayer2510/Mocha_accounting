========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-30 03:46:17
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e12afcb48a67c1cf53890c9677588146")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e12afcb48a67c1cf53890c9677588146")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8682f20900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5644360c4fba <unknown>
E       #1 0x564435b496d0 <unknown>
E       #2 0x564435b9b2aa <unknown>
E       #3 0x564435b9b541 <unknown>
E       #4 0x564435be96c4 <unknown>
E       #5 0x564435bc0e5d <unknown>
E       #6 0x564435be6b54 <unknown>
E       #7 0x564435bc0c03 <unknown>
E       #8 0x564435b8d7a8 <unknown>
E       #9 0x564435b8e421 <unknown>
E       #10 0x564436089b28 <unknown>
E       #11 0x56443608d87f <unknown>
E       #12 0x564436071c49 <unknown>
E       #13 0x56443608e405 <unknown>
E       #14 0x5644360574ff <unknown>
E       #15 0x5644360b2258 <unknown>
E       #16 0x5644360b2432 <unknown>
E       #17 0x5644360c3fa3 <unknown>
E       #18 0x7f8f33c9caa4 <unknown>
E       #19 0x7f8f33d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 03:46:20,135 - INFO - Test data loaded successfully.
2025-09-30 03:46:20,135 - INFO - Starting test with Chrome browser
2025-09-30 03:46:20,135 - INFO - ====== WebDriver manager ======
2025-09-30 03:46:22,344 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:46:22,400 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:46:22,446 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-09-30 03:46:22,446 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:46:22,571 - INFO - WebDriver version 140.0.7339.207 selected
2025-09-30 03:46:22,575 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-30 03:46:22,576 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-30 03:46:22,626 - INFO - Driver downloading response is 200
2025-09-30 03:46:22,700 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:46:22,859 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-09-30 03:46:34,375 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-30 03:46:34,376 - INFO - Starting the test case for valid credentials
2025-09-30 03:46:34,709 - INFO - User enters the email-id
2025-09-30 03:46:36,339 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 03:48:38,021 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f943858f9ce9d290ed48e5b86171cd02")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f943858f9ce9d290ed48e5b86171cd02")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844a98a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5628e3592fba <unknown>
E       #1 0x5628e30176d0 <unknown>
E       #2 0x5628e30692aa <unknown>
E       #3 0x5628e3069541 <unknown>
E       #4 0x5628e30b76c4 <unknown>
E       #5 0x5628e308ee5d <unknown>
E       #6 0x5628e30b4b54 <unknown>
E       #7 0x5628e308ec03 <unknown>
E       #8 0x5628e305b7a8 <unknown>
E       #9 0x5628e305c421 <unknown>
E       #10 0x5628e3557b28 <unknown>
E       #11 0x5628e355b87f <unknown>
E       #12 0x5628e353fc49 <unknown>
E       #13 0x5628e355c405 <unknown>
E       #14 0x5628e35254ff <unknown>
E       #15 0x5628e3580258 <unknown>
E       #16 0x5628e3580432 <unknown>
E       #17 0x5628e3591fa3 <unknown>
E       #18 0x7f8f2d29caa4 <unknown>
E       #19 0x7f8f2d329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 03:48:38,177 - INFO - Starting test with Chrome browser
2025-09-30 03:48:38,177 - INFO - ====== WebDriver manager ======
2025-09-30 03:48:38,245 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:48:38,293 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:48:38,360 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 03:48:39,767 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-30 03:48:39,767 - INFO - Starting the test case for valid credentials
2025-09-30 03:48:39,910 - INFO - User enters the email-id
2025-09-30 03:48:41,581 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 03:50:43,252 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7694bf54e812d8fa54847620e65dc9f6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7694bf54e812d8fa54847620e65dc9f6")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f868277e3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e293a5cfba <unknown>
E       #1 0x55e2934e16d0 <unknown>
E       #2 0x55e2935332aa <unknown>
E       #3 0x55e293533541 <unknown>
E       #4 0x55e2935816c4 <unknown>
E       #5 0x55e293558e5d <unknown>
E       #6 0x55e29357eb54 <unknown>
E       #7 0x55e293558c03 <unknown>
E       #8 0x55e2935257a8 <unknown>
E       #9 0x55e293526421 <unknown>
E       #10 0x55e293a21b28 <unknown>
E       #11 0x55e293a2587f <unknown>
E       #12 0x55e293a09c49 <unknown>
E       #13 0x55e293a26405 <unknown>
E       #14 0x55e2939ef4ff <unknown>
E       #15 0x55e293a4a258 <unknown>
E       #16 0x55e293a4a432 <unknown>
E       #17 0x55e293a5bfa3 <unknown>
E       #18 0x7fc1b529caa4 <unknown>
E       #19 0x7fc1b5329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 03:50:43,320 - INFO - Starting test with Chrome browser
2025-09-30 03:50:43,320 - INFO - ====== WebDriver manager ======
2025-09-30 03:50:43,389 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:50:43,438 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:50:43,483 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 03:50:44,695 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-30 03:50:44,696 - INFO - Starting the test case for valid credentials
2025-09-30 03:50:44,841 - INFO - User enters the email-id
2025-09-30 03:50:46,581 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 03:52:48,242 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="42c462e79873dde9f68d3ceaaea15534")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="42c462e79873dde9f68d3ceaaea15534")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844a96c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564e168c4fba <unknown>
E       #1 0x564e163496d0 <unknown>
E       #2 0x564e1639b2aa <unknown>
E       #3 0x564e1639b541 <unknown>
E       #4 0x564e163e96c4 <unknown>
E       #5 0x564e163c0e5d <unknown>
E       #6 0x564e163e6b54 <unknown>
E       #7 0x564e163c0c03 <unknown>
E       #8 0x564e1638d7a8 <unknown>
E       #9 0x564e1638e421 <unknown>
E       #10 0x564e16889b28 <unknown>
E       #11 0x564e1688d87f <unknown>
E       #12 0x564e16871c49 <unknown>
E       #13 0x564e1688e405 <unknown>
E       #14 0x564e168574ff <unknown>
E       #15 0x564e168b2258 <unknown>
E       #16 0x564e168b2432 <unknown>
E       #17 0x564e168c3fa3 <unknown>
E       #18 0x7fa77749caa4 <unknown>
E       #19 0x7fa777529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 03:52:48,308 - INFO - Starting test with Chrome browser
2025-09-30 03:52:48,309 - INFO - ====== WebDriver manager ======
2025-09-30 03:52:48,375 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:52:48,420 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:52:48,465 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 03:52:49,921 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-30 03:52:49,922 - INFO - Starting the test case for valid credentials
2025-09-30 03:52:50,082 - INFO - User enters the email-id
2025-09-30 03:52:51,836 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 03:54:53,444 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bc92897f15799cf8639318faf800d0fb")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="bc92897f15799cf8639318faf800d0fb")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844a9f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55aef0981fba <unknown>
E       #1 0x55aef04066d0 <unknown>
E       #2 0x55aef04582aa <unknown>
E       #3 0x55aef0458541 <unknown>
E       #4 0x55aef04a66c4 <unknown>
E       #5 0x55aef047de5d <unknown>
E       #6 0x55aef04a3b54 <unknown>
E       #7 0x55aef047dc03 <unknown>
E       #8 0x55aef044a7a8 <unknown>
E       #9 0x55aef044b421 <unknown>
E       #10 0x55aef0946b28 <unknown>
E       #11 0x55aef094a87f <unknown>
E       #12 0x55aef092ec49 <unknown>
E       #13 0x55aef094b405 <unknown>
E       #14 0x55aef09144ff <unknown>
E       #15 0x55aef096f258 <unknown>
E       #16 0x55aef096f432 <unknown>
E       #17 0x55aef0980fa3 <unknown>
E       #18 0x7fa30929caa4 <unknown>
E       #19 0x7fa309329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 03:54:53,510 - INFO - Starting test with Chrome browser
2025-09-30 03:54:53,510 - INFO - ====== WebDriver manager ======
2025-09-30 03:54:53,576 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:54:53,621 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:54:53,667 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 03:54:55,260 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 03:56:57,007 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e1896d0d7206342a622a735856b0749f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e1896d0d7206342a622a735856b0749f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844aa020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55bc9c4f4fba <unknown>
E       #1 0x55bc9bf796d0 <unknown>
E       #2 0x55bc9bfcb2aa <unknown>
E       #3 0x55bc9bfcb541 <unknown>
E       #4 0x55bc9c0196c4 <unknown>
E       #5 0x55bc9bff0e5d <unknown>
E       #6 0x55bc9c016b54 <unknown>
E       #7 0x55bc9bff0c03 <unknown>
E       #8 0x55bc9bfbd7a8 <unknown>
E       #9 0x55bc9bfbe421 <unknown>
E       #10 0x55bc9c4b9b28 <unknown>
E       #11 0x55bc9c4bd87f <unknown>
E       #12 0x55bc9c4a1c49 <unknown>
E       #13 0x55bc9c4be405 <unknown>
E       #14 0x55bc9c4874ff <unknown>
E       #15 0x55bc9c4e2258 <unknown>
E       #16 0x55bc9c4e2432 <unknown>
E       #17 0x55bc9c4f3fa3 <unknown>
E       #18 0x7ff08ec9caa4 <unknown>
E       #19 0x7ff08ed29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 03:56:57,075 - INFO - Starting test with Chrome browser
2025-09-30 03:56:57,075 - INFO - ====== WebDriver manager ======
2025-09-30 03:56:57,143 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:56:57,260 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:56:57,305 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 03:56:58,095 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 03:59:00,159 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="1543bc7ed459c955f2e345f2db268552")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="1543bc7ed459c955f2e345f2db268552")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844a9da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5588d4dc4fba <unknown>
E       #1 0x5588d48496d0 <unknown>
E       #2 0x5588d489b2aa <unknown>
E       #3 0x5588d489b541 <unknown>
E       #4 0x5588d48e96c4 <unknown>
E       #5 0x5588d48c0e5d <unknown>
E       #6 0x5588d48e6b54 <unknown>
E       #7 0x5588d48c0c03 <unknown>
E       #8 0x5588d488d7a8 <unknown>
E       #9 0x5588d488e421 <unknown>
E       #10 0x5588d4d89b28 <unknown>
E       #11 0x5588d4d8d87f <unknown>
E       #12 0x5588d4d71c49 <unknown>
E       #13 0x5588d4d8e405 <unknown>
E       #14 0x5588d4d574ff <unknown>
E       #15 0x5588d4db2258 <unknown>
E       #16 0x5588d4db2432 <unknown>
E       #17 0x5588d4dc3fa3 <unknown>
E       #18 0x7fb17f89caa4 <unknown>
E       #19 0x7fb17f929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 03:59:01,219 - INFO - Starting test with Chrome browser
2025-09-30 03:59:01,219 - INFO - ====== WebDriver manager ======
2025-09-30 03:59:01,286 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:59:01,331 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 03:59:01,376 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 03:59:02,147 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 04:01:04,244 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2c732d548561010b64a329e046cdebc3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2c732d548561010b64a329e046cdebc3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844aa840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d093da9fba <unknown>
E       #1 0x55d09382e6d0 <unknown>
E       #2 0x55d0938802aa <unknown>
E       #3 0x55d093880541 <unknown>
E       #4 0x55d0938ce6c4 <unknown>
E       #5 0x55d0938a5e5d <unknown>
E       #6 0x55d0938cbb54 <unknown>
E       #7 0x55d0938a5c03 <unknown>
E       #8 0x55d0938727a8 <unknown>
E       #9 0x55d093873421 <unknown>
E       #10 0x55d093d6eb28 <unknown>
E       #11 0x55d093d7287f <unknown>
E       #12 0x55d093d56c49 <unknown>
E       #13 0x55d093d73405 <unknown>
E       #14 0x55d093d3c4ff <unknown>
E       #15 0x55d093d97258 <unknown>
E       #16 0x55d093d97432 <unknown>
E       #17 0x55d093da8fa3 <unknown>
E       #18 0x7f46b309caa4 <unknown>
E       #19 0x7f46b3129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 04:01:04,309 - INFO - Starting test with Chrome browser
2025-09-30 04:01:04,309 - INFO - ====== WebDriver manager ======
2025-09-30 04:01:04,377 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:01:04,423 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:01:04,469 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 04:01:05,707 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 04:03:07,499 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8b7c9b6b58f4fca48e15fb367ee26f7e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8b7c9b6b58f4fca48e15fb367ee26f7e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844aab60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5639bf612fba <unknown>
E       #1 0x5639bf0976d0 <unknown>
E       #2 0x5639bf0e92aa <unknown>
E       #3 0x5639bf0e9541 <unknown>
E       #4 0x5639bf1376c4 <unknown>
E       #5 0x5639bf10ee5d <unknown>
E       #6 0x5639bf134b54 <unknown>
E       #7 0x5639bf10ec03 <unknown>
E       #8 0x5639bf0db7a8 <unknown>
E       #9 0x5639bf0dc421 <unknown>
E       #10 0x5639bf5d7b28 <unknown>
E       #11 0x5639bf5db87f <unknown>
E       #12 0x5639bf5bfc49 <unknown>
E       #13 0x5639bf5dc405 <unknown>
E       #14 0x5639bf5a54ff <unknown>
E       #15 0x5639bf600258 <unknown>
E       #16 0x5639bf600432 <unknown>
E       #17 0x5639bf611fa3 <unknown>
E       #18 0x7fc4ffc9caa4 <unknown>
E       #19 0x7fc4ffd29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 04:03:08,564 - INFO - Starting test with Chrome browser
2025-09-30 04:03:08,565 - INFO - ====== WebDriver manager ======
2025-09-30 04:03:08,635 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:03:08,681 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:03:08,727 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 04:03:10,018 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 04:05:13,572 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="198c55fc4a1cddfeb2cc99c6f5450125")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="198c55fc4a1cddfeb2cc99c6f5450125")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844aa8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c63a0ebfba <unknown>
E       #1 0x55c639b706d0 <unknown>
E       #2 0x55c639bc22aa <unknown>
E       #3 0x55c639bc2541 <unknown>
E       #4 0x55c639c106c4 <unknown>
E       #5 0x55c639be7e5d <unknown>
E       #6 0x55c639c0db54 <unknown>
E       #7 0x55c639be7c03 <unknown>
E       #8 0x55c639bb47a8 <unknown>
E       #9 0x55c639bb5421 <unknown>
E       #10 0x55c63a0b0b28 <unknown>
E       #11 0x55c63a0b487f <unknown>
E       #12 0x55c63a098c49 <unknown>
E       #13 0x55c63a0b5405 <unknown>
E       #14 0x55c63a07e4ff <unknown>
E       #15 0x55c63a0d9258 <unknown>
E       #16 0x55c63a0d9432 <unknown>
E       #17 0x55c63a0eafa3 <unknown>
E       #18 0x7f7d25e9caa4 <unknown>
E       #19 0x7f7d25f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 04:05:13,631 - INFO - Starting test with Chrome browser
2025-09-30 04:05:13,631 - INFO - ====== WebDriver manager ======
2025-09-30 04:05:13,697 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:05:13,743 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:05:13,788 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 04:05:15,060 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 04:07:18,583 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7288def70f10f8c10c3e6cfebd7d9125")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7288def70f10f8c10c3e6cfebd7d9125")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844a9da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5564c203dfba <unknown>
E       #1 0x5564c1ac26d0 <unknown>
E       #2 0x5564c1b142aa <unknown>
E       #3 0x5564c1b14541 <unknown>
E       #4 0x5564c1b626c4 <unknown>
E       #5 0x5564c1b39e5d <unknown>
E       #6 0x5564c1b5fb54 <unknown>
E       #7 0x5564c1b39c03 <unknown>
E       #8 0x5564c1b067a8 <unknown>
E       #9 0x5564c1b07421 <unknown>
E       #10 0x5564c2002b28 <unknown>
E       #11 0x5564c200687f <unknown>
E       #12 0x5564c1feac49 <unknown>
E       #13 0x5564c2007405 <unknown>
E       #14 0x5564c1fd04ff <unknown>
E       #15 0x5564c202b258 <unknown>
E       #16 0x5564c202b432 <unknown>
E       #17 0x5564c203cfa3 <unknown>
E       #18 0x7ffb5469caa4 <unknown>
E       #19 0x7ffb54729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 04:07:18,643 - INFO - Starting test with Chrome browser
2025-09-30 04:07:18,643 - INFO - ====== WebDriver manager ======
2025-09-30 04:07:18,708 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:07:18,753 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:07:18,798 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 04:07:20,579 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 04:09:24,108 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7722300287aa4992c349ff3b6f83ee8b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7722300287aa4992c349ff3b6f83ee8b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f86844a9940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563501af6fba <unknown>
E       #1 0x56350157b6d0 <unknown>
E       #2 0x5635015cd2aa <unknown>
E       #3 0x5635015cd541 <unknown>
E       #4 0x56350161b6c4 <unknown>
E       #5 0x5635015f2e5d <unknown>
E       #6 0x563501618b54 <unknown>
E       #7 0x5635015f2c03 <unknown>
E       #8 0x5635015bf7a8 <unknown>
E       #9 0x5635015c0421 <unknown>
E       #10 0x563501abbb28 <unknown>
E       #11 0x563501abf87f <unknown>
E       #12 0x563501aa3c49 <unknown>
E       #13 0x563501ac0405 <unknown>
E       #14 0x563501a894ff <unknown>
E       #15 0x563501ae4258 <unknown>
E       #16 0x563501ae4432 <unknown>
E       #17 0x563501af5fa3 <unknown>
E       #18 0x7f07eda9caa4 <unknown>
E       #19 0x7f07edb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-30 04:09:24,166 - INFO - Starting test with Chrome browser
2025-09-30 04:09:24,166 - INFO - ====== WebDriver manager ======
2025-09-30 04:09:24,232 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:09:24,281 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-30 04:09:24,326 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-30 04:09:25,760 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-30 04:11:29,246 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250930_034619/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5644360c4fba <unknown>
#1 0x564435b496d0 <unknown>
#2 0x564435b9b2aa <unknown>
#3 0x564435b9b541 <unknown>
#4 0x564435be96c4 <unknown>
#5 0x564435bc0e5d <unknown>
#6 0x564435be6b54 <unknown>
#7 0x564435bc0c03 <unknown>
#8 0x564435b8d7a8 <unknown>
#9 0x564435b8e421 <unknown>
#10 0x564436089b28 <unknown>
#11 0x56443608d87f <unknown>
#12 0x564436071c49 <unknown>
#13 0x56443608e405 <unknown>
#14 0x5644360574ff <unknown>
#15 0x5644360b2258 <unknown>
#16 0x5644360b2432 <unknown>
#17 0x5644360c3fa3 <unknown>
#18 0x7f8f33c9caa4 <unknown>
#19 0x7f8f33d29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5628e3592fba <unknown>
#1 0x5628e30176d0 <unknown>
#2 0x5628e30692aa <unknown>
#3 0x5628e3069541 <unknown>
#4 0x5628e30b76c4 <unknown>
#5 0x5628e308ee5d <unknown>
#6 0x5628e30b4b54 <unknown>
#7 0x5628e308ec03 <unknown>
#8 0x5628e305b7a8 <unknown>
#9 0x5628e305c421 <unknown>
#10 0x5628e3557b28 <unknown>
#11 0x5628e355b87f <unknown>
#12 0x5628e353fc49 <unknown>
#13 0x5628e355c405 <unknown>
#14 0x5628e35254ff <unknown>
#15 0x5628e3580258 <unknown>
#16 0x5628e3580432 <unknown>
#17 0x5628e3591fa3 <unknown>
#18 0x7f8f2d29caa4 <unknown>
#19 0x7f8f2d329c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e293a5cfba <unknown>
#1 0x55e2934e16d0 <unknown>
#2 0x55e2935332aa <unknown>
#3 0x55e293533541 <unknown>
#4 0x55e2935816c4 <unknown>
#5 0x55e293558e5d <unknown>
#6 0x55e29357eb54 <unknown>
#7 0x55e293558c03 <unknown>
#8 0x55e2935257a8 <unknown>
#9 0x55e293526421 <unknown>
#10 0x55e293a21b28 <unknown>
#11 0x55e293a2587f <unknown>
#12 0x55e293a09c49 <unknown>
#13 0x55e293a26405 <unknown>
#14 0x55e2939ef4ff <unknown>
#15 0x55e293a4a258 <unknown>
#16 0x55e293a4a432 <unknown>
#17 0x55e293a5bfa3 <unknown>
#18 0x7fc1b529caa4 <unknown>
#19 0x7fc1b5329c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564e168c4fba <unknown>
#1 0x564e163496d0 <unknown>
#2 0x564e1639b2aa <unknown>
#3 0x564e1639b541 <unknown>
#4 0x564e163e96c4 <unknown>
#5 0x564e163c0e5d <unknown>
#6 0x564e163e6b54 <unknown>
#7 0x564e163c0c03 <unknown>
#8 0x564e1638d7a8 <unknown>
#9 0x564e1638e421 <unknown>
#10 0x564e16889b28 <unknown>
#11 0x564e1688d87f <unknown>
#12 0x564e16871c49 <unknown>
#13 0x564e1688e405 <unknown>
#14 0x564e168574ff <unknown>
#15 0x564e168b2258 <unknown>
#16 0x564e168b2432 <unknown>
#17 0x564e168c3fa3 <unknown>
#18 0x7fa77749caa4 <unknown>
#19 0x7fa777529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55aef0981fba <unknown>
#1 0x55aef04066d0 <unknown>
#2 0x55aef04582aa <unknown>
#3 0x55aef0458541 <unknown>
#4 0x55aef04a66c4 <unknown>
#5 0x55aef047de5d <unknown>
#6 0x55aef04a3b54 <unknown>
#7 0x55aef047dc03 <unknown>
#8 0x55aef044a7a8 <unknown>
#9 0x55aef044b421 <unknown>
#10 0x55aef0946b28 <unknown>
#11 0x55aef094a87f <unknown>
#12 0x55aef092ec49 <unknown>
#13 0x55aef094b405 <unknown>
#14 0x55aef09144ff <unknown>
#15 0x55aef096f258 <unknown>
#16 0x55aef096f432 <unknown>
#17 0x55aef0980fa3 <unknown>
#18 0x7fa30929caa4 <unknown>
#19 0x7fa309329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55bc9c4f4fba <unknown>
#1 0x55bc9bf796d0 <unknown>
#2 0x55bc9bfcb2aa <unknown>
#3 0x55bc9bfcb541 <unknown>
#4 0x55bc9c0196c4 <unknown>
#5 0x55bc9bff0e5d <unknown>
#6 0x55bc9c016b54 <unknown>
#7 0x55bc9bff0c03 <unknown>
#8 0x55bc9bfbd7a8 <unknown>
#9 0x55bc9bfbe421 <unknown>
#10 0x55bc9c4b9b28 <unknown>
#11 0x55bc9c4bd87f <unknown>
#12 0x55bc9c4a1c49 <unknown>
#13 0x55bc9c4be405 <unknown>
#14 0x55bc9c4874ff <unknown>
#15 0x55bc9c4e2258 <unknown>
#16 0x55bc9c4e2432 <unknown>
#17 0x55bc9c4f3fa3 <unknown>
#18 0x7ff08ec9caa4 <unknown>
#19 0x7ff08ed29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5588d4dc4fba <unknown>
#1 0x5588d48496d0 <unknown>
#2 0x5588d489b2aa <unknown>
#3 0x5588d489b541 <unknown>
#4 0x5588d48e96c4 <unknown>
#5 0x5588d48c0e5d <unknown>
#6 0x5588d48e6b54 <unknown>
#7 0x5588d48c0c03 <unknown>
#8 0x5588d488d7a8 <unknown>
#9 0x5588d488e421 <unknown>
#10 0x5588d4d89b28 <unknown>
#11 0x5588d4d8d87f <unknown>
#12 0x5588d4d71c49 <unknown>
#13 0x5588d4d8e405 <unknown>
#14 0x5588d4d574ff <unknown>
#15 0x5588d4db2258 <unknown>
#16 0x5588d4db2432 <unknown>
#17 0x5588d4dc3fa3 <unknown>
#18 0x7fb17f89caa4 <unknown>
#19 0x7fb17f929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d093da9fba <unknown>
#1 0x55d09382e6d0 <unknown>
#2 0x55d0938802aa <unknown>
#3 0x55d093880541 <unknown>
#4 0x55d0938ce6c4 <unknown>
#5 0x55d0938a5e5d <unknown>
#6 0x55d0938cbb54 <unknown>
#7 0x55d0938a5c03 <unknown>
#8 0x55d0938727a8 <unknown>
#9 0x55d093873421 <unknown>
#10 0x55d093d6eb28 <unknown>
#11 0x55d093d7287f <unknown>
#12 0x55d093d56c49 <unknown>
#13 0x55d093d73405 <unknown>
#14 0x55d093d3c4ff <unknown>
#15 0x55d093d97258 <unknown>
#16 0x55d093d97432 <unknown>
#17 0x55d093da8fa3 <unknown>
#18 0x7f46b309caa4 <unknown>
#19 0x7f46b3129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5639bf612fba <unknown>
#1 0x5639bf0976d0 <unknown>
#2 0x5639bf0e92aa <unknown>
#3 0x5639bf0e9541 <unknown>
#4 0x5639bf1376c4 <unknown>
#5 0x5639bf10ee5d <unknown>
#6 0x5639bf134b54 <unknown>
#7 0x5639bf10ec03 <unknown>
#8 0x5639bf0db7a8 <unknown>
#9 0x5639bf0dc421 <unknown>
#10 0x5639bf5d7b28 <unknown>
#11 0x5639bf5db87f <unknown>
#12 0x5639bf5bfc49 <unknown>
#13 0x5639bf5dc405 <unknown>
#14 0x5639bf5a54ff <unknown>
#15 0x5639bf600258 <unknown>
#16 0x5639bf600432 <unknown>
#17 0x5639bf611fa3 <unknown>
#18 0x7fc4ffc9caa4 <unknown>
#19 0x7fc4ffd29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c63a0ebfba <unknown>
#1 0x55c639b706d0 <unknown>
#2 0x55c639bc22aa <unknown>
#3 0x55c639bc2541 <unknown>
#4 0x55c639c106c4 <unknown>
#5 0x55c639be7e5d <unknown>
#6 0x55c639c0db54 <unknown>
#7 0x55c639be7c03 <unknown>
#8 0x55c639bb47a8 <unknown>
#9 0x55c639bb5421 <unknown>
#10 0x55c63a0b0b28 <unknown>
#11 0x55c63a0b487f <unknown>
#12 0x55c63a098c49 <unknown>
#13 0x55c63a0b5405 <unknown>
#14 0x55c63a07e4ff <unknown>
#15 0x55c63a0d9258 <unknown>
#16 0x55c63a0d9432 <unknown>
#17 0x55c63a0eafa3 <unknown>
#18 0x7f7d25e9caa4 <unknown>
#19 0x7f7d25f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5564c203dfba <unknown>
#1 0x5564c1ac26d0 <unknown>
#2 0x5564c1b142aa <unknown>
#3 0x5564c1b14541 <unknown>
#4 0x5564c1b626c4 <unknown>
#5 0x5564c1b39e5d <unknown>
#6 0x5564c1b5fb54 <unknown>
#7 0x5564c1b39c03 <unknown>
#8 0x5564c1b067a8 <unknown>
#9 0x5564c1b07421 <unknown>
#10 0x5564c2002b28 <unknown>
#11 0x5564c200687f <unknown>
#12 0x5564c1feac49 <unknown>
#13 0x5564c2007405 <unknown>
#14 0x5564c1fd04ff <unknown>
#15 0x5564c202b258 <unknown>
#16 0x5564c202b432 <unknown>
#17 0x5564c203cfa3 <unknown>
#18 0x7ffb5469caa4 <unknown>
#19 0x7ffb54729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563501af6fba <unknown>
#1 0x56350157b6d0 <unknown>
#2 0x5635015cd2aa <unknown>
#3 0x5635015cd541 <unknown>
#4 0x56350161b6c4 <unknown>
#5 0x5635015f2e5d <unknown>
#6 0x563501618b54 <unknown>
#7 0x5635015f2c03 <unknown>
#8 0x5635015bf7a8 <unknown>
#9 0x5635015c0421 <unknown>
#10 0x563501abbb28 <unknown>
#11 0x563501abf87f <unknown>
#12 0x563501aa3c49 <unknown>
#13 0x563501ac0405 <unknown>
#14 0x563501a894ff <unknown>
#15 0x563501ae4258 <unknown>
#16 0x563501ae4432 <unknown>
#17 0x563501af5fa3 <unknown>
#18 0x7f07eda9caa4 <unknown>
#19 0x7f07edb29c6c <unknown>
================== 12 failed, 7 passed in 1522.27s (0:25:22) ===================
--------------------------------------------
Test Run Finished: 2025-09-30 04:11:42
Duration: 1525 seconds
Status: FAILURE
Exit Code: 1
============================================
