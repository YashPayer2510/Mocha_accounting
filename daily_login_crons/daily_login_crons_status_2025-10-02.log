========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-02 03:44:32
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="cd937b1fc312e37cc5eba8de6989e95b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="cd937b1fc312e37cc5eba8de6989e95b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202b7a0900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5582766d2fba <unknown>
E       #1 0x5582761576d0 <unknown>
E       #2 0x5582761a92aa <unknown>
E       #3 0x5582761a9541 <unknown>
E       #4 0x5582761f76c4 <unknown>
E       #5 0x5582761cee5d <unknown>
E       #6 0x5582761f4b54 <unknown>
E       #7 0x5582761cec03 <unknown>
E       #8 0x55827619b7a8 <unknown>
E       #9 0x55827619c421 <unknown>
E       #10 0x558276697b28 <unknown>
E       #11 0x55827669b87f <unknown>
E       #12 0x55827667fc49 <unknown>
E       #13 0x55827669c405 <unknown>
E       #14 0x5582766654ff <unknown>
E       #15 0x5582766c0258 <unknown>
E       #16 0x5582766c0432 <unknown>
E       #17 0x5582766d1fa3 <unknown>
E       #18 0x7f445369caa4 <unknown>
E       #19 0x7f4453729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 03:44:35,315 - INFO - Test data loaded successfully.
2025-10-02 03:44:35,316 - INFO - Starting test with Chrome browser
2025-10-02 03:44:35,316 - INFO - ====== WebDriver manager ======
2025-10-02 03:44:36,425 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:44:36,469 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:44:36,501 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-02 03:44:36,501 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:44:36,598 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-02 03:44:36,602 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-02 03:44:36,603 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-02 03:44:36,649 - INFO - Driver downloading response is 200
2025-10-02 03:44:36,719 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:44:36,864 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-02 03:44:44,309 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-02 03:44:44,310 - INFO - Starting the test case for valid credentials
2025-10-02 03:44:45,018 - INFO - User enters the email-id
2025-10-02 03:44:46,577 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 03:46:48,245 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="195a9e031d57de8206430b1ff9802827")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="195a9e031d57de8206430b1ff9802827")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea58a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b8f4890fba <unknown>
E       #1 0x55b8f43156d0 <unknown>
E       #2 0x55b8f43672aa <unknown>
E       #3 0x55b8f4367541 <unknown>
E       #4 0x55b8f43b56c4 <unknown>
E       #5 0x55b8f438ce5d <unknown>
E       #6 0x55b8f43b2b54 <unknown>
E       #7 0x55b8f438cc03 <unknown>
E       #8 0x55b8f43597a8 <unknown>
E       #9 0x55b8f435a421 <unknown>
E       #10 0x55b8f4855b28 <unknown>
E       #11 0x55b8f485987f <unknown>
E       #12 0x55b8f483dc49 <unknown>
E       #13 0x55b8f485a405 <unknown>
E       #14 0x55b8f48234ff <unknown>
E       #15 0x55b8f487e258 <unknown>
E       #16 0x55b8f487e432 <unknown>
E       #17 0x55b8f488ffa3 <unknown>
E       #18 0x7fb7b1e9caa4 <unknown>
E       #19 0x7fb7b1f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 03:46:48,397 - INFO - Starting test with Chrome browser
2025-10-02 03:46:48,398 - INFO - ====== WebDriver manager ======
2025-10-02 03:46:48,462 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:46:48,503 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:46:48,551 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 03:46:50,151 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-02 03:46:50,152 - INFO - Starting the test case for valid credentials
2025-10-02 03:46:50,313 - INFO - User enters the email-id
2025-10-02 03:46:52,031 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 03:48:53,613 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8ef3a5829b6ecc8b490fecd4e1bdf144")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8ef3a5829b6ecc8b490fecd4e1bdf144")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202c1ee3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e00072ffba <unknown>
E       #1 0x55e0001b46d0 <unknown>
E       #2 0x55e0002062aa <unknown>
E       #3 0x55e000206541 <unknown>
E       #4 0x55e0002546c4 <unknown>
E       #5 0x55e00022be5d <unknown>
E       #6 0x55e000251b54 <unknown>
E       #7 0x55e00022bc03 <unknown>
E       #8 0x55e0001f87a8 <unknown>
E       #9 0x55e0001f9421 <unknown>
E       #10 0x55e0006f4b28 <unknown>
E       #11 0x55e0006f887f <unknown>
E       #12 0x55e0006dcc49 <unknown>
E       #13 0x55e0006f9405 <unknown>
E       #14 0x55e0006c24ff <unknown>
E       #15 0x55e00071d258 <unknown>
E       #16 0x55e00071d432 <unknown>
E       #17 0x55e00072efa3 <unknown>
E       #18 0x7f2120c9caa4 <unknown>
E       #19 0x7f2120d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 03:48:53,678 - INFO - Starting test with Chrome browser
2025-10-02 03:48:53,678 - INFO - ====== WebDriver manager ======
2025-10-02 03:48:53,743 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:48:53,775 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:48:53,824 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 03:48:55,317 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-02 03:48:55,318 - INFO - Starting the test case for valid credentials
2025-10-02 03:48:55,459 - INFO - User enters the email-id
2025-10-02 03:48:57,040 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 03:50:58,645 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8ef5d77b7f641927fcd316818c0600a7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8ef5d77b7f641927fcd316818c0600a7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea56c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d2bb4f1fba <unknown>
E       #1 0x55d2baf766d0 <unknown>
E       #2 0x55d2bafc82aa <unknown>
E       #3 0x55d2bafc8541 <unknown>
E       #4 0x55d2bb0166c4 <unknown>
E       #5 0x55d2bafede5d <unknown>
E       #6 0x55d2bb013b54 <unknown>
E       #7 0x55d2bafedc03 <unknown>
E       #8 0x55d2bafba7a8 <unknown>
E       #9 0x55d2bafbb421 <unknown>
E       #10 0x55d2bb4b6b28 <unknown>
E       #11 0x55d2bb4ba87f <unknown>
E       #12 0x55d2bb49ec49 <unknown>
E       #13 0x55d2bb4bb405 <unknown>
E       #14 0x55d2bb4844ff <unknown>
E       #15 0x55d2bb4df258 <unknown>
E       #16 0x55d2bb4df432 <unknown>
E       #17 0x55d2bb4f0fa3 <unknown>
E       #18 0x7fc14409caa4 <unknown>
E       #19 0x7fc144129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 03:50:58,709 - INFO - Starting test with Chrome browser
2025-10-02 03:50:58,710 - INFO - ====== WebDriver manager ======
2025-10-02 03:50:58,774 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:50:58,808 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:50:58,962 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 03:51:00,631 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-02 03:51:00,631 - INFO - Starting the test case for valid credentials
2025-10-02 03:51:00,785 - INFO - User enters the email-id
2025-10-02 03:51:02,416 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 03:53:04,030 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="30956a9c4c8a593b12bca27b5adb30d3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="30956a9c4c8a593b12bca27b5adb30d3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea5f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f7f7e02fba <unknown>
E       #1 0x55f7f78876d0 <unknown>
E       #2 0x55f7f78d92aa <unknown>
E       #3 0x55f7f78d9541 <unknown>
E       #4 0x55f7f79276c4 <unknown>
E       #5 0x55f7f78fee5d <unknown>
E       #6 0x55f7f7924b54 <unknown>
E       #7 0x55f7f78fec03 <unknown>
E       #8 0x55f7f78cb7a8 <unknown>
E       #9 0x55f7f78cc421 <unknown>
E       #10 0x55f7f7dc7b28 <unknown>
E       #11 0x55f7f7dcb87f <unknown>
E       #12 0x55f7f7dafc49 <unknown>
E       #13 0x55f7f7dcc405 <unknown>
E       #14 0x55f7f7d954ff <unknown>
E       #15 0x55f7f7df0258 <unknown>
E       #16 0x55f7f7df0432 <unknown>
E       #17 0x55f7f7e01fa3 <unknown>
E       #18 0x7fb63009caa4 <unknown>
E       #19 0x7fb630129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 03:53:04,096 - INFO - Starting test with Chrome browser
2025-10-02 03:53:04,096 - INFO - ====== WebDriver manager ======
2025-10-02 03:53:04,162 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:53:04,197 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:53:04,229 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 03:53:05,795 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 03:55:07,514 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2f48d44425b0345ad84c8c080b75d301")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2f48d44425b0345ad84c8c080b75d301")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea6020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56464a6b2fba <unknown>
E       #1 0x56464a1376d0 <unknown>
E       #2 0x56464a1892aa <unknown>
E       #3 0x56464a189541 <unknown>
E       #4 0x56464a1d76c4 <unknown>
E       #5 0x56464a1aee5d <unknown>
E       #6 0x56464a1d4b54 <unknown>
E       #7 0x56464a1aec03 <unknown>
E       #8 0x56464a17b7a8 <unknown>
E       #9 0x56464a17c421 <unknown>
E       #10 0x56464a677b28 <unknown>
E       #11 0x56464a67b87f <unknown>
E       #12 0x56464a65fc49 <unknown>
E       #13 0x56464a67c405 <unknown>
E       #14 0x56464a6454ff <unknown>
E       #15 0x56464a6a0258 <unknown>
E       #16 0x56464a6a0432 <unknown>
E       #17 0x56464a6b1fa3 <unknown>
E       #18 0x7f4adac9caa4 <unknown>
E       #19 0x7f4adad29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 03:55:07,580 - INFO - Starting test with Chrome browser
2025-10-02 03:55:07,580 - INFO - ====== WebDriver manager ======
2025-10-02 03:55:07,645 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:55:07,680 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:55:07,712 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 03:55:09,324 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 03:57:11,087 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0b73dbf5c58eb51dc3d34edbd1c99f8e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0b73dbf5c58eb51dc3d34edbd1c99f8e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea5da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5562f8d98fba <unknown>
E       #1 0x5562f881d6d0 <unknown>
E       #2 0x5562f886f2aa <unknown>
E       #3 0x5562f886f541 <unknown>
E       #4 0x5562f88bd6c4 <unknown>
E       #5 0x5562f8894e5d <unknown>
E       #6 0x5562f88bab54 <unknown>
E       #7 0x5562f8894c03 <unknown>
E       #8 0x5562f88617a8 <unknown>
E       #9 0x5562f8862421 <unknown>
E       #10 0x5562f8d5db28 <unknown>
E       #11 0x5562f8d6187f <unknown>
E       #12 0x5562f8d45c49 <unknown>
E       #13 0x5562f8d62405 <unknown>
E       #14 0x5562f8d2b4ff <unknown>
E       #15 0x5562f8d86258 <unknown>
E       #16 0x5562f8d86432 <unknown>
E       #17 0x5562f8d97fa3 <unknown>
E       #18 0x7f930f49caa4 <unknown>
E       #19 0x7f930f529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 03:57:11,151 - INFO - Starting test with Chrome browser
2025-10-02 03:57:11,151 - INFO - ====== WebDriver manager ======
2025-10-02 03:57:11,216 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:57:11,253 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:57:11,283 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 03:57:12,968 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 03:59:14,672 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e57445e3cc06129a1a488301b7d21bd0")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e57445e3cc06129a1a488301b7d21bd0")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea6840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564bef847fba <unknown>
E       #1 0x564bef2cc6d0 <unknown>
E       #2 0x564bef31e2aa <unknown>
E       #3 0x564bef31e541 <unknown>
E       #4 0x564bef36c6c4 <unknown>
E       #5 0x564bef343e5d <unknown>
E       #6 0x564bef369b54 <unknown>
E       #7 0x564bef343c03 <unknown>
E       #8 0x564bef3107a8 <unknown>
E       #9 0x564bef311421 <unknown>
E       #10 0x564bef80cb28 <unknown>
E       #11 0x564bef81087f <unknown>
E       #12 0x564bef7f4c49 <unknown>
E       #13 0x564bef811405 <unknown>
E       #14 0x564bef7da4ff <unknown>
E       #15 0x564bef835258 <unknown>
E       #16 0x564bef835432 <unknown>
E       #17 0x564bef846fa3 <unknown>
E       #18 0x7fe10709caa4 <unknown>
E       #19 0x7fe107129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 03:59:14,738 - INFO - Starting test with Chrome browser
2025-10-02 03:59:14,738 - INFO - ====== WebDriver manager ======
2025-10-02 03:59:14,803 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:59:14,850 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 03:59:14,883 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 03:59:16,474 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 04:01:18,181 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5d8f9550c24fabf765c96488c174e400")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5d8f9550c24fabf765c96488c174e400")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea6b60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55dfee849fba <unknown>
E       #1 0x55dfee2ce6d0 <unknown>
E       #2 0x55dfee3202aa <unknown>
E       #3 0x55dfee320541 <unknown>
E       #4 0x55dfee36e6c4 <unknown>
E       #5 0x55dfee345e5d <unknown>
E       #6 0x55dfee36bb54 <unknown>
E       #7 0x55dfee345c03 <unknown>
E       #8 0x55dfee3127a8 <unknown>
E       #9 0x55dfee313421 <unknown>
E       #10 0x55dfee80eb28 <unknown>
E       #11 0x55dfee81287f <unknown>
E       #12 0x55dfee7f6c49 <unknown>
E       #13 0x55dfee813405 <unknown>
E       #14 0x55dfee7dc4ff <unknown>
E       #15 0x55dfee837258 <unknown>
E       #16 0x55dfee837432 <unknown>
E       #17 0x55dfee848fa3 <unknown>
E       #18 0x7f136969caa4 <unknown>
E       #19 0x7f1369729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 04:01:18,246 - INFO - Starting test with Chrome browser
2025-10-02 04:01:18,246 - INFO - ====== WebDriver manager ======
2025-10-02 04:01:18,311 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 04:01:18,344 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 04:01:18,374 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 04:01:19,540 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 04:03:23,188 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b29044cdf52e99cfdf9fe6d3c8bf0950")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b29044cdf52e99cfdf9fe6d3c8bf0950")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea68e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5609634d8fba <unknown>
E       #1 0x560962f5d6d0 <unknown>
E       #2 0x560962faf2aa <unknown>
E       #3 0x560962faf541 <unknown>
E       #4 0x560962ffd6c4 <unknown>
E       #5 0x560962fd4e5d <unknown>
E       #6 0x560962ffab54 <unknown>
E       #7 0x560962fd4c03 <unknown>
E       #8 0x560962fa17a8 <unknown>
E       #9 0x560962fa2421 <unknown>
E       #10 0x56096349db28 <unknown>
E       #11 0x5609634a187f <unknown>
E       #12 0x560963485c49 <unknown>
E       #13 0x5609634a2405 <unknown>
E       #14 0x56096346b4ff <unknown>
E       #15 0x5609634c6258 <unknown>
E       #16 0x5609634c6432 <unknown>
E       #17 0x5609634d7fa3 <unknown>
E       #18 0x7f52dcc9caa4 <unknown>
E       #19 0x7f52dcd29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 04:03:23,248 - INFO - Starting test with Chrome browser
2025-10-02 04:03:23,248 - INFO - ====== WebDriver manager ======
2025-10-02 04:03:23,313 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 04:03:23,347 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 04:03:23,380 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 04:03:25,037 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 04:05:28,379 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3beceb5ac2c399d4891640aa5f3f49d1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3beceb5ac2c399d4891640aa5f3f49d1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea5da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5593f2743fba <unknown>
E       #1 0x5593f21c86d0 <unknown>
E       #2 0x5593f221a2aa <unknown>
E       #3 0x5593f221a541 <unknown>
E       #4 0x5593f22686c4 <unknown>
E       #5 0x5593f223fe5d <unknown>
E       #6 0x5593f2265b54 <unknown>
E       #7 0x5593f223fc03 <unknown>
E       #8 0x5593f220c7a8 <unknown>
E       #9 0x5593f220d421 <unknown>
E       #10 0x5593f2708b28 <unknown>
E       #11 0x5593f270c87f <unknown>
E       #12 0x5593f26f0c49 <unknown>
E       #13 0x5593f270d405 <unknown>
E       #14 0x5593f26d64ff <unknown>
E       #15 0x5593f2731258 <unknown>
E       #16 0x5593f2731432 <unknown>
E       #17 0x5593f2742fa3 <unknown>
E       #18 0x7f121729caa4 <unknown>
E       #19 0x7f1217329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 04:05:28,439 - INFO - Starting test with Chrome browser
2025-10-02 04:05:28,439 - INFO - ====== WebDriver manager ======
2025-10-02 04:05:28,504 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 04:05:28,538 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 04:05:28,660 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 04:05:30,549 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 04:07:33,942 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b4d972869da00662319749bc8da0ffce")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b4d972869da00662319749bc8da0ffce")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f202cea5940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56124a0cdfba <unknown>
E       #1 0x561249b526d0 <unknown>
E       #2 0x561249ba42aa <unknown>
E       #3 0x561249ba4541 <unknown>
E       #4 0x561249bf26c4 <unknown>
E       #5 0x561249bc9e5d <unknown>
E       #6 0x561249befb54 <unknown>
E       #7 0x561249bc9c03 <unknown>
E       #8 0x561249b967a8 <unknown>
E       #9 0x561249b97421 <unknown>
E       #10 0x56124a092b28 <unknown>
E       #11 0x56124a09687f <unknown>
E       #12 0x56124a07ac49 <unknown>
E       #13 0x56124a097405 <unknown>
E       #14 0x56124a0604ff <unknown>
E       #15 0x56124a0bb258 <unknown>
E       #16 0x56124a0bb432 <unknown>
E       #17 0x56124a0ccfa3 <unknown>
E       #18 0x7fbf4469caa4 <unknown>
E       #19 0x7fbf44729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-02 04:07:34,002 - INFO - Starting test with Chrome browser
2025-10-02 04:07:34,002 - INFO - ====== WebDriver manager ======
2025-10-02 04:07:34,068 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 04:07:34,141 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-02 04:07:34,173 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-02 04:07:35,792 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-02 04:09:39,127 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251002_034435/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5582766d2fba <unknown>
#1 0x5582761576d0 <unknown>
#2 0x5582761a92aa <unknown>
#3 0x5582761a9541 <unknown>
#4 0x5582761f76c4 <unknown>
#5 0x5582761cee5d <unknown>
#6 0x5582761f4b54 <unknown>
#7 0x5582761cec03 <unknown>
#8 0x55827619b7a8 <unknown>
#9 0x55827619c421 <unknown>
#10 0x558276697b28 <unknown>
#11 0x55827669b87f <unknown>
#12 0x55827667fc49 <unknown>
#13 0x55827669c405 <unknown>
#14 0x5582766654ff <unknown>
#15 0x5582766c0258 <unknown>
#16 0x5582766c0432 <unknown>
#17 0x5582766d1fa3 <unknown>
#18 0x7f445369caa4 <unknown>
#19 0x7f4453729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b8f4890fba <unknown>
#1 0x55b8f43156d0 <unknown>
#2 0x55b8f43672aa <unknown>
#3 0x55b8f4367541 <unknown>
#4 0x55b8f43b56c4 <unknown>
#5 0x55b8f438ce5d <unknown>
#6 0x55b8f43b2b54 <unknown>
#7 0x55b8f438cc03 <unknown>
#8 0x55b8f43597a8 <unknown>
#9 0x55b8f435a421 <unknown>
#10 0x55b8f4855b28 <unknown>
#11 0x55b8f485987f <unknown>
#12 0x55b8f483dc49 <unknown>
#13 0x55b8f485a405 <unknown>
#14 0x55b8f48234ff <unknown>
#15 0x55b8f487e258 <unknown>
#16 0x55b8f487e432 <unknown>
#17 0x55b8f488ffa3 <unknown>
#18 0x7fb7b1e9caa4 <unknown>
#19 0x7fb7b1f29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e00072ffba <unknown>
#1 0x55e0001b46d0 <unknown>
#2 0x55e0002062aa <unknown>
#3 0x55e000206541 <unknown>
#4 0x55e0002546c4 <unknown>
#5 0x55e00022be5d <unknown>
#6 0x55e000251b54 <unknown>
#7 0x55e00022bc03 <unknown>
#8 0x55e0001f87a8 <unknown>
#9 0x55e0001f9421 <unknown>
#10 0x55e0006f4b28 <unknown>
#11 0x55e0006f887f <unknown>
#12 0x55e0006dcc49 <unknown>
#13 0x55e0006f9405 <unknown>
#14 0x55e0006c24ff <unknown>
#15 0x55e00071d258 <unknown>
#16 0x55e00071d432 <unknown>
#17 0x55e00072efa3 <unknown>
#18 0x7f2120c9caa4 <unknown>
#19 0x7f2120d29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d2bb4f1fba <unknown>
#1 0x55d2baf766d0 <unknown>
#2 0x55d2bafc82aa <unknown>
#3 0x55d2bafc8541 <unknown>
#4 0x55d2bb0166c4 <unknown>
#5 0x55d2bafede5d <unknown>
#6 0x55d2bb013b54 <unknown>
#7 0x55d2bafedc03 <unknown>
#8 0x55d2bafba7a8 <unknown>
#9 0x55d2bafbb421 <unknown>
#10 0x55d2bb4b6b28 <unknown>
#11 0x55d2bb4ba87f <unknown>
#12 0x55d2bb49ec49 <unknown>
#13 0x55d2bb4bb405 <unknown>
#14 0x55d2bb4844ff <unknown>
#15 0x55d2bb4df258 <unknown>
#16 0x55d2bb4df432 <unknown>
#17 0x55d2bb4f0fa3 <unknown>
#18 0x7fc14409caa4 <unknown>
#19 0x7fc144129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f7f7e02fba <unknown>
#1 0x55f7f78876d0 <unknown>
#2 0x55f7f78d92aa <unknown>
#3 0x55f7f78d9541 <unknown>
#4 0x55f7f79276c4 <unknown>
#5 0x55f7f78fee5d <unknown>
#6 0x55f7f7924b54 <unknown>
#7 0x55f7f78fec03 <unknown>
#8 0x55f7f78cb7a8 <unknown>
#9 0x55f7f78cc421 <unknown>
#10 0x55f7f7dc7b28 <unknown>
#11 0x55f7f7dcb87f <unknown>
#12 0x55f7f7dafc49 <unknown>
#13 0x55f7f7dcc405 <unknown>
#14 0x55f7f7d954ff <unknown>
#15 0x55f7f7df0258 <unknown>
#16 0x55f7f7df0432 <unknown>
#17 0x55f7f7e01fa3 <unknown>
#18 0x7fb63009caa4 <unknown>
#19 0x7fb630129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56464a6b2fba <unknown>
#1 0x56464a1376d0 <unknown>
#2 0x56464a1892aa <unknown>
#3 0x56464a189541 <unknown>
#4 0x56464a1d76c4 <unknown>
#5 0x56464a1aee5d <unknown>
#6 0x56464a1d4b54 <unknown>
#7 0x56464a1aec03 <unknown>
#8 0x56464a17b7a8 <unknown>
#9 0x56464a17c421 <unknown>
#10 0x56464a677b28 <unknown>
#11 0x56464a67b87f <unknown>
#12 0x56464a65fc49 <unknown>
#13 0x56464a67c405 <unknown>
#14 0x56464a6454ff <unknown>
#15 0x56464a6a0258 <unknown>
#16 0x56464a6a0432 <unknown>
#17 0x56464a6b1fa3 <unknown>
#18 0x7f4adac9caa4 <unknown>
#19 0x7f4adad29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5562f8d98fba <unknown>
#1 0x5562f881d6d0 <unknown>
#2 0x5562f886f2aa <unknown>
#3 0x5562f886f541 <unknown>
#4 0x5562f88bd6c4 <unknown>
#5 0x5562f8894e5d <unknown>
#6 0x5562f88bab54 <unknown>
#7 0x5562f8894c03 <unknown>
#8 0x5562f88617a8 <unknown>
#9 0x5562f8862421 <unknown>
#10 0x5562f8d5db28 <unknown>
#11 0x5562f8d6187f <unknown>
#12 0x5562f8d45c49 <unknown>
#13 0x5562f8d62405 <unknown>
#14 0x5562f8d2b4ff <unknown>
#15 0x5562f8d86258 <unknown>
#16 0x5562f8d86432 <unknown>
#17 0x5562f8d97fa3 <unknown>
#18 0x7f930f49caa4 <unknown>
#19 0x7f930f529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564bef847fba <unknown>
#1 0x564bef2cc6d0 <unknown>
#2 0x564bef31e2aa <unknown>
#3 0x564bef31e541 <unknown>
#4 0x564bef36c6c4 <unknown>
#5 0x564bef343e5d <unknown>
#6 0x564bef369b54 <unknown>
#7 0x564bef343c03 <unknown>
#8 0x564bef3107a8 <unknown>
#9 0x564bef311421 <unknown>
#10 0x564bef80cb28 <unknown>
#11 0x564bef81087f <unknown>
#12 0x564bef7f4c49 <unknown>
#13 0x564bef811405 <unknown>
#14 0x564bef7da4ff <unknown>
#15 0x564bef835258 <unknown>
#16 0x564bef835432 <unknown>
#17 0x564bef846fa3 <unknown>
#18 0x7fe10709caa4 <unknown>
#19 0x7fe107129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55dfee849fba <unknown>
#1 0x55dfee2ce6d0 <unknown>
#2 0x55dfee3202aa <unknown>
#3 0x55dfee320541 <unknown>
#4 0x55dfee36e6c4 <unknown>
#5 0x55dfee345e5d <unknown>
#6 0x55dfee36bb54 <unknown>
#7 0x55dfee345c03 <unknown>
#8 0x55dfee3127a8 <unknown>
#9 0x55dfee313421 <unknown>
#10 0x55dfee80eb28 <unknown>
#11 0x55dfee81287f <unknown>
#12 0x55dfee7f6c49 <unknown>
#13 0x55dfee813405 <unknown>
#14 0x55dfee7dc4ff <unknown>
#15 0x55dfee837258 <unknown>
#16 0x55dfee837432 <unknown>
#17 0x55dfee848fa3 <unknown>
#18 0x7f136969caa4 <unknown>
#19 0x7f1369729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5609634d8fba <unknown>
#1 0x560962f5d6d0 <unknown>
#2 0x560962faf2aa <unknown>
#3 0x560962faf541 <unknown>
#4 0x560962ffd6c4 <unknown>
#5 0x560962fd4e5d <unknown>
#6 0x560962ffab54 <unknown>
#7 0x560962fd4c03 <unknown>
#8 0x560962fa17a8 <unknown>
#9 0x560962fa2421 <unknown>
#10 0x56096349db28 <unknown>
#11 0x5609634a187f <unknown>
#12 0x560963485c49 <unknown>
#13 0x5609634a2405 <unknown>
#14 0x56096346b4ff <unknown>
#15 0x5609634c6258 <unknown>
#16 0x5609634c6432 <unknown>
#17 0x5609634d7fa3 <unknown>
#18 0x7f52dcc9caa4 <unknown>
#19 0x7f52dcd29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5593f2743fba <unknown>
#1 0x5593f21c86d0 <unknown>
#2 0x5593f221a2aa <unknown>
#3 0x5593f221a541 <unknown>
#4 0x5593f22686c4 <unknown>
#5 0x5593f223fe5d <unknown>
#6 0x5593f2265b54 <unknown>
#7 0x5593f223fc03 <unknown>
#8 0x5593f220c7a8 <unknown>
#9 0x5593f220d421 <unknown>
#10 0x5593f2708b28 <unknown>
#11 0x5593f270c87f <unknown>
#12 0x5593f26f0c49 <unknown>
#13 0x5593f270d405 <unknown>
#14 0x5593f26d64ff <unknown>
#15 0x5593f2731258 <unknown>
#16 0x5593f2731432 <unknown>
#17 0x5593f2742fa3 <unknown>
#18 0x7f121729caa4 <unknown>
#19 0x7f1217329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56124a0cdfba <unknown>
#1 0x561249b526d0 <unknown>
#2 0x561249ba42aa <unknown>
#3 0x561249ba4541 <unknown>
#4 0x561249bf26c4 <unknown>
#5 0x561249bc9e5d <unknown>
#6 0x561249befb54 <unknown>
#7 0x561249bc9c03 <unknown>
#8 0x561249b967a8 <unknown>
#9 0x561249b97421 <unknown>
#10 0x56124a092b28 <unknown>
#11 0x56124a09687f <unknown>
#12 0x56124a07ac49 <unknown>
#13 0x56124a097405 <unknown>
#14 0x56124a0604ff <unknown>
#15 0x56124a0bb258 <unknown>
#16 0x56124a0bb432 <unknown>
#17 0x56124a0ccfa3 <unknown>
#18 0x7fbf4469caa4 <unknown>
#19 0x7fbf44729c6c <unknown>
================== 12 failed, 7 passed in 1518.74s (0:25:18) ===================
--------------------------------------------
Test Run Finished: 2025-10-02 04:09:54
Duration: 1522 seconds
Status: FAILURE
Exit Code: 1
============================================
