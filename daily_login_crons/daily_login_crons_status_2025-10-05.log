========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-05 03:46:43
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2ab81316be88c466bea5b9186c1434f1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2ab81316be88c466bea5b9186c1434f1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6cfb30900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562b0742ffba <unknown>
E       #1 0x562b06eb46d0 <unknown>
E       #2 0x562b06f062aa <unknown>
E       #3 0x562b06f06541 <unknown>
E       #4 0x562b06f546c4 <unknown>
E       #5 0x562b06f2be5d <unknown>
E       #6 0x562b06f51b54 <unknown>
E       #7 0x562b06f2bc03 <unknown>
E       #8 0x562b06ef87a8 <unknown>
E       #9 0x562b06ef9421 <unknown>
E       #10 0x562b073f4b28 <unknown>
E       #11 0x562b073f887f <unknown>
E       #12 0x562b073dcc49 <unknown>
E       #13 0x562b073f9405 <unknown>
E       #14 0x562b073c24ff <unknown>
E       #15 0x562b0741d258 <unknown>
E       #16 0x562b0741d432 <unknown>
E       #17 0x562b0742efa3 <unknown>
E       #18 0x7f3cc3e9caa4 <unknown>
E       #19 0x7f3cc3f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 03:46:45,953 - INFO - Test data loaded successfully.
2025-10-05 03:46:45,953 - INFO - Starting test with Chrome browser
2025-10-05 03:46:45,953 - INFO - ====== WebDriver manager ======
2025-10-05 03:46:47,434 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:46:47,483 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:46:47,528 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-05 03:46:47,528 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:46:47,650 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-05 03:46:47,655 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-05 03:46:47,655 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-05 03:46:47,706 - INFO - Driver downloading response is 200
2025-10-05 03:46:47,781 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:46:47,940 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-05 03:46:56,200 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-05 03:46:56,201 - INFO - Starting the test case for valid credentials
2025-10-05 03:46:56,435 - INFO - User enters the email-id
2025-10-05 03:46:58,075 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 03:48:59,750 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fd7f503195b368e93dbce282f0e59252")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="fd7f503195b368e93dbce282f0e59252")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e498a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5573a0918fba <unknown>
E       #1 0x5573a039d6d0 <unknown>
E       #2 0x5573a03ef2aa <unknown>
E       #3 0x5573a03ef541 <unknown>
E       #4 0x5573a043d6c4 <unknown>
E       #5 0x5573a0414e5d <unknown>
E       #6 0x5573a043ab54 <unknown>
E       #7 0x5573a0414c03 <unknown>
E       #8 0x5573a03e17a8 <unknown>
E       #9 0x5573a03e2421 <unknown>
E       #10 0x5573a08ddb28 <unknown>
E       #11 0x5573a08e187f <unknown>
E       #12 0x5573a08c5c49 <unknown>
E       #13 0x5573a08e2405 <unknown>
E       #14 0x5573a08ab4ff <unknown>
E       #15 0x5573a0906258 <unknown>
E       #16 0x5573a0906432 <unknown>
E       #17 0x5573a0917fa3 <unknown>
E       #18 0x7fb63189caa4 <unknown>
E       #19 0x7fb631929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 03:48:59,873 - INFO - Starting test with Chrome browser
2025-10-05 03:48:59,873 - INFO - ====== WebDriver manager ======
2025-10-05 03:48:59,940 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:48:59,992 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:49:00,062 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 03:49:01,535 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-05 03:49:01,535 - INFO - Starting the test case for valid credentials
2025-10-05 03:49:01,689 - INFO - User enters the email-id
2025-10-05 03:49:03,380 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 03:51:05,005 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="09ad57c404a346eff31eb22f2c2ef881")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="09ad57c404a346eff31eb22f2c2ef881")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6cefe23e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d0cb2e2fba <unknown>
E       #1 0x55d0cad676d0 <unknown>
E       #2 0x55d0cadb92aa <unknown>
E       #3 0x55d0cadb9541 <unknown>
E       #4 0x55d0cae076c4 <unknown>
E       #5 0x55d0caddee5d <unknown>
E       #6 0x55d0cae04b54 <unknown>
E       #7 0x55d0caddec03 <unknown>
E       #8 0x55d0cadab7a8 <unknown>
E       #9 0x55d0cadac421 <unknown>
E       #10 0x55d0cb2a7b28 <unknown>
E       #11 0x55d0cb2ab87f <unknown>
E       #12 0x55d0cb28fc49 <unknown>
E       #13 0x55d0cb2ac405 <unknown>
E       #14 0x55d0cb2754ff <unknown>
E       #15 0x55d0cb2d0258 <unknown>
E       #16 0x55d0cb2d0432 <unknown>
E       #17 0x55d0cb2e1fa3 <unknown>
E       #18 0x7fa4a789caa4 <unknown>
E       #19 0x7fa4a7929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 03:51:05,062 - INFO - Starting test with Chrome browser
2025-10-05 03:51:05,062 - INFO - ====== WebDriver manager ======
2025-10-05 03:51:05,130 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:51:05,176 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:51:05,221 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 03:51:06,877 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-05 03:51:06,878 - INFO - Starting the test case for valid credentials
2025-10-05 03:51:07,044 - INFO - User enters the email-id
2025-10-05 03:51:08,795 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 03:53:10,415 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="223928f98a1bcb7b292fb682092d2be0")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="223928f98a1bcb7b292fb682092d2be0")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e496c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560fe5312fba <unknown>
E       #1 0x560fe4d976d0 <unknown>
E       #2 0x560fe4de92aa <unknown>
E       #3 0x560fe4de9541 <unknown>
E       #4 0x560fe4e376c4 <unknown>
E       #5 0x560fe4e0ee5d <unknown>
E       #6 0x560fe4e34b54 <unknown>
E       #7 0x560fe4e0ec03 <unknown>
E       #8 0x560fe4ddb7a8 <unknown>
E       #9 0x560fe4ddc421 <unknown>
E       #10 0x560fe52d7b28 <unknown>
E       #11 0x560fe52db87f <unknown>
E       #12 0x560fe52bfc49 <unknown>
E       #13 0x560fe52dc405 <unknown>
E       #14 0x560fe52a54ff <unknown>
E       #15 0x560fe5300258 <unknown>
E       #16 0x560fe5300432 <unknown>
E       #17 0x560fe5311fa3 <unknown>
E       #18 0x7f135249caa4 <unknown>
E       #19 0x7f1352529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 03:53:10,483 - INFO - Starting test with Chrome browser
2025-10-05 03:53:10,483 - INFO - ====== WebDriver manager ======
2025-10-05 03:53:10,553 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:53:10,599 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:53:10,645 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 03:53:12,312 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-05 03:53:12,313 - INFO - Starting the test case for valid credentials
2025-10-05 03:53:12,472 - INFO - User enters the email-id
2025-10-05 03:53:14,164 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 03:55:15,853 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7deb9fb760fe7e2c08b66d5fd9b58abb")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7deb9fb760fe7e2c08b66d5fd9b58abb")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e49f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557bb2c24fba <unknown>
E       #1 0x557bb26a96d0 <unknown>
E       #2 0x557bb26fb2aa <unknown>
E       #3 0x557bb26fb541 <unknown>
E       #4 0x557bb27496c4 <unknown>
E       #5 0x557bb2720e5d <unknown>
E       #6 0x557bb2746b54 <unknown>
E       #7 0x557bb2720c03 <unknown>
E       #8 0x557bb26ed7a8 <unknown>
E       #9 0x557bb26ee421 <unknown>
E       #10 0x557bb2be9b28 <unknown>
E       #11 0x557bb2bed87f <unknown>
E       #12 0x557bb2bd1c49 <unknown>
E       #13 0x557bb2bee405 <unknown>
E       #14 0x557bb2bb74ff <unknown>
E       #15 0x557bb2c12258 <unknown>
E       #16 0x557bb2c12432 <unknown>
E       #17 0x557bb2c23fa3 <unknown>
E       #18 0x7ff7e649caa4 <unknown>
E       #19 0x7ff7e6529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 03:55:15,917 - INFO - Starting test with Chrome browser
2025-10-05 03:55:15,918 - INFO - ====== WebDriver manager ======
2025-10-05 03:55:15,982 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:55:16,200 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:55:16,246 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 03:55:17,665 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 03:57:19,416 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3260e4f822d4a880580a3c1fab4541c0")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3260e4f822d4a880580a3c1fab4541c0")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e4a020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a8f4937fba <unknown>
E       #1 0x55a8f43bc6d0 <unknown>
E       #2 0x55a8f440e2aa <unknown>
E       #3 0x55a8f440e541 <unknown>
E       #4 0x55a8f445c6c4 <unknown>
E       #5 0x55a8f4433e5d <unknown>
E       #6 0x55a8f4459b54 <unknown>
E       #7 0x55a8f4433c03 <unknown>
E       #8 0x55a8f44007a8 <unknown>
E       #9 0x55a8f4401421 <unknown>
E       #10 0x55a8f48fcb28 <unknown>
E       #11 0x55a8f490087f <unknown>
E       #12 0x55a8f48e4c49 <unknown>
E       #13 0x55a8f4901405 <unknown>
E       #14 0x55a8f48ca4ff <unknown>
E       #15 0x55a8f4925258 <unknown>
E       #16 0x55a8f4925432 <unknown>
E       #17 0x55a8f4936fa3 <unknown>
E       #18 0x7fc0d3e9caa4 <unknown>
E       #19 0x7fc0d3f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 03:57:19,485 - INFO - Starting test with Chrome browser
2025-10-05 03:57:19,485 - INFO - ====== WebDriver manager ======
2025-10-05 03:57:19,552 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:57:19,599 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:57:19,644 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 03:57:20,926 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 03:59:22,707 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2fee6352d9024ae62592305a74520737")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2fee6352d9024ae62592305a74520737")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e49da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563a6f169fba <unknown>
E       #1 0x563a6ebee6d0 <unknown>
E       #2 0x563a6ec402aa <unknown>
E       #3 0x563a6ec40541 <unknown>
E       #4 0x563a6ec8e6c4 <unknown>
E       #5 0x563a6ec65e5d <unknown>
E       #6 0x563a6ec8bb54 <unknown>
E       #7 0x563a6ec65c03 <unknown>
E       #8 0x563a6ec327a8 <unknown>
E       #9 0x563a6ec33421 <unknown>
E       #10 0x563a6f12eb28 <unknown>
E       #11 0x563a6f13287f <unknown>
E       #12 0x563a6f116c49 <unknown>
E       #13 0x563a6f133405 <unknown>
E       #14 0x563a6f0fc4ff <unknown>
E       #15 0x563a6f157258 <unknown>
E       #16 0x563a6f157432 <unknown>
E       #17 0x563a6f168fa3 <unknown>
E       #18 0x7f97ab89caa4 <unknown>
E       #19 0x7f97ab929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 03:59:22,775 - INFO - Starting test with Chrome browser
2025-10-05 03:59:22,775 - INFO - ====== WebDriver manager ======
2025-10-05 03:59:22,843 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:59:22,888 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 03:59:22,936 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 03:59:24,382 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 04:01:26,194 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="64ea9e123f7f85bcd0504da0f5ccdfc3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="64ea9e123f7f85bcd0504da0f5ccdfc3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e4a840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5601ffb6efba <unknown>
E       #1 0x5601ff5f36d0 <unknown>
E       #2 0x5601ff6452aa <unknown>
E       #3 0x5601ff645541 <unknown>
E       #4 0x5601ff6936c4 <unknown>
E       #5 0x5601ff66ae5d <unknown>
E       #6 0x5601ff690b54 <unknown>
E       #7 0x5601ff66ac03 <unknown>
E       #8 0x5601ff6377a8 <unknown>
E       #9 0x5601ff638421 <unknown>
E       #10 0x5601ffb33b28 <unknown>
E       #11 0x5601ffb3787f <unknown>
E       #12 0x5601ffb1bc49 <unknown>
E       #13 0x5601ffb38405 <unknown>
E       #14 0x5601ffb014ff <unknown>
E       #15 0x5601ffb5c258 <unknown>
E       #16 0x5601ffb5c432 <unknown>
E       #17 0x5601ffb6dfa3 <unknown>
E       #18 0x7f565e89caa4 <unknown>
E       #19 0x7f565e929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 04:01:26,259 - INFO - Starting test with Chrome browser
2025-10-05 04:01:26,259 - INFO - ====== WebDriver manager ======
2025-10-05 04:01:26,324 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:01:26,386 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:01:26,430 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 04:01:27,841 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 04:03:29,612 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="198966290e7b2fc13e61b8c4dabad6d6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="198966290e7b2fc13e61b8c4dabad6d6")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e4ab60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5559f456cfba <unknown>
E       #1 0x5559f3ff16d0 <unknown>
E       #2 0x5559f40432aa <unknown>
E       #3 0x5559f4043541 <unknown>
E       #4 0x5559f40916c4 <unknown>
E       #5 0x5559f4068e5d <unknown>
E       #6 0x5559f408eb54 <unknown>
E       #7 0x5559f4068c03 <unknown>
E       #8 0x5559f40357a8 <unknown>
E       #9 0x5559f4036421 <unknown>
E       #10 0x5559f4531b28 <unknown>
E       #11 0x5559f453587f <unknown>
E       #12 0x5559f4519c49 <unknown>
E       #13 0x5559f4536405 <unknown>
E       #14 0x5559f44ff4ff <unknown>
E       #15 0x5559f455a258 <unknown>
E       #16 0x5559f455a432 <unknown>
E       #17 0x5559f456bfa3 <unknown>
E       #18 0x7fa53969caa4 <unknown>
E       #19 0x7fa539729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 04:03:29,672 - INFO - Starting test with Chrome browser
2025-10-05 04:03:29,672 - INFO - ====== WebDriver manager ======
2025-10-05 04:03:29,737 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:03:29,784 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:03:29,828 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 04:03:31,040 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 04:05:34,536 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="642ce2361c84bf89af0a565dc7986d07")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="642ce2361c84bf89af0a565dc7986d07")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e4a8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x556957bbdfba <unknown>
E       #1 0x5569576426d0 <unknown>
E       #2 0x5569576942aa <unknown>
E       #3 0x556957694541 <unknown>
E       #4 0x5569576e26c4 <unknown>
E       #5 0x5569576b9e5d <unknown>
E       #6 0x5569576dfb54 <unknown>
E       #7 0x5569576b9c03 <unknown>
E       #8 0x5569576867a8 <unknown>
E       #9 0x556957687421 <unknown>
E       #10 0x556957b82b28 <unknown>
E       #11 0x556957b8687f <unknown>
E       #12 0x556957b6ac49 <unknown>
E       #13 0x556957b87405 <unknown>
E       #14 0x556957b504ff <unknown>
E       #15 0x556957bab258 <unknown>
E       #16 0x556957bab432 <unknown>
E       #17 0x556957bbcfa3 <unknown>
E       #18 0x7f923ba9caa4 <unknown>
E       #19 0x7f923bb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 04:05:34,596 - INFO - Starting test with Chrome browser
2025-10-05 04:05:34,596 - INFO - ====== WebDriver manager ======
2025-10-05 04:05:34,661 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:05:34,706 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:05:34,749 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 04:05:35,938 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 04:07:39,414 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0af616eaba91d0e992ea4ebdefe9b70b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0af616eaba91d0e992ea4ebdefe9b70b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e49da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d0c9f9dfba <unknown>
E       #1 0x55d0c9a226d0 <unknown>
E       #2 0x55d0c9a742aa <unknown>
E       #3 0x55d0c9a74541 <unknown>
E       #4 0x55d0c9ac26c4 <unknown>
E       #5 0x55d0c9a99e5d <unknown>
E       #6 0x55d0c9abfb54 <unknown>
E       #7 0x55d0c9a99c03 <unknown>
E       #8 0x55d0c9a667a8 <unknown>
E       #9 0x55d0c9a67421 <unknown>
E       #10 0x55d0c9f62b28 <unknown>
E       #11 0x55d0c9f6687f <unknown>
E       #12 0x55d0c9f4ac49 <unknown>
E       #13 0x55d0c9f67405 <unknown>
E       #14 0x55d0c9f304ff <unknown>
E       #15 0x55d0c9f8b258 <unknown>
E       #16 0x55d0c9f8b432 <unknown>
E       #17 0x55d0c9f9cfa3 <unknown>
E       #18 0x7f49e1e9caa4 <unknown>
E       #19 0x7f49e1f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 04:07:39,480 - INFO - Starting test with Chrome browser
2025-10-05 04:07:39,480 - INFO - ====== WebDriver manager ======
2025-10-05 04:07:39,545 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:07:39,591 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:07:39,636 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 04:07:41,142 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 04:09:44,603 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a3695b876b548fbdab1074d13efb0b92")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a3695b876b548fbdab1074d13efb0b92")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fa6d0e49940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c8d8a5bfba <unknown>
E       #1 0x55c8d84e06d0 <unknown>
E       #2 0x55c8d85322aa <unknown>
E       #3 0x55c8d8532541 <unknown>
E       #4 0x55c8d85806c4 <unknown>
E       #5 0x55c8d8557e5d <unknown>
E       #6 0x55c8d857db54 <unknown>
E       #7 0x55c8d8557c03 <unknown>
E       #8 0x55c8d85247a8 <unknown>
E       #9 0x55c8d8525421 <unknown>
E       #10 0x55c8d8a20b28 <unknown>
E       #11 0x55c8d8a2487f <unknown>
E       #12 0x55c8d8a08c49 <unknown>
E       #13 0x55c8d8a25405 <unknown>
E       #14 0x55c8d89ee4ff <unknown>
E       #15 0x55c8d8a49258 <unknown>
E       #16 0x55c8d8a49432 <unknown>
E       #17 0x55c8d8a5afa3 <unknown>
E       #18 0x7fb52489caa4 <unknown>
E       #19 0x7fb524929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-05 04:09:44,671 - INFO - Starting test with Chrome browser
2025-10-05 04:09:44,671 - INFO - ====== WebDriver manager ======
2025-10-05 04:09:44,742 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:09:44,791 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-05 04:09:44,841 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-05 04:09:45,612 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-05 04:11:49,441 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251005_034645/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562b0742ffba <unknown>
#1 0x562b06eb46d0 <unknown>
#2 0x562b06f062aa <unknown>
#3 0x562b06f06541 <unknown>
#4 0x562b06f546c4 <unknown>
#5 0x562b06f2be5d <unknown>
#6 0x562b06f51b54 <unknown>
#7 0x562b06f2bc03 <unknown>
#8 0x562b06ef87a8 <unknown>
#9 0x562b06ef9421 <unknown>
#10 0x562b073f4b28 <unknown>
#11 0x562b073f887f <unknown>
#12 0x562b073dcc49 <unknown>
#13 0x562b073f9405 <unknown>
#14 0x562b073c24ff <unknown>
#15 0x562b0741d258 <unknown>
#16 0x562b0741d432 <unknown>
#17 0x562b0742efa3 <unknown>
#18 0x7f3cc3e9caa4 <unknown>
#19 0x7f3cc3f29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5573a0918fba <unknown>
#1 0x5573a039d6d0 <unknown>
#2 0x5573a03ef2aa <unknown>
#3 0x5573a03ef541 <unknown>
#4 0x5573a043d6c4 <unknown>
#5 0x5573a0414e5d <unknown>
#6 0x5573a043ab54 <unknown>
#7 0x5573a0414c03 <unknown>
#8 0x5573a03e17a8 <unknown>
#9 0x5573a03e2421 <unknown>
#10 0x5573a08ddb28 <unknown>
#11 0x5573a08e187f <unknown>
#12 0x5573a08c5c49 <unknown>
#13 0x5573a08e2405 <unknown>
#14 0x5573a08ab4ff <unknown>
#15 0x5573a0906258 <unknown>
#16 0x5573a0906432 <unknown>
#17 0x5573a0917fa3 <unknown>
#18 0x7fb63189caa4 <unknown>
#19 0x7fb631929c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d0cb2e2fba <unknown>
#1 0x55d0cad676d0 <unknown>
#2 0x55d0cadb92aa <unknown>
#3 0x55d0cadb9541 <unknown>
#4 0x55d0cae076c4 <unknown>
#5 0x55d0caddee5d <unknown>
#6 0x55d0cae04b54 <unknown>
#7 0x55d0caddec03 <unknown>
#8 0x55d0cadab7a8 <unknown>
#9 0x55d0cadac421 <unknown>
#10 0x55d0cb2a7b28 <unknown>
#11 0x55d0cb2ab87f <unknown>
#12 0x55d0cb28fc49 <unknown>
#13 0x55d0cb2ac405 <unknown>
#14 0x55d0cb2754ff <unknown>
#15 0x55d0cb2d0258 <unknown>
#16 0x55d0cb2d0432 <unknown>
#17 0x55d0cb2e1fa3 <unknown>
#18 0x7fa4a789caa4 <unknown>
#19 0x7fa4a7929c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560fe5312fba <unknown>
#1 0x560fe4d976d0 <unknown>
#2 0x560fe4de92aa <unknown>
#3 0x560fe4de9541 <unknown>
#4 0x560fe4e376c4 <unknown>
#5 0x560fe4e0ee5d <unknown>
#6 0x560fe4e34b54 <unknown>
#7 0x560fe4e0ec03 <unknown>
#8 0x560fe4ddb7a8 <unknown>
#9 0x560fe4ddc421 <unknown>
#10 0x560fe52d7b28 <unknown>
#11 0x560fe52db87f <unknown>
#12 0x560fe52bfc49 <unknown>
#13 0x560fe52dc405 <unknown>
#14 0x560fe52a54ff <unknown>
#15 0x560fe5300258 <unknown>
#16 0x560fe5300432 <unknown>
#17 0x560fe5311fa3 <unknown>
#18 0x7f135249caa4 <unknown>
#19 0x7f1352529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557bb2c24fba <unknown>
#1 0x557bb26a96d0 <unknown>
#2 0x557bb26fb2aa <unknown>
#3 0x557bb26fb541 <unknown>
#4 0x557bb27496c4 <unknown>
#5 0x557bb2720e5d <unknown>
#6 0x557bb2746b54 <unknown>
#7 0x557bb2720c03 <unknown>
#8 0x557bb26ed7a8 <unknown>
#9 0x557bb26ee421 <unknown>
#10 0x557bb2be9b28 <unknown>
#11 0x557bb2bed87f <unknown>
#12 0x557bb2bd1c49 <unknown>
#13 0x557bb2bee405 <unknown>
#14 0x557bb2bb74ff <unknown>
#15 0x557bb2c12258 <unknown>
#16 0x557bb2c12432 <unknown>
#17 0x557bb2c23fa3 <unknown>
#18 0x7ff7e649caa4 <unknown>
#19 0x7ff7e6529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a8f4937fba <unknown>
#1 0x55a8f43bc6d0 <unknown>
#2 0x55a8f440e2aa <unknown>
#3 0x55a8f440e541 <unknown>
#4 0x55a8f445c6c4 <unknown>
#5 0x55a8f4433e5d <unknown>
#6 0x55a8f4459b54 <unknown>
#7 0x55a8f4433c03 <unknown>
#8 0x55a8f44007a8 <unknown>
#9 0x55a8f4401421 <unknown>
#10 0x55a8f48fcb28 <unknown>
#11 0x55a8f490087f <unknown>
#12 0x55a8f48e4c49 <unknown>
#13 0x55a8f4901405 <unknown>
#14 0x55a8f48ca4ff <unknown>
#15 0x55a8f4925258 <unknown>
#16 0x55a8f4925432 <unknown>
#17 0x55a8f4936fa3 <unknown>
#18 0x7fc0d3e9caa4 <unknown>
#19 0x7fc0d3f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563a6f169fba <unknown>
#1 0x563a6ebee6d0 <unknown>
#2 0x563a6ec402aa <unknown>
#3 0x563a6ec40541 <unknown>
#4 0x563a6ec8e6c4 <unknown>
#5 0x563a6ec65e5d <unknown>
#6 0x563a6ec8bb54 <unknown>
#7 0x563a6ec65c03 <unknown>
#8 0x563a6ec327a8 <unknown>
#9 0x563a6ec33421 <unknown>
#10 0x563a6f12eb28 <unknown>
#11 0x563a6f13287f <unknown>
#12 0x563a6f116c49 <unknown>
#13 0x563a6f133405 <unknown>
#14 0x563a6f0fc4ff <unknown>
#15 0x563a6f157258 <unknown>
#16 0x563a6f157432 <unknown>
#17 0x563a6f168fa3 <unknown>
#18 0x7f97ab89caa4 <unknown>
#19 0x7f97ab929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5601ffb6efba <unknown>
#1 0x5601ff5f36d0 <unknown>
#2 0x5601ff6452aa <unknown>
#3 0x5601ff645541 <unknown>
#4 0x5601ff6936c4 <unknown>
#5 0x5601ff66ae5d <unknown>
#6 0x5601ff690b54 <unknown>
#7 0x5601ff66ac03 <unknown>
#8 0x5601ff6377a8 <unknown>
#9 0x5601ff638421 <unknown>
#10 0x5601ffb33b28 <unknown>
#11 0x5601ffb3787f <unknown>
#12 0x5601ffb1bc49 <unknown>
#13 0x5601ffb38405 <unknown>
#14 0x5601ffb014ff <unknown>
#15 0x5601ffb5c258 <unknown>
#16 0x5601ffb5c432 <unknown>
#17 0x5601ffb6dfa3 <unknown>
#18 0x7f565e89caa4 <unknown>
#19 0x7f565e929c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5559f456cfba <unknown>
#1 0x5559f3ff16d0 <unknown>
#2 0x5559f40432aa <unknown>
#3 0x5559f4043541 <unknown>
#4 0x5559f40916c4 <unknown>
#5 0x5559f4068e5d <unknown>
#6 0x5559f408eb54 <unknown>
#7 0x5559f4068c03 <unknown>
#8 0x5559f40357a8 <unknown>
#9 0x5559f4036421 <unknown>
#10 0x5559f4531b28 <unknown>
#11 0x5559f453587f <unknown>
#12 0x5559f4519c49 <unknown>
#13 0x5559f4536405 <unknown>
#14 0x5559f44ff4ff <unknown>
#15 0x5559f455a258 <unknown>
#16 0x5559f455a432 <unknown>
#17 0x5559f456bfa3 <unknown>
#18 0x7fa53969caa4 <unknown>
#19 0x7fa539729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x556957bbdfba <unknown>
#1 0x5569576426d0 <unknown>
#2 0x5569576942aa <unknown>
#3 0x556957694541 <unknown>
#4 0x5569576e26c4 <unknown>
#5 0x5569576b9e5d <unknown>
#6 0x5569576dfb54 <unknown>
#7 0x5569576b9c03 <unknown>
#8 0x5569576867a8 <unknown>
#9 0x556957687421 <unknown>
#10 0x556957b82b28 <unknown>
#11 0x556957b8687f <unknown>
#12 0x556957b6ac49 <unknown>
#13 0x556957b87405 <unknown>
#14 0x556957b504ff <unknown>
#15 0x556957bab258 <unknown>
#16 0x556957bab432 <unknown>
#17 0x556957bbcfa3 <unknown>
#18 0x7f923ba9caa4 <unknown>
#19 0x7f923bb29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d0c9f9dfba <unknown>
#1 0x55d0c9a226d0 <unknown>
#2 0x55d0c9a742aa <unknown>
#3 0x55d0c9a74541 <unknown>
#4 0x55d0c9ac26c4 <unknown>
#5 0x55d0c9a99e5d <unknown>
#6 0x55d0c9abfb54 <unknown>
#7 0x55d0c9a99c03 <unknown>
#8 0x55d0c9a667a8 <unknown>
#9 0x55d0c9a67421 <unknown>
#10 0x55d0c9f62b28 <unknown>
#11 0x55d0c9f6687f <unknown>
#12 0x55d0c9f4ac49 <unknown>
#13 0x55d0c9f67405 <unknown>
#14 0x55d0c9f304ff <unknown>
#15 0x55d0c9f8b258 <unknown>
#16 0x55d0c9f8b432 <unknown>
#17 0x55d0c9f9cfa3 <unknown>
#18 0x7f49e1e9caa4 <unknown>
#19 0x7f49e1f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c8d8a5bfba <unknown>
#1 0x55c8d84e06d0 <unknown>
#2 0x55c8d85322aa <unknown>
#3 0x55c8d8532541 <unknown>
#4 0x55c8d85806c4 <unknown>
#5 0x55c8d8557e5d <unknown>
#6 0x55c8d857db54 <unknown>
#7 0x55c8d8557c03 <unknown>
#8 0x55c8d85247a8 <unknown>
#9 0x55c8d8525421 <unknown>
#10 0x55c8d8a20b28 <unknown>
#11 0x55c8d8a2487f <unknown>
#12 0x55c8d8a08c49 <unknown>
#13 0x55c8d8a25405 <unknown>
#14 0x55c8d89ee4ff <unknown>
#15 0x55c8d8a49258 <unknown>
#16 0x55c8d8a49432 <unknown>
#17 0x55c8d8a5afa3 <unknown>
#18 0x7fb52489caa4 <unknown>
#19 0x7fb524929c6c <unknown>
================== 12 failed, 7 passed in 1517.48s (0:25:17) ===================
--------------------------------------------
Test Run Finished: 2025-10-05 04:12:03
Duration: 1520 seconds
Status: FAILURE
Exit Code: 1
============================================
