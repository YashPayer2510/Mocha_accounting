========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-11 03:42:05
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'rerunfailures': '16.1', 'Faker': '37.11.0', 'xdist': '3.8.0', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, rerunfailures-16.1, Faker-37.11.0, xdist-3.8.0, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="61e0fa8521829cddc42ecccd8d0d6060")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="61e0fa8521829cddc42ecccd8d0d6060")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b6e38900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562958380fba <unknown>
E       #1 0x562957e056d0 <unknown>
E       #2 0x562957e572aa <unknown>
E       #3 0x562957e57541 <unknown>
E       #4 0x562957ea56c4 <unknown>
E       #5 0x562957e7ce5d <unknown>
E       #6 0x562957ea2b54 <unknown>
E       #7 0x562957e7cc03 <unknown>
E       #8 0x562957e497a8 <unknown>
E       #9 0x562957e4a421 <unknown>
E       #10 0x562958345b28 <unknown>
E       #11 0x56295834987f <unknown>
E       #12 0x56295832dc49 <unknown>
E       #13 0x56295834a405 <unknown>
E       #14 0x5629583134ff <unknown>
E       #15 0x56295836e258 <unknown>
E       #16 0x56295836e432 <unknown>
E       #17 0x56295837ffa3 <unknown>
E       #18 0x7fe2ae89caa4 <unknown>
E       #19 0x7fe2ae929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 03:42:08,494 - INFO - Test data loaded successfully.
2025-10-11 03:42:08,494 - INFO - Starting test with Chrome browser
2025-10-11 03:42:08,494 - INFO - ====== WebDriver manager ======
2025-10-11 03:42:10,181 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:42:10,217 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:42:10,251 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-11 03:42:10,251 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:42:10,350 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-11 03:42:10,355 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-11 03:42:10,355 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-11 03:42:10,415 - INFO - Driver downloading response is 200
2025-10-11 03:42:10,467 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:42:10,614 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-11 03:42:18,984 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-11 03:42:18,984 - INFO - Starting the test case for valid credentials
2025-10-11 03:42:19,291 - INFO - User enters the email-id
2025-10-11 03:42:20,872 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 03:44:22,545 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="492d21c12031832c23c746fc404a9c46")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="492d21c12031832c23c746fc404a9c46")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61dd940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558240d72fba <unknown>
E       #1 0x5582407f76d0 <unknown>
E       #2 0x5582408492aa <unknown>
E       #3 0x558240849541 <unknown>
E       #4 0x5582408976c4 <unknown>
E       #5 0x55824086ee5d <unknown>
E       #6 0x558240894b54 <unknown>
E       #7 0x55824086ec03 <unknown>
E       #8 0x55824083b7a8 <unknown>
E       #9 0x55824083c421 <unknown>
E       #10 0x558240d37b28 <unknown>
E       #11 0x558240d3b87f <unknown>
E       #12 0x558240d1fc49 <unknown>
E       #13 0x558240d3c405 <unknown>
E       #14 0x558240d054ff <unknown>
E       #15 0x558240d60258 <unknown>
E       #16 0x558240d60432 <unknown>
E       #17 0x558240d71fa3 <unknown>
E       #18 0x7f0ff7e9caa4 <unknown>
E       #19 0x7f0ff7f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 03:44:22,681 - INFO - Starting test with Chrome browser
2025-10-11 03:44:22,681 - INFO - ====== WebDriver manager ======
2025-10-11 03:44:22,747 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:44:22,785 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:44:22,837 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 03:44:24,198 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-11 03:44:24,198 - INFO - Starting the test case for valid credentials
2025-10-11 03:44:24,336 - INFO - User enters the email-id
2025-10-11 03:44:26,055 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 03:46:27,669 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f0028381f63870741f805f43ba5cedec")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f0028381f63870741f805f43ba5cedec")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b72b9f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564241e4afba <unknown>
E       #1 0x5642418cf6d0 <unknown>
E       #2 0x5642419212aa <unknown>
E       #3 0x564241921541 <unknown>
E       #4 0x56424196f6c4 <unknown>
E       #5 0x564241946e5d <unknown>
E       #6 0x56424196cb54 <unknown>
E       #7 0x564241946c03 <unknown>
E       #8 0x5642419137a8 <unknown>
E       #9 0x564241914421 <unknown>
E       #10 0x564241e0fb28 <unknown>
E       #11 0x564241e1387f <unknown>
E       #12 0x564241df7c49 <unknown>
E       #13 0x564241e14405 <unknown>
E       #14 0x564241ddd4ff <unknown>
E       #15 0x564241e38258 <unknown>
E       #16 0x564241e38432 <unknown>
E       #17 0x564241e49fa3 <unknown>
E       #18 0x7f4603a9caa4 <unknown>
E       #19 0x7f4603b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 03:46:27,730 - INFO - Starting test with Chrome browser
2025-10-11 03:46:27,730 - INFO - ====== WebDriver manager ======
2025-10-11 03:46:27,798 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:46:27,850 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:46:27,884 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 03:46:29,271 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-11 03:46:29,272 - INFO - Starting the test case for valid credentials
2025-10-11 03:46:29,411 - INFO - User enters the email-id
2025-10-11 03:46:31,082 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 03:48:32,721 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="66f88df32ff25d1608b4d9fd66844840")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="66f88df32ff25d1608b4d9fd66844840")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61dd9e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56061e1defba <unknown>
E       #1 0x56061dc636d0 <unknown>
E       #2 0x56061dcb52aa <unknown>
E       #3 0x56061dcb5541 <unknown>
E       #4 0x56061dd036c4 <unknown>
E       #5 0x56061dcdae5d <unknown>
E       #6 0x56061dd00b54 <unknown>
E       #7 0x56061dcdac03 <unknown>
E       #8 0x56061dca77a8 <unknown>
E       #9 0x56061dca8421 <unknown>
E       #10 0x56061e1a3b28 <unknown>
E       #11 0x56061e1a787f <unknown>
E       #12 0x56061e18bc49 <unknown>
E       #13 0x56061e1a8405 <unknown>
E       #14 0x56061e1714ff <unknown>
E       #15 0x56061e1cc258 <unknown>
E       #16 0x56061e1cc432 <unknown>
E       #17 0x56061e1ddfa3 <unknown>
E       #18 0x7f84a709caa4 <unknown>
E       #19 0x7f84a7129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 03:48:32,787 - INFO - Starting test with Chrome browser
2025-10-11 03:48:32,787 - INFO - ====== WebDriver manager ======
2025-10-11 03:48:32,852 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:48:32,886 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:48:32,921 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 03:48:34,425 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-11 03:48:34,426 - INFO - Starting the test case for valid credentials
2025-10-11 03:48:34,582 - INFO - User enters the email-id
2025-10-11 03:48:36,211 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 03:50:37,811 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="17b7dbb67277cbaa77e37ad359b1b51c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="17b7dbb67277cbaa77e37ad359b1b51c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61de020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ea584cdfba <unknown>
E       #1 0x55ea57f526d0 <unknown>
E       #2 0x55ea57fa42aa <unknown>
E       #3 0x55ea57fa4541 <unknown>
E       #4 0x55ea57ff26c4 <unknown>
E       #5 0x55ea57fc9e5d <unknown>
E       #6 0x55ea57fefb54 <unknown>
E       #7 0x55ea57fc9c03 <unknown>
E       #8 0x55ea57f967a8 <unknown>
E       #9 0x55ea57f97421 <unknown>
E       #10 0x55ea58492b28 <unknown>
E       #11 0x55ea5849687f <unknown>
E       #12 0x55ea5847ac49 <unknown>
E       #13 0x55ea58497405 <unknown>
E       #14 0x55ea584604ff <unknown>
E       #15 0x55ea584bb258 <unknown>
E       #16 0x55ea584bb432 <unknown>
E       #17 0x55ea584ccfa3 <unknown>
E       #18 0x7f103aa9caa4 <unknown>
E       #19 0x7f103ab29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 03:50:37,869 - INFO - Starting test with Chrome browser
2025-10-11 03:50:37,869 - INFO - ====== WebDriver manager ======
2025-10-11 03:50:37,934 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:50:37,970 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:50:38,004 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 03:50:39,383 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 03:52:41,116 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="812f64b954ca77fb5daf42cd10885d34")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="812f64b954ca77fb5daf42cd10885d34")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61de0c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55afbff6efba <unknown>
E       #1 0x55afbf9f36d0 <unknown>
E       #2 0x55afbfa452aa <unknown>
E       #3 0x55afbfa45541 <unknown>
E       #4 0x55afbfa936c4 <unknown>
E       #5 0x55afbfa6ae5d <unknown>
E       #6 0x55afbfa90b54 <unknown>
E       #7 0x55afbfa6ac03 <unknown>
E       #8 0x55afbfa377a8 <unknown>
E       #9 0x55afbfa38421 <unknown>
E       #10 0x55afbff33b28 <unknown>
E       #11 0x55afbff3787f <unknown>
E       #12 0x55afbff1bc49 <unknown>
E       #13 0x55afbff38405 <unknown>
E       #14 0x55afbff014ff <unknown>
E       #15 0x55afbff5c258 <unknown>
E       #16 0x55afbff5c432 <unknown>
E       #17 0x55afbff6dfa3 <unknown>
E       #18 0x7f40e7e9caa4 <unknown>
E       #19 0x7f40e7f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 03:52:41,173 - INFO - Starting test with Chrome browser
2025-10-11 03:52:41,173 - INFO - ====== WebDriver manager ======
2025-10-11 03:52:41,239 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:52:41,274 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:52:41,318 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 03:52:42,712 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 03:54:44,501 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="17d729c413df84f5ec285d2ce15a48c7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="17d729c413df84f5ec285d2ce15a48c7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61ddda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55888d7c6fba <unknown>
E       #1 0x55888d24b6d0 <unknown>
E       #2 0x55888d29d2aa <unknown>
E       #3 0x55888d29d541 <unknown>
E       #4 0x55888d2eb6c4 <unknown>
E       #5 0x55888d2c2e5d <unknown>
E       #6 0x55888d2e8b54 <unknown>
E       #7 0x55888d2c2c03 <unknown>
E       #8 0x55888d28f7a8 <unknown>
E       #9 0x55888d290421 <unknown>
E       #10 0x55888d78bb28 <unknown>
E       #11 0x55888d78f87f <unknown>
E       #12 0x55888d773c49 <unknown>
E       #13 0x55888d790405 <unknown>
E       #14 0x55888d7594ff <unknown>
E       #15 0x55888d7b4258 <unknown>
E       #16 0x55888d7b4432 <unknown>
E       #17 0x55888d7c5fa3 <unknown>
E       #18 0x7faa49c9caa4 <unknown>
E       #19 0x7faa49d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 03:54:44,557 - INFO - Starting test with Chrome browser
2025-10-11 03:54:44,557 - INFO - ====== WebDriver manager ======
2025-10-11 03:54:44,622 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:54:44,656 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:54:44,689 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 03:54:46,172 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 03:56:47,865 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="32eace461b2e675f40ecd72b33877dd7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="32eace461b2e675f40ecd72b33877dd7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61de8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564e77056fba <unknown>
E       #1 0x564e76adb6d0 <unknown>
E       #2 0x564e76b2d2aa <unknown>
E       #3 0x564e76b2d541 <unknown>
E       #4 0x564e76b7b6c4 <unknown>
E       #5 0x564e76b52e5d <unknown>
E       #6 0x564e76b78b54 <unknown>
E       #7 0x564e76b52c03 <unknown>
E       #8 0x564e76b1f7a8 <unknown>
E       #9 0x564e76b20421 <unknown>
E       #10 0x564e7701bb28 <unknown>
E       #11 0x564e7701f87f <unknown>
E       #12 0x564e77003c49 <unknown>
E       #13 0x564e77020405 <unknown>
E       #14 0x564e76fe94ff <unknown>
E       #15 0x564e77044258 <unknown>
E       #16 0x564e77044432 <unknown>
E       #17 0x564e77055fa3 <unknown>
E       #18 0x7ff76f89caa4 <unknown>
E       #19 0x7ff76f929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 03:56:47,930 - INFO - Starting test with Chrome browser
2025-10-11 03:56:47,931 - INFO - ====== WebDriver manager ======
2025-10-11 03:56:47,996 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:56:48,031 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:56:48,066 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 03:56:49,710 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 03:58:51,492 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0a415f106c854f9e1c900f3ce83312a4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0a415f106c854f9e1c900f3ce83312a4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61ddda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557ccf716fba <unknown>
E       #1 0x557ccf19b6d0 <unknown>
E       #2 0x557ccf1ed2aa <unknown>
E       #3 0x557ccf1ed541 <unknown>
E       #4 0x557ccf23b6c4 <unknown>
E       #5 0x557ccf212e5d <unknown>
E       #6 0x557ccf238b54 <unknown>
E       #7 0x557ccf212c03 <unknown>
E       #8 0x557ccf1df7a8 <unknown>
E       #9 0x557ccf1e0421 <unknown>
E       #10 0x557ccf6dbb28 <unknown>
E       #11 0x557ccf6df87f <unknown>
E       #12 0x557ccf6c3c49 <unknown>
E       #13 0x557ccf6e0405 <unknown>
E       #14 0x557ccf6a94ff <unknown>
E       #15 0x557ccf704258 <unknown>
E       #16 0x557ccf704432 <unknown>
E       #17 0x557ccf715fa3 <unknown>
E       #18 0x7fa981a9caa4 <unknown>
E       #19 0x7fa981b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 03:58:51,556 - INFO - Starting test with Chrome browser
2025-10-11 03:58:51,557 - INFO - ====== WebDriver manager ======
2025-10-11 03:58:51,622 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:58:51,655 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 03:58:51,688 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 03:58:53,003 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:00:56,617 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="55c5ac17407edc5204be7adb20051e78")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="55c5ac17407edc5204be7adb20051e78")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61de5c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e5a5c78fba <unknown>
E       #1 0x55e5a56fd6d0 <unknown>
E       #2 0x55e5a574f2aa <unknown>
E       #3 0x55e5a574f541 <unknown>
E       #4 0x55e5a579d6c4 <unknown>
E       #5 0x55e5a5774e5d <unknown>
E       #6 0x55e5a579ab54 <unknown>
E       #7 0x55e5a5774c03 <unknown>
E       #8 0x55e5a57417a8 <unknown>
E       #9 0x55e5a5742421 <unknown>
E       #10 0x55e5a5c3db28 <unknown>
E       #11 0x55e5a5c4187f <unknown>
E       #12 0x55e5a5c25c49 <unknown>
E       #13 0x55e5a5c42405 <unknown>
E       #14 0x55e5a5c0b4ff <unknown>
E       #15 0x55e5a5c66258 <unknown>
E       #16 0x55e5a5c66432 <unknown>
E       #17 0x55e5a5c77fa3 <unknown>
E       #18 0x7f8447e9caa4 <unknown>
E       #19 0x7f8447f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:00:57,675 - INFO - Starting test with Chrome browser
2025-10-11 04:00:57,676 - INFO - ====== WebDriver manager ======
2025-10-11 04:00:57,742 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:00:57,782 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:00:57,816 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:00:59,364 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:03:02,878 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="15283d81c1b0dcb58806cb7bf3e70cd7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="15283d81c1b0dcb58806cb7bf3e70cd7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61ddc60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56063d942fba <unknown>
E       #1 0x56063d3c76d0 <unknown>
E       #2 0x56063d4192aa <unknown>
E       #3 0x56063d419541 <unknown>
E       #4 0x56063d4676c4 <unknown>
E       #5 0x56063d43ee5d <unknown>
E       #6 0x56063d464b54 <unknown>
E       #7 0x56063d43ec03 <unknown>
E       #8 0x56063d40b7a8 <unknown>
E       #9 0x56063d40c421 <unknown>
E       #10 0x56063d907b28 <unknown>
E       #11 0x56063d90b87f <unknown>
E       #12 0x56063d8efc49 <unknown>
E       #13 0x56063d90c405 <unknown>
E       #14 0x56063d8d54ff <unknown>
E       #15 0x56063d930258 <unknown>
E       #16 0x56063d930432 <unknown>
E       #17 0x56063d941fa3 <unknown>
E       #18 0x7f5d86e9caa4 <unknown>
E       #19 0x7f5d86f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:03:02,944 - INFO - Starting test with Chrome browser
2025-10-11 04:03:02,945 - INFO - ====== WebDriver manager ======
2025-10-11 04:03:03,009 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:03:03,044 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:03:03,091 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:03:04,433 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:05:07,941 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="05a227a194eb9e7e4a84ce8bf1ccb9f9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="05a227a194eb9e7e4a84ce8bf1ccb9f9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61dd760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5653aaa3dfba <unknown>
E       #1 0x5653aa4c26d0 <unknown>
E       #2 0x5653aa5142aa <unknown>
E       #3 0x5653aa514541 <unknown>
E       #4 0x5653aa5626c4 <unknown>
E       #5 0x5653aa539e5d <unknown>
E       #6 0x5653aa55fb54 <unknown>
E       #7 0x5653aa539c03 <unknown>
E       #8 0x5653aa5067a8 <unknown>
E       #9 0x5653aa507421 <unknown>
E       #10 0x5653aaa02b28 <unknown>
E       #11 0x5653aaa0687f <unknown>
E       #12 0x5653aa9eac49 <unknown>
E       #13 0x5653aaa07405 <unknown>
E       #14 0x5653aa9d04ff <unknown>
E       #15 0x5653aaa2b258 <unknown>
E       #16 0x5653aaa2b432 <unknown>
E       #17 0x5653aaa3cfa3 <unknown>
E       #18 0x7f68b069caa4 <unknown>
E       #19 0x7f68b0729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:05:08,007 - INFO - Starting test with Chrome browser
2025-10-11 04:05:08,007 - INFO - ====== WebDriver manager ======
2025-10-11 04:05:08,073 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:05:08,107 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:05:08,142 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:05:10,117 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:07:13,582 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="76bba27639b670f8f23e0f60bb7f8a95")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
        login_page.disabled_click_login_button()
>       login_page.username_blank_validation(login_test_data)

tests/test_login.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:72: in username_blank_validation
    self.actions.wait_for_element(self.username_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="76bba27639b670f8f23e0f60bb7f8a95")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61dede0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557700c92fba <unknown>
E       #1 0x5577007176d0 <unknown>
E       #2 0x5577007692aa <unknown>
E       #3 0x557700769541 <unknown>
E       #4 0x5577007b76c4 <unknown>
E       #5 0x55770078ee5d <unknown>
E       #6 0x5577007b4b54 <unknown>
E       #7 0x55770078ec03 <unknown>
E       #8 0x55770075b7a8 <unknown>
E       #9 0x55770075c421 <unknown>
E       #10 0x557700c57b28 <unknown>
E       #11 0x557700c5b87f <unknown>
E       #12 0x557700c3fc49 <unknown>
E       #13 0x557700c5c405 <unknown>
E       #14 0x557700c254ff <unknown>
E       #15 0x557700c80258 <unknown>
E       #16 0x557700c80432 <unknown>
E       #17 0x557700c91fa3 <unknown>
E       #18 0x7fa83129caa4 <unknown>
E       #19 0x7fa831329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:07:13,646 - INFO - Starting test with Chrome browser
2025-10-11 04:07:13,647 - INFO - ====== WebDriver manager ======
2025-10-11 04:07:13,712 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:07:13,746 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:07:13,781 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:07:15,269 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:09:17,127 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="843d766168835d7c8649b44ebedfcea5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
        login_page.click_password()
        login_page.disabled_click_login_button()
>       login_page.password_blank_validation(login_test_data)

tests/test_login.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:78: in password_blank_validation
    self.actions.wait_for_element(self.password_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="843d766168835d7c8649b44ebedfcea5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61df4c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e3a2e1cfba <unknown>
E       #1 0x55e3a28a16d0 <unknown>
E       #2 0x55e3a28f32aa <unknown>
E       #3 0x55e3a28f3541 <unknown>
E       #4 0x55e3a29416c4 <unknown>
E       #5 0x55e3a2918e5d <unknown>
E       #6 0x55e3a293eb54 <unknown>
E       #7 0x55e3a2918c03 <unknown>
E       #8 0x55e3a28e57a8 <unknown>
E       #9 0x55e3a28e6421 <unknown>
E       #10 0x55e3a2de1b28 <unknown>
E       #11 0x55e3a2de587f <unknown>
E       #12 0x55e3a2dc9c49 <unknown>
E       #13 0x55e3a2de6405 <unknown>
E       #14 0x55e3a2daf4ff <unknown>
E       #15 0x55e3a2e0a258 <unknown>
E       #16 0x55e3a2e0a432 <unknown>
E       #17 0x55e3a2e1bfa3 <unknown>
E       #18 0x7f57b2e9caa4 <unknown>
E       #19 0x7f57b2f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:09:17,193 - INFO - Starting test with Chrome browser
2025-10-11 04:09:17,193 - INFO - ====== WebDriver manager ======
2025-10-11 04:09:17,258 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:09:17,292 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:09:17,324 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:09:18,675 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:11:22,231 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2a4d72a645b5bab451ca08c14f3d9632")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2a4d72a645b5bab451ca08c14f3d9632")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61de480>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56094d0effba <unknown>
E       #1 0x56094cb746d0 <unknown>
E       #2 0x56094cbc62aa <unknown>
E       #3 0x56094cbc6541 <unknown>
E       #4 0x56094cc146c4 <unknown>
E       #5 0x56094cbebe5d <unknown>
E       #6 0x56094cc11b54 <unknown>
E       #7 0x56094cbebc03 <unknown>
E       #8 0x56094cbb87a8 <unknown>
E       #9 0x56094cbb9421 <unknown>
E       #10 0x56094d0b4b28 <unknown>
E       #11 0x56094d0b887f <unknown>
E       #12 0x56094d09cc49 <unknown>
E       #13 0x56094d0b9405 <unknown>
E       #14 0x56094d0824ff <unknown>
E       #15 0x56094d0dd258 <unknown>
E       #16 0x56094d0dd432 <unknown>
E       #17 0x56094d0eefa3 <unknown>
E       #18 0x7ffbf7c9caa4 <unknown>
E       #19 0x7ffbf7d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:11:22,296 - INFO - Starting test with Chrome browser
2025-10-11 04:11:22,296 - INFO - ====== WebDriver manager ======
2025-10-11 04:11:22,361 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:11:22,414 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:11:22,448 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:11:23,831 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:13:25,711 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bfdb1443aa0146e413e1625a4f6f704c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="bfdb1443aa0146e413e1625a4f6f704c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61deca0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563db6ed1fba <unknown>
E       #1 0x563db69566d0 <unknown>
E       #2 0x563db69a82aa <unknown>
E       #3 0x563db69a8541 <unknown>
E       #4 0x563db69f66c4 <unknown>
E       #5 0x563db69cde5d <unknown>
E       #6 0x563db69f3b54 <unknown>
E       #7 0x563db69cdc03 <unknown>
E       #8 0x563db699a7a8 <unknown>
E       #9 0x563db699b421 <unknown>
E       #10 0x563db6e96b28 <unknown>
E       #11 0x563db6e9a87f <unknown>
E       #12 0x563db6e7ec49 <unknown>
E       #13 0x563db6e9b405 <unknown>
E       #14 0x563db6e644ff <unknown>
E       #15 0x563db6ebf258 <unknown>
E       #16 0x563db6ebf432 <unknown>
E       #17 0x563db6ed0fa3 <unknown>
E       #18 0x7fa5c2c9caa4 <unknown>
E       #19 0x7fa5c2d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:13:25,777 - INFO - Starting test with Chrome browser
2025-10-11 04:13:25,777 - INFO - ====== WebDriver manager ======
2025-10-11 04:13:25,842 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:13:25,879 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:13:25,915 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:13:27,229 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:15:29,082 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f859358f772427fe18e1ed6e5d67f8d2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f859358f772427fe18e1ed6e5d67f8d2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61df2e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5642a8c1cfba <unknown>
E       #1 0x5642a86a16d0 <unknown>
E       #2 0x5642a86f32aa <unknown>
E       #3 0x5642a86f3541 <unknown>
E       #4 0x5642a87416c4 <unknown>
E       #5 0x5642a8718e5d <unknown>
E       #6 0x5642a873eb54 <unknown>
E       #7 0x5642a8718c03 <unknown>
E       #8 0x5642a86e57a8 <unknown>
E       #9 0x5642a86e6421 <unknown>
E       #10 0x5642a8be1b28 <unknown>
E       #11 0x5642a8be587f <unknown>
E       #12 0x5642a8bc9c49 <unknown>
E       #13 0x5642a8be6405 <unknown>
E       #14 0x5642a8baf4ff <unknown>
E       #15 0x5642a8c0a258 <unknown>
E       #16 0x5642a8c0a432 <unknown>
E       #17 0x5642a8c1bfa3 <unknown>
E       #18 0x7fd8fc09caa4 <unknown>
E       #19 0x7fd8fc129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:15:29,139 - INFO - Starting test with Chrome browser
2025-10-11 04:15:29,139 - INFO - ====== WebDriver manager ======
2025-10-11 04:15:29,203 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:15:29,237 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:15:29,271 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:15:30,623 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:17:32,548 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b12b8f225e2134864f86970107d9d83a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b12b8f225e2134864f86970107d9d83a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61df600>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558867b31fba <unknown>
E       #1 0x5588675b66d0 <unknown>
E       #2 0x5588676082aa <unknown>
E       #3 0x558867608541 <unknown>
E       #4 0x5588676566c4 <unknown>
E       #5 0x55886762de5d <unknown>
E       #6 0x558867653b54 <unknown>
E       #7 0x55886762dc03 <unknown>
E       #8 0x5588675fa7a8 <unknown>
E       #9 0x5588675fb421 <unknown>
E       #10 0x558867af6b28 <unknown>
E       #11 0x558867afa87f <unknown>
E       #12 0x558867adec49 <unknown>
E       #13 0x558867afb405 <unknown>
E       #14 0x558867ac44ff <unknown>
E       #15 0x558867b1f258 <unknown>
E       #16 0x558867b1f432 <unknown>
E       #17 0x558867b30fa3 <unknown>
E       #18 0x7eff3de9caa4 <unknown>
E       #19 0x7eff3df29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:17:32,646 - INFO - Starting test with Chrome browser
2025-10-11 04:17:32,646 - INFO - ====== WebDriver manager ======
2025-10-11 04:17:32,711 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:17:32,747 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:17:32,781 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:17:34,381 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:19:36,290 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6b205a78c07f4a60def2fbae744de03e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6b205a78c07f4a60def2fbae744de03e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff2b61df880>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5589afd03fba <unknown>
E       #1 0x5589af7886d0 <unknown>
E       #2 0x5589af7da2aa <unknown>
E       #3 0x5589af7da541 <unknown>
E       #4 0x5589af8286c4 <unknown>
E       #5 0x5589af7ffe5d <unknown>
E       #6 0x5589af825b54 <unknown>
E       #7 0x5589af7ffc03 <unknown>
E       #8 0x5589af7cc7a8 <unknown>
E       #9 0x5589af7cd421 <unknown>
E       #10 0x5589afcc8b28 <unknown>
E       #11 0x5589afccc87f <unknown>
E       #12 0x5589afcb0c49 <unknown>
E       #13 0x5589afccd405 <unknown>
E       #14 0x5589afc964ff <unknown>
E       #15 0x5589afcf1258 <unknown>
E       #16 0x5589afcf1432 <unknown>
E       #17 0x5589afd02fa3 <unknown>
E       #18 0x7fe80a09caa4 <unknown>
E       #19 0x7fe80a129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-11 04:19:36,354 - INFO - Starting test with Chrome browser
2025-10-11 04:19:36,354 - INFO - ====== WebDriver manager ======
2025-10-11 04:19:36,419 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:19:36,453 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-11 04:19:36,485 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-11 04:19:37,847 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-11 04:21:39,780 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251011_034208/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562958380fba <unknown>
#1 0x562957e056d0 <unknown>
#2 0x562957e572aa <unknown>
#3 0x562957e57541 <unknown>
#4 0x562957ea56c4 <unknown>
#5 0x562957e7ce5d <unknown>
#6 0x562957ea2b54 <unknown>
#7 0x562957e7cc03 <unknown>
#8 0x562957e497a8 <unknown>
#9 0x562957e4a421 <unknown>
#10 0x562958345b28 <unknown>
#11 0x56295834987f <unknown>
#12 0x56295832dc49 <unknown>
#13 0x56295834a405 <unknown>
#14 0x5629583134ff <unknown>
#15 0x56295836e258 <unknown>
#16 0x56295836e432 <unknown>
#17 0x56295837ffa3 <unknown>
#18 0x7fe2ae89caa4 <unknown>
#19 0x7fe2ae929c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558240d72fba <unknown>
#1 0x5582407f76d0 <unknown>
#2 0x5582408492aa <unknown>
#3 0x558240849541 <unknown>
#4 0x5582408976c4 <unknown>
#5 0x55824086ee5d <unknown>
#6 0x558240894b54 <unknown>
#7 0x55824086ec03 <unknown>
#8 0x55824083b7a8 <unknown>
#9 0x55824083c421 <unknown>
#10 0x558240d37b28 <unknown>
#11 0x558240d3b87f <unknown>
#12 0x558240d1fc49 <unknown>
#13 0x558240d3c405 <unknown>
#14 0x558240d054ff <unknown>
#15 0x558240d60258 <unknown>
#16 0x558240d60432 <unknown>
#17 0x558240d71fa3 <unknown>
#18 0x7f0ff7e9caa4 <unknown>
#19 0x7f0ff7f29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564241e4afba <unknown>
#1 0x5642418cf6d0 <unknown>
#2 0x5642419212aa <unknown>
#3 0x564241921541 <unknown>
#4 0x56424196f6c4 <unknown>
#5 0x564241946e5d <unknown>
#6 0x56424196cb54 <unknown>
#7 0x564241946c03 <unknown>
#8 0x5642419137a8 <unknown>
#9 0x564241914421 <unknown>
#10 0x564241e0fb28 <unknown>
#11 0x564241e1387f <unknown>
#12 0x564241df7c49 <unknown>
#13 0x564241e14405 <unknown>
#14 0x564241ddd4ff <unknown>
#15 0x564241e38258 <unknown>
#16 0x564241e38432 <unknown>
#17 0x564241e49fa3 <unknown>
#18 0x7f4603a9caa4 <unknown>
#19 0x7f4603b29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56061e1defba <unknown>
#1 0x56061dc636d0 <unknown>
#2 0x56061dcb52aa <unknown>
#3 0x56061dcb5541 <unknown>
#4 0x56061dd036c4 <unknown>
#5 0x56061dcdae5d <unknown>
#6 0x56061dd00b54 <unknown>
#7 0x56061dcdac03 <unknown>
#8 0x56061dca77a8 <unknown>
#9 0x56061dca8421 <unknown>
#10 0x56061e1a3b28 <unknown>
#11 0x56061e1a787f <unknown>
#12 0x56061e18bc49 <unknown>
#13 0x56061e1a8405 <unknown>
#14 0x56061e1714ff <unknown>
#15 0x56061e1cc258 <unknown>
#16 0x56061e1cc432 <unknown>
#17 0x56061e1ddfa3 <unknown>
#18 0x7f84a709caa4 <unknown>
#19 0x7f84a7129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ea584cdfba <unknown>
#1 0x55ea57f526d0 <unknown>
#2 0x55ea57fa42aa <unknown>
#3 0x55ea57fa4541 <unknown>
#4 0x55ea57ff26c4 <unknown>
#5 0x55ea57fc9e5d <unknown>
#6 0x55ea57fefb54 <unknown>
#7 0x55ea57fc9c03 <unknown>
#8 0x55ea57f967a8 <unknown>
#9 0x55ea57f97421 <unknown>
#10 0x55ea58492b28 <unknown>
#11 0x55ea5849687f <unknown>
#12 0x55ea5847ac49 <unknown>
#13 0x55ea58497405 <unknown>
#14 0x55ea584604ff <unknown>
#15 0x55ea584bb258 <unknown>
#16 0x55ea584bb432 <unknown>
#17 0x55ea584ccfa3 <unknown>
#18 0x7f103aa9caa4 <unknown>
#19 0x7f103ab29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55afbff6efba <unknown>
#1 0x55afbf9f36d0 <unknown>
#2 0x55afbfa452aa <unknown>
#3 0x55afbfa45541 <unknown>
#4 0x55afbfa936c4 <unknown>
#5 0x55afbfa6ae5d <unknown>
#6 0x55afbfa90b54 <unknown>
#7 0x55afbfa6ac03 <unknown>
#8 0x55afbfa377a8 <unknown>
#9 0x55afbfa38421 <unknown>
#10 0x55afbff33b28 <unknown>
#11 0x55afbff3787f <unknown>
#12 0x55afbff1bc49 <unknown>
#13 0x55afbff38405 <unknown>
#14 0x55afbff014ff <unknown>
#15 0x55afbff5c258 <unknown>
#16 0x55afbff5c432 <unknown>
#17 0x55afbff6dfa3 <unknown>
#18 0x7f40e7e9caa4 <unknown>
#19 0x7f40e7f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55888d7c6fba <unknown>
#1 0x55888d24b6d0 <unknown>
#2 0x55888d29d2aa <unknown>
#3 0x55888d29d541 <unknown>
#4 0x55888d2eb6c4 <unknown>
#5 0x55888d2c2e5d <unknown>
#6 0x55888d2e8b54 <unknown>
#7 0x55888d2c2c03 <unknown>
#8 0x55888d28f7a8 <unknown>
#9 0x55888d290421 <unknown>
#10 0x55888d78bb28 <unknown>
#11 0x55888d78f87f <unknown>
#12 0x55888d773c49 <unknown>
#13 0x55888d790405 <unknown>
#14 0x55888d7594ff <unknown>
#15 0x55888d7b4258 <unknown>
#16 0x55888d7b4432 <unknown>
#17 0x55888d7c5fa3 <unknown>
#18 0x7faa49c9caa4 <unknown>
#19 0x7faa49d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564e77056fba <unknown>
#1 0x564e76adb6d0 <unknown>
#2 0x564e76b2d2aa <unknown>
#3 0x564e76b2d541 <unknown>
#4 0x564e76b7b6c4 <unknown>
#5 0x564e76b52e5d <unknown>
#6 0x564e76b78b54 <unknown>
#7 0x564e76b52c03 <unknown>
#8 0x564e76b1f7a8 <unknown>
#9 0x564e76b20421 <unknown>
#10 0x564e7701bb28 <unknown>
#11 0x564e7701f87f <unknown>
#12 0x564e77003c49 <unknown>
#13 0x564e77020405 <unknown>
#14 0x564e76fe94ff <unknown>
#15 0x564e77044258 <unknown>
#16 0x564e77044432 <unknown>
#17 0x564e77055fa3 <unknown>
#18 0x7ff76f89caa4 <unknown>
#19 0x7ff76f929c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557ccf716fba <unknown>
#1 0x557ccf19b6d0 <unknown>
#2 0x557ccf1ed2aa <unknown>
#3 0x557ccf1ed541 <unknown>
#4 0x557ccf23b6c4 <unknown>
#5 0x557ccf212e5d <unknown>
#6 0x557ccf238b54 <unknown>
#7 0x557ccf212c03 <unknown>
#8 0x557ccf1df7a8 <unknown>
#9 0x557ccf1e0421 <unknown>
#10 0x557ccf6dbb28 <unknown>
#11 0x557ccf6df87f <unknown>
#12 0x557ccf6c3c49 <unknown>
#13 0x557ccf6e0405 <unknown>
#14 0x557ccf6a94ff <unknown>
#15 0x557ccf704258 <unknown>
#16 0x557ccf704432 <unknown>
#17 0x557ccf715fa3 <unknown>
#18 0x7fa981a9caa4 <unknown>
#19 0x7fa981b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e5a5c78fba <unknown>
#1 0x55e5a56fd6d0 <unknown>
#2 0x55e5a574f2aa <unknown>
#3 0x55e5a574f541 <unknown>
#4 0x55e5a579d6c4 <unknown>
#5 0x55e5a5774e5d <unknown>
#6 0x55e5a579ab54 <unknown>
#7 0x55e5a5774c03 <unknown>
#8 0x55e5a57417a8 <unknown>
#9 0x55e5a5742421 <unknown>
#10 0x55e5a5c3db28 <unknown>
#11 0x55e5a5c4187f <unknown>
#12 0x55e5a5c25c49 <unknown>
#13 0x55e5a5c42405 <unknown>
#14 0x55e5a5c0b4ff <unknown>
#15 0x55e5a5c66258 <unknown>
#16 0x55e5a5c66432 <unknown>
#17 0x55e5a5c77fa3 <unknown>
#18 0x7f8447e9caa4 <unknown>
#19 0x7f8447f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56063d942fba <unknown>
#1 0x56063d3c76d0 <unknown>
#2 0x56063d4192aa <unknown>
#3 0x56063d419541 <unknown>
#4 0x56063d4676c4 <unknown>
#5 0x56063d43ee5d <unknown>
#6 0x56063d464b54 <unknown>
#7 0x56063d43ec03 <unknown>
#8 0x56063d40b7a8 <unknown>
#9 0x56063d40c421 <unknown>
#10 0x56063d907b28 <unknown>
#11 0x56063d90b87f <unknown>
#12 0x56063d8efc49 <unknown>
#13 0x56063d90c405 <unknown>
#14 0x56063d8d54ff <unknown>
#15 0x56063d930258 <unknown>
#16 0x56063d930432 <unknown>
#17 0x56063d941fa3 <unknown>
#18 0x7f5d86e9caa4 <unknown>
#19 0x7f5d86f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5653aaa3dfba <unknown>
#1 0x5653aa4c26d0 <unknown>
#2 0x5653aa5142aa <unknown>
#3 0x5653aa514541 <unknown>
#4 0x5653aa5626c4 <unknown>
#5 0x5653aa539e5d <unknown>
#6 0x5653aa55fb54 <unknown>
#7 0x5653aa539c03 <unknown>
#8 0x5653aa5067a8 <unknown>
#9 0x5653aa507421 <unknown>
#10 0x5653aaa02b28 <unknown>
#11 0x5653aaa0687f <unknown>
#12 0x5653aa9eac49 <unknown>
#13 0x5653aaa07405 <unknown>
#14 0x5653aa9d04ff <unknown>
#15 0x5653aaa2b258 <unknown>
#16 0x5653aaa2b432 <unknown>
#17 0x5653aaa3cfa3 <unknown>
#18 0x7f68b069caa4 <unknown>
#19 0x7f68b0729c6c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557700c92fba <unknown>
#1 0x5577007176d0 <unknown>
#2 0x5577007692aa <unknown>
#3 0x557700769541 <unknown>
#4 0x5577007b76c4 <unknown>
#5 0x55770078ee5d <unknown>
#6 0x5577007b4b54 <unknown>
#7 0x55770078ec03 <unknown>
#8 0x55770075b7a8 <unknown>
#9 0x55770075c421 <unknown>
#10 0x557700c57b28 <unknown>
#11 0x557700c5b87f <unknown>
#12 0x557700c3fc49 <unknown>
#13 0x557700c5c405 <unknown>
#14 0x557700c254ff <unknown>
#15 0x557700c80258 <unknown>
#16 0x557700c80432 <unknown>
#17 0x557700c91fa3 <unknown>
#18 0x7fa83129caa4 <unknown>
#19 0x7fa831329c6c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e3a2e1cfba <unknown>
#1 0x55e3a28a16d0 <unknown>
#2 0x55e3a28f32aa <unknown>
#3 0x55e3a28f3541 <unknown>
#4 0x55e3a29416c4 <unknown>
#5 0x55e3a2918e5d <unknown>
#6 0x55e3a293eb54 <unknown>
#7 0x55e3a2918c03 <unknown>
#8 0x55e3a28e57a8 <unknown>
#9 0x55e3a28e6421 <unknown>
#10 0x55e3a2de1b28 <unknown>
#11 0x55e3a2de587f <unknown>
#12 0x55e3a2dc9c49 <unknown>
#13 0x55e3a2de6405 <unknown>
#14 0x55e3a2daf4ff <unknown>
#15 0x55e3a2e0a258 <unknown>
#16 0x55e3a2e0a432 <unknown>
#17 0x55e3a2e1bfa3 <unknown>
#18 0x7f57b2e9caa4 <unknown>
#19 0x7f57b2f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56094d0effba <unknown>
#1 0x56094cb746d0 <unknown>
#2 0x56094cbc62aa <unknown>
#3 0x56094cbc6541 <unknown>
#4 0x56094cc146c4 <unknown>
#5 0x56094cbebe5d <unknown>
#6 0x56094cc11b54 <unknown>
#7 0x56094cbebc03 <unknown>
#8 0x56094cbb87a8 <unknown>
#9 0x56094cbb9421 <unknown>
#10 0x56094d0b4b28 <unknown>
#11 0x56094d0b887f <unknown>
#12 0x56094d09cc49 <unknown>
#13 0x56094d0b9405 <unknown>
#14 0x56094d0824ff <unknown>
#15 0x56094d0dd258 <unknown>
#16 0x56094d0dd432 <unknown>
#17 0x56094d0eefa3 <unknown>
#18 0x7ffbf7c9caa4 <unknown>
#19 0x7ffbf7d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563db6ed1fba <unknown>
#1 0x563db69566d0 <unknown>
#2 0x563db69a82aa <unknown>
#3 0x563db69a8541 <unknown>
#4 0x563db69f66c4 <unknown>
#5 0x563db69cde5d <unknown>
#6 0x563db69f3b54 <unknown>
#7 0x563db69cdc03 <unknown>
#8 0x563db699a7a8 <unknown>
#9 0x563db699b421 <unknown>
#10 0x563db6e96b28 <unknown>
#11 0x563db6e9a87f <unknown>
#12 0x563db6e7ec49 <unknown>
#13 0x563db6e9b405 <unknown>
#14 0x563db6e644ff <unknown>
#15 0x563db6ebf258 <unknown>
#16 0x563db6ebf432 <unknown>
#17 0x563db6ed0fa3 <unknown>
#18 0x7fa5c2c9caa4 <unknown>
#19 0x7fa5c2d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5642a8c1cfba <unknown>
#1 0x5642a86a16d0 <unknown>
#2 0x5642a86f32aa <unknown>
#3 0x5642a86f3541 <unknown>
#4 0x5642a87416c4 <unknown>
#5 0x5642a8718e5d <unknown>
#6 0x5642a873eb54 <unknown>
#7 0x5642a8718c03 <unknown>
#8 0x5642a86e57a8 <unknown>
#9 0x5642a86e6421 <unknown>
#10 0x5642a8be1b28 <unknown>
#11 0x5642a8be587f <unknown>
#12 0x5642a8bc9c49 <unknown>
#13 0x5642a8be6405 <unknown>
#14 0x5642a8baf4ff <unknown>
#15 0x5642a8c0a258 <unknown>
#16 0x5642a8c0a432 <unknown>
#17 0x5642a8c1bfa3 <unknown>
#18 0x7fd8fc09caa4 <unknown>
#19 0x7fd8fc129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558867b31fba <unknown>
#1 0x5588675b66d0 <unknown>
#2 0x5588676082aa <unknown>
#3 0x558867608541 <unknown>
#4 0x5588676566c4 <unknown>
#5 0x55886762de5d <unknown>
#6 0x558867653b54 <unknown>
#7 0x55886762dc03 <unknown>
#8 0x5588675fa7a8 <unknown>
#9 0x5588675fb421 <unknown>
#10 0x558867af6b28 <unknown>
#11 0x558867afa87f <unknown>
#12 0x558867adec49 <unknown>
#13 0x558867afb405 <unknown>
#14 0x558867ac44ff <unknown>
#15 0x558867b1f258 <unknown>
#16 0x558867b1f432 <unknown>
#17 0x558867b30fa3 <unknown>
#18 0x7eff3de9caa4 <unknown>
#19 0x7eff3df29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5589afd03fba <unknown>
#1 0x5589af7886d0 <unknown>
#2 0x5589af7da2aa <unknown>
#3 0x5589af7da541 <unknown>
#4 0x5589af8286c4 <unknown>
#5 0x5589af7ffe5d <unknown>
#6 0x5589af825b54 <unknown>
#7 0x5589af7ffc03 <unknown>
#8 0x5589af7cc7a8 <unknown>
#9 0x5589af7cd421 <unknown>
#10 0x5589afcc8b28 <unknown>
#11 0x5589afccc87f <unknown>
#12 0x5589afcb0c49 <unknown>
#13 0x5589afccd405 <unknown>
#14 0x5589afc964ff <unknown>
#15 0x5589afcf1258 <unknown>
#16 0x5589afcf1432 <unknown>
#17 0x5589afd02fa3 <unknown>
#18 0x7fe80a09caa4 <unknown>
#19 0x7fe80a129c6c <unknown>
======================= 19 failed in 2371.44s (0:39:31) ========================
--------------------------------------------
Test Run Finished: 2025-10-11 04:21:39
Duration: 2374 seconds
Status: FAILURE
Exit Code: 1
============================================
