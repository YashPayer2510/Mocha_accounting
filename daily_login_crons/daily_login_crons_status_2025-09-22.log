========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-22 03:50:32
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'Faker': '37.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: Faker-37.8.0, rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="87c2a0072ee3b43e3107e632b26469c5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="87c2a0072ee3b43e3107e632b26469c5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf0bcc900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55be2d1e3cba <unknown>
E       #1 0x55be2cc588e0 <unknown>
E       #2 0x55be2ccaa580 <unknown>
E       #3 0x55be2ccaa771 <unknown>
E       #4 0x55be2ccf8864 <unknown>
E       #5 0x55be2ccd009d <unknown>
E       #6 0x55be2ccf5c63 <unknown>
E       #7 0x55be2cccfe43 <unknown>
E       #8 0x55be2cc9c9a8 <unknown>
E       #9 0x55be2cc9d621 <unknown>
E       #10 0x55be2d1a78b8 <unknown>
E       #11 0x55be2d1ab5e2 <unknown>
E       #12 0x55be2d18e683 <unknown>
E       #13 0x55be2d1ac135 <unknown>
E       #14 0x55be2d17380f <unknown>
E       #15 0x55be2d1d04c8 <unknown>
E       #16 0x55be2d1d06a2 <unknown>
E       #17 0x55be2d1e2dc3 <unknown>
E       #18 0x7f409de9caa4 <unknown>
E       #19 0x7f409df29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 03:50:35,602 - INFO - Test data loaded successfully.
2025-09-22 03:50:35,602 - INFO - Starting test with Chrome browser
2025-09-22 03:50:35,603 - INFO - ====== WebDriver manager ======
2025-09-22 03:50:35,794 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:50:35,854 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:50:35,888 - INFO - There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
2025-09-22 03:50:35,888 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:50:35,994 - INFO - WebDriver version 140.0.7339.185 selected
2025-09-22 03:50:35,998 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-22 03:50:35,998 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-22 03:50:36,044 - INFO - Driver downloading response is 200
2025-09-22 03:50:36,102 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:50:36,250 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
2025-09-22 03:50:39,068 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.185 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-22 03:50:39,069 - INFO - Starting the test case for valid credentials
2025-09-22 03:50:39,331 - INFO - User enters the email-id
2025-09-22 03:50:41,002 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 03:52:42,672 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f713baa86758efc234590ccacf5a0a1d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f713baa86758efc234590ccacf5a0a1d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097d8a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563ad70f2cba <unknown>
E       #1 0x563ad6b678e0 <unknown>
E       #2 0x563ad6bb9580 <unknown>
E       #3 0x563ad6bb9771 <unknown>
E       #4 0x563ad6c07864 <unknown>
E       #5 0x563ad6bdf09d <unknown>
E       #6 0x563ad6c04c63 <unknown>
E       #7 0x563ad6bdee43 <unknown>
E       #8 0x563ad6bab9a8 <unknown>
E       #9 0x563ad6bac621 <unknown>
E       #10 0x563ad70b68b8 <unknown>
E       #11 0x563ad70ba5e2 <unknown>
E       #12 0x563ad709d683 <unknown>
E       #13 0x563ad70bb135 <unknown>
E       #14 0x563ad708280f <unknown>
E       #15 0x563ad70df4c8 <unknown>
E       #16 0x563ad70df6a2 <unknown>
E       #17 0x563ad70f1dc3 <unknown>
E       #18 0x7f87af29caa4 <unknown>
E       #19 0x7f87af329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 03:52:42,776 - INFO - Starting test with Chrome browser
2025-09-22 03:52:42,777 - INFO - ====== WebDriver manager ======
2025-09-22 03:52:42,841 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:52:42,877 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:52:42,972 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 03:52:44,640 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-22 03:52:44,640 - INFO - Starting the test case for valid credentials
2025-09-22 03:52:44,785 - INFO - User enters the email-id
2025-09-22 03:52:46,457 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 03:54:48,053 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ba99a377dc7e554ebf791c285e79e030")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ba99a377dc7e554ebf791c285e79e030")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf24763e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f01eec6cba <unknown>
E       #1 0x55f01e93b8e0 <unknown>
E       #2 0x55f01e98d580 <unknown>
E       #3 0x55f01e98d771 <unknown>
E       #4 0x55f01e9db864 <unknown>
E       #5 0x55f01e9b309d <unknown>
E       #6 0x55f01e9d8c63 <unknown>
E       #7 0x55f01e9b2e43 <unknown>
E       #8 0x55f01e97f9a8 <unknown>
E       #9 0x55f01e980621 <unknown>
E       #10 0x55f01ee8a8b8 <unknown>
E       #11 0x55f01ee8e5e2 <unknown>
E       #12 0x55f01ee71683 <unknown>
E       #13 0x55f01ee8f135 <unknown>
E       #14 0x55f01ee5680f <unknown>
E       #15 0x55f01eeb34c8 <unknown>
E       #16 0x55f01eeb36a2 <unknown>
E       #17 0x55f01eec5dc3 <unknown>
E       #18 0x7f497ac9caa4 <unknown>
E       #19 0x7f497ad29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 03:54:48,118 - INFO - Starting test with Chrome browser
2025-09-22 03:54:48,118 - INFO - ====== WebDriver manager ======
2025-09-22 03:54:48,185 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:54:48,220 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:54:48,255 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 03:54:49,796 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-22 03:54:49,796 - INFO - Starting the test case for valid credentials
2025-09-22 03:54:49,941 - INFO - User enters the email-id
2025-09-22 03:54:51,595 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 03:56:53,279 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="93a76a546c3bbdce5436d63efbc51a6a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="93a76a546c3bbdce5436d63efbc51a6a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097d6c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55fde4be4cba <unknown>
E       #1 0x55fde46598e0 <unknown>
E       #2 0x55fde46ab580 <unknown>
E       #3 0x55fde46ab771 <unknown>
E       #4 0x55fde46f9864 <unknown>
E       #5 0x55fde46d109d <unknown>
E       #6 0x55fde46f6c63 <unknown>
E       #7 0x55fde46d0e43 <unknown>
E       #8 0x55fde469d9a8 <unknown>
E       #9 0x55fde469e621 <unknown>
E       #10 0x55fde4ba88b8 <unknown>
E       #11 0x55fde4bac5e2 <unknown>
E       #12 0x55fde4b8f683 <unknown>
E       #13 0x55fde4bad135 <unknown>
E       #14 0x55fde4b7480f <unknown>
E       #15 0x55fde4bd14c8 <unknown>
E       #16 0x55fde4bd16a2 <unknown>
E       #17 0x55fde4be3dc3 <unknown>
E       #18 0x7f048ea9caa4 <unknown>
E       #19 0x7f048eb29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 03:56:53,345 - INFO - Starting test with Chrome browser
2025-09-22 03:56:53,345 - INFO - ====== WebDriver manager ======
2025-09-22 03:56:53,411 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:56:53,452 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:56:53,486 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 03:56:55,049 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-22 03:56:55,050 - INFO - Starting the test case for valid credentials
2025-09-22 03:56:55,213 - INFO - User enters the email-id
2025-09-22 03:56:56,852 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 03:58:58,483 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e1f73d6010a64ae45f04787f590732fa")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e1f73d6010a64ae45f04787f590732fa")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097df80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e9414b7cba <unknown>
E       #1 0x55e940f2c8e0 <unknown>
E       #2 0x55e940f7e580 <unknown>
E       #3 0x55e940f7e771 <unknown>
E       #4 0x55e940fcc864 <unknown>
E       #5 0x55e940fa409d <unknown>
E       #6 0x55e940fc9c63 <unknown>
E       #7 0x55e940fa3e43 <unknown>
E       #8 0x55e940f709a8 <unknown>
E       #9 0x55e940f71621 <unknown>
E       #10 0x55e94147b8b8 <unknown>
E       #11 0x55e94147f5e2 <unknown>
E       #12 0x55e941462683 <unknown>
E       #13 0x55e941480135 <unknown>
E       #14 0x55e94144780f <unknown>
E       #15 0x55e9414a44c8 <unknown>
E       #16 0x55e9414a46a2 <unknown>
E       #17 0x55e9414b6dc3 <unknown>
E       #18 0x7fe78da9caa4 <unknown>
E       #19 0x7fe78db29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 03:58:58,548 - INFO - Starting test with Chrome browser
2025-09-22 03:58:58,548 - INFO - ====== WebDriver manager ======
2025-09-22 03:58:58,615 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:58:58,650 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 03:58:58,686 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 03:59:00,156 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 04:01:01,954 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="dd78edb686178bea167f4a63daf86029")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="dd78edb686178bea167f4a63daf86029")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097e020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5639a589ecba <unknown>
E       #1 0x5639a53138e0 <unknown>
E       #2 0x5639a5365580 <unknown>
E       #3 0x5639a5365771 <unknown>
E       #4 0x5639a53b3864 <unknown>
E       #5 0x5639a538b09d <unknown>
E       #6 0x5639a53b0c63 <unknown>
E       #7 0x5639a538ae43 <unknown>
E       #8 0x5639a53579a8 <unknown>
E       #9 0x5639a5358621 <unknown>
E       #10 0x5639a58628b8 <unknown>
E       #11 0x5639a58665e2 <unknown>
E       #12 0x5639a5849683 <unknown>
E       #13 0x5639a5867135 <unknown>
E       #14 0x5639a582e80f <unknown>
E       #15 0x5639a588b4c8 <unknown>
E       #16 0x5639a588b6a2 <unknown>
E       #17 0x5639a589ddc3 <unknown>
E       #18 0x7fe95829caa4 <unknown>
E       #19 0x7fe958329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 04:01:03,012 - INFO - Starting test with Chrome browser
2025-09-22 04:01:03,013 - INFO - ====== WebDriver manager ======
2025-09-22 04:01:03,079 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:01:03,113 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:01:03,146 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 04:01:04,716 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 04:03:06,529 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="820dfd5d57f47c4743e5518ac59ee750")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="820dfd5d57f47c4743e5518ac59ee750")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097dda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b27e820cba <unknown>
E       #1 0x55b27e2958e0 <unknown>
E       #2 0x55b27e2e7580 <unknown>
E       #3 0x55b27e2e7771 <unknown>
E       #4 0x55b27e335864 <unknown>
E       #5 0x55b27e30d09d <unknown>
E       #6 0x55b27e332c63 <unknown>
E       #7 0x55b27e30ce43 <unknown>
E       #8 0x55b27e2d99a8 <unknown>
E       #9 0x55b27e2da621 <unknown>
E       #10 0x55b27e7e48b8 <unknown>
E       #11 0x55b27e7e85e2 <unknown>
E       #12 0x55b27e7cb683 <unknown>
E       #13 0x55b27e7e9135 <unknown>
E       #14 0x55b27e7b080f <unknown>
E       #15 0x55b27e80d4c8 <unknown>
E       #16 0x55b27e80d6a2 <unknown>
E       #17 0x55b27e81fdc3 <unknown>
E       #18 0x7faf38a9caa4 <unknown>
E       #19 0x7faf38b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 04:03:06,595 - INFO - Starting test with Chrome browser
2025-09-22 04:03:06,595 - INFO - ====== WebDriver manager ======
2025-09-22 04:03:06,661 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:03:06,697 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:03:06,731 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 04:03:08,230 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 04:05:10,031 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="751154f8882c9e0ef3dca7cc3867d2c1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="751154f8882c9e0ef3dca7cc3867d2c1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097e840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560a42ec5cba <unknown>
E       #1 0x560a4293a8e0 <unknown>
E       #2 0x560a4298c580 <unknown>
E       #3 0x560a4298c771 <unknown>
E       #4 0x560a429da864 <unknown>
E       #5 0x560a429b209d <unknown>
E       #6 0x560a429d7c63 <unknown>
E       #7 0x560a429b1e43 <unknown>
E       #8 0x560a4297e9a8 <unknown>
E       #9 0x560a4297f621 <unknown>
E       #10 0x560a42e898b8 <unknown>
E       #11 0x560a42e8d5e2 <unknown>
E       #12 0x560a42e70683 <unknown>
E       #13 0x560a42e8e135 <unknown>
E       #14 0x560a42e5580f <unknown>
E       #15 0x560a42eb24c8 <unknown>
E       #16 0x560a42eb26a2 <unknown>
E       #17 0x560a42ec4dc3 <unknown>
E       #18 0x7f80ade9caa4 <unknown>
E       #19 0x7f80adf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 04:05:10,096 - INFO - Starting test with Chrome browser
2025-09-22 04:05:10,097 - INFO - ====== WebDriver manager ======
2025-09-22 04:05:10,161 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:05:10,198 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:05:10,232 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 04:05:11,737 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 04:07:13,516 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="31c65145682afa23bf340f1b6ed958aa")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="31c65145682afa23bf340f1b6ed958aa")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097eb60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a0bdcf9cba <unknown>
E       #1 0x55a0bd76e8e0 <unknown>
E       #2 0x55a0bd7c0580 <unknown>
E       #3 0x55a0bd7c0771 <unknown>
E       #4 0x55a0bd80e864 <unknown>
E       #5 0x55a0bd7e609d <unknown>
E       #6 0x55a0bd80bc63 <unknown>
E       #7 0x55a0bd7e5e43 <unknown>
E       #8 0x55a0bd7b29a8 <unknown>
E       #9 0x55a0bd7b3621 <unknown>
E       #10 0x55a0bdcbd8b8 <unknown>
E       #11 0x55a0bdcc15e2 <unknown>
E       #12 0x55a0bdca4683 <unknown>
E       #13 0x55a0bdcc2135 <unknown>
E       #14 0x55a0bdc8980f <unknown>
E       #15 0x55a0bdce64c8 <unknown>
E       #16 0x55a0bdce66a2 <unknown>
E       #17 0x55a0bdcf8dc3 <unknown>
E       #18 0x7fbebd69caa4 <unknown>
E       #19 0x7fbebd729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 04:07:13,582 - INFO - Starting test with Chrome browser
2025-09-22 04:07:13,582 - INFO - ====== WebDriver manager ======
2025-09-22 04:07:13,647 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:07:13,680 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:07:13,716 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 04:07:15,147 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 04:09:18,645 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="00a492c7404b24dd4caef7f3ac62ca1b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="00a492c7404b24dd4caef7f3ac62ca1b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097e8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56075495ecba <unknown>
E       #1 0x5607543d38e0 <unknown>
E       #2 0x560754425580 <unknown>
E       #3 0x560754425771 <unknown>
E       #4 0x560754473864 <unknown>
E       #5 0x56075444b09d <unknown>
E       #6 0x560754470c63 <unknown>
E       #7 0x56075444ae43 <unknown>
E       #8 0x5607544179a8 <unknown>
E       #9 0x560754418621 <unknown>
E       #10 0x5607549228b8 <unknown>
E       #11 0x5607549265e2 <unknown>
E       #12 0x560754909683 <unknown>
E       #13 0x560754927135 <unknown>
E       #14 0x5607548ee80f <unknown>
E       #15 0x56075494b4c8 <unknown>
E       #16 0x56075494b6a2 <unknown>
E       #17 0x56075495ddc3 <unknown>
E       #18 0x7f136769caa4 <unknown>
E       #19 0x7f1367729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 04:09:18,704 - INFO - Starting test with Chrome browser
2025-09-22 04:09:18,705 - INFO - ====== WebDriver manager ======
2025-09-22 04:09:18,769 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:09:18,807 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:09:18,846 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 04:09:19,727 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 04:11:23,484 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a13dea730dac1a1d3454c7d65c0680b4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a13dea730dac1a1d3454c7d65c0680b4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097dda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564d4c0f3cba <unknown>
E       #1 0x564d4bb688e0 <unknown>
E       #2 0x564d4bbba580 <unknown>
E       #3 0x564d4bbba771 <unknown>
E       #4 0x564d4bc08864 <unknown>
E       #5 0x564d4bbe009d <unknown>
E       #6 0x564d4bc05c63 <unknown>
E       #7 0x564d4bbdfe43 <unknown>
E       #8 0x564d4bbac9a8 <unknown>
E       #9 0x564d4bbad621 <unknown>
E       #10 0x564d4c0b78b8 <unknown>
E       #11 0x564d4c0bb5e2 <unknown>
E       #12 0x564d4c09e683 <unknown>
E       #13 0x564d4c0bc135 <unknown>
E       #14 0x564d4c08380f <unknown>
E       #15 0x564d4c0e04c8 <unknown>
E       #16 0x564d4c0e06a2 <unknown>
E       #17 0x564d4c0f2dc3 <unknown>
E       #18 0x7fc34da9caa4 <unknown>
E       #19 0x7fc34db29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 04:11:24,541 - INFO - Starting test with Chrome browser
2025-09-22 04:11:24,541 - INFO - ====== WebDriver manager ======
2025-09-22 04:11:24,607 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:11:24,642 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:11:24,675 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 04:11:26,580 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 04:13:30,073 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="418c622ec396f34cbd722f46a73cec2a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="418c622ec396f34cbd722f46a73cec2a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7efcf097d940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5597abb66cba <unknown>
E       #1 0x5597ab5db8e0 <unknown>
E       #2 0x5597ab62d580 <unknown>
E       #3 0x5597ab62d771 <unknown>
E       #4 0x5597ab67b864 <unknown>
E       #5 0x5597ab65309d <unknown>
E       #6 0x5597ab678c63 <unknown>
E       #7 0x5597ab652e43 <unknown>
E       #8 0x5597ab61f9a8 <unknown>
E       #9 0x5597ab620621 <unknown>
E       #10 0x5597abb2a8b8 <unknown>
E       #11 0x5597abb2e5e2 <unknown>
E       #12 0x5597abb11683 <unknown>
E       #13 0x5597abb2f135 <unknown>
E       #14 0x5597abaf680f <unknown>
E       #15 0x5597abb534c8 <unknown>
E       #16 0x5597abb536a2 <unknown>
E       #17 0x5597abb65dc3 <unknown>
E       #18 0x7faf7849caa4 <unknown>
E       #19 0x7faf78529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-22 04:13:31,131 - INFO - Starting test with Chrome browser
2025-09-22 04:13:31,131 - INFO - ====== WebDriver manager ======
2025-09-22 04:13:31,197 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:13:31,230 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-22 04:13:31,266 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-22 04:13:32,935 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-22 04:15:36,406 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250922_035035/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55be2d1e3cba <unknown>
#1 0x55be2cc588e0 <unknown>
#2 0x55be2ccaa580 <unknown>
#3 0x55be2ccaa771 <unknown>
#4 0x55be2ccf8864 <unknown>
#5 0x55be2ccd009d <unknown>
#6 0x55be2ccf5c63 <unknown>
#7 0x55be2cccfe43 <unknown>
#8 0x55be2cc9c9a8 <unknown>
#9 0x55be2cc9d621 <unknown>
#10 0x55be2d1a78b8 <unknown>
#11 0x55be2d1ab5e2 <unknown>
#12 0x55be2d18e683 <unknown>
#13 0x55be2d1ac135 <unknown>
#14 0x55be2d17380f <unknown>
#15 0x55be2d1d04c8 <unknown>
#16 0x55be2d1d06a2 <unknown>
#17 0x55be2d1e2dc3 <unknown>
#18 0x7f409de9caa4 <unknown>
#19 0x7f409df29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563ad70f2cba <unknown>
#1 0x563ad6b678e0 <unknown>
#2 0x563ad6bb9580 <unknown>
#3 0x563ad6bb9771 <unknown>
#4 0x563ad6c07864 <unknown>
#5 0x563ad6bdf09d <unknown>
#6 0x563ad6c04c63 <unknown>
#7 0x563ad6bdee43 <unknown>
#8 0x563ad6bab9a8 <unknown>
#9 0x563ad6bac621 <unknown>
#10 0x563ad70b68b8 <unknown>
#11 0x563ad70ba5e2 <unknown>
#12 0x563ad709d683 <unknown>
#13 0x563ad70bb135 <unknown>
#14 0x563ad708280f <unknown>
#15 0x563ad70df4c8 <unknown>
#16 0x563ad70df6a2 <unknown>
#17 0x563ad70f1dc3 <unknown>
#18 0x7f87af29caa4 <unknown>
#19 0x7f87af329c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f01eec6cba <unknown>
#1 0x55f01e93b8e0 <unknown>
#2 0x55f01e98d580 <unknown>
#3 0x55f01e98d771 <unknown>
#4 0x55f01e9db864 <unknown>
#5 0x55f01e9b309d <unknown>
#6 0x55f01e9d8c63 <unknown>
#7 0x55f01e9b2e43 <unknown>
#8 0x55f01e97f9a8 <unknown>
#9 0x55f01e980621 <unknown>
#10 0x55f01ee8a8b8 <unknown>
#11 0x55f01ee8e5e2 <unknown>
#12 0x55f01ee71683 <unknown>
#13 0x55f01ee8f135 <unknown>
#14 0x55f01ee5680f <unknown>
#15 0x55f01eeb34c8 <unknown>
#16 0x55f01eeb36a2 <unknown>
#17 0x55f01eec5dc3 <unknown>
#18 0x7f497ac9caa4 <unknown>
#19 0x7f497ad29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55fde4be4cba <unknown>
#1 0x55fde46598e0 <unknown>
#2 0x55fde46ab580 <unknown>
#3 0x55fde46ab771 <unknown>
#4 0x55fde46f9864 <unknown>
#5 0x55fde46d109d <unknown>
#6 0x55fde46f6c63 <unknown>
#7 0x55fde46d0e43 <unknown>
#8 0x55fde469d9a8 <unknown>
#9 0x55fde469e621 <unknown>
#10 0x55fde4ba88b8 <unknown>
#11 0x55fde4bac5e2 <unknown>
#12 0x55fde4b8f683 <unknown>
#13 0x55fde4bad135 <unknown>
#14 0x55fde4b7480f <unknown>
#15 0x55fde4bd14c8 <unknown>
#16 0x55fde4bd16a2 <unknown>
#17 0x55fde4be3dc3 <unknown>
#18 0x7f048ea9caa4 <unknown>
#19 0x7f048eb29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e9414b7cba <unknown>
#1 0x55e940f2c8e0 <unknown>
#2 0x55e940f7e580 <unknown>
#3 0x55e940f7e771 <unknown>
#4 0x55e940fcc864 <unknown>
#5 0x55e940fa409d <unknown>
#6 0x55e940fc9c63 <unknown>
#7 0x55e940fa3e43 <unknown>
#8 0x55e940f709a8 <unknown>
#9 0x55e940f71621 <unknown>
#10 0x55e94147b8b8 <unknown>
#11 0x55e94147f5e2 <unknown>
#12 0x55e941462683 <unknown>
#13 0x55e941480135 <unknown>
#14 0x55e94144780f <unknown>
#15 0x55e9414a44c8 <unknown>
#16 0x55e9414a46a2 <unknown>
#17 0x55e9414b6dc3 <unknown>
#18 0x7fe78da9caa4 <unknown>
#19 0x7fe78db29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5639a589ecba <unknown>
#1 0x5639a53138e0 <unknown>
#2 0x5639a5365580 <unknown>
#3 0x5639a5365771 <unknown>
#4 0x5639a53b3864 <unknown>
#5 0x5639a538b09d <unknown>
#6 0x5639a53b0c63 <unknown>
#7 0x5639a538ae43 <unknown>
#8 0x5639a53579a8 <unknown>
#9 0x5639a5358621 <unknown>
#10 0x5639a58628b8 <unknown>
#11 0x5639a58665e2 <unknown>
#12 0x5639a5849683 <unknown>
#13 0x5639a5867135 <unknown>
#14 0x5639a582e80f <unknown>
#15 0x5639a588b4c8 <unknown>
#16 0x5639a588b6a2 <unknown>
#17 0x5639a589ddc3 <unknown>
#18 0x7fe95829caa4 <unknown>
#19 0x7fe958329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b27e820cba <unknown>
#1 0x55b27e2958e0 <unknown>
#2 0x55b27e2e7580 <unknown>
#3 0x55b27e2e7771 <unknown>
#4 0x55b27e335864 <unknown>
#5 0x55b27e30d09d <unknown>
#6 0x55b27e332c63 <unknown>
#7 0x55b27e30ce43 <unknown>
#8 0x55b27e2d99a8 <unknown>
#9 0x55b27e2da621 <unknown>
#10 0x55b27e7e48b8 <unknown>
#11 0x55b27e7e85e2 <unknown>
#12 0x55b27e7cb683 <unknown>
#13 0x55b27e7e9135 <unknown>
#14 0x55b27e7b080f <unknown>
#15 0x55b27e80d4c8 <unknown>
#16 0x55b27e80d6a2 <unknown>
#17 0x55b27e81fdc3 <unknown>
#18 0x7faf38a9caa4 <unknown>
#19 0x7faf38b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560a42ec5cba <unknown>
#1 0x560a4293a8e0 <unknown>
#2 0x560a4298c580 <unknown>
#3 0x560a4298c771 <unknown>
#4 0x560a429da864 <unknown>
#5 0x560a429b209d <unknown>
#6 0x560a429d7c63 <unknown>
#7 0x560a429b1e43 <unknown>
#8 0x560a4297e9a8 <unknown>
#9 0x560a4297f621 <unknown>
#10 0x560a42e898b8 <unknown>
#11 0x560a42e8d5e2 <unknown>
#12 0x560a42e70683 <unknown>
#13 0x560a42e8e135 <unknown>
#14 0x560a42e5580f <unknown>
#15 0x560a42eb24c8 <unknown>
#16 0x560a42eb26a2 <unknown>
#17 0x560a42ec4dc3 <unknown>
#18 0x7f80ade9caa4 <unknown>
#19 0x7f80adf29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a0bdcf9cba <unknown>
#1 0x55a0bd76e8e0 <unknown>
#2 0x55a0bd7c0580 <unknown>
#3 0x55a0bd7c0771 <unknown>
#4 0x55a0bd80e864 <unknown>
#5 0x55a0bd7e609d <unknown>
#6 0x55a0bd80bc63 <unknown>
#7 0x55a0bd7e5e43 <unknown>
#8 0x55a0bd7b29a8 <unknown>
#9 0x55a0bd7b3621 <unknown>
#10 0x55a0bdcbd8b8 <unknown>
#11 0x55a0bdcc15e2 <unknown>
#12 0x55a0bdca4683 <unknown>
#13 0x55a0bdcc2135 <unknown>
#14 0x55a0bdc8980f <unknown>
#15 0x55a0bdce64c8 <unknown>
#16 0x55a0bdce66a2 <unknown>
#17 0x55a0bdcf8dc3 <unknown>
#18 0x7fbebd69caa4 <unknown>
#19 0x7fbebd729c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56075495ecba <unknown>
#1 0x5607543d38e0 <unknown>
#2 0x560754425580 <unknown>
#3 0x560754425771 <unknown>
#4 0x560754473864 <unknown>
#5 0x56075444b09d <unknown>
#6 0x560754470c63 <unknown>
#7 0x56075444ae43 <unknown>
#8 0x5607544179a8 <unknown>
#9 0x560754418621 <unknown>
#10 0x5607549228b8 <unknown>
#11 0x5607549265e2 <unknown>
#12 0x560754909683 <unknown>
#13 0x560754927135 <unknown>
#14 0x5607548ee80f <unknown>
#15 0x56075494b4c8 <unknown>
#16 0x56075494b6a2 <unknown>
#17 0x56075495ddc3 <unknown>
#18 0x7f136769caa4 <unknown>
#19 0x7f1367729c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564d4c0f3cba <unknown>
#1 0x564d4bb688e0 <unknown>
#2 0x564d4bbba580 <unknown>
#3 0x564d4bbba771 <unknown>
#4 0x564d4bc08864 <unknown>
#5 0x564d4bbe009d <unknown>
#6 0x564d4bc05c63 <unknown>
#7 0x564d4bbdfe43 <unknown>
#8 0x564d4bbac9a8 <unknown>
#9 0x564d4bbad621 <unknown>
#10 0x564d4c0b78b8 <unknown>
#11 0x564d4c0bb5e2 <unknown>
#12 0x564d4c09e683 <unknown>
#13 0x564d4c0bc135 <unknown>
#14 0x564d4c08380f <unknown>
#15 0x564d4c0e04c8 <unknown>
#16 0x564d4c0e06a2 <unknown>
#17 0x564d4c0f2dc3 <unknown>
#18 0x7fc34da9caa4 <unknown>
#19 0x7fc34db29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5597abb66cba <unknown>
#1 0x5597ab5db8e0 <unknown>
#2 0x5597ab62d580 <unknown>
#3 0x5597ab62d771 <unknown>
#4 0x5597ab67b864 <unknown>
#5 0x5597ab65309d <unknown>
#6 0x5597ab678c63 <unknown>
#7 0x5597ab652e43 <unknown>
#8 0x5597ab61f9a8 <unknown>
#9 0x5597ab620621 <unknown>
#10 0x5597abb2a8b8 <unknown>
#11 0x5597abb2e5e2 <unknown>
#12 0x5597abb11683 <unknown>
#13 0x5597abb2f135 <unknown>
#14 0x5597abaf680f <unknown>
#15 0x5597abb534c8 <unknown>
#16 0x5597abb536a2 <unknown>
#17 0x5597abb65dc3 <unknown>
#18 0x7faf7849caa4 <unknown>
#19 0x7faf78529c3c <unknown>
================== 12 failed, 7 passed in 1515.10s (0:25:15) ===================
--------------------------------------------
Test Run Finished: 2025-09-22 04:15:50
Duration: 1518 seconds
Status: FAILURE
Exit Code: 1
============================================
