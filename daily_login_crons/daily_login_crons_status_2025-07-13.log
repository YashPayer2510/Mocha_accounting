========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-13 04:11:45
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.5/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.5', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'rerunfailures': '15.1', 'Faker': '37.4.0', 'xdist': '3.8.0', 'html': '4.1.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: rerunfailures-15.1, Faker-37.4.0, xdist-3.8.0, html-4.1.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8c9011b70886df65622a9151162609ad")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a39541940>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55a9a49e7556 \\u003Cunknown>\\n#18 0x7fadef49caa4 \\u003Cunknown>\\n#19 0x7fadef529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55a9a49e823a <unknown>
E       #1 0x55a9a4492ab0 <unknown>
E       #2 0x55a9a4499748 <unknown>
E       #3 0x55a9a449c2c7 <unknown>
E       #4 0x55a9a4530fde <unknown>
E       #5 0x55a9a450a1a2 <unknown>
E       #6 0x55a9a452ffee <unknown>
E       #7 0x55a9a4509f73 <unknown>
E       #8 0x55a9a44d6aeb <unknown>
E       #9 0x55a9a44d7751 <unknown>
E       #10 0x55a9a49acb4b <unknown>
E       #11 0x55a9a49b0929 <unknown>
E       #12 0x55a9a4993929 <unknown>
E       #13 0x55a9a49b14e8 <unknown>
E       #14 0x55a9a49780df <unknown>
E       #15 0x55a9a49d58e8 <unknown>
E       #16 0x55a9a49d5ac6 <unknown>
E       #17 0x55a9a49e7556 <unknown>
E       #18 0x7fadef49caa4 <unknown>
E       #19 0x7fadef529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:11:47,937 - INFO - Test data loaded successfully.
2025-07-13 04:11:47,937 - INFO - Starting test with Chrome browser
2025-07-13 04:11:47,937 - INFO - ====== WebDriver manager ======
2025-07-13 04:11:49,191 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:11:49,234 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:11:49,244 - INFO - There is no [linux64] chromedriver "138.0.7204.94" for browser google-chrome "138.0.7204" in cache
2025-07-13 04:11:49,245 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:11:49,296 - INFO - WebDriver version 138.0.7204.94 selected
2025-07-13 04:11:49,299 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
2025-07-13 04:11:49,299 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
2025-07-13 04:11:49,342 - INFO - Driver downloading response is 200
2025-07-13 04:11:49,408 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:11:49,529 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94]
2025-07-13 04:11:56,699 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "138.0.7204.94" for browser google-chrome "138.0.7204" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 138.0.7204.94 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-13 04:11:56,699 - INFO - Starting the test case for valid credentials
2025-07-13 04:11:57,037 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:11:57,801 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6b3382e91375e93dd28126c315c9e806")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a39574f50>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55d2ad192556 \\u003Cunknown>\\n#18 0x7f676889caa4 \\u003Cunknown>\\n#19 0x7f6768929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55d2ad19323a <unknown>
E       #1 0x55d2acc3dab0 <unknown>
E       #2 0x55d2acc44748 <unknown>
E       #3 0x55d2acc472c7 <unknown>
E       #4 0x55d2accdbfde <unknown>
E       #5 0x55d2accb51a2 <unknown>
E       #6 0x55d2accdafee <unknown>
E       #7 0x55d2accb4f73 <unknown>
E       #8 0x55d2acc81aeb <unknown>
E       #9 0x55d2acc82751 <unknown>
E       #10 0x55d2ad157b4b <unknown>
E       #11 0x55d2ad15b929 <unknown>
E       #12 0x55d2ad13e929 <unknown>
E       #13 0x55d2ad15c4e8 <unknown>
E       #14 0x55d2ad1230df <unknown>
E       #15 0x55d2ad1808e8 <unknown>
E       #16 0x55d2ad180ac6 <unknown>
E       #17 0x55d2ad192556 <unknown>
E       #18 0x7f676889caa4 <unknown>
E       #19 0x7f6768929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:11:57,939 - INFO - Starting test with Chrome browser
2025-07-13 04:11:57,939 - INFO - ====== WebDriver manager ======
2025-07-13 04:11:58,051 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:11:58,068 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:11:58,096 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:11:59,817 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-13 04:11:59,817 - INFO - Starting the test case for valid credentials
2025-07-13 04:12:00,044 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:00,759 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a4434071359b3e72974692b0b26d47c3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a395a8690>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x555638970556 \\u003Cunknown>\\n#18 0x7fef5d69caa4 \\u003Cunknown>\\n#19 0x7fef5d729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55563897123a <unknown>
E       #1 0x55563841bab0 <unknown>
E       #2 0x555638422748 <unknown>
E       #3 0x5556384252c7 <unknown>
E       #4 0x5556384b9fde <unknown>
E       #5 0x5556384931a2 <unknown>
E       #6 0x5556384b8fee <unknown>
E       #7 0x555638492f73 <unknown>
E       #8 0x55563845faeb <unknown>
E       #9 0x555638460751 <unknown>
E       #10 0x555638935b4b <unknown>
E       #11 0x555638939929 <unknown>
E       #12 0x55563891c929 <unknown>
E       #13 0x55563893a4e8 <unknown>
E       #14 0x5556389010df <unknown>
E       #15 0x55563895e8e8 <unknown>
E       #16 0x55563895eac6 <unknown>
E       #17 0x555638970556 <unknown>
E       #18 0x7fef5d69caa4 <unknown>
E       #19 0x7fef5d729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:00,842 - INFO - Starting test with Chrome browser
2025-07-13 04:12:00,842 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:00,953 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:00,966 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:00,980 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:02,786 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-13 04:12:02,786 - INFO - Starting the test case for valid credentials
2025-07-13 04:12:03,010 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:03,747 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b89080dc0cc04aa3ccf20299a3e9132e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a39604050>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55e440e91556 \\u003Cunknown>\\n#18 0x7f711929caa4 \\u003Cunknown>\\n#19 0x7f7119329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55e440e9223a <unknown>
E       #1 0x55e44093cab0 <unknown>
E       #2 0x55e440943748 <unknown>
E       #3 0x55e4409462c7 <unknown>
E       #4 0x55e4409dafde <unknown>
E       #5 0x55e4409b41a2 <unknown>
E       #6 0x55e4409d9fee <unknown>
E       #7 0x55e4409b3f73 <unknown>
E       #8 0x55e440980aeb <unknown>
E       #9 0x55e440981751 <unknown>
E       #10 0x55e440e56b4b <unknown>
E       #11 0x55e440e5a929 <unknown>
E       #12 0x55e440e3d929 <unknown>
E       #13 0x55e440e5b4e8 <unknown>
E       #14 0x55e440e220df <unknown>
E       #15 0x55e440e7f8e8 <unknown>
E       #16 0x55e440e7fac6 <unknown>
E       #17 0x55e440e91556 <unknown>
E       #18 0x7f711929caa4 <unknown>
E       #19 0x7f7119329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:03,852 - INFO - Starting test with Chrome browser
2025-07-13 04:12:03,852 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:03,962 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:03,980 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:03,992 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:05,817 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-13 04:12:05,818 - INFO - Starting the test case for valid credentials
2025-07-13 04:12:06,094 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:06,802 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="4a1d565cbfc38bca49525ff29d6e4cf9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a39604d60>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x564862020556 \\u003Cunknown>\\n#18 0x7f0df8e9caa4 \\u003Cunknown>\\n#19 0x7f0df8f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x56486202123a <unknown>
E       #1 0x564861acbab0 <unknown>
E       #2 0x564861ad2748 <unknown>
E       #3 0x564861ad52c7 <unknown>
E       #4 0x564861b69fde <unknown>
E       #5 0x564861b431a2 <unknown>
E       #6 0x564861b68fee <unknown>
E       #7 0x564861b42f73 <unknown>
E       #8 0x564861b0faeb <unknown>
E       #9 0x564861b10751 <unknown>
E       #10 0x564861fe5b4b <unknown>
E       #11 0x564861fe9929 <unknown>
E       #12 0x564861fcc929 <unknown>
E       #13 0x564861fea4e8 <unknown>
E       #14 0x564861fb10df <unknown>
E       #15 0x56486200e8e8 <unknown>
E       #16 0x56486200eac6 <unknown>
E       #17 0x564862020556 <unknown>
E       #18 0x7f0df8e9caa4 <unknown>
E       #19 0x7f0df8f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:06,903 - INFO - Starting test with Chrome browser
2025-07-13 04:12:06,903 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:07,012 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:07,027 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:07,040 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:07,903 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:09,584 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="98d6e9e2836bffb1d23d5045d74df1eb")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a39562450>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x557f968ec556 \\u003Cunknown>\\n#18 0x7fc6e929caa4 \\u003Cunknown>\\n#19 0x7fc6e9329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x557f968ed23a <unknown>
E       #1 0x557f96397ab0 <unknown>
E       #2 0x557f9639e748 <unknown>
E       #3 0x557f963a12c7 <unknown>
E       #4 0x557f96435fde <unknown>
E       #5 0x557f9640f1a2 <unknown>
E       #6 0x557f96434fee <unknown>
E       #7 0x557f9640ef73 <unknown>
E       #8 0x557f963dbaeb <unknown>
E       #9 0x557f963dc751 <unknown>
E       #10 0x557f968b1b4b <unknown>
E       #11 0x557f968b5929 <unknown>
E       #12 0x557f96898929 <unknown>
E       #13 0x557f968b64e8 <unknown>
E       #14 0x557f9687d0df <unknown>
E       #15 0x557f968da8e8 <unknown>
E       #16 0x557f968daac6 <unknown>
E       #17 0x557f968ec556 <unknown>
E       #18 0x7fc6e929caa4 <unknown>
E       #19 0x7fc6e9329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:09,684 - INFO - Starting test with Chrome browser
2025-07-13 04:12:09,684 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:09,803 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:09,818 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:09,831 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:12,064 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:12,555 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="07c46cc00e3f91a2ff2e735a9a2e08f5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
>       login_page.enter_username(username)

tests/test_login.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:28: in enter_username
    self.actions.wait_for_element(self.login_username)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a39e55370>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55cefa6e3556 \\u003Cunknown>\\n#18 0x7efd1209caa4 \\u003Cunknown>\\n#19 0x7efd12129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55cefa6e423a <unknown>
E       #1 0x55cefa18eab0 <unknown>
E       #2 0x55cefa195748 <unknown>
E       #3 0x55cefa1982c7 <unknown>
E       #4 0x55cefa22cfde <unknown>
E       #5 0x55cefa2061a2 <unknown>
E       #6 0x55cefa22bfee <unknown>
E       #7 0x55cefa205f73 <unknown>
E       #8 0x55cefa1d2aeb <unknown>
E       #9 0x55cefa1d3751 <unknown>
E       #10 0x55cefa6a8b4b <unknown>
E       #11 0x55cefa6ac929 <unknown>
E       #12 0x55cefa68f929 <unknown>
E       #13 0x55cefa6ad4e8 <unknown>
E       #14 0x55cefa6740df <unknown>
E       #15 0x55cefa6d18e8 <unknown>
E       #16 0x55cefa6d1ac6 <unknown>
E       #17 0x55cefa6e3556 <unknown>
E       #18 0x7efd1209caa4 <unknown>
E       #19 0x7efd12129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:12,660 - INFO - Starting test with Chrome browser
2025-07-13 04:12:12,660 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:12,771 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:12,785 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:12,796 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:14,975 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:15,069 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="04e50d87e505da2b41ee0ed6b0fbf1c6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a39e56250>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55aeac30e556 \\u003Cunknown>\\n#18 0x7f790dc9caa4 \\u003Cunknown>\\n#19 0x7f790dd29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55aeac30f23a <unknown>
E       #1 0x55aeabdb9ab0 <unknown>
E       #2 0x55aeabdc0748 <unknown>
E       #3 0x55aeabdc32c7 <unknown>
E       #4 0x55aeabe57fde <unknown>
E       #5 0x55aeabe311a2 <unknown>
E       #6 0x55aeabe56fee <unknown>
E       #7 0x55aeabe30f73 <unknown>
E       #8 0x55aeabdfdaeb <unknown>
E       #9 0x55aeabdfe751 <unknown>
E       #10 0x55aeac2d3b4b <unknown>
E       #11 0x55aeac2d7929 <unknown>
E       #12 0x55aeac2ba929 <unknown>
E       #13 0x55aeac2d84e8 <unknown>
E       #14 0x55aeac29f0df <unknown>
E       #15 0x55aeac2fc8e8 <unknown>
E       #16 0x55aeac2fcac6 <unknown>
E       #17 0x55aeac30e556 <unknown>
E       #18 0x7f790dc9caa4 <unknown>
E       #19 0x7f790dd29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:15,154 - INFO - Starting test with Chrome browser
2025-07-13 04:12:15,154 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:15,265 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:15,277 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:15,288 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:17,258 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:17,683 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6beb862569349cbbd35470dcc73527b2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a395e1450>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x56391f811556 \\u003Cunknown>\\n#18 0x7f519a89caa4 \\u003Cunknown>\\n#19 0x7f519a929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x56391f81223a <unknown>
E       #1 0x56391f2bcab0 <unknown>
E       #2 0x56391f2c3748 <unknown>
E       #3 0x56391f2c62c7 <unknown>
E       #4 0x56391f35afde <unknown>
E       #5 0x56391f3341a2 <unknown>
E       #6 0x56391f359fee <unknown>
E       #7 0x56391f333f73 <unknown>
E       #8 0x56391f300aeb <unknown>
E       #9 0x56391f301751 <unknown>
E       #10 0x56391f7d6b4b <unknown>
E       #11 0x56391f7da929 <unknown>
E       #12 0x56391f7bd929 <unknown>
E       #13 0x56391f7db4e8 <unknown>
E       #14 0x56391f7a20df <unknown>
E       #15 0x56391f7ff8e8 <unknown>
E       #16 0x56391f7ffac6 <unknown>
E       #17 0x56391f811556 <unknown>
E       #18 0x7f519a89caa4 <unknown>
E       #19 0x7f519a929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:17,781 - INFO - Starting test with Chrome browser
2025-07-13 04:12:17,781 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:17,890 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:17,902 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:17,915 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:19,858 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:20,859 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a6f2fdc7e8858d67ba186cfefd50ddc4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a395e2250>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x56378e5ab556 \\u003Cunknown>\\n#18 0x7f43b109caa4 \\u003Cunknown>\\n#19 0x7f43b1129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x56378e5ac23a <unknown>
E       #1 0x56378e056ab0 <unknown>
E       #2 0x56378e05d748 <unknown>
E       #3 0x56378e0602c7 <unknown>
E       #4 0x56378e0f4fde <unknown>
E       #5 0x56378e0ce1a2 <unknown>
E       #6 0x56378e0f3fee <unknown>
E       #7 0x56378e0cdf73 <unknown>
E       #8 0x56378e09aaeb <unknown>
E       #9 0x56378e09b751 <unknown>
E       #10 0x56378e570b4b <unknown>
E       #11 0x56378e574929 <unknown>
E       #12 0x56378e557929 <unknown>
E       #13 0x56378e5754e8 <unknown>
E       #14 0x56378e53c0df <unknown>
E       #15 0x56378e5998e8 <unknown>
E       #16 0x56378e599ac6 <unknown>
E       #17 0x56378e5ab556 <unknown>
E       #18 0x7f43b109caa4 <unknown>
E       #19 0x7f43b1129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:20,941 - INFO - Starting test with Chrome browser
2025-07-13 04:12:20,942 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:21,052 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:21,064 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:21,077 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:22,994 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:23,961 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3d983281e01258eca2f4115251f0c8f6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a3b51c5f0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55cf5c827556 \\u003Cunknown>\\n#18 0x7f9bc489caa4 \\u003Cunknown>\\n#19 0x7f9bc4929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55cf5c82823a <unknown>
E       #1 0x55cf5c2d2ab0 <unknown>
E       #2 0x55cf5c2d9748 <unknown>
E       #3 0x55cf5c2dc2c7 <unknown>
E       #4 0x55cf5c370fde <unknown>
E       #5 0x55cf5c34a1a2 <unknown>
E       #6 0x55cf5c36ffee <unknown>
E       #7 0x55cf5c349f73 <unknown>
E       #8 0x55cf5c316aeb <unknown>
E       #9 0x55cf5c317751 <unknown>
E       #10 0x55cf5c7ecb4b <unknown>
E       #11 0x55cf5c7f0929 <unknown>
E       #12 0x55cf5c7d3929 <unknown>
E       #13 0x55cf5c7f14e8 <unknown>
E       #14 0x55cf5c7b80df <unknown>
E       #15 0x55cf5c8158e8 <unknown>
E       #16 0x55cf5c815ac6 <unknown>
E       #17 0x55cf5c827556 <unknown>
E       #18 0x7f9bc489caa4 <unknown>
E       #19 0x7f9bc4929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:24,046 - INFO - Starting test with Chrome browser
2025-07-13 04:12:24,046 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:24,158 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:24,174 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:24,186 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:26,207 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:27,325 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8d4715d340f12413ea8e5bd69af416d3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a3956ff20>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5649076f5556 \\u003Cunknown>\\n#18 0x7f9779e9caa4 \\u003Cunknown>\\n#19 0x7f9779f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x5649076f623a <unknown>
E       #1 0x5649071a0ab0 <unknown>
E       #2 0x5649071a7748 <unknown>
E       #3 0x5649071aa2c7 <unknown>
E       #4 0x56490723efde <unknown>
E       #5 0x5649072181a2 <unknown>
E       #6 0x56490723dfee <unknown>
E       #7 0x564907217f73 <unknown>
E       #8 0x5649071e4aeb <unknown>
E       #9 0x5649071e5751 <unknown>
E       #10 0x5649076bab4b <unknown>
E       #11 0x5649076be929 <unknown>
E       #12 0x5649076a1929 <unknown>
E       #13 0x5649076bf4e8 <unknown>
E       #14 0x5649076860df <unknown>
E       #15 0x5649076e38e8 <unknown>
E       #16 0x5649076e3ac6 <unknown>
E       #17 0x5649076f5556 <unknown>
E       #18 0x7f9779e9caa4 <unknown>
E       #19 0x7f9779f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:27,408 - INFO - Starting test with Chrome browser
2025-07-13 04:12:27,409 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:27,520 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:27,531 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:27,553 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:29,481 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:30,435 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="618eecef9995a5a055f0487383a2a07c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
>       login_page.disabled_click_login_button()

tests/test_login.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a395d6eb0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5624b31b0556 \\u003Cunknown>\\n#18 0x7f252309caa4 \\u003Cunknown>\\n#19 0x7f2523129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x5624b31b123a <unknown>
E       #1 0x5624b2c5bab0 <unknown>
E       #2 0x5624b2c62748 <unknown>
E       #3 0x5624b2c652c7 <unknown>
E       #4 0x5624b2cf9fde <unknown>
E       #5 0x5624b2cd31a2 <unknown>
E       #6 0x5624b2cf8fee <unknown>
E       #7 0x5624b2cd2f73 <unknown>
E       #8 0x5624b2c9faeb <unknown>
E       #9 0x5624b2ca0751 <unknown>
E       #10 0x5624b3175b4b <unknown>
E       #11 0x5624b3179929 <unknown>
E       #12 0x5624b315c929 <unknown>
E       #13 0x5624b317a4e8 <unknown>
E       #14 0x5624b31410df <unknown>
E       #15 0x5624b319e8e8 <unknown>
E       #16 0x5624b319eac6 <unknown>
E       #17 0x5624b31b0556 <unknown>
E       #18 0x7f252309caa4 <unknown>
E       #19 0x7f2523129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:30,518 - INFO - Starting test with Chrome browser
2025-07-13 04:12:30,518 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:30,626 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:30,638 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:30,649 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:32,631 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:32,960 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="4f3865f5081fb4274e791a89e3741526")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
>       login_page.click_password()

tests/test_login.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:40: in click_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a395d7770>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x555fcac13556 \\u003Cunknown>\\n#18 0x7f1bff89caa4 \\u003Cunknown>\\n#19 0x7f1bff929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x555fcac1423a <unknown>
E       #1 0x555fca6beab0 <unknown>
E       #2 0x555fca6c5748 <unknown>
E       #3 0x555fca6c82c7 <unknown>
E       #4 0x555fca75cfde <unknown>
E       #5 0x555fca7361a2 <unknown>
E       #6 0x555fca75bfee <unknown>
E       #7 0x555fca735f73 <unknown>
E       #8 0x555fca702aeb <unknown>
E       #9 0x555fca703751 <unknown>
E       #10 0x555fcabd8b4b <unknown>
E       #11 0x555fcabdc929 <unknown>
E       #12 0x555fcabbf929 <unknown>
E       #13 0x555fcabdd4e8 <unknown>
E       #14 0x555fcaba40df <unknown>
E       #15 0x555fcac018e8 <unknown>
E       #16 0x555fcac01ac6 <unknown>
E       #17 0x555fcac13556 <unknown>
E       #18 0x7f1bff89caa4 <unknown>
E       #19 0x7f1bff929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:33,045 - INFO - Starting test with Chrome browser
2025-07-13 04:12:33,046 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:33,154 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:33,167 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:33,178 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:33,964 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:35,595 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="09201932c66d76203d19f81179979c3b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5a3b803a10>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x56474cfd8556 \\u003Cunknown>\\n#18 0x7f8e1da9caa4 \\u003Cunknown>\\n#19 0x7f8e1db29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x56474cfd923a <unknown>
E       #1 0x56474ca83ab0 <unknown>
E       #2 0x56474ca8a748 <unknown>
E       #3 0x56474ca8d2c7 <unknown>
E       #4 0x56474cb21fde <unknown>
E       #5 0x56474cafb1a2 <unknown>
E       #6 0x56474cb20fee <unknown>
E       #7 0x56474cafaf73 <unknown>
E       #8 0x56474cac7aeb <unknown>
E       #9 0x56474cac8751 <unknown>
E       #10 0x56474cf9db4b <unknown>
E       #11 0x56474cfa1929 <unknown>
E       #12 0x56474cf84929 <unknown>
E       #13 0x56474cfa24e8 <unknown>
E       #14 0x56474cf690df <unknown>
E       #15 0x56474cfc68e8 <unknown>
E       #16 0x56474cfc6ac6 <unknown>
E       #17 0x56474cfd8556 <unknown>
E       #18 0x7f8e1da9caa4 <unknown>
E       #19 0x7f8e1db29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-13 04:12:38,051 - INFO - Starting test with Chrome browser
2025-07-13 04:12:38,051 - INFO - ====== WebDriver manager ======
2025-07-13 04:12:38,159 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:38,172 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-13 04:12:38,184 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-13 04:12:40,001 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-13 04:12:40,627 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250713_041147/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55a9a49e823a <unknown>
#1 0x55a9a4492ab0 <unknown>
#2 0x55a9a4499748 <unknown>
#3 0x55a9a449c2c7 <unknown>
#4 0x55a9a4530fde <unknown>
#5 0x55a9a450a1a2 <unknown>
#6 0x55a9a452ffee <unknown>
#7 0x55a9a4509f73 <unknown>
#8 0x55a9a44d6aeb <unknown>
#9 0x55a9a44d7751 <unknown>
#10 0x55a9a49acb4b <unknown>
#11 0x55a9a49b0929 <unknown>
#12 0x55a9a4993929 <unknown>
#13 0x55a9a49b14e8 <unknown>
#14 0x55a9a49780df <unknown>
#15 0x55a9a49d58e8 <unknown>
#16 0x55a9a49d5ac6 <unknown>
#17 0x55a9a49e7556 <unknown>
#18 0x7fadef49caa4 <unknown>
#19 0x7fadef529c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55d2ad19323a <unknown>
#1 0x55d2acc3dab0 <unknown>
#2 0x55d2acc44748 <unknown>
#3 0x55d2acc472c7 <unknown>
#4 0x55d2accdbfde <unknown>
#5 0x55d2accb51a2 <unknown>
#6 0x55d2accdafee <unknown>
#7 0x55d2accb4f73 <unknown>
#8 0x55d2acc81aeb <unknown>
#9 0x55d2acc82751 <unknown>
#10 0x55d2ad157b4b <unknown>
#11 0x55d2ad15b929 <unknown>
#12 0x55d2ad13e929 <unknown>
#13 0x55d2ad15c4e8 <unknown>
#14 0x55d2ad1230df <unknown>
#15 0x55d2ad1808e8 <unknown>
#16 0x55d2ad180ac6 <unknown>
#17 0x55d2ad192556 <unknown>
#18 0x7f676889caa4 <unknown>
#19 0x7f6768929c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55563897123a <unknown>
#1 0x55563841bab0 <unknown>
#2 0x555638422748 <unknown>
#3 0x5556384252c7 <unknown>
#4 0x5556384b9fde <unknown>
#5 0x5556384931a2 <unknown>
#6 0x5556384b8fee <unknown>
#7 0x555638492f73 <unknown>
#8 0x55563845faeb <unknown>
#9 0x555638460751 <unknown>
#10 0x555638935b4b <unknown>
#11 0x555638939929 <unknown>
#12 0x55563891c929 <unknown>
#13 0x55563893a4e8 <unknown>
#14 0x5556389010df <unknown>
#15 0x55563895e8e8 <unknown>
#16 0x55563895eac6 <unknown>
#17 0x555638970556 <unknown>
#18 0x7fef5d69caa4 <unknown>
#19 0x7fef5d729c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55e440e9223a <unknown>
#1 0x55e44093cab0 <unknown>
#2 0x55e440943748 <unknown>
#3 0x55e4409462c7 <unknown>
#4 0x55e4409dafde <unknown>
#5 0x55e4409b41a2 <unknown>
#6 0x55e4409d9fee <unknown>
#7 0x55e4409b3f73 <unknown>
#8 0x55e440980aeb <unknown>
#9 0x55e440981751 <unknown>
#10 0x55e440e56b4b <unknown>
#11 0x55e440e5a929 <unknown>
#12 0x55e440e3d929 <unknown>
#13 0x55e440e5b4e8 <unknown>
#14 0x55e440e220df <unknown>
#15 0x55e440e7f8e8 <unknown>
#16 0x55e440e7fac6 <unknown>
#17 0x55e440e91556 <unknown>
#18 0x7f711929caa4 <unknown>
#19 0x7f7119329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x56486202123a <unknown>
#1 0x564861acbab0 <unknown>
#2 0x564861ad2748 <unknown>
#3 0x564861ad52c7 <unknown>
#4 0x564861b69fde <unknown>
#5 0x564861b431a2 <unknown>
#6 0x564861b68fee <unknown>
#7 0x564861b42f73 <unknown>
#8 0x564861b0faeb <unknown>
#9 0x564861b10751 <unknown>
#10 0x564861fe5b4b <unknown>
#11 0x564861fe9929 <unknown>
#12 0x564861fcc929 <unknown>
#13 0x564861fea4e8 <unknown>
#14 0x564861fb10df <unknown>
#15 0x56486200e8e8 <unknown>
#16 0x56486200eac6 <unknown>
#17 0x564862020556 <unknown>
#18 0x7f0df8e9caa4 <unknown>
#19 0x7f0df8f29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x557f968ed23a <unknown>
#1 0x557f96397ab0 <unknown>
#2 0x557f9639e748 <unknown>
#3 0x557f963a12c7 <unknown>
#4 0x557f96435fde <unknown>
#5 0x557f9640f1a2 <unknown>
#6 0x557f96434fee <unknown>
#7 0x557f9640ef73 <unknown>
#8 0x557f963dbaeb <unknown>
#9 0x557f963dc751 <unknown>
#10 0x557f968b1b4b <unknown>
#11 0x557f968b5929 <unknown>
#12 0x557f96898929 <unknown>
#13 0x557f968b64e8 <unknown>
#14 0x557f9687d0df <unknown>
#15 0x557f968da8e8 <unknown>
#16 0x557f968daac6 <unknown>
#17 0x557f968ec556 <unknown>
#18 0x7fc6e929caa4 <unknown>
#19 0x7fc6e9329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55cefa6e423a <unknown>
#1 0x55cefa18eab0 <unknown>
#2 0x55cefa195748 <unknown>
#3 0x55cefa1982c7 <unknown>
#4 0x55cefa22cfde <unknown>
#5 0x55cefa2061a2 <unknown>
#6 0x55cefa22bfee <unknown>
#7 0x55cefa205f73 <unknown>
#8 0x55cefa1d2aeb <unknown>
#9 0x55cefa1d3751 <unknown>
#10 0x55cefa6a8b4b <unknown>
#11 0x55cefa6ac929 <unknown>
#12 0x55cefa68f929 <unknown>
#13 0x55cefa6ad4e8 <unknown>
#14 0x55cefa6740df <unknown>
#15 0x55cefa6d18e8 <unknown>
#16 0x55cefa6d1ac6 <unknown>
#17 0x55cefa6e3556 <unknown>
#18 0x7efd1209caa4 <unknown>
#19 0x7efd12129c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55aeac30f23a <unknown>
#1 0x55aeabdb9ab0 <unknown>
#2 0x55aeabdc0748 <unknown>
#3 0x55aeabdc32c7 <unknown>
#4 0x55aeabe57fde <unknown>
#5 0x55aeabe311a2 <unknown>
#6 0x55aeabe56fee <unknown>
#7 0x55aeabe30f73 <unknown>
#8 0x55aeabdfdaeb <unknown>
#9 0x55aeabdfe751 <unknown>
#10 0x55aeac2d3b4b <unknown>
#11 0x55aeac2d7929 <unknown>
#12 0x55aeac2ba929 <unknown>
#13 0x55aeac2d84e8 <unknown>
#14 0x55aeac29f0df <unknown>
#15 0x55aeac2fc8e8 <unknown>
#16 0x55aeac2fcac6 <unknown>
#17 0x55aeac30e556 <unknown>
#18 0x7f790dc9caa4 <unknown>
#19 0x7f790dd29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x56391f81223a <unknown>
#1 0x56391f2bcab0 <unknown>
#2 0x56391f2c3748 <unknown>
#3 0x56391f2c62c7 <unknown>
#4 0x56391f35afde <unknown>
#5 0x56391f3341a2 <unknown>
#6 0x56391f359fee <unknown>
#7 0x56391f333f73 <unknown>
#8 0x56391f300aeb <unknown>
#9 0x56391f301751 <unknown>
#10 0x56391f7d6b4b <unknown>
#11 0x56391f7da929 <unknown>
#12 0x56391f7bd929 <unknown>
#13 0x56391f7db4e8 <unknown>
#14 0x56391f7a20df <unknown>
#15 0x56391f7ff8e8 <unknown>
#16 0x56391f7ffac6 <unknown>
#17 0x56391f811556 <unknown>
#18 0x7f519a89caa4 <unknown>
#19 0x7f519a929c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x56378e5ac23a <unknown>
#1 0x56378e056ab0 <unknown>
#2 0x56378e05d748 <unknown>
#3 0x56378e0602c7 <unknown>
#4 0x56378e0f4fde <unknown>
#5 0x56378e0ce1a2 <unknown>
#6 0x56378e0f3fee <unknown>
#7 0x56378e0cdf73 <unknown>
#8 0x56378e09aaeb <unknown>
#9 0x56378e09b751 <unknown>
#10 0x56378e570b4b <unknown>
#11 0x56378e574929 <unknown>
#12 0x56378e557929 <unknown>
#13 0x56378e5754e8 <unknown>
#14 0x56378e53c0df <unknown>
#15 0x56378e5998e8 <unknown>
#16 0x56378e599ac6 <unknown>
#17 0x56378e5ab556 <unknown>
#18 0x7f43b109caa4 <unknown>
#19 0x7f43b1129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55cf5c82823a <unknown>
#1 0x55cf5c2d2ab0 <unknown>
#2 0x55cf5c2d9748 <unknown>
#3 0x55cf5c2dc2c7 <unknown>
#4 0x55cf5c370fde <unknown>
#5 0x55cf5c34a1a2 <unknown>
#6 0x55cf5c36ffee <unknown>
#7 0x55cf5c349f73 <unknown>
#8 0x55cf5c316aeb <unknown>
#9 0x55cf5c317751 <unknown>
#10 0x55cf5c7ecb4b <unknown>
#11 0x55cf5c7f0929 <unknown>
#12 0x55cf5c7d3929 <unknown>
#13 0x55cf5c7f14e8 <unknown>
#14 0x55cf5c7b80df <unknown>
#15 0x55cf5c8158e8 <unknown>
#16 0x55cf5c815ac6 <unknown>
#17 0x55cf5c827556 <unknown>
#18 0x7f9bc489caa4 <unknown>
#19 0x7f9bc4929c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x5649076f623a <unknown>
#1 0x5649071a0ab0 <unknown>
#2 0x5649071a7748 <unknown>
#3 0x5649071aa2c7 <unknown>
#4 0x56490723efde <unknown>
#5 0x5649072181a2 <unknown>
#6 0x56490723dfee <unknown>
#7 0x564907217f73 <unknown>
#8 0x5649071e4aeb <unknown>
#9 0x5649071e5751 <unknown>
#10 0x5649076bab4b <unknown>
#11 0x5649076be929 <unknown>
#12 0x5649076a1929 <unknown>
#13 0x5649076bf4e8 <unknown>
#14 0x5649076860df <unknown>
#15 0x5649076e38e8 <unknown>
#16 0x5649076e3ac6 <unknown>
#17 0x5649076f5556 <unknown>
#18 0x7f9779e9caa4 <unknown>
#19 0x7f9779f29c3c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x5624b31b123a <unknown>
#1 0x5624b2c5bab0 <unknown>
#2 0x5624b2c62748 <unknown>
#3 0x5624b2c652c7 <unknown>
#4 0x5624b2cf9fde <unknown>
#5 0x5624b2cd31a2 <unknown>
#6 0x5624b2cf8fee <unknown>
#7 0x5624b2cd2f73 <unknown>
#8 0x5624b2c9faeb <unknown>
#9 0x5624b2ca0751 <unknown>
#10 0x5624b3175b4b <unknown>
#11 0x5624b3179929 <unknown>
#12 0x5624b315c929 <unknown>
#13 0x5624b317a4e8 <unknown>
#14 0x5624b31410df <unknown>
#15 0x5624b319e8e8 <unknown>
#16 0x5624b319eac6 <unknown>
#17 0x5624b31b0556 <unknown>
#18 0x7f252309caa4 <unknown>
#19 0x7f2523129c3c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x555fcac1423a <unknown>
#1 0x555fca6beab0 <unknown>
#2 0x555fca6c5748 <unknown>
#3 0x555fca6c82c7 <unknown>
#4 0x555fca75cfde <unknown>
#5 0x555fca7361a2 <unknown>
#6 0x555fca75bfee <unknown>
#7 0x555fca735f73 <unknown>
#8 0x555fca702aeb <unknown>
#9 0x555fca703751 <unknown>
#10 0x555fcabd8b4b <unknown>
#11 0x555fcabdc929 <unknown>
#12 0x555fcabbf929 <unknown>
#13 0x555fcabdd4e8 <unknown>
#14 0x555fcaba40df <unknown>
#15 0x555fcac018e8 <unknown>
#16 0x555fcac01ac6 <unknown>
#17 0x555fcac13556 <unknown>
#18 0x7f1bff89caa4 <unknown>
#19 0x7f1bff929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x56474cfd923a <unknown>
#1 0x56474ca83ab0 <unknown>
#2 0x56474ca8a748 <unknown>
#3 0x56474ca8d2c7 <unknown>
#4 0x56474cb21fde <unknown>
#5 0x56474cafb1a2 <unknown>
#6 0x56474cb20fee <unknown>
#7 0x56474cafaf73 <unknown>
#8 0x56474cac7aeb <unknown>
#9 0x56474cac8751 <unknown>
#10 0x56474cf9db4b <unknown>
#11 0x56474cfa1929 <unknown>
#12 0x56474cf84929 <unknown>
#13 0x56474cfa24e8 <unknown>
#14 0x56474cf690df <unknown>
#15 0x56474cfc68e8 <unknown>
#16 0x56474cfc6ac6 <unknown>
#17 0x56474cfd8556 <unknown>
#18 0x7f8e1da9caa4 <unknown>
#19 0x7f8e1db29c3c <unknown>
======================== 15 failed, 4 passed in 59.94s =========================
--------------------------------------------
Test Run Finished: 2025-07-13 04:12:47
Duration: 62 seconds
Status: FAILURE
Exit Code: 1
============================================
