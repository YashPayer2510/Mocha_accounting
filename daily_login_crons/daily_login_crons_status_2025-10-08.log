========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-08 03:45:32
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.11.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.11.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="1e3974c34c7813ef08f1983a377db483")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="1e3974c34c7813ef08f1983a377db483")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478be84900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557d4e072fba <unknown>
E       #1 0x557d4daf76d0 <unknown>
E       #2 0x557d4db492aa <unknown>
E       #3 0x557d4db49541 <unknown>
E       #4 0x557d4db976c4 <unknown>
E       #5 0x557d4db6ee5d <unknown>
E       #6 0x557d4db94b54 <unknown>
E       #7 0x557d4db6ec03 <unknown>
E       #8 0x557d4db3b7a8 <unknown>
E       #9 0x557d4db3c421 <unknown>
E       #10 0x557d4e037b28 <unknown>
E       #11 0x557d4e03b87f <unknown>
E       #12 0x557d4e01fc49 <unknown>
E       #13 0x557d4e03c405 <unknown>
E       #14 0x557d4e0054ff <unknown>
E       #15 0x557d4e060258 <unknown>
E       #16 0x557d4e060432 <unknown>
E       #17 0x557d4e071fa3 <unknown>
E       #18 0x7fdb8609caa4 <unknown>
E       #19 0x7fdb86129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 03:45:35,545 - INFO - Test data loaded successfully.
2025-10-08 03:45:35,545 - INFO - Starting test with Chrome browser
2025-10-08 03:45:35,545 - INFO - ====== WebDriver manager ======
2025-10-08 03:45:37,382 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:45:37,420 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:45:37,454 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-08 03:45:37,454 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:45:37,554 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-08 03:45:37,559 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-08 03:45:37,559 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-08 03:45:37,603 - INFO - Driver downloading response is 200
2025-10-08 03:45:37,656 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:45:37,800 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-08 03:45:47,550 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-08 03:45:47,550 - INFO - Starting the test case for valid credentials
2025-10-08 03:45:47,859 - INFO - User enters the email-id
2025-10-08 03:45:49,469 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 03:47:51,161 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a4656bfe6b748d980be6928c047fa5f2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a4656bfe6b748d980be6928c047fa5f2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fd940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562d2717efba <unknown>
E       #1 0x562d26c036d0 <unknown>
E       #2 0x562d26c552aa <unknown>
E       #3 0x562d26c55541 <unknown>
E       #4 0x562d26ca36c4 <unknown>
E       #5 0x562d26c7ae5d <unknown>
E       #6 0x562d26ca0b54 <unknown>
E       #7 0x562d26c7ac03 <unknown>
E       #8 0x562d26c477a8 <unknown>
E       #9 0x562d26c48421 <unknown>
E       #10 0x562d27143b28 <unknown>
E       #11 0x562d2714787f <unknown>
E       #12 0x562d2712bc49 <unknown>
E       #13 0x562d27148405 <unknown>
E       #14 0x562d271114ff <unknown>
E       #15 0x562d2716c258 <unknown>
E       #16 0x562d2716c432 <unknown>
E       #17 0x562d2717dfa3 <unknown>
E       #18 0x7ffa2fa9caa4 <unknown>
E       #19 0x7ffa2fb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 03:47:51,347 - INFO - Starting test with Chrome browser
2025-10-08 03:47:51,347 - INFO - ====== WebDriver manager ======
2025-10-08 03:47:51,413 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:47:51,446 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:47:51,499 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 03:47:53,069 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-08 03:47:53,070 - INFO - Starting the test case for valid credentials
2025-10-08 03:47:53,216 - INFO - User enters the email-id
2025-10-08 03:47:54,908 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 03:49:56,586 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="85b7156590bd78097fd9b01a4553efe8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="85b7156590bd78097fd9b01a4553efe8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478c39a480>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55fce920efba <unknown>
E       #1 0x55fce8c936d0 <unknown>
E       #2 0x55fce8ce52aa <unknown>
E       #3 0x55fce8ce5541 <unknown>
E       #4 0x55fce8d336c4 <unknown>
E       #5 0x55fce8d0ae5d <unknown>
E       #6 0x55fce8d30b54 <unknown>
E       #7 0x55fce8d0ac03 <unknown>
E       #8 0x55fce8cd77a8 <unknown>
E       #9 0x55fce8cd8421 <unknown>
E       #10 0x55fce91d3b28 <unknown>
E       #11 0x55fce91d787f <unknown>
E       #12 0x55fce91bbc49 <unknown>
E       #13 0x55fce91d8405 <unknown>
E       #14 0x55fce91a14ff <unknown>
E       #15 0x55fce91fc258 <unknown>
E       #16 0x55fce91fc432 <unknown>
E       #17 0x55fce920dfa3 <unknown>
E       #18 0x7f6a75c9caa4 <unknown>
E       #19 0x7f6a75d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 03:49:56,653 - INFO - Starting test with Chrome browser
2025-10-08 03:49:56,654 - INFO - ====== WebDriver manager ======
2025-10-08 03:49:56,722 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:49:56,758 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:49:56,793 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 03:49:58,185 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-08 03:49:58,186 - INFO - Starting the test case for valid credentials
2025-10-08 03:49:58,331 - INFO - User enters the email-id
2025-10-08 03:50:00,143 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 03:52:01,755 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="38ba2d3f6e9af237560d7b95399e2ee8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="38ba2d3f6e9af237560d7b95399e2ee8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fd760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55dd824eafba <unknown>
E       #1 0x55dd81f6f6d0 <unknown>
E       #2 0x55dd81fc12aa <unknown>
E       #3 0x55dd81fc1541 <unknown>
E       #4 0x55dd8200f6c4 <unknown>
E       #5 0x55dd81fe6e5d <unknown>
E       #6 0x55dd8200cb54 <unknown>
E       #7 0x55dd81fe6c03 <unknown>
E       #8 0x55dd81fb37a8 <unknown>
E       #9 0x55dd81fb4421 <unknown>
E       #10 0x55dd824afb28 <unknown>
E       #11 0x55dd824b387f <unknown>
E       #12 0x55dd82497c49 <unknown>
E       #13 0x55dd824b4405 <unknown>
E       #14 0x55dd8247d4ff <unknown>
E       #15 0x55dd824d8258 <unknown>
E       #16 0x55dd824d8432 <unknown>
E       #17 0x55dd824e9fa3 <unknown>
E       #18 0x7fc5c529caa4 <unknown>
E       #19 0x7fc5c5329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 03:52:01,825 - INFO - Starting test with Chrome browser
2025-10-08 03:52:01,825 - INFO - ====== WebDriver manager ======
2025-10-08 03:52:01,893 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:52:01,926 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:52:01,959 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 03:52:03,382 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-08 03:52:03,382 - INFO - Starting the test case for valid credentials
2025-10-08 03:52:03,543 - INFO - User enters the email-id
2025-10-08 03:52:05,237 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 03:54:06,896 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d8299bc34ecf898bf0fe8fe60c335910")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d8299bc34ecf898bf0fe8fe60c335910")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fe020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55cd5402efba <unknown>
E       #1 0x55cd53ab36d0 <unknown>
E       #2 0x55cd53b052aa <unknown>
E       #3 0x55cd53b05541 <unknown>
E       #4 0x55cd53b536c4 <unknown>
E       #5 0x55cd53b2ae5d <unknown>
E       #6 0x55cd53b50b54 <unknown>
E       #7 0x55cd53b2ac03 <unknown>
E       #8 0x55cd53af77a8 <unknown>
E       #9 0x55cd53af8421 <unknown>
E       #10 0x55cd53ff3b28 <unknown>
E       #11 0x55cd53ff787f <unknown>
E       #12 0x55cd53fdbc49 <unknown>
E       #13 0x55cd53ff8405 <unknown>
E       #14 0x55cd53fc14ff <unknown>
E       #15 0x55cd5401c258 <unknown>
E       #16 0x55cd5401c432 <unknown>
E       #17 0x55cd5402dfa3 <unknown>
E       #18 0x7f8bbaa9caa4 <unknown>
E       #19 0x7f8bbab29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 03:54:06,962 - INFO - Starting test with Chrome browser
2025-10-08 03:54:06,963 - INFO - ====== WebDriver manager ======
2025-10-08 03:54:07,031 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:54:07,067 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:54:07,100 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 03:54:08,545 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 03:56:10,321 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b9dc38f5291e88bfaab1c66ade178ca5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b9dc38f5291e88bfaab1c66ade178ca5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fe0c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564266c1ffba <unknown>
E       #1 0x5642666a46d0 <unknown>
E       #2 0x5642666f62aa <unknown>
E       #3 0x5642666f6541 <unknown>
E       #4 0x5642667446c4 <unknown>
E       #5 0x56426671be5d <unknown>
E       #6 0x564266741b54 <unknown>
E       #7 0x56426671bc03 <unknown>
E       #8 0x5642666e87a8 <unknown>
E       #9 0x5642666e9421 <unknown>
E       #10 0x564266be4b28 <unknown>
E       #11 0x564266be887f <unknown>
E       #12 0x564266bccc49 <unknown>
E       #13 0x564266be9405 <unknown>
E       #14 0x564266bb24ff <unknown>
E       #15 0x564266c0d258 <unknown>
E       #16 0x564266c0d432 <unknown>
E       #17 0x564266c1efa3 <unknown>
E       #18 0x7f5fd209caa4 <unknown>
E       #19 0x7f5fd2129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 03:56:10,386 - INFO - Starting test with Chrome browser
2025-10-08 03:56:10,387 - INFO - ====== WebDriver manager ======
2025-10-08 03:56:10,452 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:56:10,485 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:56:10,517 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 03:56:11,952 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 03:58:13,698 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="57f74d9d93d4328dc4696f7e75fc39f9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="57f74d9d93d4328dc4696f7e75fc39f9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fde40>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5652aac0efba <unknown>
E       #1 0x5652aa6936d0 <unknown>
E       #2 0x5652aa6e52aa <unknown>
E       #3 0x5652aa6e5541 <unknown>
E       #4 0x5652aa7336c4 <unknown>
E       #5 0x5652aa70ae5d <unknown>
E       #6 0x5652aa730b54 <unknown>
E       #7 0x5652aa70ac03 <unknown>
E       #8 0x5652aa6d77a8 <unknown>
E       #9 0x5652aa6d8421 <unknown>
E       #10 0x5652aabd3b28 <unknown>
E       #11 0x5652aabd787f <unknown>
E       #12 0x5652aabbbc49 <unknown>
E       #13 0x5652aabd8405 <unknown>
E       #14 0x5652aaba14ff <unknown>
E       #15 0x5652aabfc258 <unknown>
E       #16 0x5652aabfc432 <unknown>
E       #17 0x5652aac0dfa3 <unknown>
E       #18 0x7fe116a9caa4 <unknown>
E       #19 0x7fe116b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 03:58:13,763 - INFO - Starting test with Chrome browser
2025-10-08 03:58:13,764 - INFO - ====== WebDriver manager ======
2025-10-08 03:58:13,831 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:58:13,864 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 03:58:13,899 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 03:58:15,379 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:00:17,177 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="19b1bcf7ee6de2dbfa6a3bc061f5e08b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="19b1bcf7ee6de2dbfa6a3bc061f5e08b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fe8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55850f61ffba <unknown>
E       #1 0x55850f0a46d0 <unknown>
E       #2 0x55850f0f62aa <unknown>
E       #3 0x55850f0f6541 <unknown>
E       #4 0x55850f1446c4 <unknown>
E       #5 0x55850f11be5d <unknown>
E       #6 0x55850f141b54 <unknown>
E       #7 0x55850f11bc03 <unknown>
E       #8 0x55850f0e87a8 <unknown>
E       #9 0x55850f0e9421 <unknown>
E       #10 0x55850f5e4b28 <unknown>
E       #11 0x55850f5e887f <unknown>
E       #12 0x55850f5ccc49 <unknown>
E       #13 0x55850f5e9405 <unknown>
E       #14 0x55850f5b24ff <unknown>
E       #15 0x55850f60d258 <unknown>
E       #16 0x55850f60d432 <unknown>
E       #17 0x55850f61efa3 <unknown>
E       #18 0x7f16f4e9caa4 <unknown>
E       #19 0x7f16f4f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:00:17,243 - INFO - Starting test with Chrome browser
2025-10-08 04:00:17,243 - INFO - ====== WebDriver manager ======
2025-10-08 04:00:17,308 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:00:17,343 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:00:17,379 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:00:18,852 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:02:20,641 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9a88015a69cea39168ff9c5459c370c9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9a88015a69cea39168ff9c5459c370c9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fec00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557e2c243fba <unknown>
E       #1 0x557e2bcc86d0 <unknown>
E       #2 0x557e2bd1a2aa <unknown>
E       #3 0x557e2bd1a541 <unknown>
E       #4 0x557e2bd686c4 <unknown>
E       #5 0x557e2bd3fe5d <unknown>
E       #6 0x557e2bd65b54 <unknown>
E       #7 0x557e2bd3fc03 <unknown>
E       #8 0x557e2bd0c7a8 <unknown>
E       #9 0x557e2bd0d421 <unknown>
E       #10 0x557e2c208b28 <unknown>
E       #11 0x557e2c20c87f <unknown>
E       #12 0x557e2c1f0c49 <unknown>
E       #13 0x557e2c20d405 <unknown>
E       #14 0x557e2c1d64ff <unknown>
E       #15 0x557e2c231258 <unknown>
E       #16 0x557e2c231432 <unknown>
E       #17 0x557e2c242fa3 <unknown>
E       #18 0x7f698b49caa4 <unknown>
E       #19 0x7f698b529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:02:20,701 - INFO - Starting test with Chrome browser
2025-10-08 04:02:20,701 - INFO - ====== WebDriver manager ======
2025-10-08 04:02:20,768 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:02:20,804 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:02:20,837 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:02:22,230 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:04:25,684 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="1bb4f9a9ac17b888046cd1164e8ecc13")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="1bb4f9a9ac17b888046cd1164e8ecc13")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fe980>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55dd4bfacfba <unknown>
E       #1 0x55dd4ba316d0 <unknown>
E       #2 0x55dd4ba832aa <unknown>
E       #3 0x55dd4ba83541 <unknown>
E       #4 0x55dd4bad16c4 <unknown>
E       #5 0x55dd4baa8e5d <unknown>
E       #6 0x55dd4baceb54 <unknown>
E       #7 0x55dd4baa8c03 <unknown>
E       #8 0x55dd4ba757a8 <unknown>
E       #9 0x55dd4ba76421 <unknown>
E       #10 0x55dd4bf71b28 <unknown>
E       #11 0x55dd4bf7587f <unknown>
E       #12 0x55dd4bf59c49 <unknown>
E       #13 0x55dd4bf76405 <unknown>
E       #14 0x55dd4bf3f4ff <unknown>
E       #15 0x55dd4bf9a258 <unknown>
E       #16 0x55dd4bf9a432 <unknown>
E       #17 0x55dd4bfabfa3 <unknown>
E       #18 0x7f69c929caa4 <unknown>
E       #19 0x7f69c9329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:04:25,750 - INFO - Starting test with Chrome browser
2025-10-08 04:04:25,750 - INFO - ====== WebDriver manager ======
2025-10-08 04:04:25,816 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:04:25,851 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:04:25,883 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:04:27,261 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:06:30,753 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="417a9cb3a6bfd22ca22653bb8d71dc99")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="417a9cb3a6bfd22ca22653bb8d71dc99")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fde40>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ad4afc0fba <unknown>
E       #1 0x55ad4aa456d0 <unknown>
E       #2 0x55ad4aa972aa <unknown>
E       #3 0x55ad4aa97541 <unknown>
E       #4 0x55ad4aae56c4 <unknown>
E       #5 0x55ad4aabce5d <unknown>
E       #6 0x55ad4aae2b54 <unknown>
E       #7 0x55ad4aabcc03 <unknown>
E       #8 0x55ad4aa897a8 <unknown>
E       #9 0x55ad4aa8a421 <unknown>
E       #10 0x55ad4af85b28 <unknown>
E       #11 0x55ad4af8987f <unknown>
E       #12 0x55ad4af6dc49 <unknown>
E       #13 0x55ad4af8a405 <unknown>
E       #14 0x55ad4af534ff <unknown>
E       #15 0x55ad4afae258 <unknown>
E       #16 0x55ad4afae432 <unknown>
E       #17 0x55ad4afbffa3 <unknown>
E       #18 0x7f623229caa4 <unknown>
E       #19 0x7f6232329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:06:30,813 - INFO - Starting test with Chrome browser
2025-10-08 04:06:30,813 - INFO - ====== WebDriver manager ======
2025-10-08 04:06:30,879 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:06:30,914 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:06:30,945 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:06:32,503 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:08:36,011 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="29f7fe040cf52eda92866fa03b2ee9f9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="29f7fe040cf52eda92866fa03b2ee9f9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fd9e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564024037fba <unknown>
E       #1 0x564023abc6d0 <unknown>
E       #2 0x564023b0e2aa <unknown>
E       #3 0x564023b0e541 <unknown>
E       #4 0x564023b5c6c4 <unknown>
E       #5 0x564023b33e5d <unknown>
E       #6 0x564023b59b54 <unknown>
E       #7 0x564023b33c03 <unknown>
E       #8 0x564023b007a8 <unknown>
E       #9 0x564023b01421 <unknown>
E       #10 0x564023ffcb28 <unknown>
E       #11 0x56402400087f <unknown>
E       #12 0x564023fe4c49 <unknown>
E       #13 0x564024001405 <unknown>
E       #14 0x564023fca4ff <unknown>
E       #15 0x564024025258 <unknown>
E       #16 0x564024025432 <unknown>
E       #17 0x564024036fa3 <unknown>
E       #18 0x7f2b3ae9caa4 <unknown>
E       #19 0x7f2b3af29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:08:36,068 - INFO - Starting test with Chrome browser
2025-10-08 04:08:36,069 - INFO - ====== WebDriver manager ======
2025-10-08 04:08:36,135 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:08:36,168 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:08:36,200 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:08:37,747 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:10:41,223 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3d7696a579078d841012debb457e9caf")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
        login_page.disabled_click_login_button()
>       login_page.username_blank_validation(login_test_data)

tests/test_login.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:72: in username_blank_validation
    self.actions.wait_for_element(self.username_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3d7696a579078d841012debb457e9caf")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fda80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c3d7c0cfba <unknown>
E       #1 0x55c3d76916d0 <unknown>
E       #2 0x55c3d76e32aa <unknown>
E       #3 0x55c3d76e3541 <unknown>
E       #4 0x55c3d77316c4 <unknown>
E       #5 0x55c3d7708e5d <unknown>
E       #6 0x55c3d772eb54 <unknown>
E       #7 0x55c3d7708c03 <unknown>
E       #8 0x55c3d76d57a8 <unknown>
E       #9 0x55c3d76d6421 <unknown>
E       #10 0x55c3d7bd1b28 <unknown>
E       #11 0x55c3d7bd587f <unknown>
E       #12 0x55c3d7bb9c49 <unknown>
E       #13 0x55c3d7bd6405 <unknown>
E       #14 0x55c3d7b9f4ff <unknown>
E       #15 0x55c3d7bfa258 <unknown>
E       #16 0x55c3d7bfa432 <unknown>
E       #17 0x55c3d7c0bfa3 <unknown>
E       #18 0x7f7bc669caa4 <unknown>
E       #19 0x7f7bc6729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:10:41,289 - INFO - Starting test with Chrome browser
2025-10-08 04:10:41,289 - INFO - ====== WebDriver manager ======
2025-10-08 04:10:41,357 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:10:41,409 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:10:41,444 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:10:42,827 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:12:44,669 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ca3deba93fe643de93b4eef8bc210ac1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
        login_page.click_password()
        login_page.disabled_click_login_button()
>       login_page.password_blank_validation(login_test_data)

tests/test_login.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:78: in password_blank_validation
    self.actions.wait_for_element(self.password_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ca3deba93fe643de93b4eef8bc210ac1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3ff4c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a80ebc5fba <unknown>
E       #1 0x55a80e64a6d0 <unknown>
E       #2 0x55a80e69c2aa <unknown>
E       #3 0x55a80e69c541 <unknown>
E       #4 0x55a80e6ea6c4 <unknown>
E       #5 0x55a80e6c1e5d <unknown>
E       #6 0x55a80e6e7b54 <unknown>
E       #7 0x55a80e6c1c03 <unknown>
E       #8 0x55a80e68e7a8 <unknown>
E       #9 0x55a80e68f421 <unknown>
E       #10 0x55a80eb8ab28 <unknown>
E       #11 0x55a80eb8e87f <unknown>
E       #12 0x55a80eb72c49 <unknown>
E       #13 0x55a80eb8f405 <unknown>
E       #14 0x55a80eb584ff <unknown>
E       #15 0x55a80ebb3258 <unknown>
E       #16 0x55a80ebb3432 <unknown>
E       #17 0x55a80ebc4fa3 <unknown>
E       #18 0x7fd156c9caa4 <unknown>
E       #19 0x7fd156d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:12:44,735 - INFO - Starting test with Chrome browser
2025-10-08 04:12:44,735 - INFO - ====== WebDriver manager ======
2025-10-08 04:12:44,804 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:12:44,840 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:12:44,874 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:12:46,306 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:14:49,908 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d92fd35e23bb01e4e5cacaf13251e230")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d92fd35e23bb01e4e5cacaf13251e230")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3ff2e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562d75850fba <unknown>
E       #1 0x562d752d56d0 <unknown>
E       #2 0x562d753272aa <unknown>
E       #3 0x562d75327541 <unknown>
E       #4 0x562d753756c4 <unknown>
E       #5 0x562d7534ce5d <unknown>
E       #6 0x562d75372b54 <unknown>
E       #7 0x562d7534cc03 <unknown>
E       #8 0x562d753197a8 <unknown>
E       #9 0x562d7531a421 <unknown>
E       #10 0x562d75815b28 <unknown>
E       #11 0x562d7581987f <unknown>
E       #12 0x562d757fdc49 <unknown>
E       #13 0x562d7581a405 <unknown>
E       #14 0x562d757e34ff <unknown>
E       #15 0x562d7583e258 <unknown>
E       #16 0x562d7583e432 <unknown>
E       #17 0x562d7584ffa3 <unknown>
E       #18 0x7faf5de9caa4 <unknown>
E       #19 0x7faf5df29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:14:49,974 - INFO - Starting test with Chrome browser
2025-10-08 04:14:49,974 - INFO - ====== WebDriver manager ======
2025-10-08 04:14:50,048 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:14:50,085 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:14:50,120 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:14:51,520 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:16:53,371 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5e57bd7df063c6781df47517e96a66d6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5e57bd7df063c6781df47517e96a66d6")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fd760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ac814acfba <unknown>
E       #1 0x55ac80f316d0 <unknown>
E       #2 0x55ac80f832aa <unknown>
E       #3 0x55ac80f83541 <unknown>
E       #4 0x55ac80fd16c4 <unknown>
E       #5 0x55ac80fa8e5d <unknown>
E       #6 0x55ac80fceb54 <unknown>
E       #7 0x55ac80fa8c03 <unknown>
E       #8 0x55ac80f757a8 <unknown>
E       #9 0x55ac80f76421 <unknown>
E       #10 0x55ac81471b28 <unknown>
E       #11 0x55ac8147587f <unknown>
E       #12 0x55ac81459c49 <unknown>
E       #13 0x55ac81476405 <unknown>
E       #14 0x55ac8143f4ff <unknown>
E       #15 0x55ac8149a258 <unknown>
E       #16 0x55ac8149a432 <unknown>
E       #17 0x55ac814abfa3 <unknown>
E       #18 0x7f9a8b89caa4 <unknown>
E       #19 0x7f9a8b929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:16:54,429 - INFO - Starting test with Chrome browser
2025-10-08 04:16:54,429 - INFO - ====== WebDriver manager ======
2025-10-08 04:16:54,496 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:16:54,532 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:16:54,564 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:16:55,918 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:18:57,762 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="dff5b9f5e6e5849105d42dfa857fc985")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="dff5b9f5e6e5849105d42dfa857fc985")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3fdda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5572c21e0fba <unknown>
E       #1 0x5572c1c656d0 <unknown>
E       #2 0x5572c1cb72aa <unknown>
E       #3 0x5572c1cb7541 <unknown>
E       #4 0x5572c1d056c4 <unknown>
E       #5 0x5572c1cdce5d <unknown>
E       #6 0x5572c1d02b54 <unknown>
E       #7 0x5572c1cdcc03 <unknown>
E       #8 0x5572c1ca97a8 <unknown>
E       #9 0x5572c1caa421 <unknown>
E       #10 0x5572c21a5b28 <unknown>
E       #11 0x5572c21a987f <unknown>
E       #12 0x5572c218dc49 <unknown>
E       #13 0x5572c21aa405 <unknown>
E       #14 0x5572c21734ff <unknown>
E       #15 0x5572c21ce258 <unknown>
E       #16 0x5572c21ce432 <unknown>
E       #17 0x5572c21dffa3 <unknown>
E       #18 0x7f729be9caa4 <unknown>
E       #19 0x7f729bf29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:18:57,829 - INFO - Starting test with Chrome browser
2025-10-08 04:18:57,829 - INFO - ====== WebDriver manager ======
2025-10-08 04:18:57,895 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:18:57,929 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:18:57,962 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:18:58,843 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:21:01,024 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="95eddccd46b34d139c2918126990788d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="95eddccd46b34d139c2918126990788d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3ff6a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f7c68f5fba <unknown>
E       #1 0x55f7c637a6d0 <unknown>
E       #2 0x55f7c63cc2aa <unknown>
E       #3 0x55f7c63cc541 <unknown>
E       #4 0x55f7c641a6c4 <unknown>
E       #5 0x55f7c63f1e5d <unknown>
E       #6 0x55f7c6417b54 <unknown>
E       #7 0x55f7c63f1c03 <unknown>
E       #8 0x55f7c63be7a8 <unknown>
E       #9 0x55f7c63bf421 <unknown>
E       #10 0x55f7c68bab28 <unknown>
E       #11 0x55f7c68be87f <unknown>
E       #12 0x55f7c68a2c49 <unknown>
E       #13 0x55f7c68bf405 <unknown>
E       #14 0x55f7c68884ff <unknown>
E       #15 0x55f7c68e3258 <unknown>
E       #16 0x55f7c68e3432 <unknown>
E       #17 0x55f7c68f4fa3 <unknown>
E       #18 0x7f138d89caa4 <unknown>
E       #19 0x7f138d929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:21:01,087 - INFO - Starting test with Chrome browser
2025-10-08 04:21:01,088 - INFO - ====== WebDriver manager ======
2025-10-08 04:21:01,154 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:21:01,186 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:21:01,219 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:21:02,602 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:23:04,493 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f40ab0d1c639bd455daae7fee08091c6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f40ab0d1c639bd455daae7fee08091c6")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f478b3ff880>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5631d0cc7fba <unknown>
E       #1 0x5631d074c6d0 <unknown>
E       #2 0x5631d079e2aa <unknown>
E       #3 0x5631d079e541 <unknown>
E       #4 0x5631d07ec6c4 <unknown>
E       #5 0x5631d07c3e5d <unknown>
E       #6 0x5631d07e9b54 <unknown>
E       #7 0x5631d07c3c03 <unknown>
E       #8 0x5631d07907a8 <unknown>
E       #9 0x5631d0791421 <unknown>
E       #10 0x5631d0c8cb28 <unknown>
E       #11 0x5631d0c9087f <unknown>
E       #12 0x5631d0c74c49 <unknown>
E       #13 0x5631d0c91405 <unknown>
E       #14 0x5631d0c5a4ff <unknown>
E       #15 0x5631d0cb5258 <unknown>
E       #16 0x5631d0cb5432 <unknown>
E       #17 0x5631d0cc6fa3 <unknown>
E       #18 0x7f3c4609caa4 <unknown>
E       #19 0x7f3c46129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-08 04:23:04,561 - INFO - Starting test with Chrome browser
2025-10-08 04:23:04,561 - INFO - ====== WebDriver manager ======
2025-10-08 04:23:04,629 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:23:04,669 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-08 04:23:04,702 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-08 04:23:06,101 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-08 04:25:07,975 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251008_034535/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557d4e072fba <unknown>
#1 0x557d4daf76d0 <unknown>
#2 0x557d4db492aa <unknown>
#3 0x557d4db49541 <unknown>
#4 0x557d4db976c4 <unknown>
#5 0x557d4db6ee5d <unknown>
#6 0x557d4db94b54 <unknown>
#7 0x557d4db6ec03 <unknown>
#8 0x557d4db3b7a8 <unknown>
#9 0x557d4db3c421 <unknown>
#10 0x557d4e037b28 <unknown>
#11 0x557d4e03b87f <unknown>
#12 0x557d4e01fc49 <unknown>
#13 0x557d4e03c405 <unknown>
#14 0x557d4e0054ff <unknown>
#15 0x557d4e060258 <unknown>
#16 0x557d4e060432 <unknown>
#17 0x557d4e071fa3 <unknown>
#18 0x7fdb8609caa4 <unknown>
#19 0x7fdb86129c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562d2717efba <unknown>
#1 0x562d26c036d0 <unknown>
#2 0x562d26c552aa <unknown>
#3 0x562d26c55541 <unknown>
#4 0x562d26ca36c4 <unknown>
#5 0x562d26c7ae5d <unknown>
#6 0x562d26ca0b54 <unknown>
#7 0x562d26c7ac03 <unknown>
#8 0x562d26c477a8 <unknown>
#9 0x562d26c48421 <unknown>
#10 0x562d27143b28 <unknown>
#11 0x562d2714787f <unknown>
#12 0x562d2712bc49 <unknown>
#13 0x562d27148405 <unknown>
#14 0x562d271114ff <unknown>
#15 0x562d2716c258 <unknown>
#16 0x562d2716c432 <unknown>
#17 0x562d2717dfa3 <unknown>
#18 0x7ffa2fa9caa4 <unknown>
#19 0x7ffa2fb29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55fce920efba <unknown>
#1 0x55fce8c936d0 <unknown>
#2 0x55fce8ce52aa <unknown>
#3 0x55fce8ce5541 <unknown>
#4 0x55fce8d336c4 <unknown>
#5 0x55fce8d0ae5d <unknown>
#6 0x55fce8d30b54 <unknown>
#7 0x55fce8d0ac03 <unknown>
#8 0x55fce8cd77a8 <unknown>
#9 0x55fce8cd8421 <unknown>
#10 0x55fce91d3b28 <unknown>
#11 0x55fce91d787f <unknown>
#12 0x55fce91bbc49 <unknown>
#13 0x55fce91d8405 <unknown>
#14 0x55fce91a14ff <unknown>
#15 0x55fce91fc258 <unknown>
#16 0x55fce91fc432 <unknown>
#17 0x55fce920dfa3 <unknown>
#18 0x7f6a75c9caa4 <unknown>
#19 0x7f6a75d29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55dd824eafba <unknown>
#1 0x55dd81f6f6d0 <unknown>
#2 0x55dd81fc12aa <unknown>
#3 0x55dd81fc1541 <unknown>
#4 0x55dd8200f6c4 <unknown>
#5 0x55dd81fe6e5d <unknown>
#6 0x55dd8200cb54 <unknown>
#7 0x55dd81fe6c03 <unknown>
#8 0x55dd81fb37a8 <unknown>
#9 0x55dd81fb4421 <unknown>
#10 0x55dd824afb28 <unknown>
#11 0x55dd824b387f <unknown>
#12 0x55dd82497c49 <unknown>
#13 0x55dd824b4405 <unknown>
#14 0x55dd8247d4ff <unknown>
#15 0x55dd824d8258 <unknown>
#16 0x55dd824d8432 <unknown>
#17 0x55dd824e9fa3 <unknown>
#18 0x7fc5c529caa4 <unknown>
#19 0x7fc5c5329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55cd5402efba <unknown>
#1 0x55cd53ab36d0 <unknown>
#2 0x55cd53b052aa <unknown>
#3 0x55cd53b05541 <unknown>
#4 0x55cd53b536c4 <unknown>
#5 0x55cd53b2ae5d <unknown>
#6 0x55cd53b50b54 <unknown>
#7 0x55cd53b2ac03 <unknown>
#8 0x55cd53af77a8 <unknown>
#9 0x55cd53af8421 <unknown>
#10 0x55cd53ff3b28 <unknown>
#11 0x55cd53ff787f <unknown>
#12 0x55cd53fdbc49 <unknown>
#13 0x55cd53ff8405 <unknown>
#14 0x55cd53fc14ff <unknown>
#15 0x55cd5401c258 <unknown>
#16 0x55cd5401c432 <unknown>
#17 0x55cd5402dfa3 <unknown>
#18 0x7f8bbaa9caa4 <unknown>
#19 0x7f8bbab29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564266c1ffba <unknown>
#1 0x5642666a46d0 <unknown>
#2 0x5642666f62aa <unknown>
#3 0x5642666f6541 <unknown>
#4 0x5642667446c4 <unknown>
#5 0x56426671be5d <unknown>
#6 0x564266741b54 <unknown>
#7 0x56426671bc03 <unknown>
#8 0x5642666e87a8 <unknown>
#9 0x5642666e9421 <unknown>
#10 0x564266be4b28 <unknown>
#11 0x564266be887f <unknown>
#12 0x564266bccc49 <unknown>
#13 0x564266be9405 <unknown>
#14 0x564266bb24ff <unknown>
#15 0x564266c0d258 <unknown>
#16 0x564266c0d432 <unknown>
#17 0x564266c1efa3 <unknown>
#18 0x7f5fd209caa4 <unknown>
#19 0x7f5fd2129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5652aac0efba <unknown>
#1 0x5652aa6936d0 <unknown>
#2 0x5652aa6e52aa <unknown>
#3 0x5652aa6e5541 <unknown>
#4 0x5652aa7336c4 <unknown>
#5 0x5652aa70ae5d <unknown>
#6 0x5652aa730b54 <unknown>
#7 0x5652aa70ac03 <unknown>
#8 0x5652aa6d77a8 <unknown>
#9 0x5652aa6d8421 <unknown>
#10 0x5652aabd3b28 <unknown>
#11 0x5652aabd787f <unknown>
#12 0x5652aabbbc49 <unknown>
#13 0x5652aabd8405 <unknown>
#14 0x5652aaba14ff <unknown>
#15 0x5652aabfc258 <unknown>
#16 0x5652aabfc432 <unknown>
#17 0x5652aac0dfa3 <unknown>
#18 0x7fe116a9caa4 <unknown>
#19 0x7fe116b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55850f61ffba <unknown>
#1 0x55850f0a46d0 <unknown>
#2 0x55850f0f62aa <unknown>
#3 0x55850f0f6541 <unknown>
#4 0x55850f1446c4 <unknown>
#5 0x55850f11be5d <unknown>
#6 0x55850f141b54 <unknown>
#7 0x55850f11bc03 <unknown>
#8 0x55850f0e87a8 <unknown>
#9 0x55850f0e9421 <unknown>
#10 0x55850f5e4b28 <unknown>
#11 0x55850f5e887f <unknown>
#12 0x55850f5ccc49 <unknown>
#13 0x55850f5e9405 <unknown>
#14 0x55850f5b24ff <unknown>
#15 0x55850f60d258 <unknown>
#16 0x55850f60d432 <unknown>
#17 0x55850f61efa3 <unknown>
#18 0x7f16f4e9caa4 <unknown>
#19 0x7f16f4f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557e2c243fba <unknown>
#1 0x557e2bcc86d0 <unknown>
#2 0x557e2bd1a2aa <unknown>
#3 0x557e2bd1a541 <unknown>
#4 0x557e2bd686c4 <unknown>
#5 0x557e2bd3fe5d <unknown>
#6 0x557e2bd65b54 <unknown>
#7 0x557e2bd3fc03 <unknown>
#8 0x557e2bd0c7a8 <unknown>
#9 0x557e2bd0d421 <unknown>
#10 0x557e2c208b28 <unknown>
#11 0x557e2c20c87f <unknown>
#12 0x557e2c1f0c49 <unknown>
#13 0x557e2c20d405 <unknown>
#14 0x557e2c1d64ff <unknown>
#15 0x557e2c231258 <unknown>
#16 0x557e2c231432 <unknown>
#17 0x557e2c242fa3 <unknown>
#18 0x7f698b49caa4 <unknown>
#19 0x7f698b529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55dd4bfacfba <unknown>
#1 0x55dd4ba316d0 <unknown>
#2 0x55dd4ba832aa <unknown>
#3 0x55dd4ba83541 <unknown>
#4 0x55dd4bad16c4 <unknown>
#5 0x55dd4baa8e5d <unknown>
#6 0x55dd4baceb54 <unknown>
#7 0x55dd4baa8c03 <unknown>
#8 0x55dd4ba757a8 <unknown>
#9 0x55dd4ba76421 <unknown>
#10 0x55dd4bf71b28 <unknown>
#11 0x55dd4bf7587f <unknown>
#12 0x55dd4bf59c49 <unknown>
#13 0x55dd4bf76405 <unknown>
#14 0x55dd4bf3f4ff <unknown>
#15 0x55dd4bf9a258 <unknown>
#16 0x55dd4bf9a432 <unknown>
#17 0x55dd4bfabfa3 <unknown>
#18 0x7f69c929caa4 <unknown>
#19 0x7f69c9329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ad4afc0fba <unknown>
#1 0x55ad4aa456d0 <unknown>
#2 0x55ad4aa972aa <unknown>
#3 0x55ad4aa97541 <unknown>
#4 0x55ad4aae56c4 <unknown>
#5 0x55ad4aabce5d <unknown>
#6 0x55ad4aae2b54 <unknown>
#7 0x55ad4aabcc03 <unknown>
#8 0x55ad4aa897a8 <unknown>
#9 0x55ad4aa8a421 <unknown>
#10 0x55ad4af85b28 <unknown>
#11 0x55ad4af8987f <unknown>
#12 0x55ad4af6dc49 <unknown>
#13 0x55ad4af8a405 <unknown>
#14 0x55ad4af534ff <unknown>
#15 0x55ad4afae258 <unknown>
#16 0x55ad4afae432 <unknown>
#17 0x55ad4afbffa3 <unknown>
#18 0x7f623229caa4 <unknown>
#19 0x7f6232329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564024037fba <unknown>
#1 0x564023abc6d0 <unknown>
#2 0x564023b0e2aa <unknown>
#3 0x564023b0e541 <unknown>
#4 0x564023b5c6c4 <unknown>
#5 0x564023b33e5d <unknown>
#6 0x564023b59b54 <unknown>
#7 0x564023b33c03 <unknown>
#8 0x564023b007a8 <unknown>
#9 0x564023b01421 <unknown>
#10 0x564023ffcb28 <unknown>
#11 0x56402400087f <unknown>
#12 0x564023fe4c49 <unknown>
#13 0x564024001405 <unknown>
#14 0x564023fca4ff <unknown>
#15 0x564024025258 <unknown>
#16 0x564024025432 <unknown>
#17 0x564024036fa3 <unknown>
#18 0x7f2b3ae9caa4 <unknown>
#19 0x7f2b3af29c6c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c3d7c0cfba <unknown>
#1 0x55c3d76916d0 <unknown>
#2 0x55c3d76e32aa <unknown>
#3 0x55c3d76e3541 <unknown>
#4 0x55c3d77316c4 <unknown>
#5 0x55c3d7708e5d <unknown>
#6 0x55c3d772eb54 <unknown>
#7 0x55c3d7708c03 <unknown>
#8 0x55c3d76d57a8 <unknown>
#9 0x55c3d76d6421 <unknown>
#10 0x55c3d7bd1b28 <unknown>
#11 0x55c3d7bd587f <unknown>
#12 0x55c3d7bb9c49 <unknown>
#13 0x55c3d7bd6405 <unknown>
#14 0x55c3d7b9f4ff <unknown>
#15 0x55c3d7bfa258 <unknown>
#16 0x55c3d7bfa432 <unknown>
#17 0x55c3d7c0bfa3 <unknown>
#18 0x7f7bc669caa4 <unknown>
#19 0x7f7bc6729c6c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a80ebc5fba <unknown>
#1 0x55a80e64a6d0 <unknown>
#2 0x55a80e69c2aa <unknown>
#3 0x55a80e69c541 <unknown>
#4 0x55a80e6ea6c4 <unknown>
#5 0x55a80e6c1e5d <unknown>
#6 0x55a80e6e7b54 <unknown>
#7 0x55a80e6c1c03 <unknown>
#8 0x55a80e68e7a8 <unknown>
#9 0x55a80e68f421 <unknown>
#10 0x55a80eb8ab28 <unknown>
#11 0x55a80eb8e87f <unknown>
#12 0x55a80eb72c49 <unknown>
#13 0x55a80eb8f405 <unknown>
#14 0x55a80eb584ff <unknown>
#15 0x55a80ebb3258 <unknown>
#16 0x55a80ebb3432 <unknown>
#17 0x55a80ebc4fa3 <unknown>
#18 0x7fd156c9caa4 <unknown>
#19 0x7fd156d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562d75850fba <unknown>
#1 0x562d752d56d0 <unknown>
#2 0x562d753272aa <unknown>
#3 0x562d75327541 <unknown>
#4 0x562d753756c4 <unknown>
#5 0x562d7534ce5d <unknown>
#6 0x562d75372b54 <unknown>
#7 0x562d7534cc03 <unknown>
#8 0x562d753197a8 <unknown>
#9 0x562d7531a421 <unknown>
#10 0x562d75815b28 <unknown>
#11 0x562d7581987f <unknown>
#12 0x562d757fdc49 <unknown>
#13 0x562d7581a405 <unknown>
#14 0x562d757e34ff <unknown>
#15 0x562d7583e258 <unknown>
#16 0x562d7583e432 <unknown>
#17 0x562d7584ffa3 <unknown>
#18 0x7faf5de9caa4 <unknown>
#19 0x7faf5df29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ac814acfba <unknown>
#1 0x55ac80f316d0 <unknown>
#2 0x55ac80f832aa <unknown>
#3 0x55ac80f83541 <unknown>
#4 0x55ac80fd16c4 <unknown>
#5 0x55ac80fa8e5d <unknown>
#6 0x55ac80fceb54 <unknown>
#7 0x55ac80fa8c03 <unknown>
#8 0x55ac80f757a8 <unknown>
#9 0x55ac80f76421 <unknown>
#10 0x55ac81471b28 <unknown>
#11 0x55ac8147587f <unknown>
#12 0x55ac81459c49 <unknown>
#13 0x55ac81476405 <unknown>
#14 0x55ac8143f4ff <unknown>
#15 0x55ac8149a258 <unknown>
#16 0x55ac8149a432 <unknown>
#17 0x55ac814abfa3 <unknown>
#18 0x7f9a8b89caa4 <unknown>
#19 0x7f9a8b929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5572c21e0fba <unknown>
#1 0x5572c1c656d0 <unknown>
#2 0x5572c1cb72aa <unknown>
#3 0x5572c1cb7541 <unknown>
#4 0x5572c1d056c4 <unknown>
#5 0x5572c1cdce5d <unknown>
#6 0x5572c1d02b54 <unknown>
#7 0x5572c1cdcc03 <unknown>
#8 0x5572c1ca97a8 <unknown>
#9 0x5572c1caa421 <unknown>
#10 0x5572c21a5b28 <unknown>
#11 0x5572c21a987f <unknown>
#12 0x5572c218dc49 <unknown>
#13 0x5572c21aa405 <unknown>
#14 0x5572c21734ff <unknown>
#15 0x5572c21ce258 <unknown>
#16 0x5572c21ce432 <unknown>
#17 0x5572c21dffa3 <unknown>
#18 0x7f729be9caa4 <unknown>
#19 0x7f729bf29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f7c68f5fba <unknown>
#1 0x55f7c637a6d0 <unknown>
#2 0x55f7c63cc2aa <unknown>
#3 0x55f7c63cc541 <unknown>
#4 0x55f7c641a6c4 <unknown>
#5 0x55f7c63f1e5d <unknown>
#6 0x55f7c6417b54 <unknown>
#7 0x55f7c63f1c03 <unknown>
#8 0x55f7c63be7a8 <unknown>
#9 0x55f7c63bf421 <unknown>
#10 0x55f7c68bab28 <unknown>
#11 0x55f7c68be87f <unknown>
#12 0x55f7c68a2c49 <unknown>
#13 0x55f7c68bf405 <unknown>
#14 0x55f7c68884ff <unknown>
#15 0x55f7c68e3258 <unknown>
#16 0x55f7c68e3432 <unknown>
#17 0x55f7c68f4fa3 <unknown>
#18 0x7f138d89caa4 <unknown>
#19 0x7f138d929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5631d0cc7fba <unknown>
#1 0x5631d074c6d0 <unknown>
#2 0x5631d079e2aa <unknown>
#3 0x5631d079e541 <unknown>
#4 0x5631d07ec6c4 <unknown>
#5 0x5631d07c3e5d <unknown>
#6 0x5631d07e9b54 <unknown>
#7 0x5631d07c3c03 <unknown>
#8 0x5631d07907a8 <unknown>
#9 0x5631d0791421 <unknown>
#10 0x5631d0c8cb28 <unknown>
#11 0x5631d0c9087f <unknown>
#12 0x5631d0c74c49 <unknown>
#13 0x5631d0c91405 <unknown>
#14 0x5631d0c5a4ff <unknown>
#15 0x5631d0cb5258 <unknown>
#16 0x5631d0cb5432 <unknown>
#17 0x5631d0cc6fa3 <unknown>
#18 0x7f3c4609caa4 <unknown>
#19 0x7f3c46129c6c <unknown>
======================= 19 failed in 2372.59s (0:39:32) ========================
--------------------------------------------
Test Run Finished: 2025-10-08 04:25:08
Duration: 2376 seconds
Status: FAILURE
Exit Code: 1
============================================
