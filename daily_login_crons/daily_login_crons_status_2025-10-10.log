========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-10 03:46:21
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.11.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.11.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e2f39fa3b9f4b7b5eaceb5d336ccc333")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e2f39fa3b9f4b7b5eaceb5d336ccc333")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e75024900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563ebe1e2fba <unknown>
E       #1 0x563ebdc676d0 <unknown>
E       #2 0x563ebdcb92aa <unknown>
E       #3 0x563ebdcb9541 <unknown>
E       #4 0x563ebdd076c4 <unknown>
E       #5 0x563ebdcdee5d <unknown>
E       #6 0x563ebdd04b54 <unknown>
E       #7 0x563ebdcdec03 <unknown>
E       #8 0x563ebdcab7a8 <unknown>
E       #9 0x563ebdcac421 <unknown>
E       #10 0x563ebe1a7b28 <unknown>
E       #11 0x563ebe1ab87f <unknown>
E       #12 0x563ebe18fc49 <unknown>
E       #13 0x563ebe1ac405 <unknown>
E       #14 0x563ebe1754ff <unknown>
E       #15 0x563ebe1d0258 <unknown>
E       #16 0x563ebe1d0432 <unknown>
E       #17 0x563ebe1e1fa3 <unknown>
E       #18 0x7f9ef749caa4 <unknown>
E       #19 0x7f9ef7529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 03:46:23,463 - INFO - Test data loaded successfully.
2025-10-10 03:46:23,463 - INFO - Starting test with Chrome browser
2025-10-10 03:46:23,463 - INFO - ====== WebDriver manager ======
2025-10-10 03:46:24,988 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:46:25,025 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:46:25,060 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-10 03:46:25,060 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:46:25,158 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-10 03:46:25,161 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-10 03:46:25,162 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-10 03:46:25,211 - INFO - Driver downloading response is 200
2025-10-10 03:46:25,256 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:46:25,400 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-10 03:46:33,869 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-10 03:46:33,870 - INFO - Starting the test case for valid credentials
2025-10-10 03:46:34,210 - INFO - User enters the email-id
2025-10-10 03:46:35,836 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 03:48:37,539 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="87e6c4d5f0a3a1d9f78316fca1a4ceed")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="87e6c4d5f0a3a1d9f78316fca1a4ceed")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76395940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564d16716fba <unknown>
E       #1 0x564d1619b6d0 <unknown>
E       #2 0x564d161ed2aa <unknown>
E       #3 0x564d161ed541 <unknown>
E       #4 0x564d1623b6c4 <unknown>
E       #5 0x564d16212e5d <unknown>
E       #6 0x564d16238b54 <unknown>
E       #7 0x564d16212c03 <unknown>
E       #8 0x564d161df7a8 <unknown>
E       #9 0x564d161e0421 <unknown>
E       #10 0x564d166dbb28 <unknown>
E       #11 0x564d166df87f <unknown>
E       #12 0x564d166c3c49 <unknown>
E       #13 0x564d166e0405 <unknown>
E       #14 0x564d166a94ff <unknown>
E       #15 0x564d16704258 <unknown>
E       #16 0x564d16704432 <unknown>
E       #17 0x564d16715fa3 <unknown>
E       #18 0x7f860989caa4 <unknown>
E       #19 0x7f8609929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 03:48:37,675 - INFO - Starting test with Chrome browser
2025-10-10 03:48:37,675 - INFO - ====== WebDriver manager ======
2025-10-10 03:48:37,737 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:48:37,773 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:48:37,841 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 03:48:39,329 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-10 03:48:39,330 - INFO - Starting the test case for valid credentials
2025-10-10 03:48:39,466 - INFO - User enters the email-id
2025-10-10 03:48:41,353 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 03:50:43,052 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f2d8c04ca66f5df0d99e9cf05b45518f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f2d8c04ca66f5df0d99e9cf05b45518f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e75732480>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5584eeabffba <unknown>
E       #1 0x5584ee5446d0 <unknown>
E       #2 0x5584ee5962aa <unknown>
E       #3 0x5584ee596541 <unknown>
E       #4 0x5584ee5e46c4 <unknown>
E       #5 0x5584ee5bbe5d <unknown>
E       #6 0x5584ee5e1b54 <unknown>
E       #7 0x5584ee5bbc03 <unknown>
E       #8 0x5584ee5887a8 <unknown>
E       #9 0x5584ee589421 <unknown>
E       #10 0x5584eea84b28 <unknown>
E       #11 0x5584eea8887f <unknown>
E       #12 0x5584eea6cc49 <unknown>
E       #13 0x5584eea89405 <unknown>
E       #14 0x5584eea524ff <unknown>
E       #15 0x5584eeaad258 <unknown>
E       #16 0x5584eeaad432 <unknown>
E       #17 0x5584eeabefa3 <unknown>
E       #18 0x7fa87049caa4 <unknown>
E       #19 0x7fa870529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 03:50:43,118 - INFO - Starting test with Chrome browser
2025-10-10 03:50:43,119 - INFO - ====== WebDriver manager ======
2025-10-10 03:50:43,182 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:50:43,215 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:50:43,247 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 03:50:44,656 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-10 03:50:44,657 - INFO - Starting the test case for valid credentials
2025-10-10 03:50:44,799 - INFO - User enters the email-id
2025-10-10 03:50:46,580 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 03:52:48,260 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e4cb7ace64105468d25486d253014306")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e4cb7ace64105468d25486d253014306")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76395760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e196d78fba <unknown>
E       #1 0x55e1967fd6d0 <unknown>
E       #2 0x55e19684f2aa <unknown>
E       #3 0x55e19684f541 <unknown>
E       #4 0x55e19689d6c4 <unknown>
E       #5 0x55e196874e5d <unknown>
E       #6 0x55e19689ab54 <unknown>
E       #7 0x55e196874c03 <unknown>
E       #8 0x55e1968417a8 <unknown>
E       #9 0x55e196842421 <unknown>
E       #10 0x55e196d3db28 <unknown>
E       #11 0x55e196d4187f <unknown>
E       #12 0x55e196d25c49 <unknown>
E       #13 0x55e196d42405 <unknown>
E       #14 0x55e196d0b4ff <unknown>
E       #15 0x55e196d66258 <unknown>
E       #16 0x55e196d66432 <unknown>
E       #17 0x55e196d77fa3 <unknown>
E       #18 0x7f022069caa4 <unknown>
E       #19 0x7f0220729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 03:52:48,326 - INFO - Starting test with Chrome browser
2025-10-10 03:52:48,326 - INFO - ====== WebDriver manager ======
2025-10-10 03:52:48,389 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:52:48,422 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:52:48,455 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 03:52:49,865 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-10 03:52:49,865 - INFO - Starting the test case for valid credentials
2025-10-10 03:52:50,021 - INFO - User enters the email-id
2025-10-10 03:52:51,716 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 03:54:53,337 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7719cba94ea737182be05d9883377934")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7719cba94ea737182be05d9883377934")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76396020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560e004f6fba <unknown>
E       #1 0x560dfff7b6d0 <unknown>
E       #2 0x560dfffcd2aa <unknown>
E       #3 0x560dfffcd541 <unknown>
E       #4 0x560e0001b6c4 <unknown>
E       #5 0x560dffff2e5d <unknown>
E       #6 0x560e00018b54 <unknown>
E       #7 0x560dffff2c03 <unknown>
E       #8 0x560dfffbf7a8 <unknown>
E       #9 0x560dfffc0421 <unknown>
E       #10 0x560e004bbb28 <unknown>
E       #11 0x560e004bf87f <unknown>
E       #12 0x560e004a3c49 <unknown>
E       #13 0x560e004c0405 <unknown>
E       #14 0x560e004894ff <unknown>
E       #15 0x560e004e4258 <unknown>
E       #16 0x560e004e4432 <unknown>
E       #17 0x560e004f5fa3 <unknown>
E       #18 0x7fd96169caa4 <unknown>
E       #19 0x7fd961729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 03:54:53,403 - INFO - Starting test with Chrome browser
2025-10-10 03:54:53,403 - INFO - ====== WebDriver manager ======
2025-10-10 03:54:53,468 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:54:53,501 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:54:53,534 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 03:54:55,879 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 03:56:57,626 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="33bc434f6bee1c851d925fa98b03f742")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="33bc434f6bee1c851d925fa98b03f742")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e763960c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558f64beafba <unknown>
E       #1 0x558f6466f6d0 <unknown>
E       #2 0x558f646c12aa <unknown>
E       #3 0x558f646c1541 <unknown>
E       #4 0x558f6470f6c4 <unknown>
E       #5 0x558f646e6e5d <unknown>
E       #6 0x558f6470cb54 <unknown>
E       #7 0x558f646e6c03 <unknown>
E       #8 0x558f646b37a8 <unknown>
E       #9 0x558f646b4421 <unknown>
E       #10 0x558f64bafb28 <unknown>
E       #11 0x558f64bb387f <unknown>
E       #12 0x558f64b97c49 <unknown>
E       #13 0x558f64bb4405 <unknown>
E       #14 0x558f64b7d4ff <unknown>
E       #15 0x558f64bd8258 <unknown>
E       #16 0x558f64bd8432 <unknown>
E       #17 0x558f64be9fa3 <unknown>
E       #18 0x7fcda369caa4 <unknown>
E       #19 0x7fcda3729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 03:56:57,684 - INFO - Starting test with Chrome browser
2025-10-10 03:56:57,684 - INFO - ====== WebDriver manager ======
2025-10-10 03:56:57,747 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:56:57,784 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:56:57,819 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 03:56:58,985 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 03:59:00,775 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6b17e5d00fa3d4837a31b725965e9df7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6b17e5d00fa3d4837a31b725965e9df7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76395e40>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a55a09dfba <unknown>
E       #1 0x55a559b226d0 <unknown>
E       #2 0x55a559b742aa <unknown>
E       #3 0x55a559b74541 <unknown>
E       #4 0x55a559bc26c4 <unknown>
E       #5 0x55a559b99e5d <unknown>
E       #6 0x55a559bbfb54 <unknown>
E       #7 0x55a559b99c03 <unknown>
E       #8 0x55a559b667a8 <unknown>
E       #9 0x55a559b67421 <unknown>
E       #10 0x55a55a062b28 <unknown>
E       #11 0x55a55a06687f <unknown>
E       #12 0x55a55a04ac49 <unknown>
E       #13 0x55a55a067405 <unknown>
E       #14 0x55a55a0304ff <unknown>
E       #15 0x55a55a08b258 <unknown>
E       #16 0x55a55a08b432 <unknown>
E       #17 0x55a55a09cfa3 <unknown>
E       #18 0x7fe4c249caa4 <unknown>
E       #19 0x7fe4c2529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 03:59:00,836 - INFO - Starting test with Chrome browser
2025-10-10 03:59:00,836 - INFO - ====== WebDriver manager ======
2025-10-10 03:59:00,900 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:59:00,938 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 03:59:00,973 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 03:59:02,965 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:01:04,790 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c5a6b7b9b1fe2bc219d9fdfed838f194")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c5a6b7b9b1fe2bc219d9fdfed838f194")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e763968e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562f20d88fba <unknown>
E       #1 0x562f2080d6d0 <unknown>
E       #2 0x562f2085f2aa <unknown>
E       #3 0x562f2085f541 <unknown>
E       #4 0x562f208ad6c4 <unknown>
E       #5 0x562f20884e5d <unknown>
E       #6 0x562f208aab54 <unknown>
E       #7 0x562f20884c03 <unknown>
E       #8 0x562f208517a8 <unknown>
E       #9 0x562f20852421 <unknown>
E       #10 0x562f20d4db28 <unknown>
E       #11 0x562f20d5187f <unknown>
E       #12 0x562f20d35c49 <unknown>
E       #13 0x562f20d52405 <unknown>
E       #14 0x562f20d1b4ff <unknown>
E       #15 0x562f20d76258 <unknown>
E       #16 0x562f20d76432 <unknown>
E       #17 0x562f20d87fa3 <unknown>
E       #18 0x7f0128c9caa4 <unknown>
E       #19 0x7f0128d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:01:04,847 - INFO - Starting test with Chrome browser
2025-10-10 04:01:04,847 - INFO - ====== WebDriver manager ======
2025-10-10 04:01:04,909 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:01:04,947 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:01:04,980 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:01:06,417 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:03:08,247 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ed3fba9a2a0ed0a658fd075eb9528cba")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ed3fba9a2a0ed0a658fd075eb9528cba")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76396c00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x565517d95fba <unknown>
E       #1 0x56551781a6d0 <unknown>
E       #2 0x56551786c2aa <unknown>
E       #3 0x56551786c541 <unknown>
E       #4 0x5655178ba6c4 <unknown>
E       #5 0x565517891e5d <unknown>
E       #6 0x5655178b7b54 <unknown>
E       #7 0x565517891c03 <unknown>
E       #8 0x56551785e7a8 <unknown>
E       #9 0x56551785f421 <unknown>
E       #10 0x565517d5ab28 <unknown>
E       #11 0x565517d5e87f <unknown>
E       #12 0x565517d42c49 <unknown>
E       #13 0x565517d5f405 <unknown>
E       #14 0x565517d284ff <unknown>
E       #15 0x565517d83258 <unknown>
E       #16 0x565517d83432 <unknown>
E       #17 0x565517d94fa3 <unknown>
E       #18 0x7f1f18e9caa4 <unknown>
E       #19 0x7f1f18f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:03:08,307 - INFO - Starting test with Chrome browser
2025-10-10 04:03:08,308 - INFO - ====== WebDriver manager ======
2025-10-10 04:03:08,370 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:03:08,406 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:03:08,439 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:03:10,694 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:05:14,225 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e85b7741529f87018bc237ded8a1f841")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e85b7741529f87018bc237ded8a1f841")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76396980>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55cd48eccfba <unknown>
E       #1 0x55cd489516d0 <unknown>
E       #2 0x55cd489a32aa <unknown>
E       #3 0x55cd489a3541 <unknown>
E       #4 0x55cd489f16c4 <unknown>
E       #5 0x55cd489c8e5d <unknown>
E       #6 0x55cd489eeb54 <unknown>
E       #7 0x55cd489c8c03 <unknown>
E       #8 0x55cd489957a8 <unknown>
E       #9 0x55cd48996421 <unknown>
E       #10 0x55cd48e91b28 <unknown>
E       #11 0x55cd48e9587f <unknown>
E       #12 0x55cd48e79c49 <unknown>
E       #13 0x55cd48e96405 <unknown>
E       #14 0x55cd48e5f4ff <unknown>
E       #15 0x55cd48eba258 <unknown>
E       #16 0x55cd48eba432 <unknown>
E       #17 0x55cd48ecbfa3 <unknown>
E       #18 0x7fe9ff09caa4 <unknown>
E       #19 0x7fe9ff129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:05:14,291 - INFO - Starting test with Chrome browser
2025-10-10 04:05:14,291 - INFO - ====== WebDriver manager ======
2025-10-10 04:05:14,354 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:05:14,389 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:05:14,424 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:05:15,708 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:07:19,175 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b07375a6fbdf34e20f3213c663cf681e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b07375a6fbdf34e20f3213c663cf681e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76395e40>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d5e61d2fba <unknown>
E       #1 0x55d5e5c576d0 <unknown>
E       #2 0x55d5e5ca92aa <unknown>
E       #3 0x55d5e5ca9541 <unknown>
E       #4 0x55d5e5cf76c4 <unknown>
E       #5 0x55d5e5ccee5d <unknown>
E       #6 0x55d5e5cf4b54 <unknown>
E       #7 0x55d5e5ccec03 <unknown>
E       #8 0x55d5e5c9b7a8 <unknown>
E       #9 0x55d5e5c9c421 <unknown>
E       #10 0x55d5e6197b28 <unknown>
E       #11 0x55d5e619b87f <unknown>
E       #12 0x55d5e617fc49 <unknown>
E       #13 0x55d5e619c405 <unknown>
E       #14 0x55d5e61654ff <unknown>
E       #15 0x55d5e61c0258 <unknown>
E       #16 0x55d5e61c0432 <unknown>
E       #17 0x55d5e61d1fa3 <unknown>
E       #18 0x7f1cafa9caa4 <unknown>
E       #19 0x7f1cafb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:07:19,256 - INFO - Starting test with Chrome browser
2025-10-10 04:07:19,257 - INFO - ====== WebDriver manager ======
2025-10-10 04:07:19,320 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:07:19,353 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:07:19,388 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:07:20,914 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:09:24,387 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a908031e77b012ac394fcbe356705ac4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a908031e77b012ac394fcbe356705ac4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e763959e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563533daefba <unknown>
E       #1 0x5635338336d0 <unknown>
E       #2 0x5635338852aa <unknown>
E       #3 0x563533885541 <unknown>
E       #4 0x5635338d36c4 <unknown>
E       #5 0x5635338aae5d <unknown>
E       #6 0x5635338d0b54 <unknown>
E       #7 0x5635338aac03 <unknown>
E       #8 0x5635338777a8 <unknown>
E       #9 0x563533878421 <unknown>
E       #10 0x563533d73b28 <unknown>
E       #11 0x563533d7787f <unknown>
E       #12 0x563533d5bc49 <unknown>
E       #13 0x563533d78405 <unknown>
E       #14 0x563533d414ff <unknown>
E       #15 0x563533d9c258 <unknown>
E       #16 0x563533d9c432 <unknown>
E       #17 0x563533dadfa3 <unknown>
E       #18 0x7fc10989caa4 <unknown>
E       #19 0x7fc109929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:09:25,445 - INFO - Starting test with Chrome browser
2025-10-10 04:09:25,445 - INFO - ====== WebDriver manager ======
2025-10-10 04:09:25,509 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:09:25,546 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:09:25,578 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:09:26,864 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:11:30,434 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f23a0d69b0bd30ce04efcdfca85c5122")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
        login_page.disabled_click_login_button()
>       login_page.username_blank_validation(login_test_data)

tests/test_login.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:72: in username_blank_validation
    self.actions.wait_for_element(self.username_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f23a0d69b0bd30ce04efcdfca85c5122")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76395a80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5562ed579fba <unknown>
E       #1 0x5562ecffe6d0 <unknown>
E       #2 0x5562ed0502aa <unknown>
E       #3 0x5562ed050541 <unknown>
E       #4 0x5562ed09e6c4 <unknown>
E       #5 0x5562ed075e5d <unknown>
E       #6 0x5562ed09bb54 <unknown>
E       #7 0x5562ed075c03 <unknown>
E       #8 0x5562ed0427a8 <unknown>
E       #9 0x5562ed043421 <unknown>
E       #10 0x5562ed53eb28 <unknown>
E       #11 0x5562ed54287f <unknown>
E       #12 0x5562ed526c49 <unknown>
E       #13 0x5562ed543405 <unknown>
E       #14 0x5562ed50c4ff <unknown>
E       #15 0x5562ed567258 <unknown>
E       #16 0x5562ed567432 <unknown>
E       #17 0x5562ed578fa3 <unknown>
E       #18 0x7fa90de9caa4 <unknown>
E       #19 0x7fa90df29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:11:30,500 - INFO - Starting test with Chrome browser
2025-10-10 04:11:30,501 - INFO - ====== WebDriver manager ======
2025-10-10 04:11:30,564 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:11:30,601 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:11:30,637 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:11:31,831 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:13:33,683 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b91b87f88c8238825cb8f76b9bbbe9fd")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
        login_page.click_password()
        login_page.disabled_click_login_button()
>       login_page.password_blank_validation(login_test_data)

tests/test_login.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:78: in password_blank_validation
    self.actions.wait_for_element(self.password_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b91b87f88c8238825cb8f76b9bbbe9fd")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e763974c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f3e5d08fba <unknown>
E       #1 0x55f3e578d6d0 <unknown>
E       #2 0x55f3e57df2aa <unknown>
E       #3 0x55f3e57df541 <unknown>
E       #4 0x55f3e582d6c4 <unknown>
E       #5 0x55f3e5804e5d <unknown>
E       #6 0x55f3e582ab54 <unknown>
E       #7 0x55f3e5804c03 <unknown>
E       #8 0x55f3e57d17a8 <unknown>
E       #9 0x55f3e57d2421 <unknown>
E       #10 0x55f3e5ccdb28 <unknown>
E       #11 0x55f3e5cd187f <unknown>
E       #12 0x55f3e5cb5c49 <unknown>
E       #13 0x55f3e5cd2405 <unknown>
E       #14 0x55f3e5c9b4ff <unknown>
E       #15 0x55f3e5cf6258 <unknown>
E       #16 0x55f3e5cf6432 <unknown>
E       #17 0x55f3e5d07fa3 <unknown>
E       #18 0x7f9c9d89caa4 <unknown>
E       #19 0x7f9c9d929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:13:33,743 - INFO - Starting test with Chrome browser
2025-10-10 04:13:33,743 - INFO - ====== WebDriver manager ======
2025-10-10 04:13:33,820 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:13:33,865 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:13:33,901 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:13:35,432 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:15:39,049 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="1be2732e83339cb2e44021bd0adb1a54")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="1be2732e83339cb2e44021bd0adb1a54")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e763972e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x556a8c99ffba <unknown>
E       #1 0x556a8c4246d0 <unknown>
E       #2 0x556a8c4762aa <unknown>
E       #3 0x556a8c476541 <unknown>
E       #4 0x556a8c4c46c4 <unknown>
E       #5 0x556a8c49be5d <unknown>
E       #6 0x556a8c4c1b54 <unknown>
E       #7 0x556a8c49bc03 <unknown>
E       #8 0x556a8c4687a8 <unknown>
E       #9 0x556a8c469421 <unknown>
E       #10 0x556a8c964b28 <unknown>
E       #11 0x556a8c96887f <unknown>
E       #12 0x556a8c94cc49 <unknown>
E       #13 0x556a8c969405 <unknown>
E       #14 0x556a8c9324ff <unknown>
E       #15 0x556a8c98d258 <unknown>
E       #16 0x556a8c98d432 <unknown>
E       #17 0x556a8c99efa3 <unknown>
E       #18 0x7f3f5d29caa4 <unknown>
E       #19 0x7f3f5d329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:15:39,115 - INFO - Starting test with Chrome browser
2025-10-10 04:15:39,116 - INFO - ====== WebDriver manager ======
2025-10-10 04:15:39,183 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:15:39,224 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:15:39,259 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:15:40,662 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:17:42,575 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="4b1240052f500e05e5fcf1ad918f8f6a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4b1240052f500e05e5fcf1ad918f8f6a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76395760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55955090efba <unknown>
E       #1 0x5595503936d0 <unknown>
E       #2 0x5595503e52aa <unknown>
E       #3 0x5595503e5541 <unknown>
E       #4 0x5595504336c4 <unknown>
E       #5 0x55955040ae5d <unknown>
E       #6 0x559550430b54 <unknown>
E       #7 0x55955040ac03 <unknown>
E       #8 0x5595503d77a8 <unknown>
E       #9 0x5595503d8421 <unknown>
E       #10 0x5595508d3b28 <unknown>
E       #11 0x5595508d787f <unknown>
E       #12 0x5595508bbc49 <unknown>
E       #13 0x5595508d8405 <unknown>
E       #14 0x5595508a14ff <unknown>
E       #15 0x5595508fc258 <unknown>
E       #16 0x5595508fc432 <unknown>
E       #17 0x55955090dfa3 <unknown>
E       #18 0x7fae0ae9caa4 <unknown>
E       #19 0x7fae0af29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:17:42,657 - INFO - Starting test with Chrome browser
2025-10-10 04:17:42,657 - INFO - ====== WebDriver manager ======
2025-10-10 04:17:42,724 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:17:42,759 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:17:42,795 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:17:44,128 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:19:46,042 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="df6072cb2ef30b9f05c53e0cd66bb867")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="df6072cb2ef30b9f05c53e0cd66bb867")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76395da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5644d9fa5fba <unknown>
E       #1 0x5644d9a2a6d0 <unknown>
E       #2 0x5644d9a7c2aa <unknown>
E       #3 0x5644d9a7c541 <unknown>
E       #4 0x5644d9aca6c4 <unknown>
E       #5 0x5644d9aa1e5d <unknown>
E       #6 0x5644d9ac7b54 <unknown>
E       #7 0x5644d9aa1c03 <unknown>
E       #8 0x5644d9a6e7a8 <unknown>
E       #9 0x5644d9a6f421 <unknown>
E       #10 0x5644d9f6ab28 <unknown>
E       #11 0x5644d9f6e87f <unknown>
E       #12 0x5644d9f52c49 <unknown>
E       #13 0x5644d9f6f405 <unknown>
E       #14 0x5644d9f384ff <unknown>
E       #15 0x5644d9f93258 <unknown>
E       #16 0x5644d9f93432 <unknown>
E       #17 0x5644d9fa4fa3 <unknown>
E       #18 0x7fd89b89caa4 <unknown>
E       #19 0x7fd89b929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:19:46,108 - INFO - Starting test with Chrome browser
2025-10-10 04:19:46,108 - INFO - ====== WebDriver manager ======
2025-10-10 04:19:46,174 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:19:46,208 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:19:46,241 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:19:47,506 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:21:49,359 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ae67a9524f2175f06bcb9dcf4637e3d5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ae67a9524f2175f06bcb9dcf4637e3d5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e763976a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562d9277dfba <unknown>
E       #1 0x562d922026d0 <unknown>
E       #2 0x562d922542aa <unknown>
E       #3 0x562d92254541 <unknown>
E       #4 0x562d922a26c4 <unknown>
E       #5 0x562d92279e5d <unknown>
E       #6 0x562d9229fb54 <unknown>
E       #7 0x562d92279c03 <unknown>
E       #8 0x562d922467a8 <unknown>
E       #9 0x562d92247421 <unknown>
E       #10 0x562d92742b28 <unknown>
E       #11 0x562d9274687f <unknown>
E       #12 0x562d9272ac49 <unknown>
E       #13 0x562d92747405 <unknown>
E       #14 0x562d927104ff <unknown>
E       #15 0x562d9276b258 <unknown>
E       #16 0x562d9276b432 <unknown>
E       #17 0x562d9277cfa3 <unknown>
E       #18 0x7f9966a9caa4 <unknown>
E       #19 0x7f9966b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:21:49,419 - INFO - Starting test with Chrome browser
2025-10-10 04:21:49,419 - INFO - ====== WebDriver manager ======
2025-10-10 04:21:49,484 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:21:49,519 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:21:49,557 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:21:51,008 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:23:52,910 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ca31f2933595a63d632f87b8e5a8f50b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ca31f2933595a63d632f87b8e5a8f50b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5e76397880>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55cea0e09fba <unknown>
E       #1 0x55cea088e6d0 <unknown>
E       #2 0x55cea08e02aa <unknown>
E       #3 0x55cea08e0541 <unknown>
E       #4 0x55cea092e6c4 <unknown>
E       #5 0x55cea0905e5d <unknown>
E       #6 0x55cea092bb54 <unknown>
E       #7 0x55cea0905c03 <unknown>
E       #8 0x55cea08d27a8 <unknown>
E       #9 0x55cea08d3421 <unknown>
E       #10 0x55cea0dceb28 <unknown>
E       #11 0x55cea0dd287f <unknown>
E       #12 0x55cea0db6c49 <unknown>
E       #13 0x55cea0dd3405 <unknown>
E       #14 0x55cea0d9c4ff <unknown>
E       #15 0x55cea0df7258 <unknown>
E       #16 0x55cea0df7432 <unknown>
E       #17 0x55cea0e08fa3 <unknown>
E       #18 0x7f424c89caa4 <unknown>
E       #19 0x7f424c929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-10 04:23:52,968 - INFO - Starting test with Chrome browser
2025-10-10 04:23:52,968 - INFO - ====== WebDriver manager ======
2025-10-10 04:23:53,031 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:23:53,067 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-10 04:23:53,098 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-10 04:23:54,455 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-10 04:25:56,358 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251010_034623/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563ebe1e2fba <unknown>
#1 0x563ebdc676d0 <unknown>
#2 0x563ebdcb92aa <unknown>
#3 0x563ebdcb9541 <unknown>
#4 0x563ebdd076c4 <unknown>
#5 0x563ebdcdee5d <unknown>
#6 0x563ebdd04b54 <unknown>
#7 0x563ebdcdec03 <unknown>
#8 0x563ebdcab7a8 <unknown>
#9 0x563ebdcac421 <unknown>
#10 0x563ebe1a7b28 <unknown>
#11 0x563ebe1ab87f <unknown>
#12 0x563ebe18fc49 <unknown>
#13 0x563ebe1ac405 <unknown>
#14 0x563ebe1754ff <unknown>
#15 0x563ebe1d0258 <unknown>
#16 0x563ebe1d0432 <unknown>
#17 0x563ebe1e1fa3 <unknown>
#18 0x7f9ef749caa4 <unknown>
#19 0x7f9ef7529c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564d16716fba <unknown>
#1 0x564d1619b6d0 <unknown>
#2 0x564d161ed2aa <unknown>
#3 0x564d161ed541 <unknown>
#4 0x564d1623b6c4 <unknown>
#5 0x564d16212e5d <unknown>
#6 0x564d16238b54 <unknown>
#7 0x564d16212c03 <unknown>
#8 0x564d161df7a8 <unknown>
#9 0x564d161e0421 <unknown>
#10 0x564d166dbb28 <unknown>
#11 0x564d166df87f <unknown>
#12 0x564d166c3c49 <unknown>
#13 0x564d166e0405 <unknown>
#14 0x564d166a94ff <unknown>
#15 0x564d16704258 <unknown>
#16 0x564d16704432 <unknown>
#17 0x564d16715fa3 <unknown>
#18 0x7f860989caa4 <unknown>
#19 0x7f8609929c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5584eeabffba <unknown>
#1 0x5584ee5446d0 <unknown>
#2 0x5584ee5962aa <unknown>
#3 0x5584ee596541 <unknown>
#4 0x5584ee5e46c4 <unknown>
#5 0x5584ee5bbe5d <unknown>
#6 0x5584ee5e1b54 <unknown>
#7 0x5584ee5bbc03 <unknown>
#8 0x5584ee5887a8 <unknown>
#9 0x5584ee589421 <unknown>
#10 0x5584eea84b28 <unknown>
#11 0x5584eea8887f <unknown>
#12 0x5584eea6cc49 <unknown>
#13 0x5584eea89405 <unknown>
#14 0x5584eea524ff <unknown>
#15 0x5584eeaad258 <unknown>
#16 0x5584eeaad432 <unknown>
#17 0x5584eeabefa3 <unknown>
#18 0x7fa87049caa4 <unknown>
#19 0x7fa870529c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e196d78fba <unknown>
#1 0x55e1967fd6d0 <unknown>
#2 0x55e19684f2aa <unknown>
#3 0x55e19684f541 <unknown>
#4 0x55e19689d6c4 <unknown>
#5 0x55e196874e5d <unknown>
#6 0x55e19689ab54 <unknown>
#7 0x55e196874c03 <unknown>
#8 0x55e1968417a8 <unknown>
#9 0x55e196842421 <unknown>
#10 0x55e196d3db28 <unknown>
#11 0x55e196d4187f <unknown>
#12 0x55e196d25c49 <unknown>
#13 0x55e196d42405 <unknown>
#14 0x55e196d0b4ff <unknown>
#15 0x55e196d66258 <unknown>
#16 0x55e196d66432 <unknown>
#17 0x55e196d77fa3 <unknown>
#18 0x7f022069caa4 <unknown>
#19 0x7f0220729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560e004f6fba <unknown>
#1 0x560dfff7b6d0 <unknown>
#2 0x560dfffcd2aa <unknown>
#3 0x560dfffcd541 <unknown>
#4 0x560e0001b6c4 <unknown>
#5 0x560dffff2e5d <unknown>
#6 0x560e00018b54 <unknown>
#7 0x560dffff2c03 <unknown>
#8 0x560dfffbf7a8 <unknown>
#9 0x560dfffc0421 <unknown>
#10 0x560e004bbb28 <unknown>
#11 0x560e004bf87f <unknown>
#12 0x560e004a3c49 <unknown>
#13 0x560e004c0405 <unknown>
#14 0x560e004894ff <unknown>
#15 0x560e004e4258 <unknown>
#16 0x560e004e4432 <unknown>
#17 0x560e004f5fa3 <unknown>
#18 0x7fd96169caa4 <unknown>
#19 0x7fd961729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558f64beafba <unknown>
#1 0x558f6466f6d0 <unknown>
#2 0x558f646c12aa <unknown>
#3 0x558f646c1541 <unknown>
#4 0x558f6470f6c4 <unknown>
#5 0x558f646e6e5d <unknown>
#6 0x558f6470cb54 <unknown>
#7 0x558f646e6c03 <unknown>
#8 0x558f646b37a8 <unknown>
#9 0x558f646b4421 <unknown>
#10 0x558f64bafb28 <unknown>
#11 0x558f64bb387f <unknown>
#12 0x558f64b97c49 <unknown>
#13 0x558f64bb4405 <unknown>
#14 0x558f64b7d4ff <unknown>
#15 0x558f64bd8258 <unknown>
#16 0x558f64bd8432 <unknown>
#17 0x558f64be9fa3 <unknown>
#18 0x7fcda369caa4 <unknown>
#19 0x7fcda3729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a55a09dfba <unknown>
#1 0x55a559b226d0 <unknown>
#2 0x55a559b742aa <unknown>
#3 0x55a559b74541 <unknown>
#4 0x55a559bc26c4 <unknown>
#5 0x55a559b99e5d <unknown>
#6 0x55a559bbfb54 <unknown>
#7 0x55a559b99c03 <unknown>
#8 0x55a559b667a8 <unknown>
#9 0x55a559b67421 <unknown>
#10 0x55a55a062b28 <unknown>
#11 0x55a55a06687f <unknown>
#12 0x55a55a04ac49 <unknown>
#13 0x55a55a067405 <unknown>
#14 0x55a55a0304ff <unknown>
#15 0x55a55a08b258 <unknown>
#16 0x55a55a08b432 <unknown>
#17 0x55a55a09cfa3 <unknown>
#18 0x7fe4c249caa4 <unknown>
#19 0x7fe4c2529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562f20d88fba <unknown>
#1 0x562f2080d6d0 <unknown>
#2 0x562f2085f2aa <unknown>
#3 0x562f2085f541 <unknown>
#4 0x562f208ad6c4 <unknown>
#5 0x562f20884e5d <unknown>
#6 0x562f208aab54 <unknown>
#7 0x562f20884c03 <unknown>
#8 0x562f208517a8 <unknown>
#9 0x562f20852421 <unknown>
#10 0x562f20d4db28 <unknown>
#11 0x562f20d5187f <unknown>
#12 0x562f20d35c49 <unknown>
#13 0x562f20d52405 <unknown>
#14 0x562f20d1b4ff <unknown>
#15 0x562f20d76258 <unknown>
#16 0x562f20d76432 <unknown>
#17 0x562f20d87fa3 <unknown>
#18 0x7f0128c9caa4 <unknown>
#19 0x7f0128d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x565517d95fba <unknown>
#1 0x56551781a6d0 <unknown>
#2 0x56551786c2aa <unknown>
#3 0x56551786c541 <unknown>
#4 0x5655178ba6c4 <unknown>
#5 0x565517891e5d <unknown>
#6 0x5655178b7b54 <unknown>
#7 0x565517891c03 <unknown>
#8 0x56551785e7a8 <unknown>
#9 0x56551785f421 <unknown>
#10 0x565517d5ab28 <unknown>
#11 0x565517d5e87f <unknown>
#12 0x565517d42c49 <unknown>
#13 0x565517d5f405 <unknown>
#14 0x565517d284ff <unknown>
#15 0x565517d83258 <unknown>
#16 0x565517d83432 <unknown>
#17 0x565517d94fa3 <unknown>
#18 0x7f1f18e9caa4 <unknown>
#19 0x7f1f18f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55cd48eccfba <unknown>
#1 0x55cd489516d0 <unknown>
#2 0x55cd489a32aa <unknown>
#3 0x55cd489a3541 <unknown>
#4 0x55cd489f16c4 <unknown>
#5 0x55cd489c8e5d <unknown>
#6 0x55cd489eeb54 <unknown>
#7 0x55cd489c8c03 <unknown>
#8 0x55cd489957a8 <unknown>
#9 0x55cd48996421 <unknown>
#10 0x55cd48e91b28 <unknown>
#11 0x55cd48e9587f <unknown>
#12 0x55cd48e79c49 <unknown>
#13 0x55cd48e96405 <unknown>
#14 0x55cd48e5f4ff <unknown>
#15 0x55cd48eba258 <unknown>
#16 0x55cd48eba432 <unknown>
#17 0x55cd48ecbfa3 <unknown>
#18 0x7fe9ff09caa4 <unknown>
#19 0x7fe9ff129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d5e61d2fba <unknown>
#1 0x55d5e5c576d0 <unknown>
#2 0x55d5e5ca92aa <unknown>
#3 0x55d5e5ca9541 <unknown>
#4 0x55d5e5cf76c4 <unknown>
#5 0x55d5e5ccee5d <unknown>
#6 0x55d5e5cf4b54 <unknown>
#7 0x55d5e5ccec03 <unknown>
#8 0x55d5e5c9b7a8 <unknown>
#9 0x55d5e5c9c421 <unknown>
#10 0x55d5e6197b28 <unknown>
#11 0x55d5e619b87f <unknown>
#12 0x55d5e617fc49 <unknown>
#13 0x55d5e619c405 <unknown>
#14 0x55d5e61654ff <unknown>
#15 0x55d5e61c0258 <unknown>
#16 0x55d5e61c0432 <unknown>
#17 0x55d5e61d1fa3 <unknown>
#18 0x7f1cafa9caa4 <unknown>
#19 0x7f1cafb29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563533daefba <unknown>
#1 0x5635338336d0 <unknown>
#2 0x5635338852aa <unknown>
#3 0x563533885541 <unknown>
#4 0x5635338d36c4 <unknown>
#5 0x5635338aae5d <unknown>
#6 0x5635338d0b54 <unknown>
#7 0x5635338aac03 <unknown>
#8 0x5635338777a8 <unknown>
#9 0x563533878421 <unknown>
#10 0x563533d73b28 <unknown>
#11 0x563533d7787f <unknown>
#12 0x563533d5bc49 <unknown>
#13 0x563533d78405 <unknown>
#14 0x563533d414ff <unknown>
#15 0x563533d9c258 <unknown>
#16 0x563533d9c432 <unknown>
#17 0x563533dadfa3 <unknown>
#18 0x7fc10989caa4 <unknown>
#19 0x7fc109929c6c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5562ed579fba <unknown>
#1 0x5562ecffe6d0 <unknown>
#2 0x5562ed0502aa <unknown>
#3 0x5562ed050541 <unknown>
#4 0x5562ed09e6c4 <unknown>
#5 0x5562ed075e5d <unknown>
#6 0x5562ed09bb54 <unknown>
#7 0x5562ed075c03 <unknown>
#8 0x5562ed0427a8 <unknown>
#9 0x5562ed043421 <unknown>
#10 0x5562ed53eb28 <unknown>
#11 0x5562ed54287f <unknown>
#12 0x5562ed526c49 <unknown>
#13 0x5562ed543405 <unknown>
#14 0x5562ed50c4ff <unknown>
#15 0x5562ed567258 <unknown>
#16 0x5562ed567432 <unknown>
#17 0x5562ed578fa3 <unknown>
#18 0x7fa90de9caa4 <unknown>
#19 0x7fa90df29c6c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f3e5d08fba <unknown>
#1 0x55f3e578d6d0 <unknown>
#2 0x55f3e57df2aa <unknown>
#3 0x55f3e57df541 <unknown>
#4 0x55f3e582d6c4 <unknown>
#5 0x55f3e5804e5d <unknown>
#6 0x55f3e582ab54 <unknown>
#7 0x55f3e5804c03 <unknown>
#8 0x55f3e57d17a8 <unknown>
#9 0x55f3e57d2421 <unknown>
#10 0x55f3e5ccdb28 <unknown>
#11 0x55f3e5cd187f <unknown>
#12 0x55f3e5cb5c49 <unknown>
#13 0x55f3e5cd2405 <unknown>
#14 0x55f3e5c9b4ff <unknown>
#15 0x55f3e5cf6258 <unknown>
#16 0x55f3e5cf6432 <unknown>
#17 0x55f3e5d07fa3 <unknown>
#18 0x7f9c9d89caa4 <unknown>
#19 0x7f9c9d929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x556a8c99ffba <unknown>
#1 0x556a8c4246d0 <unknown>
#2 0x556a8c4762aa <unknown>
#3 0x556a8c476541 <unknown>
#4 0x556a8c4c46c4 <unknown>
#5 0x556a8c49be5d <unknown>
#6 0x556a8c4c1b54 <unknown>
#7 0x556a8c49bc03 <unknown>
#8 0x556a8c4687a8 <unknown>
#9 0x556a8c469421 <unknown>
#10 0x556a8c964b28 <unknown>
#11 0x556a8c96887f <unknown>
#12 0x556a8c94cc49 <unknown>
#13 0x556a8c969405 <unknown>
#14 0x556a8c9324ff <unknown>
#15 0x556a8c98d258 <unknown>
#16 0x556a8c98d432 <unknown>
#17 0x556a8c99efa3 <unknown>
#18 0x7f3f5d29caa4 <unknown>
#19 0x7f3f5d329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55955090efba <unknown>
#1 0x5595503936d0 <unknown>
#2 0x5595503e52aa <unknown>
#3 0x5595503e5541 <unknown>
#4 0x5595504336c4 <unknown>
#5 0x55955040ae5d <unknown>
#6 0x559550430b54 <unknown>
#7 0x55955040ac03 <unknown>
#8 0x5595503d77a8 <unknown>
#9 0x5595503d8421 <unknown>
#10 0x5595508d3b28 <unknown>
#11 0x5595508d787f <unknown>
#12 0x5595508bbc49 <unknown>
#13 0x5595508d8405 <unknown>
#14 0x5595508a14ff <unknown>
#15 0x5595508fc258 <unknown>
#16 0x5595508fc432 <unknown>
#17 0x55955090dfa3 <unknown>
#18 0x7fae0ae9caa4 <unknown>
#19 0x7fae0af29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5644d9fa5fba <unknown>
#1 0x5644d9a2a6d0 <unknown>
#2 0x5644d9a7c2aa <unknown>
#3 0x5644d9a7c541 <unknown>
#4 0x5644d9aca6c4 <unknown>
#5 0x5644d9aa1e5d <unknown>
#6 0x5644d9ac7b54 <unknown>
#7 0x5644d9aa1c03 <unknown>
#8 0x5644d9a6e7a8 <unknown>
#9 0x5644d9a6f421 <unknown>
#10 0x5644d9f6ab28 <unknown>
#11 0x5644d9f6e87f <unknown>
#12 0x5644d9f52c49 <unknown>
#13 0x5644d9f6f405 <unknown>
#14 0x5644d9f384ff <unknown>
#15 0x5644d9f93258 <unknown>
#16 0x5644d9f93432 <unknown>
#17 0x5644d9fa4fa3 <unknown>
#18 0x7fd89b89caa4 <unknown>
#19 0x7fd89b929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562d9277dfba <unknown>
#1 0x562d922026d0 <unknown>
#2 0x562d922542aa <unknown>
#3 0x562d92254541 <unknown>
#4 0x562d922a26c4 <unknown>
#5 0x562d92279e5d <unknown>
#6 0x562d9229fb54 <unknown>
#7 0x562d92279c03 <unknown>
#8 0x562d922467a8 <unknown>
#9 0x562d92247421 <unknown>
#10 0x562d92742b28 <unknown>
#11 0x562d9274687f <unknown>
#12 0x562d9272ac49 <unknown>
#13 0x562d92747405 <unknown>
#14 0x562d927104ff <unknown>
#15 0x562d9276b258 <unknown>
#16 0x562d9276b432 <unknown>
#17 0x562d9277cfa3 <unknown>
#18 0x7f9966a9caa4 <unknown>
#19 0x7f9966b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55cea0e09fba <unknown>
#1 0x55cea088e6d0 <unknown>
#2 0x55cea08e02aa <unknown>
#3 0x55cea08e0541 <unknown>
#4 0x55cea092e6c4 <unknown>
#5 0x55cea0905e5d <unknown>
#6 0x55cea092bb54 <unknown>
#7 0x55cea0905c03 <unknown>
#8 0x55cea08d27a8 <unknown>
#9 0x55cea08d3421 <unknown>
#10 0x55cea0dceb28 <unknown>
#11 0x55cea0dd287f <unknown>
#12 0x55cea0db6c49 <unknown>
#13 0x55cea0dd3405 <unknown>
#14 0x55cea0d9c4ff <unknown>
#15 0x55cea0df7258 <unknown>
#16 0x55cea0df7432 <unknown>
#17 0x55cea0e08fa3 <unknown>
#18 0x7f424c89caa4 <unknown>
#19 0x7f424c929c6c <unknown>
======================= 19 failed in 2373.06s (0:39:33) ========================
--------------------------------------------
Test Run Finished: 2025-10-10 04:25:56
Duration: 2375 seconds
Status: FAILURE
Exit Code: 1
============================================
