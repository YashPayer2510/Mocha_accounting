========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-25 03:47:50
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="1b7126e2b7ef07f659b8acc32391df25")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="1b7126e2b7ef07f659b8acc32391df25")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7253470900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557fa2e73fba <unknown>
E       #1 0x557fa28f86d0 <unknown>
E       #2 0x557fa294a2aa <unknown>
E       #3 0x557fa294a541 <unknown>
E       #4 0x557fa29986c4 <unknown>
E       #5 0x557fa296fe5d <unknown>
E       #6 0x557fa2995b54 <unknown>
E       #7 0x557fa296fc03 <unknown>
E       #8 0x557fa293c7a8 <unknown>
E       #9 0x557fa293d421 <unknown>
E       #10 0x557fa2e38b28 <unknown>
E       #11 0x557fa2e3c87f <unknown>
E       #12 0x557fa2e20c49 <unknown>
E       #13 0x557fa2e3d405 <unknown>
E       #14 0x557fa2e064ff <unknown>
E       #15 0x557fa2e61258 <unknown>
E       #16 0x557fa2e61432 <unknown>
E       #17 0x557fa2e72fa3 <unknown>
E       #18 0x7f8f0449caa4 <unknown>
E       #19 0x7f8f04529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 03:47:55,016 - INFO - Test data loaded successfully.
2025-09-25 03:47:55,017 - INFO - Starting test with Chrome browser
2025-09-25 03:47:55,017 - INFO - ====== WebDriver manager ======
2025-09-25 03:48:00,965 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:48:01,002 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:48:01,035 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-09-25 03:48:01,035 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:48:01,135 - INFO - WebDriver version 140.0.7339.207 selected
2025-09-25 03:48:01,139 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-25 03:48:01,140 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-25 03:48:01,177 - INFO - Driver downloading response is 200
2025-09-25 03:48:01,222 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:48:01,370 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-09-25 03:48:25,138 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-25 03:48:25,138 - INFO - Starting the test case for valid credentials
2025-09-25 03:48:25,535 - INFO - User enters the email-id
2025-09-25 03:48:27,024 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 03:50:28,742 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bd20d00e1da948501b9ae255556de392")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="bd20d00e1da948501b9ae255556de392")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cdd8a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b331db4fba <unknown>
E       #1 0x55b3318396d0 <unknown>
E       #2 0x55b33188b2aa <unknown>
E       #3 0x55b33188b541 <unknown>
E       #4 0x55b3318d96c4 <unknown>
E       #5 0x55b3318b0e5d <unknown>
E       #6 0x55b3318d6b54 <unknown>
E       #7 0x55b3318b0c03 <unknown>
E       #8 0x55b33187d7a8 <unknown>
E       #9 0x55b33187e421 <unknown>
E       #10 0x55b331d79b28 <unknown>
E       #11 0x55b331d7d87f <unknown>
E       #12 0x55b331d61c49 <unknown>
E       #13 0x55b331d7e405 <unknown>
E       #14 0x55b331d474ff <unknown>
E       #15 0x55b331da2258 <unknown>
E       #16 0x55b331da2432 <unknown>
E       #17 0x55b331db3fa3 <unknown>
E       #18 0x7f623169caa4 <unknown>
E       #19 0x7f6231729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 03:50:28,960 - INFO - Starting test with Chrome browser
2025-09-25 03:50:28,960 - INFO - ====== WebDriver manager ======
2025-09-25 03:50:29,025 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:50:29,060 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:50:29,207 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 03:50:30,440 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-25 03:50:30,440 - INFO - Starting the test case for valid credentials
2025-09-25 03:50:30,581 - INFO - User enters the email-id
2025-09-25 03:50:32,102 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 03:52:33,737 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="dee34f018d7a246ac58d6a711c0390f3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="dee34f018d7a246ac58d6a711c0390f3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7254a7e3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a655b2ffba <unknown>
E       #1 0x55a6555b46d0 <unknown>
E       #2 0x55a6556062aa <unknown>
E       #3 0x55a655606541 <unknown>
E       #4 0x55a6556546c4 <unknown>
E       #5 0x55a65562be5d <unknown>
E       #6 0x55a655651b54 <unknown>
E       #7 0x55a65562bc03 <unknown>
E       #8 0x55a6555f87a8 <unknown>
E       #9 0x55a6555f9421 <unknown>
E       #10 0x55a655af4b28 <unknown>
E       #11 0x55a655af887f <unknown>
E       #12 0x55a655adcc49 <unknown>
E       #13 0x55a655af9405 <unknown>
E       #14 0x55a655ac24ff <unknown>
E       #15 0x55a655b1d258 <unknown>
E       #16 0x55a655b1d432 <unknown>
E       #17 0x55a655b2efa3 <unknown>
E       #18 0x7fa74849caa4 <unknown>
E       #19 0x7fa748529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 03:52:33,805 - INFO - Starting test with Chrome browser
2025-09-25 03:52:33,805 - INFO - ====== WebDriver manager ======
2025-09-25 03:52:33,871 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:52:33,903 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:52:33,937 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 03:52:34,650 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-25 03:52:34,650 - INFO - Starting the test case for valid credentials
2025-09-25 03:52:35,105 - INFO - User enters the email-id
2025-09-25 03:52:36,574 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 03:54:38,221 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8d738012ca35dec9b6d408ca14155044")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8d738012ca35dec9b6d408ca14155044")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cdd6c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f3f5db9fba <unknown>
E       #1 0x55f3f583e6d0 <unknown>
E       #2 0x55f3f58902aa <unknown>
E       #3 0x55f3f5890541 <unknown>
E       #4 0x55f3f58de6c4 <unknown>
E       #5 0x55f3f58b5e5d <unknown>
E       #6 0x55f3f58dbb54 <unknown>
E       #7 0x55f3f58b5c03 <unknown>
E       #8 0x55f3f58827a8 <unknown>
E       #9 0x55f3f5883421 <unknown>
E       #10 0x55f3f5d7eb28 <unknown>
E       #11 0x55f3f5d8287f <unknown>
E       #12 0x55f3f5d66c49 <unknown>
E       #13 0x55f3f5d83405 <unknown>
E       #14 0x55f3f5d4c4ff <unknown>
E       #15 0x55f3f5da7258 <unknown>
E       #16 0x55f3f5da7432 <unknown>
E       #17 0x55f3f5db8fa3 <unknown>
E       #18 0x7faa8249caa4 <unknown>
E       #19 0x7faa82529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 03:54:38,287 - INFO - Starting test with Chrome browser
2025-09-25 03:54:38,287 - INFO - ====== WebDriver manager ======
2025-09-25 03:54:38,353 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:54:38,386 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:54:38,418 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 03:54:39,608 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-25 03:54:39,609 - INFO - Starting the test case for valid credentials
2025-09-25 03:54:39,764 - INFO - User enters the email-id
2025-09-25 03:54:41,292 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 03:56:42,929 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a7884b2e0657ff8db23781712fd33188")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a7884b2e0657ff8db23781712fd33188")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cddf80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55db60dcbfba <unknown>
E       #1 0x55db608506d0 <unknown>
E       #2 0x55db608a22aa <unknown>
E       #3 0x55db608a2541 <unknown>
E       #4 0x55db608f06c4 <unknown>
E       #5 0x55db608c7e5d <unknown>
E       #6 0x55db608edb54 <unknown>
E       #7 0x55db608c7c03 <unknown>
E       #8 0x55db608947a8 <unknown>
E       #9 0x55db60895421 <unknown>
E       #10 0x55db60d90b28 <unknown>
E       #11 0x55db60d9487f <unknown>
E       #12 0x55db60d78c49 <unknown>
E       #13 0x55db60d95405 <unknown>
E       #14 0x55db60d5e4ff <unknown>
E       #15 0x55db60db9258 <unknown>
E       #16 0x55db60db9432 <unknown>
E       #17 0x55db60dcafa3 <unknown>
E       #18 0x7f8898c9caa4 <unknown>
E       #19 0x7f8898d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 03:56:42,989 - INFO - Starting test with Chrome browser
2025-09-25 03:56:42,989 - INFO - ====== WebDriver manager ======
2025-09-25 03:56:43,056 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:56:43,090 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:56:43,123 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 03:56:44,401 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 03:58:46,197 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fe860f7cdfec6c5a081c841a84ab80c5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="fe860f7cdfec6c5a081c841a84ab80c5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cde020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f4b6401fba <unknown>
E       #1 0x55f4b5e866d0 <unknown>
E       #2 0x55f4b5ed82aa <unknown>
E       #3 0x55f4b5ed8541 <unknown>
E       #4 0x55f4b5f266c4 <unknown>
E       #5 0x55f4b5efde5d <unknown>
E       #6 0x55f4b5f23b54 <unknown>
E       #7 0x55f4b5efdc03 <unknown>
E       #8 0x55f4b5eca7a8 <unknown>
E       #9 0x55f4b5ecb421 <unknown>
E       #10 0x55f4b63c6b28 <unknown>
E       #11 0x55f4b63ca87f <unknown>
E       #12 0x55f4b63aec49 <unknown>
E       #13 0x55f4b63cb405 <unknown>
E       #14 0x55f4b63944ff <unknown>
E       #15 0x55f4b63ef258 <unknown>
E       #16 0x55f4b63ef432 <unknown>
E       #17 0x55f4b6400fa3 <unknown>
E       #18 0x7f06f409caa4 <unknown>
E       #19 0x7f06f4129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 03:58:46,264 - INFO - Starting test with Chrome browser
2025-09-25 03:58:46,264 - INFO - ====== WebDriver manager ======
2025-09-25 03:58:46,331 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:58:46,365 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 03:58:46,402 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 03:58:48,296 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 04:00:50,057 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3a5af06e788dd98ad8281cbf9c85d300")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3a5af06e788dd98ad8281cbf9c85d300")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cddda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56329ad58fba <unknown>
E       #1 0x56329a7dd6d0 <unknown>
E       #2 0x56329a82f2aa <unknown>
E       #3 0x56329a82f541 <unknown>
E       #4 0x56329a87d6c4 <unknown>
E       #5 0x56329a854e5d <unknown>
E       #6 0x56329a87ab54 <unknown>
E       #7 0x56329a854c03 <unknown>
E       #8 0x56329a8217a8 <unknown>
E       #9 0x56329a822421 <unknown>
E       #10 0x56329ad1db28 <unknown>
E       #11 0x56329ad2187f <unknown>
E       #12 0x56329ad05c49 <unknown>
E       #13 0x56329ad22405 <unknown>
E       #14 0x56329aceb4ff <unknown>
E       #15 0x56329ad46258 <unknown>
E       #16 0x56329ad46432 <unknown>
E       #17 0x56329ad57fa3 <unknown>
E       #18 0x7fe48f69caa4 <unknown>
E       #19 0x7fe48f729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 04:00:50,124 - INFO - Starting test with Chrome browser
2025-09-25 04:00:50,124 - INFO - ====== WebDriver manager ======
2025-09-25 04:00:50,189 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:00:50,224 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:00:50,258 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 04:00:51,954 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 04:02:53,670 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6bba21554eb77ee75d2c390bd1c53f62")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6bba21554eb77ee75d2c390bd1c53f62")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cde840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x561c6a5ccfba <unknown>
E       #1 0x561c6a0516d0 <unknown>
E       #2 0x561c6a0a32aa <unknown>
E       #3 0x561c6a0a3541 <unknown>
E       #4 0x561c6a0f16c4 <unknown>
E       #5 0x561c6a0c8e5d <unknown>
E       #6 0x561c6a0eeb54 <unknown>
E       #7 0x561c6a0c8c03 <unknown>
E       #8 0x561c6a0957a8 <unknown>
E       #9 0x561c6a096421 <unknown>
E       #10 0x561c6a591b28 <unknown>
E       #11 0x561c6a59587f <unknown>
E       #12 0x561c6a579c49 <unknown>
E       #13 0x561c6a596405 <unknown>
E       #14 0x561c6a55f4ff <unknown>
E       #15 0x561c6a5ba258 <unknown>
E       #16 0x561c6a5ba432 <unknown>
E       #17 0x561c6a5cbfa3 <unknown>
E       #18 0x7f023409caa4 <unknown>
E       #19 0x7f0234129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 04:02:53,734 - INFO - Starting test with Chrome browser
2025-09-25 04:02:53,735 - INFO - ====== WebDriver manager ======
2025-09-25 04:02:53,800 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:02:53,833 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:02:53,865 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 04:02:55,124 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 04:04:56,878 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="1de50af6cfc9d033d9a5f012b317df18")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="1de50af6cfc9d033d9a5f012b317df18")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cdeb60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c35d2e0fba <unknown>
E       #1 0x55c35cd656d0 <unknown>
E       #2 0x55c35cdb72aa <unknown>
E       #3 0x55c35cdb7541 <unknown>
E       #4 0x55c35ce056c4 <unknown>
E       #5 0x55c35cddce5d <unknown>
E       #6 0x55c35ce02b54 <unknown>
E       #7 0x55c35cddcc03 <unknown>
E       #8 0x55c35cda97a8 <unknown>
E       #9 0x55c35cdaa421 <unknown>
E       #10 0x55c35d2a5b28 <unknown>
E       #11 0x55c35d2a987f <unknown>
E       #12 0x55c35d28dc49 <unknown>
E       #13 0x55c35d2aa405 <unknown>
E       #14 0x55c35d2734ff <unknown>
E       #15 0x55c35d2ce258 <unknown>
E       #16 0x55c35d2ce432 <unknown>
E       #17 0x55c35d2dffa3 <unknown>
E       #18 0x7fc3a089caa4 <unknown>
E       #19 0x7fc3a0929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 04:04:56,944 - INFO - Starting test with Chrome browser
2025-09-25 04:04:56,944 - INFO - ====== WebDriver manager ======
2025-09-25 04:04:57,009 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:04:57,045 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:04:57,077 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 04:04:58,356 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 04:07:01,650 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c10f42ea804b11fb6704f853364b9070")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c10f42ea804b11fb6704f853364b9070")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cde8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5603747cafba <unknown>
E       #1 0x56037424f6d0 <unknown>
E       #2 0x5603742a12aa <unknown>
E       #3 0x5603742a1541 <unknown>
E       #4 0x5603742ef6c4 <unknown>
E       #5 0x5603742c6e5d <unknown>
E       #6 0x5603742ecb54 <unknown>
E       #7 0x5603742c6c03 <unknown>
E       #8 0x5603742937a8 <unknown>
E       #9 0x560374294421 <unknown>
E       #10 0x56037478fb28 <unknown>
E       #11 0x56037479387f <unknown>
E       #12 0x560374777c49 <unknown>
E       #13 0x560374794405 <unknown>
E       #14 0x56037475d4ff <unknown>
E       #15 0x5603747b8258 <unknown>
E       #16 0x5603747b8432 <unknown>
E       #17 0x5603747c9fa3 <unknown>
E       #18 0x7f196f69caa4 <unknown>
E       #19 0x7f196f729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 04:07:01,715 - INFO - Starting test with Chrome browser
2025-09-25 04:07:01,715 - INFO - ====== WebDriver manager ======
2025-09-25 04:07:01,780 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:07:01,820 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:07:01,854 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 04:07:03,345 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 04:09:06,591 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8e43141e08ad6bc3dfe6d7ca5b02aaa6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8e43141e08ad6bc3dfe6d7ca5b02aaa6")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cddda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a35ad15fba <unknown>
E       #1 0x55a35a79a6d0 <unknown>
E       #2 0x55a35a7ec2aa <unknown>
E       #3 0x55a35a7ec541 <unknown>
E       #4 0x55a35a83a6c4 <unknown>
E       #5 0x55a35a811e5d <unknown>
E       #6 0x55a35a837b54 <unknown>
E       #7 0x55a35a811c03 <unknown>
E       #8 0x55a35a7de7a8 <unknown>
E       #9 0x55a35a7df421 <unknown>
E       #10 0x55a35acdab28 <unknown>
E       #11 0x55a35acde87f <unknown>
E       #12 0x55a35acc2c49 <unknown>
E       #13 0x55a35acdf405 <unknown>
E       #14 0x55a35aca84ff <unknown>
E       #15 0x55a35ad03258 <unknown>
E       #16 0x55a35ad03432 <unknown>
E       #17 0x55a35ad14fa3 <unknown>
E       #18 0x7fad7d29caa4 <unknown>
E       #19 0x7fad7d329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 04:09:06,658 - INFO - Starting test with Chrome browser
2025-09-25 04:09:06,659 - INFO - ====== WebDriver manager ======
2025-09-25 04:09:06,724 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:09:06,762 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:09:06,794 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 04:09:08,479 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 04:11:11,820 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d3be4d8e91c728c44bedd9fafb8f660d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d3be4d8e91c728c44bedd9fafb8f660d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f7252cdd940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f8022b4fba <unknown>
E       #1 0x55f801d396d0 <unknown>
E       #2 0x55f801d8b2aa <unknown>
E       #3 0x55f801d8b541 <unknown>
E       #4 0x55f801dd96c4 <unknown>
E       #5 0x55f801db0e5d <unknown>
E       #6 0x55f801dd6b54 <unknown>
E       #7 0x55f801db0c03 <unknown>
E       #8 0x55f801d7d7a8 <unknown>
E       #9 0x55f801d7e421 <unknown>
E       #10 0x55f802279b28 <unknown>
E       #11 0x55f80227d87f <unknown>
E       #12 0x55f802261c49 <unknown>
E       #13 0x55f80227e405 <unknown>
E       #14 0x55f8022474ff <unknown>
E       #15 0x55f8022a2258 <unknown>
E       #16 0x55f8022a2432 <unknown>
E       #17 0x55f8022b3fa3 <unknown>
E       #18 0x7fb46989caa4 <unknown>
E       #19 0x7fb469929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-25 04:11:11,885 - INFO - Starting test with Chrome browser
2025-09-25 04:11:11,886 - INFO - ====== WebDriver manager ======
2025-09-25 04:11:11,952 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:11:11,986 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-25 04:11:12,021 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-25 04:11:13,378 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-25 04:13:16,653 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250925_034754/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557fa2e73fba <unknown>
#1 0x557fa28f86d0 <unknown>
#2 0x557fa294a2aa <unknown>
#3 0x557fa294a541 <unknown>
#4 0x557fa29986c4 <unknown>
#5 0x557fa296fe5d <unknown>
#6 0x557fa2995b54 <unknown>
#7 0x557fa296fc03 <unknown>
#8 0x557fa293c7a8 <unknown>
#9 0x557fa293d421 <unknown>
#10 0x557fa2e38b28 <unknown>
#11 0x557fa2e3c87f <unknown>
#12 0x557fa2e20c49 <unknown>
#13 0x557fa2e3d405 <unknown>
#14 0x557fa2e064ff <unknown>
#15 0x557fa2e61258 <unknown>
#16 0x557fa2e61432 <unknown>
#17 0x557fa2e72fa3 <unknown>
#18 0x7f8f0449caa4 <unknown>
#19 0x7f8f04529c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b331db4fba <unknown>
#1 0x55b3318396d0 <unknown>
#2 0x55b33188b2aa <unknown>
#3 0x55b33188b541 <unknown>
#4 0x55b3318d96c4 <unknown>
#5 0x55b3318b0e5d <unknown>
#6 0x55b3318d6b54 <unknown>
#7 0x55b3318b0c03 <unknown>
#8 0x55b33187d7a8 <unknown>
#9 0x55b33187e421 <unknown>
#10 0x55b331d79b28 <unknown>
#11 0x55b331d7d87f <unknown>
#12 0x55b331d61c49 <unknown>
#13 0x55b331d7e405 <unknown>
#14 0x55b331d474ff <unknown>
#15 0x55b331da2258 <unknown>
#16 0x55b331da2432 <unknown>
#17 0x55b331db3fa3 <unknown>
#18 0x7f623169caa4 <unknown>
#19 0x7f6231729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a655b2ffba <unknown>
#1 0x55a6555b46d0 <unknown>
#2 0x55a6556062aa <unknown>
#3 0x55a655606541 <unknown>
#4 0x55a6556546c4 <unknown>
#5 0x55a65562be5d <unknown>
#6 0x55a655651b54 <unknown>
#7 0x55a65562bc03 <unknown>
#8 0x55a6555f87a8 <unknown>
#9 0x55a6555f9421 <unknown>
#10 0x55a655af4b28 <unknown>
#11 0x55a655af887f <unknown>
#12 0x55a655adcc49 <unknown>
#13 0x55a655af9405 <unknown>
#14 0x55a655ac24ff <unknown>
#15 0x55a655b1d258 <unknown>
#16 0x55a655b1d432 <unknown>
#17 0x55a655b2efa3 <unknown>
#18 0x7fa74849caa4 <unknown>
#19 0x7fa748529c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f3f5db9fba <unknown>
#1 0x55f3f583e6d0 <unknown>
#2 0x55f3f58902aa <unknown>
#3 0x55f3f5890541 <unknown>
#4 0x55f3f58de6c4 <unknown>
#5 0x55f3f58b5e5d <unknown>
#6 0x55f3f58dbb54 <unknown>
#7 0x55f3f58b5c03 <unknown>
#8 0x55f3f58827a8 <unknown>
#9 0x55f3f5883421 <unknown>
#10 0x55f3f5d7eb28 <unknown>
#11 0x55f3f5d8287f <unknown>
#12 0x55f3f5d66c49 <unknown>
#13 0x55f3f5d83405 <unknown>
#14 0x55f3f5d4c4ff <unknown>
#15 0x55f3f5da7258 <unknown>
#16 0x55f3f5da7432 <unknown>
#17 0x55f3f5db8fa3 <unknown>
#18 0x7faa8249caa4 <unknown>
#19 0x7faa82529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55db60dcbfba <unknown>
#1 0x55db608506d0 <unknown>
#2 0x55db608a22aa <unknown>
#3 0x55db608a2541 <unknown>
#4 0x55db608f06c4 <unknown>
#5 0x55db608c7e5d <unknown>
#6 0x55db608edb54 <unknown>
#7 0x55db608c7c03 <unknown>
#8 0x55db608947a8 <unknown>
#9 0x55db60895421 <unknown>
#10 0x55db60d90b28 <unknown>
#11 0x55db60d9487f <unknown>
#12 0x55db60d78c49 <unknown>
#13 0x55db60d95405 <unknown>
#14 0x55db60d5e4ff <unknown>
#15 0x55db60db9258 <unknown>
#16 0x55db60db9432 <unknown>
#17 0x55db60dcafa3 <unknown>
#18 0x7f8898c9caa4 <unknown>
#19 0x7f8898d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f4b6401fba <unknown>
#1 0x55f4b5e866d0 <unknown>
#2 0x55f4b5ed82aa <unknown>
#3 0x55f4b5ed8541 <unknown>
#4 0x55f4b5f266c4 <unknown>
#5 0x55f4b5efde5d <unknown>
#6 0x55f4b5f23b54 <unknown>
#7 0x55f4b5efdc03 <unknown>
#8 0x55f4b5eca7a8 <unknown>
#9 0x55f4b5ecb421 <unknown>
#10 0x55f4b63c6b28 <unknown>
#11 0x55f4b63ca87f <unknown>
#12 0x55f4b63aec49 <unknown>
#13 0x55f4b63cb405 <unknown>
#14 0x55f4b63944ff <unknown>
#15 0x55f4b63ef258 <unknown>
#16 0x55f4b63ef432 <unknown>
#17 0x55f4b6400fa3 <unknown>
#18 0x7f06f409caa4 <unknown>
#19 0x7f06f4129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56329ad58fba <unknown>
#1 0x56329a7dd6d0 <unknown>
#2 0x56329a82f2aa <unknown>
#3 0x56329a82f541 <unknown>
#4 0x56329a87d6c4 <unknown>
#5 0x56329a854e5d <unknown>
#6 0x56329a87ab54 <unknown>
#7 0x56329a854c03 <unknown>
#8 0x56329a8217a8 <unknown>
#9 0x56329a822421 <unknown>
#10 0x56329ad1db28 <unknown>
#11 0x56329ad2187f <unknown>
#12 0x56329ad05c49 <unknown>
#13 0x56329ad22405 <unknown>
#14 0x56329aceb4ff <unknown>
#15 0x56329ad46258 <unknown>
#16 0x56329ad46432 <unknown>
#17 0x56329ad57fa3 <unknown>
#18 0x7fe48f69caa4 <unknown>
#19 0x7fe48f729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x561c6a5ccfba <unknown>
#1 0x561c6a0516d0 <unknown>
#2 0x561c6a0a32aa <unknown>
#3 0x561c6a0a3541 <unknown>
#4 0x561c6a0f16c4 <unknown>
#5 0x561c6a0c8e5d <unknown>
#6 0x561c6a0eeb54 <unknown>
#7 0x561c6a0c8c03 <unknown>
#8 0x561c6a0957a8 <unknown>
#9 0x561c6a096421 <unknown>
#10 0x561c6a591b28 <unknown>
#11 0x561c6a59587f <unknown>
#12 0x561c6a579c49 <unknown>
#13 0x561c6a596405 <unknown>
#14 0x561c6a55f4ff <unknown>
#15 0x561c6a5ba258 <unknown>
#16 0x561c6a5ba432 <unknown>
#17 0x561c6a5cbfa3 <unknown>
#18 0x7f023409caa4 <unknown>
#19 0x7f0234129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c35d2e0fba <unknown>
#1 0x55c35cd656d0 <unknown>
#2 0x55c35cdb72aa <unknown>
#3 0x55c35cdb7541 <unknown>
#4 0x55c35ce056c4 <unknown>
#5 0x55c35cddce5d <unknown>
#6 0x55c35ce02b54 <unknown>
#7 0x55c35cddcc03 <unknown>
#8 0x55c35cda97a8 <unknown>
#9 0x55c35cdaa421 <unknown>
#10 0x55c35d2a5b28 <unknown>
#11 0x55c35d2a987f <unknown>
#12 0x55c35d28dc49 <unknown>
#13 0x55c35d2aa405 <unknown>
#14 0x55c35d2734ff <unknown>
#15 0x55c35d2ce258 <unknown>
#16 0x55c35d2ce432 <unknown>
#17 0x55c35d2dffa3 <unknown>
#18 0x7fc3a089caa4 <unknown>
#19 0x7fc3a0929c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5603747cafba <unknown>
#1 0x56037424f6d0 <unknown>
#2 0x5603742a12aa <unknown>
#3 0x5603742a1541 <unknown>
#4 0x5603742ef6c4 <unknown>
#5 0x5603742c6e5d <unknown>
#6 0x5603742ecb54 <unknown>
#7 0x5603742c6c03 <unknown>
#8 0x5603742937a8 <unknown>
#9 0x560374294421 <unknown>
#10 0x56037478fb28 <unknown>
#11 0x56037479387f <unknown>
#12 0x560374777c49 <unknown>
#13 0x560374794405 <unknown>
#14 0x56037475d4ff <unknown>
#15 0x5603747b8258 <unknown>
#16 0x5603747b8432 <unknown>
#17 0x5603747c9fa3 <unknown>
#18 0x7f196f69caa4 <unknown>
#19 0x7f196f729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a35ad15fba <unknown>
#1 0x55a35a79a6d0 <unknown>
#2 0x55a35a7ec2aa <unknown>
#3 0x55a35a7ec541 <unknown>
#4 0x55a35a83a6c4 <unknown>
#5 0x55a35a811e5d <unknown>
#6 0x55a35a837b54 <unknown>
#7 0x55a35a811c03 <unknown>
#8 0x55a35a7de7a8 <unknown>
#9 0x55a35a7df421 <unknown>
#10 0x55a35acdab28 <unknown>
#11 0x55a35acde87f <unknown>
#12 0x55a35acc2c49 <unknown>
#13 0x55a35acdf405 <unknown>
#14 0x55a35aca84ff <unknown>
#15 0x55a35ad03258 <unknown>
#16 0x55a35ad03432 <unknown>
#17 0x55a35ad14fa3 <unknown>
#18 0x7fad7d29caa4 <unknown>
#19 0x7fad7d329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f8022b4fba <unknown>
#1 0x55f801d396d0 <unknown>
#2 0x55f801d8b2aa <unknown>
#3 0x55f801d8b541 <unknown>
#4 0x55f801dd96c4 <unknown>
#5 0x55f801db0e5d <unknown>
#6 0x55f801dd6b54 <unknown>
#7 0x55f801db0c03 <unknown>
#8 0x55f801d7d7a8 <unknown>
#9 0x55f801d7e421 <unknown>
#10 0x55f802279b28 <unknown>
#11 0x55f80227d87f <unknown>
#12 0x55f802261c49 <unknown>
#13 0x55f80227e405 <unknown>
#14 0x55f8022474ff <unknown>
#15 0x55f8022a2258 <unknown>
#16 0x55f8022a2432 <unknown>
#17 0x55f8022b3fa3 <unknown>
#18 0x7fb46989caa4 <unknown>
#19 0x7fb469929c6c <unknown>
================== 12 failed, 7 passed in 1534.83s (0:25:34) ===================
--------------------------------------------
Test Run Finished: 2025-09-25 04:13:29
Duration: 1539 seconds
Status: FAILURE
Exit Code: 1
============================================
