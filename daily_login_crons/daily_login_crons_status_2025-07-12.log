========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-12 04:05:50
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.5/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.5', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'rerunfailures': '15.1', 'Faker': '37.4.0', 'xdist': '3.8.0', 'html': '4.1.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: rerunfailures-15.1, Faker-37.4.0, xdist-3.8.0, html-4.1.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ab9e23617485d85a3fd705a46118c09b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215a91940>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55dd44562556 \\u003Cunknown>\\n#18 0x7f2a76a9caa4 \\u003Cunknown>\\n#19 0x7f2a76b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55dd4456323a <unknown>
E       #1 0x55dd4400dab0 <unknown>
E       #2 0x55dd44014748 <unknown>
E       #3 0x55dd440172c7 <unknown>
E       #4 0x55dd440abfde <unknown>
E       #5 0x55dd440851a2 <unknown>
E       #6 0x55dd440aafee <unknown>
E       #7 0x55dd44084f73 <unknown>
E       #8 0x55dd44051aeb <unknown>
E       #9 0x55dd44052751 <unknown>
E       #10 0x55dd44527b4b <unknown>
E       #11 0x55dd4452b929 <unknown>
E       #12 0x55dd4450e929 <unknown>
E       #13 0x55dd4452c4e8 <unknown>
E       #14 0x55dd444f30df <unknown>
E       #15 0x55dd445508e8 <unknown>
E       #16 0x55dd44550ac6 <unknown>
E       #17 0x55dd44562556 <unknown>
E       #18 0x7f2a76a9caa4 <unknown>
E       #19 0x7f2a76b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:05:52,407 - INFO - Test data loaded successfully.
2025-07-12 04:05:52,407 - INFO - Starting test with Chrome browser
2025-07-12 04:05:52,407 - INFO - ====== WebDriver manager ======
2025-07-12 04:05:55,452 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:05:55,521 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:05:55,552 - INFO - There is no [linux64] chromedriver "138.0.7204.94" for browser google-chrome "138.0.7204" in cache
2025-07-12 04:05:55,552 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:05:55,645 - INFO - WebDriver version 138.0.7204.94 selected
2025-07-12 04:05:55,648 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
2025-07-12 04:05:55,648 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
2025-07-12 04:05:55,691 - INFO - Driver downloading response is 200
2025-07-12 04:05:55,793 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:05:55,934 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94]
2025-07-12 04:06:03,348 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "138.0.7204.94" for browser google-chrome "138.0.7204" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 138.0.7204.94 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-12 04:06:03,349 - INFO - Starting the test case for valid credentials
2025-07-12 04:06:03,684 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:04,630 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="38e0d09a5ea74f78866f664e54aa064e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215ac4f50>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55625bdf4556 \\u003Cunknown>\\n#18 0x7fefea49caa4 \\u003Cunknown>\\n#19 0x7fefea529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55625bdf523a <unknown>
E       #1 0x55625b89fab0 <unknown>
E       #2 0x55625b8a6748 <unknown>
E       #3 0x55625b8a92c7 <unknown>
E       #4 0x55625b93dfde <unknown>
E       #5 0x55625b9171a2 <unknown>
E       #6 0x55625b93cfee <unknown>
E       #7 0x55625b916f73 <unknown>
E       #8 0x55625b8e3aeb <unknown>
E       #9 0x55625b8e4751 <unknown>
E       #10 0x55625bdb9b4b <unknown>
E       #11 0x55625bdbd929 <unknown>
E       #12 0x55625bda0929 <unknown>
E       #13 0x55625bdbe4e8 <unknown>
E       #14 0x55625bd850df <unknown>
E       #15 0x55625bde28e8 <unknown>
E       #16 0x55625bde2ac6 <unknown>
E       #17 0x55625bdf4556 <unknown>
E       #18 0x7fefea49caa4 <unknown>
E       #19 0x7fefea529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:04,768 - INFO - Starting test with Chrome browser
2025-07-12 04:06:04,768 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:04,877 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:04,909 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:04,979 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:06,933 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-12 04:06:06,933 - INFO - Starting the test case for valid credentials
2025-07-12 04:06:07,164 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:08,007 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e30142e5328081be51706af81f71e5e9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215af4690>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x560a71e3c556 \\u003Cunknown>\\n#18 0x7f0d6b89caa4 \\u003Cunknown>\\n#19 0x7f0d6b929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x560a71e3d23a <unknown>
E       #1 0x560a718e7ab0 <unknown>
E       #2 0x560a718ee748 <unknown>
E       #3 0x560a718f12c7 <unknown>
E       #4 0x560a71985fde <unknown>
E       #5 0x560a7195f1a2 <unknown>
E       #6 0x560a71984fee <unknown>
E       #7 0x560a7195ef73 <unknown>
E       #8 0x560a7192baeb <unknown>
E       #9 0x560a7192c751 <unknown>
E       #10 0x560a71e01b4b <unknown>
E       #11 0x560a71e05929 <unknown>
E       #12 0x560a71de8929 <unknown>
E       #13 0x560a71e064e8 <unknown>
E       #14 0x560a71dcd0df <unknown>
E       #15 0x560a71e2a8e8 <unknown>
E       #16 0x560a71e2aac6 <unknown>
E       #17 0x560a71e3c556 <unknown>
E       #18 0x7f0d6b89caa4 <unknown>
E       #19 0x7f0d6b929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:08,092 - INFO - Starting test with Chrome browser
2025-07-12 04:06:08,092 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:08,202 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:08,237 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:08,269 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:10,281 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-12 04:06:10,282 - INFO - Starting the test case for valid credentials
2025-07-12 04:06:10,482 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:11,370 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8cee5fc2823a5ee78494d191bbcc29d7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215b50050>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55d21bc85556 \\u003Cunknown>\\n#18 0x7fb78e89caa4 \\u003Cunknown>\\n#19 0x7fb78e929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55d21bc8623a <unknown>
E       #1 0x55d21b730ab0 <unknown>
E       #2 0x55d21b737748 <unknown>
E       #3 0x55d21b73a2c7 <unknown>
E       #4 0x55d21b7cefde <unknown>
E       #5 0x55d21b7a81a2 <unknown>
E       #6 0x55d21b7cdfee <unknown>
E       #7 0x55d21b7a7f73 <unknown>
E       #8 0x55d21b774aeb <unknown>
E       #9 0x55d21b775751 <unknown>
E       #10 0x55d21bc4ab4b <unknown>
E       #11 0x55d21bc4e929 <unknown>
E       #12 0x55d21bc31929 <unknown>
E       #13 0x55d21bc4f4e8 <unknown>
E       #14 0x55d21bc160df <unknown>
E       #15 0x55d21bc738e8 <unknown>
E       #16 0x55d21bc73ac6 <unknown>
E       #17 0x55d21bc85556 <unknown>
E       #18 0x7fb78e89caa4 <unknown>
E       #19 0x7fb78e929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:11,453 - INFO - Starting test with Chrome browser
2025-07-12 04:06:11,453 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:11,565 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:11,596 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:11,627 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:13,655 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-12 04:06:13,656 - INFO - Starting the test case for valid credentials
2025-07-12 04:06:13,887 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:14,729 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d6e78f7b133461c1e954f6f4072bd138")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215b50d60>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x563dd0ab7556 \\u003Cunknown>\\n#18 0x7f0e78e9caa4 \\u003Cunknown>\\n#19 0x7f0e78f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x563dd0ab823a <unknown>
E       #1 0x563dd0562ab0 <unknown>
E       #2 0x563dd0569748 <unknown>
E       #3 0x563dd056c2c7 <unknown>
E       #4 0x563dd0600fde <unknown>
E       #5 0x563dd05da1a2 <unknown>
E       #6 0x563dd05fffee <unknown>
E       #7 0x563dd05d9f73 <unknown>
E       #8 0x563dd05a6aeb <unknown>
E       #9 0x563dd05a7751 <unknown>
E       #10 0x563dd0a7cb4b <unknown>
E       #11 0x563dd0a80929 <unknown>
E       #12 0x563dd0a63929 <unknown>
E       #13 0x563dd0a814e8 <unknown>
E       #14 0x563dd0a480df <unknown>
E       #15 0x563dd0aa58e8 <unknown>
E       #16 0x563dd0aa5ac6 <unknown>
E       #17 0x563dd0ab7556 <unknown>
E       #18 0x7f0e78e9caa4 <unknown>
E       #19 0x7f0e78f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:14,810 - INFO - Starting test with Chrome browser
2025-07-12 04:06:14,810 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:14,920 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:14,953 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:14,983 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:16,814 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:17,655 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="172bc878cb1dd26e8a31599fe785fb5a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215aba450>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x556f9fdaf556 \\u003Cunknown>\\n#18 0x7fd48929caa4 \\u003Cunknown>\\n#19 0x7fd489329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x556f9fdb023a <unknown>
E       #1 0x556f9f85aab0 <unknown>
E       #2 0x556f9f861748 <unknown>
E       #3 0x556f9f8642c7 <unknown>
E       #4 0x556f9f8f8fde <unknown>
E       #5 0x556f9f8d21a2 <unknown>
E       #6 0x556f9f8f7fee <unknown>
E       #7 0x556f9f8d1f73 <unknown>
E       #8 0x556f9f89eaeb <unknown>
E       #9 0x556f9f89f751 <unknown>
E       #10 0x556f9fd74b4b <unknown>
E       #11 0x556f9fd78929 <unknown>
E       #12 0x556f9fd5b929 <unknown>
E       #13 0x556f9fd794e8 <unknown>
E       #14 0x556f9fd400df <unknown>
E       #15 0x556f9fd9d8e8 <unknown>
E       #16 0x556f9fd9dac6 <unknown>
E       #17 0x556f9fdaf556 <unknown>
E       #18 0x7fd48929caa4 <unknown>
E       #19 0x7fd489329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:17,738 - INFO - Starting test with Chrome browser
2025-07-12 04:06:17,739 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:17,849 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:17,881 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:17,912 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:19,807 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:20,625 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0da9313904e96e4d16428a19c52d3d7b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f12163a1370>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5598f1f4c556 \\u003Cunknown>\\n#18 0x7ff2bee9caa4 \\u003Cunknown>\\n#19 0x7ff2bef29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x5598f1f4d23a <unknown>
E       #1 0x5598f19f7ab0 <unknown>
E       #2 0x5598f19fe748 <unknown>
E       #3 0x5598f1a012c7 <unknown>
E       #4 0x5598f1a95fde <unknown>
E       #5 0x5598f1a6f1a2 <unknown>
E       #6 0x5598f1a94fee <unknown>
E       #7 0x5598f1a6ef73 <unknown>
E       #8 0x5598f1a3baeb <unknown>
E       #9 0x5598f1a3c751 <unknown>
E       #10 0x5598f1f11b4b <unknown>
E       #11 0x5598f1f15929 <unknown>
E       #12 0x5598f1ef8929 <unknown>
E       #13 0x5598f1f164e8 <unknown>
E       #14 0x5598f1edd0df <unknown>
E       #15 0x5598f1f3a8e8 <unknown>
E       #16 0x5598f1f3aac6 <unknown>
E       #17 0x5598f1f4c556 <unknown>
E       #18 0x7ff2bee9caa4 <unknown>
E       #19 0x7ff2bef29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:20,708 - INFO - Starting test with Chrome browser
2025-07-12 04:06:20,708 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:20,818 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:20,849 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:20,880 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:21,948 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:23,552 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bfbbe0b19af8c65867d478fa3a3ae0c5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f12163a2250>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55f8d360e556 \\u003Cunknown>\\n#18 0x7fcefca9caa4 \\u003Cunknown>\\n#19 0x7fcefcb29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55f8d360f23a <unknown>
E       #1 0x55f8d30b9ab0 <unknown>
E       #2 0x55f8d30c0748 <unknown>
E       #3 0x55f8d30c32c7 <unknown>
E       #4 0x55f8d3157fde <unknown>
E       #5 0x55f8d31311a2 <unknown>
E       #6 0x55f8d3156fee <unknown>
E       #7 0x55f8d3130f73 <unknown>
E       #8 0x55f8d30fdaeb <unknown>
E       #9 0x55f8d30fe751 <unknown>
E       #10 0x55f8d35d3b4b <unknown>
E       #11 0x55f8d35d7929 <unknown>
E       #12 0x55f8d35ba929 <unknown>
E       #13 0x55f8d35d84e8 <unknown>
E       #14 0x55f8d359f0df <unknown>
E       #15 0x55f8d35fc8e8 <unknown>
E       #16 0x55f8d35fcac6 <unknown>
E       #17 0x55f8d360e556 <unknown>
E       #18 0x7fcefca9caa4 <unknown>
E       #19 0x7fcefcb29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:23,635 - INFO - Starting test with Chrome browser
2025-07-12 04:06:23,635 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:23,746 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:23,778 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:23,810 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:25,743 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:26,525 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8646a339d7e06abc18aa5d5c56a4dd25")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215b25450>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55b4234ba556 \\u003Cunknown>\\n#18 0x7f176b49caa4 \\u003Cunknown>\\n#19 0x7f176b529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55b4234bb23a <unknown>
E       #1 0x55b422f65ab0 <unknown>
E       #2 0x55b422f6c748 <unknown>
E       #3 0x55b422f6f2c7 <unknown>
E       #4 0x55b423003fde <unknown>
E       #5 0x55b422fdd1a2 <unknown>
E       #6 0x55b423002fee <unknown>
E       #7 0x55b422fdcf73 <unknown>
E       #8 0x55b422fa9aeb <unknown>
E       #9 0x55b422faa751 <unknown>
E       #10 0x55b42347fb4b <unknown>
E       #11 0x55b423483929 <unknown>
E       #12 0x55b423466929 <unknown>
E       #13 0x55b4234844e8 <unknown>
E       #14 0x55b42344b0df <unknown>
E       #15 0x55b4234a88e8 <unknown>
E       #16 0x55b4234a8ac6 <unknown>
E       #17 0x55b4234ba556 <unknown>
E       #18 0x7f176b49caa4 <unknown>
E       #19 0x7f176b529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:26,608 - INFO - Starting test with Chrome browser
2025-07-12 04:06:26,608 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:26,719 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:26,751 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:26,783 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:28,635 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:29,802 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="62b5c9d9062c6fb4837b967c0bcb6242")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215b26250>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55bf615b9556 \\u003Cunknown>\\n#18 0x7f0fcf49caa4 \\u003Cunknown>\\n#19 0x7f0fcf529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55bf615ba23a <unknown>
E       #1 0x55bf61064ab0 <unknown>
E       #2 0x55bf6106b748 <unknown>
E       #3 0x55bf6106e2c7 <unknown>
E       #4 0x55bf61102fde <unknown>
E       #5 0x55bf610dc1a2 <unknown>
E       #6 0x55bf61101fee <unknown>
E       #7 0x55bf610dbf73 <unknown>
E       #8 0x55bf610a8aeb <unknown>
E       #9 0x55bf610a9751 <unknown>
E       #10 0x55bf6157eb4b <unknown>
E       #11 0x55bf61582929 <unknown>
E       #12 0x55bf61565929 <unknown>
E       #13 0x55bf615834e8 <unknown>
E       #14 0x55bf6154a0df <unknown>
E       #15 0x55bf615a78e8 <unknown>
E       #16 0x55bf615a7ac6 <unknown>
E       #17 0x55bf615b9556 <unknown>
E       #18 0x7f0fcf49caa4 <unknown>
E       #19 0x7f0fcf529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:29,901 - INFO - Starting test with Chrome browser
2025-07-12 04:06:29,902 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:30,012 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:30,045 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:30,076 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:31,140 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:33,080 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c49c2de6e475b66bba2efbe9b027377e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f12179985f0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x558b34839556 \\u003Cunknown>\\n#18 0x7f2a7e49caa4 \\u003Cunknown>\\n#19 0x7f2a7e529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x558b3483a23a <unknown>
E       #1 0x558b342e4ab0 <unknown>
E       #2 0x558b342eb748 <unknown>
E       #3 0x558b342ee2c7 <unknown>
E       #4 0x558b34382fde <unknown>
E       #5 0x558b3435c1a2 <unknown>
E       #6 0x558b34381fee <unknown>
E       #7 0x558b3435bf73 <unknown>
E       #8 0x558b34328aeb <unknown>
E       #9 0x558b34329751 <unknown>
E       #10 0x558b347feb4b <unknown>
E       #11 0x558b34802929 <unknown>
E       #12 0x558b347e5929 <unknown>
E       #13 0x558b348034e8 <unknown>
E       #14 0x558b347ca0df <unknown>
E       #15 0x558b348278e8 <unknown>
E       #16 0x558b34827ac6 <unknown>
E       #17 0x558b34839556 <unknown>
E       #18 0x7f2a7e49caa4 <unknown>
E       #19 0x7f2a7e529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:33,179 - INFO - Starting test with Chrome browser
2025-07-12 04:06:33,179 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:33,289 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:33,322 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:33,353 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:34,478 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:36,409 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7ada188778265d60c47accb92ff89fa8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215abff20>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x555a2deed556 \\u003Cunknown>\\n#18 0x7fb4a7c9caa4 \\u003Cunknown>\\n#19 0x7fb4a7d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x555a2deee23a <unknown>
E       #1 0x555a2d998ab0 <unknown>
E       #2 0x555a2d99f748 <unknown>
E       #3 0x555a2d9a22c7 <unknown>
E       #4 0x555a2da36fde <unknown>
E       #5 0x555a2da101a2 <unknown>
E       #6 0x555a2da35fee <unknown>
E       #7 0x555a2da0ff73 <unknown>
E       #8 0x555a2d9dcaeb <unknown>
E       #9 0x555a2d9dd751 <unknown>
E       #10 0x555a2deb2b4b <unknown>
E       #11 0x555a2deb6929 <unknown>
E       #12 0x555a2de99929 <unknown>
E       #13 0x555a2deb74e8 <unknown>
E       #14 0x555a2de7e0df <unknown>
E       #15 0x555a2dedb8e8 <unknown>
E       #16 0x555a2dedbac6 <unknown>
E       #17 0x555a2deed556 <unknown>
E       #18 0x7fb4a7c9caa4 <unknown>
E       #19 0x7fb4a7d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:36,509 - INFO - Starting test with Chrome browser
2025-07-12 04:06:36,509 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:36,621 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:36,654 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:36,687 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:38,698 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:39,854 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="55e363011c940b2a4ccda9ee6c5debf1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
>       login_page.click_password()

tests/test_login.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:40: in click_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1215b0dc50>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x562633a50556 \\u003Cunknown>\\n#18 0x7fb03de9caa4 \\u003Cunknown>\\n#19 0x7fb03df29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x562633a5123a <unknown>
E       #1 0x5626334fbab0 <unknown>
E       #2 0x562633502748 <unknown>
E       #3 0x5626335052c7 <unknown>
E       #4 0x562633599fde <unknown>
E       #5 0x5626335731a2 <unknown>
E       #6 0x562633598fee <unknown>
E       #7 0x562633572f73 <unknown>
E       #8 0x56263353faeb <unknown>
E       #9 0x562633540751 <unknown>
E       #10 0x562633a15b4b <unknown>
E       #11 0x562633a19929 <unknown>
E       #12 0x5626339fc929 <unknown>
E       #13 0x562633a1a4e8 <unknown>
E       #14 0x5626339e10df <unknown>
E       #15 0x562633a3e8e8 <unknown>
E       #16 0x562633a3eac6 <unknown>
E       #17 0x562633a50556 <unknown>
E       #18 0x7fb03de9caa4 <unknown>
E       #19 0x7fb03df29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:42,530 - INFO - Starting test with Chrome browser
2025-07-12 04:06:42,530 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:42,643 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:42,674 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:42,705 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:44,516 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:45,682 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2f31ceed880eb543fbb0e1a00924eb84")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1217d61860>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x562e558a5556 \\u003Cunknown>\\n#18 0x7f2ea4c9caa4 \\u003Cunknown>\\n#19 0x7f2ea4d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x562e558a623a <unknown>
E       #1 0x562e55350ab0 <unknown>
E       #2 0x562e55357748 <unknown>
E       #3 0x562e5535a2c7 <unknown>
E       #4 0x562e553eefde <unknown>
E       #5 0x562e553c81a2 <unknown>
E       #6 0x562e553edfee <unknown>
E       #7 0x562e553c7f73 <unknown>
E       #8 0x562e55394aeb <unknown>
E       #9 0x562e55395751 <unknown>
E       #10 0x562e5586ab4b <unknown>
E       #11 0x562e5586e929 <unknown>
E       #12 0x562e55851929 <unknown>
E       #13 0x562e5586f4e8 <unknown>
E       #14 0x562e558360df <unknown>
E       #15 0x562e558938e8 <unknown>
E       #16 0x562e55893ac6 <unknown>
E       #17 0x562e558a5556 <unknown>
E       #18 0x7f2ea4c9caa4 <unknown>
E       #19 0x7f2ea4d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-12 04:06:55,928 - INFO - Starting test with Chrome browser
2025-07-12 04:06:55,928 - INFO - ====== WebDriver manager ======
2025-07-12 04:06:56,039 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:56,071 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-12 04:06:56,102 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-12 04:06:58,096 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-12 04:06:58,733 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250712_040552/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55dd4456323a <unknown>
#1 0x55dd4400dab0 <unknown>
#2 0x55dd44014748 <unknown>
#3 0x55dd440172c7 <unknown>
#4 0x55dd440abfde <unknown>
#5 0x55dd440851a2 <unknown>
#6 0x55dd440aafee <unknown>
#7 0x55dd44084f73 <unknown>
#8 0x55dd44051aeb <unknown>
#9 0x55dd44052751 <unknown>
#10 0x55dd44527b4b <unknown>
#11 0x55dd4452b929 <unknown>
#12 0x55dd4450e929 <unknown>
#13 0x55dd4452c4e8 <unknown>
#14 0x55dd444f30df <unknown>
#15 0x55dd445508e8 <unknown>
#16 0x55dd44550ac6 <unknown>
#17 0x55dd44562556 <unknown>
#18 0x7f2a76a9caa4 <unknown>
#19 0x7f2a76b29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55625bdf523a <unknown>
#1 0x55625b89fab0 <unknown>
#2 0x55625b8a6748 <unknown>
#3 0x55625b8a92c7 <unknown>
#4 0x55625b93dfde <unknown>
#5 0x55625b9171a2 <unknown>
#6 0x55625b93cfee <unknown>
#7 0x55625b916f73 <unknown>
#8 0x55625b8e3aeb <unknown>
#9 0x55625b8e4751 <unknown>
#10 0x55625bdb9b4b <unknown>
#11 0x55625bdbd929 <unknown>
#12 0x55625bda0929 <unknown>
#13 0x55625bdbe4e8 <unknown>
#14 0x55625bd850df <unknown>
#15 0x55625bde28e8 <unknown>
#16 0x55625bde2ac6 <unknown>
#17 0x55625bdf4556 <unknown>
#18 0x7fefea49caa4 <unknown>
#19 0x7fefea529c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x560a71e3d23a <unknown>
#1 0x560a718e7ab0 <unknown>
#2 0x560a718ee748 <unknown>
#3 0x560a718f12c7 <unknown>
#4 0x560a71985fde <unknown>
#5 0x560a7195f1a2 <unknown>
#6 0x560a71984fee <unknown>
#7 0x560a7195ef73 <unknown>
#8 0x560a7192baeb <unknown>
#9 0x560a7192c751 <unknown>
#10 0x560a71e01b4b <unknown>
#11 0x560a71e05929 <unknown>
#12 0x560a71de8929 <unknown>
#13 0x560a71e064e8 <unknown>
#14 0x560a71dcd0df <unknown>
#15 0x560a71e2a8e8 <unknown>
#16 0x560a71e2aac6 <unknown>
#17 0x560a71e3c556 <unknown>
#18 0x7f0d6b89caa4 <unknown>
#19 0x7f0d6b929c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55d21bc8623a <unknown>
#1 0x55d21b730ab0 <unknown>
#2 0x55d21b737748 <unknown>
#3 0x55d21b73a2c7 <unknown>
#4 0x55d21b7cefde <unknown>
#5 0x55d21b7a81a2 <unknown>
#6 0x55d21b7cdfee <unknown>
#7 0x55d21b7a7f73 <unknown>
#8 0x55d21b774aeb <unknown>
#9 0x55d21b775751 <unknown>
#10 0x55d21bc4ab4b <unknown>
#11 0x55d21bc4e929 <unknown>
#12 0x55d21bc31929 <unknown>
#13 0x55d21bc4f4e8 <unknown>
#14 0x55d21bc160df <unknown>
#15 0x55d21bc738e8 <unknown>
#16 0x55d21bc73ac6 <unknown>
#17 0x55d21bc85556 <unknown>
#18 0x7fb78e89caa4 <unknown>
#19 0x7fb78e929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x563dd0ab823a <unknown>
#1 0x563dd0562ab0 <unknown>
#2 0x563dd0569748 <unknown>
#3 0x563dd056c2c7 <unknown>
#4 0x563dd0600fde <unknown>
#5 0x563dd05da1a2 <unknown>
#6 0x563dd05fffee <unknown>
#7 0x563dd05d9f73 <unknown>
#8 0x563dd05a6aeb <unknown>
#9 0x563dd05a7751 <unknown>
#10 0x563dd0a7cb4b <unknown>
#11 0x563dd0a80929 <unknown>
#12 0x563dd0a63929 <unknown>
#13 0x563dd0a814e8 <unknown>
#14 0x563dd0a480df <unknown>
#15 0x563dd0aa58e8 <unknown>
#16 0x563dd0aa5ac6 <unknown>
#17 0x563dd0ab7556 <unknown>
#18 0x7f0e78e9caa4 <unknown>
#19 0x7f0e78f29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x556f9fdb023a <unknown>
#1 0x556f9f85aab0 <unknown>
#2 0x556f9f861748 <unknown>
#3 0x556f9f8642c7 <unknown>
#4 0x556f9f8f8fde <unknown>
#5 0x556f9f8d21a2 <unknown>
#6 0x556f9f8f7fee <unknown>
#7 0x556f9f8d1f73 <unknown>
#8 0x556f9f89eaeb <unknown>
#9 0x556f9f89f751 <unknown>
#10 0x556f9fd74b4b <unknown>
#11 0x556f9fd78929 <unknown>
#12 0x556f9fd5b929 <unknown>
#13 0x556f9fd794e8 <unknown>
#14 0x556f9fd400df <unknown>
#15 0x556f9fd9d8e8 <unknown>
#16 0x556f9fd9dac6 <unknown>
#17 0x556f9fdaf556 <unknown>
#18 0x7fd48929caa4 <unknown>
#19 0x7fd489329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x5598f1f4d23a <unknown>
#1 0x5598f19f7ab0 <unknown>
#2 0x5598f19fe748 <unknown>
#3 0x5598f1a012c7 <unknown>
#4 0x5598f1a95fde <unknown>
#5 0x5598f1a6f1a2 <unknown>
#6 0x5598f1a94fee <unknown>
#7 0x5598f1a6ef73 <unknown>
#8 0x5598f1a3baeb <unknown>
#9 0x5598f1a3c751 <unknown>
#10 0x5598f1f11b4b <unknown>
#11 0x5598f1f15929 <unknown>
#12 0x5598f1ef8929 <unknown>
#13 0x5598f1f164e8 <unknown>
#14 0x5598f1edd0df <unknown>
#15 0x5598f1f3a8e8 <unknown>
#16 0x5598f1f3aac6 <unknown>
#17 0x5598f1f4c556 <unknown>
#18 0x7ff2bee9caa4 <unknown>
#19 0x7ff2bef29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55f8d360f23a <unknown>
#1 0x55f8d30b9ab0 <unknown>
#2 0x55f8d30c0748 <unknown>
#3 0x55f8d30c32c7 <unknown>
#4 0x55f8d3157fde <unknown>
#5 0x55f8d31311a2 <unknown>
#6 0x55f8d3156fee <unknown>
#7 0x55f8d3130f73 <unknown>
#8 0x55f8d30fdaeb <unknown>
#9 0x55f8d30fe751 <unknown>
#10 0x55f8d35d3b4b <unknown>
#11 0x55f8d35d7929 <unknown>
#12 0x55f8d35ba929 <unknown>
#13 0x55f8d35d84e8 <unknown>
#14 0x55f8d359f0df <unknown>
#15 0x55f8d35fc8e8 <unknown>
#16 0x55f8d35fcac6 <unknown>
#17 0x55f8d360e556 <unknown>
#18 0x7fcefca9caa4 <unknown>
#19 0x7fcefcb29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55b4234bb23a <unknown>
#1 0x55b422f65ab0 <unknown>
#2 0x55b422f6c748 <unknown>
#3 0x55b422f6f2c7 <unknown>
#4 0x55b423003fde <unknown>
#5 0x55b422fdd1a2 <unknown>
#6 0x55b423002fee <unknown>
#7 0x55b422fdcf73 <unknown>
#8 0x55b422fa9aeb <unknown>
#9 0x55b422faa751 <unknown>
#10 0x55b42347fb4b <unknown>
#11 0x55b423483929 <unknown>
#12 0x55b423466929 <unknown>
#13 0x55b4234844e8 <unknown>
#14 0x55b42344b0df <unknown>
#15 0x55b4234a88e8 <unknown>
#16 0x55b4234a8ac6 <unknown>
#17 0x55b4234ba556 <unknown>
#18 0x7f176b49caa4 <unknown>
#19 0x7f176b529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55bf615ba23a <unknown>
#1 0x55bf61064ab0 <unknown>
#2 0x55bf6106b748 <unknown>
#3 0x55bf6106e2c7 <unknown>
#4 0x55bf61102fde <unknown>
#5 0x55bf610dc1a2 <unknown>
#6 0x55bf61101fee <unknown>
#7 0x55bf610dbf73 <unknown>
#8 0x55bf610a8aeb <unknown>
#9 0x55bf610a9751 <unknown>
#10 0x55bf6157eb4b <unknown>
#11 0x55bf61582929 <unknown>
#12 0x55bf61565929 <unknown>
#13 0x55bf615834e8 <unknown>
#14 0x55bf6154a0df <unknown>
#15 0x55bf615a78e8 <unknown>
#16 0x55bf615a7ac6 <unknown>
#17 0x55bf615b9556 <unknown>
#18 0x7f0fcf49caa4 <unknown>
#19 0x7f0fcf529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x558b3483a23a <unknown>
#1 0x558b342e4ab0 <unknown>
#2 0x558b342eb748 <unknown>
#3 0x558b342ee2c7 <unknown>
#4 0x558b34382fde <unknown>
#5 0x558b3435c1a2 <unknown>
#6 0x558b34381fee <unknown>
#7 0x558b3435bf73 <unknown>
#8 0x558b34328aeb <unknown>
#9 0x558b34329751 <unknown>
#10 0x558b347feb4b <unknown>
#11 0x558b34802929 <unknown>
#12 0x558b347e5929 <unknown>
#13 0x558b348034e8 <unknown>
#14 0x558b347ca0df <unknown>
#15 0x558b348278e8 <unknown>
#16 0x558b34827ac6 <unknown>
#17 0x558b34839556 <unknown>
#18 0x7f2a7e49caa4 <unknown>
#19 0x7f2a7e529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x555a2deee23a <unknown>
#1 0x555a2d998ab0 <unknown>
#2 0x555a2d99f748 <unknown>
#3 0x555a2d9a22c7 <unknown>
#4 0x555a2da36fde <unknown>
#5 0x555a2da101a2 <unknown>
#6 0x555a2da35fee <unknown>
#7 0x555a2da0ff73 <unknown>
#8 0x555a2d9dcaeb <unknown>
#9 0x555a2d9dd751 <unknown>
#10 0x555a2deb2b4b <unknown>
#11 0x555a2deb6929 <unknown>
#12 0x555a2de99929 <unknown>
#13 0x555a2deb74e8 <unknown>
#14 0x555a2de7e0df <unknown>
#15 0x555a2dedb8e8 <unknown>
#16 0x555a2dedbac6 <unknown>
#17 0x555a2deed556 <unknown>
#18 0x7fb4a7c9caa4 <unknown>
#19 0x7fb4a7d29c3c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x562633a5123a <unknown>
#1 0x5626334fbab0 <unknown>
#2 0x562633502748 <unknown>
#3 0x5626335052c7 <unknown>
#4 0x562633599fde <unknown>
#5 0x5626335731a2 <unknown>
#6 0x562633598fee <unknown>
#7 0x562633572f73 <unknown>
#8 0x56263353faeb <unknown>
#9 0x562633540751 <unknown>
#10 0x562633a15b4b <unknown>
#11 0x562633a19929 <unknown>
#12 0x5626339fc929 <unknown>
#13 0x562633a1a4e8 <unknown>
#14 0x5626339e10df <unknown>
#15 0x562633a3e8e8 <unknown>
#16 0x562633a3eac6 <unknown>
#17 0x562633a50556 <unknown>
#18 0x7fb03de9caa4 <unknown>
#19 0x7fb03df29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x562e558a623a <unknown>
#1 0x562e55350ab0 <unknown>
#2 0x562e55357748 <unknown>
#3 0x562e5535a2c7 <unknown>
#4 0x562e553eefde <unknown>
#5 0x562e553c81a2 <unknown>
#6 0x562e553edfee <unknown>
#7 0x562e553c7f73 <unknown>
#8 0x562e55394aeb <unknown>
#9 0x562e55395751 <unknown>
#10 0x562e5586ab4b <unknown>
#11 0x562e5586e929 <unknown>
#12 0x562e55851929 <unknown>
#13 0x562e5586f4e8 <unknown>
#14 0x562e558360df <unknown>
#15 0x562e558938e8 <unknown>
#16 0x562e55893ac6 <unknown>
#17 0x562e558a5556 <unknown>
#18 0x7f2ea4c9caa4 <unknown>
#19 0x7f2ea4d29c3c <unknown>
=================== 14 failed, 5 passed in 66.52s (0:01:06) ====================
--------------------------------------------
Test Run Finished: 2025-07-12 04:06:58
Duration: 68 seconds
Status: FAILURE
Exit Code: 1
============================================
