========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-13 03:52:53
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'rerunfailures': '16.1', 'Faker': '37.11.0', 'xdist': '3.8.0', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, rerunfailures-16.1, Faker-37.11.0, xdist-3.8.0, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="eff30c7c7307b0194fa4db7d51379052")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="eff30c7c7307b0194fa4db7d51379052")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369f870900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562d8bad8fba <unknown>
E       #1 0x562d8b55d6d0 <unknown>
E       #2 0x562d8b5af2aa <unknown>
E       #3 0x562d8b5af541 <unknown>
E       #4 0x562d8b5fd6c4 <unknown>
E       #5 0x562d8b5d4e5d <unknown>
E       #6 0x562d8b5fab54 <unknown>
E       #7 0x562d8b5d4c03 <unknown>
E       #8 0x562d8b5a17a8 <unknown>
E       #9 0x562d8b5a2421 <unknown>
E       #10 0x562d8ba9db28 <unknown>
E       #11 0x562d8baa187f <unknown>
E       #12 0x562d8ba85c49 <unknown>
E       #13 0x562d8baa2405 <unknown>
E       #14 0x562d8ba6b4ff <unknown>
E       #15 0x562d8bac6258 <unknown>
E       #16 0x562d8bac6432 <unknown>
E       #17 0x562d8bad7fa3 <unknown>
E       #18 0x7fec4149caa4 <unknown>
E       #19 0x7fec41529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 03:52:57,595 - INFO - Test data loaded successfully.
2025-10-13 03:52:57,595 - INFO - Starting test with Chrome browser
2025-10-13 03:52:57,595 - INFO - ====== WebDriver manager ======
2025-10-13 03:53:02,162 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:53:02,251 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:53:02,284 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-13 03:53:02,284 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:53:02,387 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-13 03:53:02,391 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-13 03:53:02,392 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-13 03:53:02,435 - INFO - Driver downloading response is 200
2025-10-13 03:53:02,499 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:53:02,644 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-13 03:53:27,571 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-13 03:53:27,572 - INFO - Starting the test case for valid credentials
2025-10-13 03:53:28,133 - INFO - User enters the email-id
2025-10-13 03:53:29,715 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 03:55:31,431 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="55bde94533fab4db0410fb8d1211f46b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="55bde94533fab4db0410fb8d1211f46b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef5940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f89985efba <unknown>
E       #1 0x55f8992e36d0 <unknown>
E       #2 0x55f8993352aa <unknown>
E       #3 0x55f899335541 <unknown>
E       #4 0x55f8993836c4 <unknown>
E       #5 0x55f89935ae5d <unknown>
E       #6 0x55f899380b54 <unknown>
E       #7 0x55f89935ac03 <unknown>
E       #8 0x55f8993277a8 <unknown>
E       #9 0x55f899328421 <unknown>
E       #10 0x55f899823b28 <unknown>
E       #11 0x55f89982787f <unknown>
E       #12 0x55f89980bc49 <unknown>
E       #13 0x55f899828405 <unknown>
E       #14 0x55f8997f14ff <unknown>
E       #15 0x55f89984c258 <unknown>
E       #16 0x55f89984c432 <unknown>
E       #17 0x55f89985dfa3 <unknown>
E       #18 0x7f507429caa4 <unknown>
E       #19 0x7f5074329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 03:55:31,715 - INFO - Starting test with Chrome browser
2025-10-13 03:55:31,716 - INFO - ====== WebDriver manager ======
2025-10-13 03:55:31,780 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:55:31,816 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:55:31,917 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 03:55:33,909 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-13 03:55:33,909 - INFO - Starting the test case for valid credentials
2025-10-13 03:55:34,052 - INFO - User enters the email-id
2025-10-13 03:55:35,798 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 03:57:37,446 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d809ad2d89ba9b19b6e78c9c2cadb1d2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d809ad2d89ba9b19b6e78c9c2cadb1d2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f36a0801f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a0fd412fba <unknown>
E       #1 0x55a0fce976d0 <unknown>
E       #2 0x55a0fcee92aa <unknown>
E       #3 0x55a0fcee9541 <unknown>
E       #4 0x55a0fcf376c4 <unknown>
E       #5 0x55a0fcf0ee5d <unknown>
E       #6 0x55a0fcf34b54 <unknown>
E       #7 0x55a0fcf0ec03 <unknown>
E       #8 0x55a0fcedb7a8 <unknown>
E       #9 0x55a0fcedc421 <unknown>
E       #10 0x55a0fd3d7b28 <unknown>
E       #11 0x55a0fd3db87f <unknown>
E       #12 0x55a0fd3bfc49 <unknown>
E       #13 0x55a0fd3dc405 <unknown>
E       #14 0x55a0fd3a54ff <unknown>
E       #15 0x55a0fd400258 <unknown>
E       #16 0x55a0fd400432 <unknown>
E       #17 0x55a0fd411fa3 <unknown>
E       #18 0x7f4b2169caa4 <unknown>
E       #19 0x7f4b21729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 03:57:37,511 - INFO - Starting test with Chrome browser
2025-10-13 03:57:37,511 - INFO - ====== WebDriver manager ======
2025-10-13 03:57:37,581 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:57:37,616 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:57:37,649 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 03:57:38,494 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-13 03:57:38,495 - INFO - Starting the test case for valid credentials
2025-10-13 03:57:38,941 - INFO - User enters the email-id
2025-10-13 03:57:40,641 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 03:59:42,309 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0edecfc88c2ff974741674112bf78e04")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0edecfc88c2ff974741674112bf78e04")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef59e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c95f052fba <unknown>
E       #1 0x55c95ead76d0 <unknown>
E       #2 0x55c95eb292aa <unknown>
E       #3 0x55c95eb29541 <unknown>
E       #4 0x55c95eb776c4 <unknown>
E       #5 0x55c95eb4ee5d <unknown>
E       #6 0x55c95eb74b54 <unknown>
E       #7 0x55c95eb4ec03 <unknown>
E       #8 0x55c95eb1b7a8 <unknown>
E       #9 0x55c95eb1c421 <unknown>
E       #10 0x55c95f017b28 <unknown>
E       #11 0x55c95f01b87f <unknown>
E       #12 0x55c95efffc49 <unknown>
E       #13 0x55c95f01c405 <unknown>
E       #14 0x55c95efe54ff <unknown>
E       #15 0x55c95f040258 <unknown>
E       #16 0x55c95f040432 <unknown>
E       #17 0x55c95f051fa3 <unknown>
E       #18 0x7f3b03a9caa4 <unknown>
E       #19 0x7f3b03b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 03:59:42,368 - INFO - Starting test with Chrome browser
2025-10-13 03:59:42,368 - INFO - ====== WebDriver manager ======
2025-10-13 03:59:42,433 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:59:42,467 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 03:59:42,501 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 03:59:44,030 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-13 03:59:44,030 - INFO - Starting the test case for valid credentials
2025-10-13 03:59:44,189 - INFO - User enters the email-id
2025-10-13 03:59:45,946 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:01:47,647 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9f43def8e6392ee9529a0d9430c4594b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9f43def8e6392ee9529a0d9430c4594b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef6020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f1e3d21fba <unknown>
E       #1 0x55f1e37a66d0 <unknown>
E       #2 0x55f1e37f82aa <unknown>
E       #3 0x55f1e37f8541 <unknown>
E       #4 0x55f1e38466c4 <unknown>
E       #5 0x55f1e381de5d <unknown>
E       #6 0x55f1e3843b54 <unknown>
E       #7 0x55f1e381dc03 <unknown>
E       #8 0x55f1e37ea7a8 <unknown>
E       #9 0x55f1e37eb421 <unknown>
E       #10 0x55f1e3ce6b28 <unknown>
E       #11 0x55f1e3cea87f <unknown>
E       #12 0x55f1e3ccec49 <unknown>
E       #13 0x55f1e3ceb405 <unknown>
E       #14 0x55f1e3cb44ff <unknown>
E       #15 0x55f1e3d0f258 <unknown>
E       #16 0x55f1e3d0f432 <unknown>
E       #17 0x55f1e3d20fa3 <unknown>
E       #18 0x7fe27069caa4 <unknown>
E       #19 0x7fe270729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:01:47,748 - INFO - Starting test with Chrome browser
2025-10-13 04:01:47,748 - INFO - ====== WebDriver manager ======
2025-10-13 04:01:47,814 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:01:47,848 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:01:47,884 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:01:49,282 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:03:51,051 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5c392d622b28cbe2ded26c414bbdbe8a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5c392d622b28cbe2ded26c414bbdbe8a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef60c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55bb1793bfba <unknown>
E       #1 0x55bb173c06d0 <unknown>
E       #2 0x55bb174122aa <unknown>
E       #3 0x55bb17412541 <unknown>
E       #4 0x55bb174606c4 <unknown>
E       #5 0x55bb17437e5d <unknown>
E       #6 0x55bb1745db54 <unknown>
E       #7 0x55bb17437c03 <unknown>
E       #8 0x55bb174047a8 <unknown>
E       #9 0x55bb17405421 <unknown>
E       #10 0x55bb17900b28 <unknown>
E       #11 0x55bb1790487f <unknown>
E       #12 0x55bb178e8c49 <unknown>
E       #13 0x55bb17905405 <unknown>
E       #14 0x55bb178ce4ff <unknown>
E       #15 0x55bb17929258 <unknown>
E       #16 0x55bb17929432 <unknown>
E       #17 0x55bb1793afa3 <unknown>
E       #18 0x7fbf1c69caa4 <unknown>
E       #19 0x7fbf1c729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:03:51,117 - INFO - Starting test with Chrome browser
2025-10-13 04:03:51,117 - INFO - ====== WebDriver manager ======
2025-10-13 04:03:51,184 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:03:51,218 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:03:51,252 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:03:52,639 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:05:54,432 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="14d26e061285dea7c7fbf16329e1d2ef")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="14d26e061285dea7c7fbf16329e1d2ef")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef5da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563e4bbddfba <unknown>
E       #1 0x563e4b6626d0 <unknown>
E       #2 0x563e4b6b42aa <unknown>
E       #3 0x563e4b6b4541 <unknown>
E       #4 0x563e4b7026c4 <unknown>
E       #5 0x563e4b6d9e5d <unknown>
E       #6 0x563e4b6ffb54 <unknown>
E       #7 0x563e4b6d9c03 <unknown>
E       #8 0x563e4b6a67a8 <unknown>
E       #9 0x563e4b6a7421 <unknown>
E       #10 0x563e4bba2b28 <unknown>
E       #11 0x563e4bba687f <unknown>
E       #12 0x563e4bb8ac49 <unknown>
E       #13 0x563e4bba7405 <unknown>
E       #14 0x563e4bb704ff <unknown>
E       #15 0x563e4bbcb258 <unknown>
E       #16 0x563e4bbcb432 <unknown>
E       #17 0x563e4bbdcfa3 <unknown>
E       #18 0x7f2d1929caa4 <unknown>
E       #19 0x7f2d19329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:05:54,497 - INFO - Starting test with Chrome browser
2025-10-13 04:05:54,497 - INFO - ====== WebDriver manager ======
2025-10-13 04:05:54,564 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:05:54,603 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:05:54,635 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:05:56,243 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:07:58,008 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d7cb3f06971e01ac9659b49ae5ef772a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d7cb3f06971e01ac9659b49ae5ef772a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef68e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5608ae383fba <unknown>
E       #1 0x5608ade086d0 <unknown>
E       #2 0x5608ade5a2aa <unknown>
E       #3 0x5608ade5a541 <unknown>
E       #4 0x5608adea86c4 <unknown>
E       #5 0x5608ade7fe5d <unknown>
E       #6 0x5608adea5b54 <unknown>
E       #7 0x5608ade7fc03 <unknown>
E       #8 0x5608ade4c7a8 <unknown>
E       #9 0x5608ade4d421 <unknown>
E       #10 0x5608ae348b28 <unknown>
E       #11 0x5608ae34c87f <unknown>
E       #12 0x5608ae330c49 <unknown>
E       #13 0x5608ae34d405 <unknown>
E       #14 0x5608ae3164ff <unknown>
E       #15 0x5608ae371258 <unknown>
E       #16 0x5608ae371432 <unknown>
E       #17 0x5608ae382fa3 <unknown>
E       #18 0x7fc50c49caa4 <unknown>
E       #19 0x7fc50c529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:07:59,072 - INFO - Starting test with Chrome browser
2025-10-13 04:07:59,072 - INFO - ====== WebDriver manager ======
2025-10-13 04:07:59,141 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:07:59,175 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:07:59,210 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:08:01,091 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:10:02,859 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="42299b24ed60bab56a03a20582a16e70")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="42299b24ed60bab56a03a20582a16e70")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef5da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558bde59efba <unknown>
E       #1 0x558bde0236d0 <unknown>
E       #2 0x558bde0752aa <unknown>
E       #3 0x558bde075541 <unknown>
E       #4 0x558bde0c36c4 <unknown>
E       #5 0x558bde09ae5d <unknown>
E       #6 0x558bde0c0b54 <unknown>
E       #7 0x558bde09ac03 <unknown>
E       #8 0x558bde0677a8 <unknown>
E       #9 0x558bde068421 <unknown>
E       #10 0x558bde563b28 <unknown>
E       #11 0x558bde56787f <unknown>
E       #12 0x558bde54bc49 <unknown>
E       #13 0x558bde568405 <unknown>
E       #14 0x558bde5314ff <unknown>
E       #15 0x558bde58c258 <unknown>
E       #16 0x558bde58c432 <unknown>
E       #17 0x558bde59dfa3 <unknown>
E       #18 0x7f96c629caa4 <unknown>
E       #19 0x7f96c6329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:10:02,930 - INFO - Starting test with Chrome browser
2025-10-13 04:10:02,930 - INFO - ====== WebDriver manager ======
2025-10-13 04:10:02,998 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:10:03,032 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:10:03,065 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:10:04,601 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:12:08,144 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9153f61ae5b3ef71c4a3fc5688741e39")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9153f61ae5b3ef71c4a3fc5688741e39")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef65c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558401765fba <unknown>
E       #1 0x5584011ea6d0 <unknown>
E       #2 0x55840123c2aa <unknown>
E       #3 0x55840123c541 <unknown>
E       #4 0x55840128a6c4 <unknown>
E       #5 0x558401261e5d <unknown>
E       #6 0x558401287b54 <unknown>
E       #7 0x558401261c03 <unknown>
E       #8 0x55840122e7a8 <unknown>
E       #9 0x55840122f421 <unknown>
E       #10 0x55840172ab28 <unknown>
E       #11 0x55840172e87f <unknown>
E       #12 0x558401712c49 <unknown>
E       #13 0x55840172f405 <unknown>
E       #14 0x5584016f84ff <unknown>
E       #15 0x558401753258 <unknown>
E       #16 0x558401753432 <unknown>
E       #17 0x558401764fa3 <unknown>
E       #18 0x7f1ec149caa4 <unknown>
E       #19 0x7f1ec1529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:12:08,209 - INFO - Starting test with Chrome browser
2025-10-13 04:12:08,209 - INFO - ====== WebDriver manager ======
2025-10-13 04:12:08,275 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:12:08,309 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:12:08,345 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:12:09,748 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:14:13,265 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7b640296e389cea750c7de1ae86f2eac")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7b640296e389cea750c7de1ae86f2eac")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef5c60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56312a0befba <unknown>
E       #1 0x563129b436d0 <unknown>
E       #2 0x563129b952aa <unknown>
E       #3 0x563129b95541 <unknown>
E       #4 0x563129be36c4 <unknown>
E       #5 0x563129bbae5d <unknown>
E       #6 0x563129be0b54 <unknown>
E       #7 0x563129bbac03 <unknown>
E       #8 0x563129b877a8 <unknown>
E       #9 0x563129b88421 <unknown>
E       #10 0x56312a083b28 <unknown>
E       #11 0x56312a08787f <unknown>
E       #12 0x56312a06bc49 <unknown>
E       #13 0x56312a088405 <unknown>
E       #14 0x56312a0514ff <unknown>
E       #15 0x56312a0ac258 <unknown>
E       #16 0x56312a0ac432 <unknown>
E       #17 0x56312a0bdfa3 <unknown>
E       #18 0x7f91f5c9caa4 <unknown>
E       #19 0x7f91f5d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:14:13,332 - INFO - Starting test with Chrome browser
2025-10-13 04:14:13,332 - INFO - ====== WebDriver manager ======
2025-10-13 04:14:13,404 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:14:13,448 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:14:13,481 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:14:15,216 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:16:18,796 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bbb59fba19ccbd2b18cab66898f746e4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="bbb59fba19ccbd2b18cab66898f746e4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef5760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562fbdd86fba <unknown>
E       #1 0x562fbd80b6d0 <unknown>
E       #2 0x562fbd85d2aa <unknown>
E       #3 0x562fbd85d541 <unknown>
E       #4 0x562fbd8ab6c4 <unknown>
E       #5 0x562fbd882e5d <unknown>
E       #6 0x562fbd8a8b54 <unknown>
E       #7 0x562fbd882c03 <unknown>
E       #8 0x562fbd84f7a8 <unknown>
E       #9 0x562fbd850421 <unknown>
E       #10 0x562fbdd4bb28 <unknown>
E       #11 0x562fbdd4f87f <unknown>
E       #12 0x562fbdd33c49 <unknown>
E       #13 0x562fbdd50405 <unknown>
E       #14 0x562fbdd194ff <unknown>
E       #15 0x562fbdd74258 <unknown>
E       #16 0x562fbdd74432 <unknown>
E       #17 0x562fbdd85fa3 <unknown>
E       #18 0x7f57f1c9caa4 <unknown>
E       #19 0x7f57f1d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:16:18,861 - INFO - Starting test with Chrome browser
2025-10-13 04:16:18,862 - INFO - ====== WebDriver manager ======
2025-10-13 04:16:18,929 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:16:18,963 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:16:18,996 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:16:20,489 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:18:24,021 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="de4f5bfb562e36ac2b10d4c4c0d74908")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
        login_page.disabled_click_login_button()
>       login_page.username_blank_validation(login_test_data)

tests/test_login.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:72: in username_blank_validation
    self.actions.wait_for_element(self.username_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="de4f5bfb562e36ac2b10d4c4c0d74908")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef6de0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5606cb94dfba <unknown>
E       #1 0x5606cb3d26d0 <unknown>
E       #2 0x5606cb4242aa <unknown>
E       #3 0x5606cb424541 <unknown>
E       #4 0x5606cb4726c4 <unknown>
E       #5 0x5606cb449e5d <unknown>
E       #6 0x5606cb46fb54 <unknown>
E       #7 0x5606cb449c03 <unknown>
E       #8 0x5606cb4167a8 <unknown>
E       #9 0x5606cb417421 <unknown>
E       #10 0x5606cb912b28 <unknown>
E       #11 0x5606cb91687f <unknown>
E       #12 0x5606cb8fac49 <unknown>
E       #13 0x5606cb917405 <unknown>
E       #14 0x5606cb8e04ff <unknown>
E       #15 0x5606cb93b258 <unknown>
E       #16 0x5606cb93b432 <unknown>
E       #17 0x5606cb94cfa3 <unknown>
E       #18 0x7f1872c9caa4 <unknown>
E       #19 0x7f1872d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:18:24,090 - INFO - Starting test with Chrome browser
2025-10-13 04:18:24,090 - INFO - ====== WebDriver manager ======
2025-10-13 04:18:24,154 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:18:24,198 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:18:24,233 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:18:25,080 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:20:27,149 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ffeacc5cbc4a61d3e86cddba02c9f0c8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
        login_page.click_password()
        login_page.disabled_click_login_button()
>       login_page.password_blank_validation(login_test_data)

tests/test_login.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:78: in password_blank_validation
    self.actions.wait_for_element(self.password_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ffeacc5cbc4a61d3e86cddba02c9f0c8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef74c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56022a8dbfba <unknown>
E       #1 0x56022a3606d0 <unknown>
E       #2 0x56022a3b22aa <unknown>
E       #3 0x56022a3b2541 <unknown>
E       #4 0x56022a4006c4 <unknown>
E       #5 0x56022a3d7e5d <unknown>
E       #6 0x56022a3fdb54 <unknown>
E       #7 0x56022a3d7c03 <unknown>
E       #8 0x56022a3a47a8 <unknown>
E       #9 0x56022a3a5421 <unknown>
E       #10 0x56022a8a0b28 <unknown>
E       #11 0x56022a8a487f <unknown>
E       #12 0x56022a888c49 <unknown>
E       #13 0x56022a8a5405 <unknown>
E       #14 0x56022a86e4ff <unknown>
E       #15 0x56022a8c9258 <unknown>
E       #16 0x56022a8c9432 <unknown>
E       #17 0x56022a8dafa3 <unknown>
E       #18 0x7f30d229caa4 <unknown>
E       #19 0x7f30d2329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:20:27,208 - INFO - Starting test with Chrome browser
2025-10-13 04:20:27,208 - INFO - ====== WebDriver manager ======
2025-10-13 04:20:27,274 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:20:27,316 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:20:27,349 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:20:28,716 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:22:32,285 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a4abe15ba8a5d8ff2c59ce83c3c640cd")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a4abe15ba8a5d8ff2c59ce83c3c640cd")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef6480>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ae0d25ffba <unknown>
E       #1 0x55ae0cce46d0 <unknown>
E       #2 0x55ae0cd362aa <unknown>
E       #3 0x55ae0cd36541 <unknown>
E       #4 0x55ae0cd846c4 <unknown>
E       #5 0x55ae0cd5be5d <unknown>
E       #6 0x55ae0cd81b54 <unknown>
E       #7 0x55ae0cd5bc03 <unknown>
E       #8 0x55ae0cd287a8 <unknown>
E       #9 0x55ae0cd29421 <unknown>
E       #10 0x55ae0d224b28 <unknown>
E       #11 0x55ae0d22887f <unknown>
E       #12 0x55ae0d20cc49 <unknown>
E       #13 0x55ae0d229405 <unknown>
E       #14 0x55ae0d1f24ff <unknown>
E       #15 0x55ae0d24d258 <unknown>
E       #16 0x55ae0d24d432 <unknown>
E       #17 0x55ae0d25efa3 <unknown>
E       #18 0x7f1f3b49caa4 <unknown>
E       #19 0x7f1f3b529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:22:32,344 - INFO - Starting test with Chrome browser
2025-10-13 04:22:32,344 - INFO - ====== WebDriver manager ======
2025-10-13 04:22:32,411 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:22:32,446 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:22:32,478 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:22:34,037 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:24:35,927 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="620f85d3af664a2d9931ee6d8e03c317")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="620f85d3af664a2d9931ee6d8e03c317")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef6ca0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5593b75f4fba <unknown>
E       #1 0x5593b70796d0 <unknown>
E       #2 0x5593b70cb2aa <unknown>
E       #3 0x5593b70cb541 <unknown>
E       #4 0x5593b71196c4 <unknown>
E       #5 0x5593b70f0e5d <unknown>
E       #6 0x5593b7116b54 <unknown>
E       #7 0x5593b70f0c03 <unknown>
E       #8 0x5593b70bd7a8 <unknown>
E       #9 0x5593b70be421 <unknown>
E       #10 0x5593b75b9b28 <unknown>
E       #11 0x5593b75bd87f <unknown>
E       #12 0x5593b75a1c49 <unknown>
E       #13 0x5593b75be405 <unknown>
E       #14 0x5593b75874ff <unknown>
E       #15 0x5593b75e2258 <unknown>
E       #16 0x5593b75e2432 <unknown>
E       #17 0x5593b75f3fa3 <unknown>
E       #18 0x7f4222c9caa4 <unknown>
E       #19 0x7f4222d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:24:35,993 - INFO - Starting test with Chrome browser
2025-10-13 04:24:35,993 - INFO - ====== WebDriver manager ======
2025-10-13 04:24:36,057 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:24:36,095 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:24:36,127 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:24:37,490 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:26:39,334 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0faf16f27af55396eca315205b35e689")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0faf16f27af55396eca315205b35e689")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef72e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56340d117fba <unknown>
E       #1 0x56340cb9c6d0 <unknown>
E       #2 0x56340cbee2aa <unknown>
E       #3 0x56340cbee541 <unknown>
E       #4 0x56340cc3c6c4 <unknown>
E       #5 0x56340cc13e5d <unknown>
E       #6 0x56340cc39b54 <unknown>
E       #7 0x56340cc13c03 <unknown>
E       #8 0x56340cbe07a8 <unknown>
E       #9 0x56340cbe1421 <unknown>
E       #10 0x56340d0dcb28 <unknown>
E       #11 0x56340d0e087f <unknown>
E       #12 0x56340d0c4c49 <unknown>
E       #13 0x56340d0e1405 <unknown>
E       #14 0x56340d0aa4ff <unknown>
E       #15 0x56340d105258 <unknown>
E       #16 0x56340d105432 <unknown>
E       #17 0x56340d116fa3 <unknown>
E       #18 0x7f542969caa4 <unknown>
E       #19 0x7f5429729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:26:39,399 - INFO - Starting test with Chrome browser
2025-10-13 04:26:39,399 - INFO - ====== WebDriver manager ======
2025-10-13 04:26:39,464 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:26:39,498 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:26:39,531 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:26:40,935 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:28:42,851 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d8e773d5fa24e0a30d355ef192549e0d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d8e773d5fa24e0a30d355ef192549e0d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef7600>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563146499fba <unknown>
E       #1 0x563145f1e6d0 <unknown>
E       #2 0x563145f702aa <unknown>
E       #3 0x563145f70541 <unknown>
E       #4 0x563145fbe6c4 <unknown>
E       #5 0x563145f95e5d <unknown>
E       #6 0x563145fbbb54 <unknown>
E       #7 0x563145f95c03 <unknown>
E       #8 0x563145f627a8 <unknown>
E       #9 0x563145f63421 <unknown>
E       #10 0x56314645eb28 <unknown>
E       #11 0x56314646287f <unknown>
E       #12 0x563146446c49 <unknown>
E       #13 0x563146463405 <unknown>
E       #14 0x56314642c4ff <unknown>
E       #15 0x563146487258 <unknown>
E       #16 0x563146487432 <unknown>
E       #17 0x563146498fa3 <unknown>
E       #18 0x7f89f509caa4 <unknown>
E       #19 0x7f89f5129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:28:42,917 - INFO - Starting test with Chrome browser
2025-10-13 04:28:42,918 - INFO - ====== WebDriver manager ======
2025-10-13 04:28:42,982 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:28:43,020 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:28:43,053 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:28:44,711 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:30:46,579 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6cf42d37062e5d0d1ce27774e3199334")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6cf42d37062e5d0d1ce27774e3199334")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f369fef7880>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56495d84afba <unknown>
E       #1 0x56495d2cf6d0 <unknown>
E       #2 0x56495d3212aa <unknown>
E       #3 0x56495d321541 <unknown>
E       #4 0x56495d36f6c4 <unknown>
E       #5 0x56495d346e5d <unknown>
E       #6 0x56495d36cb54 <unknown>
E       #7 0x56495d346c03 <unknown>
E       #8 0x56495d3137a8 <unknown>
E       #9 0x56495d314421 <unknown>
E       #10 0x56495d80fb28 <unknown>
E       #11 0x56495d81387f <unknown>
E       #12 0x56495d7f7c49 <unknown>
E       #13 0x56495d814405 <unknown>
E       #14 0x56495d7dd4ff <unknown>
E       #15 0x56495d838258 <unknown>
E       #16 0x56495d838432 <unknown>
E       #17 0x56495d849fa3 <unknown>
E       #18 0x7fa3f8a9caa4 <unknown>
E       #19 0x7fa3f8b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-13 04:30:46,644 - INFO - Starting test with Chrome browser
2025-10-13 04:30:46,644 - INFO - ====== WebDriver manager ======
2025-10-13 04:30:46,712 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:30:46,748 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-13 04:30:46,782 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-13 04:30:48,198 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-13 04:32:50,038 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251013_035257/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562d8bad8fba <unknown>
#1 0x562d8b55d6d0 <unknown>
#2 0x562d8b5af2aa <unknown>
#3 0x562d8b5af541 <unknown>
#4 0x562d8b5fd6c4 <unknown>
#5 0x562d8b5d4e5d <unknown>
#6 0x562d8b5fab54 <unknown>
#7 0x562d8b5d4c03 <unknown>
#8 0x562d8b5a17a8 <unknown>
#9 0x562d8b5a2421 <unknown>
#10 0x562d8ba9db28 <unknown>
#11 0x562d8baa187f <unknown>
#12 0x562d8ba85c49 <unknown>
#13 0x562d8baa2405 <unknown>
#14 0x562d8ba6b4ff <unknown>
#15 0x562d8bac6258 <unknown>
#16 0x562d8bac6432 <unknown>
#17 0x562d8bad7fa3 <unknown>
#18 0x7fec4149caa4 <unknown>
#19 0x7fec41529c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f89985efba <unknown>
#1 0x55f8992e36d0 <unknown>
#2 0x55f8993352aa <unknown>
#3 0x55f899335541 <unknown>
#4 0x55f8993836c4 <unknown>
#5 0x55f89935ae5d <unknown>
#6 0x55f899380b54 <unknown>
#7 0x55f89935ac03 <unknown>
#8 0x55f8993277a8 <unknown>
#9 0x55f899328421 <unknown>
#10 0x55f899823b28 <unknown>
#11 0x55f89982787f <unknown>
#12 0x55f89980bc49 <unknown>
#13 0x55f899828405 <unknown>
#14 0x55f8997f14ff <unknown>
#15 0x55f89984c258 <unknown>
#16 0x55f89984c432 <unknown>
#17 0x55f89985dfa3 <unknown>
#18 0x7f507429caa4 <unknown>
#19 0x7f5074329c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a0fd412fba <unknown>
#1 0x55a0fce976d0 <unknown>
#2 0x55a0fcee92aa <unknown>
#3 0x55a0fcee9541 <unknown>
#4 0x55a0fcf376c4 <unknown>
#5 0x55a0fcf0ee5d <unknown>
#6 0x55a0fcf34b54 <unknown>
#7 0x55a0fcf0ec03 <unknown>
#8 0x55a0fcedb7a8 <unknown>
#9 0x55a0fcedc421 <unknown>
#10 0x55a0fd3d7b28 <unknown>
#11 0x55a0fd3db87f <unknown>
#12 0x55a0fd3bfc49 <unknown>
#13 0x55a0fd3dc405 <unknown>
#14 0x55a0fd3a54ff <unknown>
#15 0x55a0fd400258 <unknown>
#16 0x55a0fd400432 <unknown>
#17 0x55a0fd411fa3 <unknown>
#18 0x7f4b2169caa4 <unknown>
#19 0x7f4b21729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c95f052fba <unknown>
#1 0x55c95ead76d0 <unknown>
#2 0x55c95eb292aa <unknown>
#3 0x55c95eb29541 <unknown>
#4 0x55c95eb776c4 <unknown>
#5 0x55c95eb4ee5d <unknown>
#6 0x55c95eb74b54 <unknown>
#7 0x55c95eb4ec03 <unknown>
#8 0x55c95eb1b7a8 <unknown>
#9 0x55c95eb1c421 <unknown>
#10 0x55c95f017b28 <unknown>
#11 0x55c95f01b87f <unknown>
#12 0x55c95efffc49 <unknown>
#13 0x55c95f01c405 <unknown>
#14 0x55c95efe54ff <unknown>
#15 0x55c95f040258 <unknown>
#16 0x55c95f040432 <unknown>
#17 0x55c95f051fa3 <unknown>
#18 0x7f3b03a9caa4 <unknown>
#19 0x7f3b03b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f1e3d21fba <unknown>
#1 0x55f1e37a66d0 <unknown>
#2 0x55f1e37f82aa <unknown>
#3 0x55f1e37f8541 <unknown>
#4 0x55f1e38466c4 <unknown>
#5 0x55f1e381de5d <unknown>
#6 0x55f1e3843b54 <unknown>
#7 0x55f1e381dc03 <unknown>
#8 0x55f1e37ea7a8 <unknown>
#9 0x55f1e37eb421 <unknown>
#10 0x55f1e3ce6b28 <unknown>
#11 0x55f1e3cea87f <unknown>
#12 0x55f1e3ccec49 <unknown>
#13 0x55f1e3ceb405 <unknown>
#14 0x55f1e3cb44ff <unknown>
#15 0x55f1e3d0f258 <unknown>
#16 0x55f1e3d0f432 <unknown>
#17 0x55f1e3d20fa3 <unknown>
#18 0x7fe27069caa4 <unknown>
#19 0x7fe270729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55bb1793bfba <unknown>
#1 0x55bb173c06d0 <unknown>
#2 0x55bb174122aa <unknown>
#3 0x55bb17412541 <unknown>
#4 0x55bb174606c4 <unknown>
#5 0x55bb17437e5d <unknown>
#6 0x55bb1745db54 <unknown>
#7 0x55bb17437c03 <unknown>
#8 0x55bb174047a8 <unknown>
#9 0x55bb17405421 <unknown>
#10 0x55bb17900b28 <unknown>
#11 0x55bb1790487f <unknown>
#12 0x55bb178e8c49 <unknown>
#13 0x55bb17905405 <unknown>
#14 0x55bb178ce4ff <unknown>
#15 0x55bb17929258 <unknown>
#16 0x55bb17929432 <unknown>
#17 0x55bb1793afa3 <unknown>
#18 0x7fbf1c69caa4 <unknown>
#19 0x7fbf1c729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563e4bbddfba <unknown>
#1 0x563e4b6626d0 <unknown>
#2 0x563e4b6b42aa <unknown>
#3 0x563e4b6b4541 <unknown>
#4 0x563e4b7026c4 <unknown>
#5 0x563e4b6d9e5d <unknown>
#6 0x563e4b6ffb54 <unknown>
#7 0x563e4b6d9c03 <unknown>
#8 0x563e4b6a67a8 <unknown>
#9 0x563e4b6a7421 <unknown>
#10 0x563e4bba2b28 <unknown>
#11 0x563e4bba687f <unknown>
#12 0x563e4bb8ac49 <unknown>
#13 0x563e4bba7405 <unknown>
#14 0x563e4bb704ff <unknown>
#15 0x563e4bbcb258 <unknown>
#16 0x563e4bbcb432 <unknown>
#17 0x563e4bbdcfa3 <unknown>
#18 0x7f2d1929caa4 <unknown>
#19 0x7f2d19329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5608ae383fba <unknown>
#1 0x5608ade086d0 <unknown>
#2 0x5608ade5a2aa <unknown>
#3 0x5608ade5a541 <unknown>
#4 0x5608adea86c4 <unknown>
#5 0x5608ade7fe5d <unknown>
#6 0x5608adea5b54 <unknown>
#7 0x5608ade7fc03 <unknown>
#8 0x5608ade4c7a8 <unknown>
#9 0x5608ade4d421 <unknown>
#10 0x5608ae348b28 <unknown>
#11 0x5608ae34c87f <unknown>
#12 0x5608ae330c49 <unknown>
#13 0x5608ae34d405 <unknown>
#14 0x5608ae3164ff <unknown>
#15 0x5608ae371258 <unknown>
#16 0x5608ae371432 <unknown>
#17 0x5608ae382fa3 <unknown>
#18 0x7fc50c49caa4 <unknown>
#19 0x7fc50c529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558bde59efba <unknown>
#1 0x558bde0236d0 <unknown>
#2 0x558bde0752aa <unknown>
#3 0x558bde075541 <unknown>
#4 0x558bde0c36c4 <unknown>
#5 0x558bde09ae5d <unknown>
#6 0x558bde0c0b54 <unknown>
#7 0x558bde09ac03 <unknown>
#8 0x558bde0677a8 <unknown>
#9 0x558bde068421 <unknown>
#10 0x558bde563b28 <unknown>
#11 0x558bde56787f <unknown>
#12 0x558bde54bc49 <unknown>
#13 0x558bde568405 <unknown>
#14 0x558bde5314ff <unknown>
#15 0x558bde58c258 <unknown>
#16 0x558bde58c432 <unknown>
#17 0x558bde59dfa3 <unknown>
#18 0x7f96c629caa4 <unknown>
#19 0x7f96c6329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558401765fba <unknown>
#1 0x5584011ea6d0 <unknown>
#2 0x55840123c2aa <unknown>
#3 0x55840123c541 <unknown>
#4 0x55840128a6c4 <unknown>
#5 0x558401261e5d <unknown>
#6 0x558401287b54 <unknown>
#7 0x558401261c03 <unknown>
#8 0x55840122e7a8 <unknown>
#9 0x55840122f421 <unknown>
#10 0x55840172ab28 <unknown>
#11 0x55840172e87f <unknown>
#12 0x558401712c49 <unknown>
#13 0x55840172f405 <unknown>
#14 0x5584016f84ff <unknown>
#15 0x558401753258 <unknown>
#16 0x558401753432 <unknown>
#17 0x558401764fa3 <unknown>
#18 0x7f1ec149caa4 <unknown>
#19 0x7f1ec1529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56312a0befba <unknown>
#1 0x563129b436d0 <unknown>
#2 0x563129b952aa <unknown>
#3 0x563129b95541 <unknown>
#4 0x563129be36c4 <unknown>
#5 0x563129bbae5d <unknown>
#6 0x563129be0b54 <unknown>
#7 0x563129bbac03 <unknown>
#8 0x563129b877a8 <unknown>
#9 0x563129b88421 <unknown>
#10 0x56312a083b28 <unknown>
#11 0x56312a08787f <unknown>
#12 0x56312a06bc49 <unknown>
#13 0x56312a088405 <unknown>
#14 0x56312a0514ff <unknown>
#15 0x56312a0ac258 <unknown>
#16 0x56312a0ac432 <unknown>
#17 0x56312a0bdfa3 <unknown>
#18 0x7f91f5c9caa4 <unknown>
#19 0x7f91f5d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562fbdd86fba <unknown>
#1 0x562fbd80b6d0 <unknown>
#2 0x562fbd85d2aa <unknown>
#3 0x562fbd85d541 <unknown>
#4 0x562fbd8ab6c4 <unknown>
#5 0x562fbd882e5d <unknown>
#6 0x562fbd8a8b54 <unknown>
#7 0x562fbd882c03 <unknown>
#8 0x562fbd84f7a8 <unknown>
#9 0x562fbd850421 <unknown>
#10 0x562fbdd4bb28 <unknown>
#11 0x562fbdd4f87f <unknown>
#12 0x562fbdd33c49 <unknown>
#13 0x562fbdd50405 <unknown>
#14 0x562fbdd194ff <unknown>
#15 0x562fbdd74258 <unknown>
#16 0x562fbdd74432 <unknown>
#17 0x562fbdd85fa3 <unknown>
#18 0x7f57f1c9caa4 <unknown>
#19 0x7f57f1d29c6c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5606cb94dfba <unknown>
#1 0x5606cb3d26d0 <unknown>
#2 0x5606cb4242aa <unknown>
#3 0x5606cb424541 <unknown>
#4 0x5606cb4726c4 <unknown>
#5 0x5606cb449e5d <unknown>
#6 0x5606cb46fb54 <unknown>
#7 0x5606cb449c03 <unknown>
#8 0x5606cb4167a8 <unknown>
#9 0x5606cb417421 <unknown>
#10 0x5606cb912b28 <unknown>
#11 0x5606cb91687f <unknown>
#12 0x5606cb8fac49 <unknown>
#13 0x5606cb917405 <unknown>
#14 0x5606cb8e04ff <unknown>
#15 0x5606cb93b258 <unknown>
#16 0x5606cb93b432 <unknown>
#17 0x5606cb94cfa3 <unknown>
#18 0x7f1872c9caa4 <unknown>
#19 0x7f1872d29c6c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56022a8dbfba <unknown>
#1 0x56022a3606d0 <unknown>
#2 0x56022a3b22aa <unknown>
#3 0x56022a3b2541 <unknown>
#4 0x56022a4006c4 <unknown>
#5 0x56022a3d7e5d <unknown>
#6 0x56022a3fdb54 <unknown>
#7 0x56022a3d7c03 <unknown>
#8 0x56022a3a47a8 <unknown>
#9 0x56022a3a5421 <unknown>
#10 0x56022a8a0b28 <unknown>
#11 0x56022a8a487f <unknown>
#12 0x56022a888c49 <unknown>
#13 0x56022a8a5405 <unknown>
#14 0x56022a86e4ff <unknown>
#15 0x56022a8c9258 <unknown>
#16 0x56022a8c9432 <unknown>
#17 0x56022a8dafa3 <unknown>
#18 0x7f30d229caa4 <unknown>
#19 0x7f30d2329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ae0d25ffba <unknown>
#1 0x55ae0cce46d0 <unknown>
#2 0x55ae0cd362aa <unknown>
#3 0x55ae0cd36541 <unknown>
#4 0x55ae0cd846c4 <unknown>
#5 0x55ae0cd5be5d <unknown>
#6 0x55ae0cd81b54 <unknown>
#7 0x55ae0cd5bc03 <unknown>
#8 0x55ae0cd287a8 <unknown>
#9 0x55ae0cd29421 <unknown>
#10 0x55ae0d224b28 <unknown>
#11 0x55ae0d22887f <unknown>
#12 0x55ae0d20cc49 <unknown>
#13 0x55ae0d229405 <unknown>
#14 0x55ae0d1f24ff <unknown>
#15 0x55ae0d24d258 <unknown>
#16 0x55ae0d24d432 <unknown>
#17 0x55ae0d25efa3 <unknown>
#18 0x7f1f3b49caa4 <unknown>
#19 0x7f1f3b529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5593b75f4fba <unknown>
#1 0x5593b70796d0 <unknown>
#2 0x5593b70cb2aa <unknown>
#3 0x5593b70cb541 <unknown>
#4 0x5593b71196c4 <unknown>
#5 0x5593b70f0e5d <unknown>
#6 0x5593b7116b54 <unknown>
#7 0x5593b70f0c03 <unknown>
#8 0x5593b70bd7a8 <unknown>
#9 0x5593b70be421 <unknown>
#10 0x5593b75b9b28 <unknown>
#11 0x5593b75bd87f <unknown>
#12 0x5593b75a1c49 <unknown>
#13 0x5593b75be405 <unknown>
#14 0x5593b75874ff <unknown>
#15 0x5593b75e2258 <unknown>
#16 0x5593b75e2432 <unknown>
#17 0x5593b75f3fa3 <unknown>
#18 0x7f4222c9caa4 <unknown>
#19 0x7f4222d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56340d117fba <unknown>
#1 0x56340cb9c6d0 <unknown>
#2 0x56340cbee2aa <unknown>
#3 0x56340cbee541 <unknown>
#4 0x56340cc3c6c4 <unknown>
#5 0x56340cc13e5d <unknown>
#6 0x56340cc39b54 <unknown>
#7 0x56340cc13c03 <unknown>
#8 0x56340cbe07a8 <unknown>
#9 0x56340cbe1421 <unknown>
#10 0x56340d0dcb28 <unknown>
#11 0x56340d0e087f <unknown>
#12 0x56340d0c4c49 <unknown>
#13 0x56340d0e1405 <unknown>
#14 0x56340d0aa4ff <unknown>
#15 0x56340d105258 <unknown>
#16 0x56340d105432 <unknown>
#17 0x56340d116fa3 <unknown>
#18 0x7f542969caa4 <unknown>
#19 0x7f5429729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563146499fba <unknown>
#1 0x563145f1e6d0 <unknown>
#2 0x563145f702aa <unknown>
#3 0x563145f70541 <unknown>
#4 0x563145fbe6c4 <unknown>
#5 0x563145f95e5d <unknown>
#6 0x563145fbbb54 <unknown>
#7 0x563145f95c03 <unknown>
#8 0x563145f627a8 <unknown>
#9 0x563145f63421 <unknown>
#10 0x56314645eb28 <unknown>
#11 0x56314646287f <unknown>
#12 0x563146446c49 <unknown>
#13 0x563146463405 <unknown>
#14 0x56314642c4ff <unknown>
#15 0x563146487258 <unknown>
#16 0x563146487432 <unknown>
#17 0x563146498fa3 <unknown>
#18 0x7f89f509caa4 <unknown>
#19 0x7f89f5129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56495d84afba <unknown>
#1 0x56495d2cf6d0 <unknown>
#2 0x56495d3212aa <unknown>
#3 0x56495d321541 <unknown>
#4 0x56495d36f6c4 <unknown>
#5 0x56495d346e5d <unknown>
#6 0x56495d36cb54 <unknown>
#7 0x56495d346c03 <unknown>
#8 0x56495d3137a8 <unknown>
#9 0x56495d314421 <unknown>
#10 0x56495d80fb28 <unknown>
#11 0x56495d81387f <unknown>
#12 0x56495d7f7c49 <unknown>
#13 0x56495d814405 <unknown>
#14 0x56495d7dd4ff <unknown>
#15 0x56495d838258 <unknown>
#16 0x56495d838432 <unknown>
#17 0x56495d849fa3 <unknown>
#18 0x7fa3f8a9caa4 <unknown>
#19 0x7fa3f8b29c6c <unknown>
======================= 19 failed in 2392.62s (0:39:52) ========================
--------------------------------------------
Test Run Finished: 2025-10-13 04:32:50
Duration: 2397 seconds
Status: FAILURE
Exit Code: 1
============================================
