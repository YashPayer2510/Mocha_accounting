========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-29 03:49:40
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2ccab34cbafacd0bf2f3b220c44f8df4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2ccab34cbafacd0bf2f3b220c44f8df4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a109d8900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f0f3adafba <unknown>
E       #1 0x55f0f355f6d0 <unknown>
E       #2 0x55f0f35b12aa <unknown>
E       #3 0x55f0f35b1541 <unknown>
E       #4 0x55f0f35ff6c4 <unknown>
E       #5 0x55f0f35d6e5d <unknown>
E       #6 0x55f0f35fcb54 <unknown>
E       #7 0x55f0f35d6c03 <unknown>
E       #8 0x55f0f35a37a8 <unknown>
E       #9 0x55f0f35a4421 <unknown>
E       #10 0x55f0f3a9fb28 <unknown>
E       #11 0x55f0f3aa387f <unknown>
E       #12 0x55f0f3a87c49 <unknown>
E       #13 0x55f0f3aa4405 <unknown>
E       #14 0x55f0f3a6d4ff <unknown>
E       #15 0x55f0f3ac8258 <unknown>
E       #16 0x55f0f3ac8432 <unknown>
E       #17 0x55f0f3ad9fa3 <unknown>
E       #18 0x7fc05ba9caa4 <unknown>
E       #19 0x7fc05bb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 03:49:42,259 - INFO - Test data loaded successfully.
2025-09-29 03:49:42,259 - INFO - Starting test with Chrome browser
2025-09-29 03:49:42,259 - INFO - ====== WebDriver manager ======
2025-09-29 03:49:43,485 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:49:43,576 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:49:43,649 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-09-29 03:49:43,649 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:49:43,848 - INFO - WebDriver version 140.0.7339.207 selected
2025-09-29 03:49:43,852 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-29 03:49:43,853 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-29 03:49:43,938 - INFO - Driver downloading response is 200
2025-09-29 03:49:44,122 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:49:44,301 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-09-29 03:49:52,508 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-29 03:49:52,508 - INFO - Starting the test case for valid credentials
2025-09-29 03:49:52,769 - INFO - User enters the email-id
2025-09-29 03:49:54,480 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 03:51:56,140 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3856bcb77a028c83264b96b9dce5ae89")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3856bcb77a028c83264b96b9dce5ae89")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102ad8a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55fedf936fba <unknown>
E       #1 0x55fedf3bb6d0 <unknown>
E       #2 0x55fedf40d2aa <unknown>
E       #3 0x55fedf40d541 <unknown>
E       #4 0x55fedf45b6c4 <unknown>
E       #5 0x55fedf432e5d <unknown>
E       #6 0x55fedf458b54 <unknown>
E       #7 0x55fedf432c03 <unknown>
E       #8 0x55fedf3ff7a8 <unknown>
E       #9 0x55fedf400421 <unknown>
E       #10 0x55fedf8fbb28 <unknown>
E       #11 0x55fedf8ff87f <unknown>
E       #12 0x55fedf8e3c49 <unknown>
E       #13 0x55fedf900405 <unknown>
E       #14 0x55fedf8c94ff <unknown>
E       #15 0x55fedf924258 <unknown>
E       #16 0x55fedf924432 <unknown>
E       #17 0x55fedf935fa3 <unknown>
E       #18 0x7fc6bc09caa4 <unknown>
E       #19 0x7fc6bc129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 03:51:56,276 - INFO - Starting test with Chrome browser
2025-09-29 03:51:56,276 - INFO - ====== WebDriver manager ======
2025-09-29 03:51:56,344 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:51:56,419 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:51:56,508 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 03:51:58,203 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-29 03:51:58,203 - INFO - Starting the test case for valid credentials
2025-09-29 03:51:58,352 - INFO - User enters the email-id
2025-09-29 03:52:00,084 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 03:54:01,781 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e5011de42bb94391be52969615fa98fd")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e5011de42bb94391be52969615fa98fd")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a112363e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x555d0163cfba <unknown>
E       #1 0x555d010c16d0 <unknown>
E       #2 0x555d011132aa <unknown>
E       #3 0x555d01113541 <unknown>
E       #4 0x555d011616c4 <unknown>
E       #5 0x555d01138e5d <unknown>
E       #6 0x555d0115eb54 <unknown>
E       #7 0x555d01138c03 <unknown>
E       #8 0x555d011057a8 <unknown>
E       #9 0x555d01106421 <unknown>
E       #10 0x555d01601b28 <unknown>
E       #11 0x555d0160587f <unknown>
E       #12 0x555d015e9c49 <unknown>
E       #13 0x555d01606405 <unknown>
E       #14 0x555d015cf4ff <unknown>
E       #15 0x555d0162a258 <unknown>
E       #16 0x555d0162a432 <unknown>
E       #17 0x555d0163bfa3 <unknown>
E       #18 0x7fa0b769caa4 <unknown>
E       #19 0x7fa0b7729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 03:54:01,848 - INFO - Starting test with Chrome browser
2025-09-29 03:54:01,848 - INFO - ====== WebDriver manager ======
2025-09-29 03:54:01,916 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:54:01,989 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:54:02,061 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 03:54:03,558 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-29 03:54:03,559 - INFO - Starting the test case for valid credentials
2025-09-29 03:54:03,711 - INFO - User enters the email-id
2025-09-29 03:54:05,453 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 03:56:07,106 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b10911d30da634c4f5f3a11e380b7755")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b10911d30da634c4f5f3a11e380b7755")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102ad6c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55edf4e21fba <unknown>
E       #1 0x55edf48a66d0 <unknown>
E       #2 0x55edf48f82aa <unknown>
E       #3 0x55edf48f8541 <unknown>
E       #4 0x55edf49466c4 <unknown>
E       #5 0x55edf491de5d <unknown>
E       #6 0x55edf4943b54 <unknown>
E       #7 0x55edf491dc03 <unknown>
E       #8 0x55edf48ea7a8 <unknown>
E       #9 0x55edf48eb421 <unknown>
E       #10 0x55edf4de6b28 <unknown>
E       #11 0x55edf4dea87f <unknown>
E       #12 0x55edf4dcec49 <unknown>
E       #13 0x55edf4deb405 <unknown>
E       #14 0x55edf4db44ff <unknown>
E       #15 0x55edf4e0f258 <unknown>
E       #16 0x55edf4e0f432 <unknown>
E       #17 0x55edf4e20fa3 <unknown>
E       #18 0x7f2b35c9caa4 <unknown>
E       #19 0x7f2b35d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 03:56:08,166 - INFO - Starting test with Chrome browser
2025-09-29 03:56:08,166 - INFO - ====== WebDriver manager ======
2025-09-29 03:56:08,234 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:56:08,307 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:56:08,364 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 03:56:09,349 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-29 03:56:09,350 - INFO - Starting the test case for valid credentials
2025-09-29 03:56:09,796 - INFO - User enters the email-id
2025-09-29 03:56:11,495 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 03:58:13,152 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2af7bf23a62482a26cc2329867be6b4c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2af7bf23a62482a26cc2329867be6b4c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102adf80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559fdd7f3fba <unknown>
E       #1 0x559fdd2786d0 <unknown>
E       #2 0x559fdd2ca2aa <unknown>
E       #3 0x559fdd2ca541 <unknown>
E       #4 0x559fdd3186c4 <unknown>
E       #5 0x559fdd2efe5d <unknown>
E       #6 0x559fdd315b54 <unknown>
E       #7 0x559fdd2efc03 <unknown>
E       #8 0x559fdd2bc7a8 <unknown>
E       #9 0x559fdd2bd421 <unknown>
E       #10 0x559fdd7b8b28 <unknown>
E       #11 0x559fdd7bc87f <unknown>
E       #12 0x559fdd7a0c49 <unknown>
E       #13 0x559fdd7bd405 <unknown>
E       #14 0x559fdd7864ff <unknown>
E       #15 0x559fdd7e1258 <unknown>
E       #16 0x559fdd7e1432 <unknown>
E       #17 0x559fdd7f2fa3 <unknown>
E       #18 0x7f81cac9caa4 <unknown>
E       #19 0x7f81cad29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 03:58:13,218 - INFO - Starting test with Chrome browser
2025-09-29 03:58:13,218 - INFO - ====== WebDriver manager ======
2025-09-29 03:58:13,286 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:58:13,359 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 03:58:13,422 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 03:58:15,064 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 04:00:16,888 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="92b1c48b6ac27f4f73722eac050eaf32")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="92b1c48b6ac27f4f73722eac050eaf32")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102ae020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560480e11fba <unknown>
E       #1 0x5604808966d0 <unknown>
E       #2 0x5604808e82aa <unknown>
E       #3 0x5604808e8541 <unknown>
E       #4 0x5604809366c4 <unknown>
E       #5 0x56048090de5d <unknown>
E       #6 0x560480933b54 <unknown>
E       #7 0x56048090dc03 <unknown>
E       #8 0x5604808da7a8 <unknown>
E       #9 0x5604808db421 <unknown>
E       #10 0x560480dd6b28 <unknown>
E       #11 0x560480dda87f <unknown>
E       #12 0x560480dbec49 <unknown>
E       #13 0x560480ddb405 <unknown>
E       #14 0x560480da44ff <unknown>
E       #15 0x560480dff258 <unknown>
E       #16 0x560480dff432 <unknown>
E       #17 0x560480e10fa3 <unknown>
E       #18 0x7fa50869caa4 <unknown>
E       #19 0x7fa508729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 04:00:16,954 - INFO - Starting test with Chrome browser
2025-09-29 04:00:16,954 - INFO - ====== WebDriver manager ======
2025-09-29 04:00:17,020 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:00:17,076 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:00:17,148 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 04:00:18,777 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 04:02:20,557 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7fe6e07f4f7c8728d58ef392b3777d67")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7fe6e07f4f7c8728d58ef392b3777d67")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102adda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558608f0cfba <unknown>
E       #1 0x5586089916d0 <unknown>
E       #2 0x5586089e32aa <unknown>
E       #3 0x5586089e3541 <unknown>
E       #4 0x558608a316c4 <unknown>
E       #5 0x558608a08e5d <unknown>
E       #6 0x558608a2eb54 <unknown>
E       #7 0x558608a08c03 <unknown>
E       #8 0x5586089d57a8 <unknown>
E       #9 0x5586089d6421 <unknown>
E       #10 0x558608ed1b28 <unknown>
E       #11 0x558608ed587f <unknown>
E       #12 0x558608eb9c49 <unknown>
E       #13 0x558608ed6405 <unknown>
E       #14 0x558608e9f4ff <unknown>
E       #15 0x558608efa258 <unknown>
E       #16 0x558608efa432 <unknown>
E       #17 0x558608f0bfa3 <unknown>
E       #18 0x7f3380a9caa4 <unknown>
E       #19 0x7f3380b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 04:02:20,621 - INFO - Starting test with Chrome browser
2025-09-29 04:02:20,622 - INFO - ====== WebDriver manager ======
2025-09-29 04:02:20,691 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:02:20,756 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:02:20,815 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 04:02:21,737 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 04:04:23,788 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8569b1270dd7cb571cb1fe02c62f926c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8569b1270dd7cb571cb1fe02c62f926c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102ae840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x555cc6f76fba <unknown>
E       #1 0x555cc69fb6d0 <unknown>
E       #2 0x555cc6a4d2aa <unknown>
E       #3 0x555cc6a4d541 <unknown>
E       #4 0x555cc6a9b6c4 <unknown>
E       #5 0x555cc6a72e5d <unknown>
E       #6 0x555cc6a98b54 <unknown>
E       #7 0x555cc6a72c03 <unknown>
E       #8 0x555cc6a3f7a8 <unknown>
E       #9 0x555cc6a40421 <unknown>
E       #10 0x555cc6f3bb28 <unknown>
E       #11 0x555cc6f3f87f <unknown>
E       #12 0x555cc6f23c49 <unknown>
E       #13 0x555cc6f40405 <unknown>
E       #14 0x555cc6f094ff <unknown>
E       #15 0x555cc6f64258 <unknown>
E       #16 0x555cc6f64432 <unknown>
E       #17 0x555cc6f75fa3 <unknown>
E       #18 0x7f2881c9caa4 <unknown>
E       #19 0x7f2881d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 04:04:23,854 - INFO - Starting test with Chrome browser
2025-09-29 04:04:23,854 - INFO - ====== WebDriver manager ======
2025-09-29 04:04:23,920 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:04:23,986 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:04:24,058 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 04:04:25,719 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 04:06:27,493 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="40273f2da2a54de3f03c5f955080437f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="40273f2da2a54de3f03c5f955080437f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102aeb60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ec63ef2fba <unknown>
E       #1 0x55ec639776d0 <unknown>
E       #2 0x55ec639c92aa <unknown>
E       #3 0x55ec639c9541 <unknown>
E       #4 0x55ec63a176c4 <unknown>
E       #5 0x55ec639eee5d <unknown>
E       #6 0x55ec63a14b54 <unknown>
E       #7 0x55ec639eec03 <unknown>
E       #8 0x55ec639bb7a8 <unknown>
E       #9 0x55ec639bc421 <unknown>
E       #10 0x55ec63eb7b28 <unknown>
E       #11 0x55ec63ebb87f <unknown>
E       #12 0x55ec63e9fc49 <unknown>
E       #13 0x55ec63ebc405 <unknown>
E       #14 0x55ec63e854ff <unknown>
E       #15 0x55ec63ee0258 <unknown>
E       #16 0x55ec63ee0432 <unknown>
E       #17 0x55ec63ef1fa3 <unknown>
E       #18 0x7fbd8469caa4 <unknown>
E       #19 0x7fbd84729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 04:06:27,558 - INFO - Starting test with Chrome browser
2025-09-29 04:06:27,558 - INFO - ====== WebDriver manager ======
2025-09-29 04:06:27,624 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:06:27,695 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:06:27,767 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 04:06:29,352 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 04:08:32,918 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c817cc6a0b1f6b4e3fb36fdd1f08f98d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c817cc6a0b1f6b4e3fb36fdd1f08f98d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102ae8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5631a65dffba <unknown>
E       #1 0x5631a60646d0 <unknown>
E       #2 0x5631a60b62aa <unknown>
E       #3 0x5631a60b6541 <unknown>
E       #4 0x5631a61046c4 <unknown>
E       #5 0x5631a60dbe5d <unknown>
E       #6 0x5631a6101b54 <unknown>
E       #7 0x5631a60dbc03 <unknown>
E       #8 0x5631a60a87a8 <unknown>
E       #9 0x5631a60a9421 <unknown>
E       #10 0x5631a65a4b28 <unknown>
E       #11 0x5631a65a887f <unknown>
E       #12 0x5631a658cc49 <unknown>
E       #13 0x5631a65a9405 <unknown>
E       #14 0x5631a65724ff <unknown>
E       #15 0x5631a65cd258 <unknown>
E       #16 0x5631a65cd432 <unknown>
E       #17 0x5631a65defa3 <unknown>
E       #18 0x7fa9c849caa4 <unknown>
E       #19 0x7fa9c8529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 04:08:32,985 - INFO - Starting test with Chrome browser
2025-09-29 04:08:32,986 - INFO - ====== WebDriver manager ======
2025-09-29 04:08:33,053 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:08:33,147 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:08:33,213 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 04:08:34,992 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 04:10:38,480 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ac1ba4c05e82c1bec7f3c65e2caf18a0")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ac1ba4c05e82c1bec7f3c65e2caf18a0")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102adda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c40228dfba <unknown>
E       #1 0x55c401d126d0 <unknown>
E       #2 0x55c401d642aa <unknown>
E       #3 0x55c401d64541 <unknown>
E       #4 0x55c401db26c4 <unknown>
E       #5 0x55c401d89e5d <unknown>
E       #6 0x55c401dafb54 <unknown>
E       #7 0x55c401d89c03 <unknown>
E       #8 0x55c401d567a8 <unknown>
E       #9 0x55c401d57421 <unknown>
E       #10 0x55c402252b28 <unknown>
E       #11 0x55c40225687f <unknown>
E       #12 0x55c40223ac49 <unknown>
E       #13 0x55c402257405 <unknown>
E       #14 0x55c4022204ff <unknown>
E       #15 0x55c40227b258 <unknown>
E       #16 0x55c40227b432 <unknown>
E       #17 0x55c40228cfa3 <unknown>
E       #18 0x7f3ca589caa4 <unknown>
E       #19 0x7f3ca5929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 04:10:38,547 - INFO - Starting test with Chrome browser
2025-09-29 04:10:38,548 - INFO - ====== WebDriver manager ======
2025-09-29 04:10:38,614 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:10:38,686 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:10:38,758 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 04:10:40,742 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 04:12:44,201 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="da313048d9a4c6a72030a3aedf099db3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="da313048d9a4c6a72030a3aedf099db3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5a102ad940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e0d73ecfba <unknown>
E       #1 0x55e0d6e716d0 <unknown>
E       #2 0x55e0d6ec32aa <unknown>
E       #3 0x55e0d6ec3541 <unknown>
E       #4 0x55e0d6f116c4 <unknown>
E       #5 0x55e0d6ee8e5d <unknown>
E       #6 0x55e0d6f0eb54 <unknown>
E       #7 0x55e0d6ee8c03 <unknown>
E       #8 0x55e0d6eb57a8 <unknown>
E       #9 0x55e0d6eb6421 <unknown>
E       #10 0x55e0d73b1b28 <unknown>
E       #11 0x55e0d73b587f <unknown>
E       #12 0x55e0d7399c49 <unknown>
E       #13 0x55e0d73b6405 <unknown>
E       #14 0x55e0d737f4ff <unknown>
E       #15 0x55e0d73da258 <unknown>
E       #16 0x55e0d73da432 <unknown>
E       #17 0x55e0d73ebfa3 <unknown>
E       #18 0x7f862089caa4 <unknown>
E       #19 0x7f8620929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-29 04:12:44,269 - INFO - Starting test with Chrome browser
2025-09-29 04:12:44,269 - INFO - ====== WebDriver manager ======
2025-09-29 04:12:44,337 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:12:44,411 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-29 04:12:44,474 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-29 04:12:46,021 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-29 04:14:49,500 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250929_034942/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f0f3adafba <unknown>
#1 0x55f0f355f6d0 <unknown>
#2 0x55f0f35b12aa <unknown>
#3 0x55f0f35b1541 <unknown>
#4 0x55f0f35ff6c4 <unknown>
#5 0x55f0f35d6e5d <unknown>
#6 0x55f0f35fcb54 <unknown>
#7 0x55f0f35d6c03 <unknown>
#8 0x55f0f35a37a8 <unknown>
#9 0x55f0f35a4421 <unknown>
#10 0x55f0f3a9fb28 <unknown>
#11 0x55f0f3aa387f <unknown>
#12 0x55f0f3a87c49 <unknown>
#13 0x55f0f3aa4405 <unknown>
#14 0x55f0f3a6d4ff <unknown>
#15 0x55f0f3ac8258 <unknown>
#16 0x55f0f3ac8432 <unknown>
#17 0x55f0f3ad9fa3 <unknown>
#18 0x7fc05ba9caa4 <unknown>
#19 0x7fc05bb29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55fedf936fba <unknown>
#1 0x55fedf3bb6d0 <unknown>
#2 0x55fedf40d2aa <unknown>
#3 0x55fedf40d541 <unknown>
#4 0x55fedf45b6c4 <unknown>
#5 0x55fedf432e5d <unknown>
#6 0x55fedf458b54 <unknown>
#7 0x55fedf432c03 <unknown>
#8 0x55fedf3ff7a8 <unknown>
#9 0x55fedf400421 <unknown>
#10 0x55fedf8fbb28 <unknown>
#11 0x55fedf8ff87f <unknown>
#12 0x55fedf8e3c49 <unknown>
#13 0x55fedf900405 <unknown>
#14 0x55fedf8c94ff <unknown>
#15 0x55fedf924258 <unknown>
#16 0x55fedf924432 <unknown>
#17 0x55fedf935fa3 <unknown>
#18 0x7fc6bc09caa4 <unknown>
#19 0x7fc6bc129c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x555d0163cfba <unknown>
#1 0x555d010c16d0 <unknown>
#2 0x555d011132aa <unknown>
#3 0x555d01113541 <unknown>
#4 0x555d011616c4 <unknown>
#5 0x555d01138e5d <unknown>
#6 0x555d0115eb54 <unknown>
#7 0x555d01138c03 <unknown>
#8 0x555d011057a8 <unknown>
#9 0x555d01106421 <unknown>
#10 0x555d01601b28 <unknown>
#11 0x555d0160587f <unknown>
#12 0x555d015e9c49 <unknown>
#13 0x555d01606405 <unknown>
#14 0x555d015cf4ff <unknown>
#15 0x555d0162a258 <unknown>
#16 0x555d0162a432 <unknown>
#17 0x555d0163bfa3 <unknown>
#18 0x7fa0b769caa4 <unknown>
#19 0x7fa0b7729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55edf4e21fba <unknown>
#1 0x55edf48a66d0 <unknown>
#2 0x55edf48f82aa <unknown>
#3 0x55edf48f8541 <unknown>
#4 0x55edf49466c4 <unknown>
#5 0x55edf491de5d <unknown>
#6 0x55edf4943b54 <unknown>
#7 0x55edf491dc03 <unknown>
#8 0x55edf48ea7a8 <unknown>
#9 0x55edf48eb421 <unknown>
#10 0x55edf4de6b28 <unknown>
#11 0x55edf4dea87f <unknown>
#12 0x55edf4dcec49 <unknown>
#13 0x55edf4deb405 <unknown>
#14 0x55edf4db44ff <unknown>
#15 0x55edf4e0f258 <unknown>
#16 0x55edf4e0f432 <unknown>
#17 0x55edf4e20fa3 <unknown>
#18 0x7f2b35c9caa4 <unknown>
#19 0x7f2b35d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559fdd7f3fba <unknown>
#1 0x559fdd2786d0 <unknown>
#2 0x559fdd2ca2aa <unknown>
#3 0x559fdd2ca541 <unknown>
#4 0x559fdd3186c4 <unknown>
#5 0x559fdd2efe5d <unknown>
#6 0x559fdd315b54 <unknown>
#7 0x559fdd2efc03 <unknown>
#8 0x559fdd2bc7a8 <unknown>
#9 0x559fdd2bd421 <unknown>
#10 0x559fdd7b8b28 <unknown>
#11 0x559fdd7bc87f <unknown>
#12 0x559fdd7a0c49 <unknown>
#13 0x559fdd7bd405 <unknown>
#14 0x559fdd7864ff <unknown>
#15 0x559fdd7e1258 <unknown>
#16 0x559fdd7e1432 <unknown>
#17 0x559fdd7f2fa3 <unknown>
#18 0x7f81cac9caa4 <unknown>
#19 0x7f81cad29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560480e11fba <unknown>
#1 0x5604808966d0 <unknown>
#2 0x5604808e82aa <unknown>
#3 0x5604808e8541 <unknown>
#4 0x5604809366c4 <unknown>
#5 0x56048090de5d <unknown>
#6 0x560480933b54 <unknown>
#7 0x56048090dc03 <unknown>
#8 0x5604808da7a8 <unknown>
#9 0x5604808db421 <unknown>
#10 0x560480dd6b28 <unknown>
#11 0x560480dda87f <unknown>
#12 0x560480dbec49 <unknown>
#13 0x560480ddb405 <unknown>
#14 0x560480da44ff <unknown>
#15 0x560480dff258 <unknown>
#16 0x560480dff432 <unknown>
#17 0x560480e10fa3 <unknown>
#18 0x7fa50869caa4 <unknown>
#19 0x7fa508729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558608f0cfba <unknown>
#1 0x5586089916d0 <unknown>
#2 0x5586089e32aa <unknown>
#3 0x5586089e3541 <unknown>
#4 0x558608a316c4 <unknown>
#5 0x558608a08e5d <unknown>
#6 0x558608a2eb54 <unknown>
#7 0x558608a08c03 <unknown>
#8 0x5586089d57a8 <unknown>
#9 0x5586089d6421 <unknown>
#10 0x558608ed1b28 <unknown>
#11 0x558608ed587f <unknown>
#12 0x558608eb9c49 <unknown>
#13 0x558608ed6405 <unknown>
#14 0x558608e9f4ff <unknown>
#15 0x558608efa258 <unknown>
#16 0x558608efa432 <unknown>
#17 0x558608f0bfa3 <unknown>
#18 0x7f3380a9caa4 <unknown>
#19 0x7f3380b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x555cc6f76fba <unknown>
#1 0x555cc69fb6d0 <unknown>
#2 0x555cc6a4d2aa <unknown>
#3 0x555cc6a4d541 <unknown>
#4 0x555cc6a9b6c4 <unknown>
#5 0x555cc6a72e5d <unknown>
#6 0x555cc6a98b54 <unknown>
#7 0x555cc6a72c03 <unknown>
#8 0x555cc6a3f7a8 <unknown>
#9 0x555cc6a40421 <unknown>
#10 0x555cc6f3bb28 <unknown>
#11 0x555cc6f3f87f <unknown>
#12 0x555cc6f23c49 <unknown>
#13 0x555cc6f40405 <unknown>
#14 0x555cc6f094ff <unknown>
#15 0x555cc6f64258 <unknown>
#16 0x555cc6f64432 <unknown>
#17 0x555cc6f75fa3 <unknown>
#18 0x7f2881c9caa4 <unknown>
#19 0x7f2881d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ec63ef2fba <unknown>
#1 0x55ec639776d0 <unknown>
#2 0x55ec639c92aa <unknown>
#3 0x55ec639c9541 <unknown>
#4 0x55ec63a176c4 <unknown>
#5 0x55ec639eee5d <unknown>
#6 0x55ec63a14b54 <unknown>
#7 0x55ec639eec03 <unknown>
#8 0x55ec639bb7a8 <unknown>
#9 0x55ec639bc421 <unknown>
#10 0x55ec63eb7b28 <unknown>
#11 0x55ec63ebb87f <unknown>
#12 0x55ec63e9fc49 <unknown>
#13 0x55ec63ebc405 <unknown>
#14 0x55ec63e854ff <unknown>
#15 0x55ec63ee0258 <unknown>
#16 0x55ec63ee0432 <unknown>
#17 0x55ec63ef1fa3 <unknown>
#18 0x7fbd8469caa4 <unknown>
#19 0x7fbd84729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5631a65dffba <unknown>
#1 0x5631a60646d0 <unknown>
#2 0x5631a60b62aa <unknown>
#3 0x5631a60b6541 <unknown>
#4 0x5631a61046c4 <unknown>
#5 0x5631a60dbe5d <unknown>
#6 0x5631a6101b54 <unknown>
#7 0x5631a60dbc03 <unknown>
#8 0x5631a60a87a8 <unknown>
#9 0x5631a60a9421 <unknown>
#10 0x5631a65a4b28 <unknown>
#11 0x5631a65a887f <unknown>
#12 0x5631a658cc49 <unknown>
#13 0x5631a65a9405 <unknown>
#14 0x5631a65724ff <unknown>
#15 0x5631a65cd258 <unknown>
#16 0x5631a65cd432 <unknown>
#17 0x5631a65defa3 <unknown>
#18 0x7fa9c849caa4 <unknown>
#19 0x7fa9c8529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c40228dfba <unknown>
#1 0x55c401d126d0 <unknown>
#2 0x55c401d642aa <unknown>
#3 0x55c401d64541 <unknown>
#4 0x55c401db26c4 <unknown>
#5 0x55c401d89e5d <unknown>
#6 0x55c401dafb54 <unknown>
#7 0x55c401d89c03 <unknown>
#8 0x55c401d567a8 <unknown>
#9 0x55c401d57421 <unknown>
#10 0x55c402252b28 <unknown>
#11 0x55c40225687f <unknown>
#12 0x55c40223ac49 <unknown>
#13 0x55c402257405 <unknown>
#14 0x55c4022204ff <unknown>
#15 0x55c40227b258 <unknown>
#16 0x55c40227b432 <unknown>
#17 0x55c40228cfa3 <unknown>
#18 0x7f3ca589caa4 <unknown>
#19 0x7f3ca5929c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e0d73ecfba <unknown>
#1 0x55e0d6e716d0 <unknown>
#2 0x55e0d6ec32aa <unknown>
#3 0x55e0d6ec3541 <unknown>
#4 0x55e0d6f116c4 <unknown>
#5 0x55e0d6ee8e5d <unknown>
#6 0x55e0d6f0eb54 <unknown>
#7 0x55e0d6ee8c03 <unknown>
#8 0x55e0d6eb57a8 <unknown>
#9 0x55e0d6eb6421 <unknown>
#10 0x55e0d73b1b28 <unknown>
#11 0x55e0d73b587f <unknown>
#12 0x55e0d7399c49 <unknown>
#13 0x55e0d73b6405 <unknown>
#14 0x55e0d737f4ff <unknown>
#15 0x55e0d73da258 <unknown>
#16 0x55e0d73da432 <unknown>
#17 0x55e0d73ebfa3 <unknown>
#18 0x7f862089caa4 <unknown>
#19 0x7f8620929c6c <unknown>
================== 12 failed, 7 passed in 1522.41s (0:25:22) ===================
--------------------------------------------
Test Run Finished: 2025-09-29 04:15:04
Duration: 1524 seconds
Status: FAILURE
Exit Code: 1
============================================
