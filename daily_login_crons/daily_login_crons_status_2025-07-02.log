========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-02 14:07:28
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.10.18, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.10.18/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.10.18', 'Platform': 'Linux-6.11.0-1015-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'metadata': '3.1.1', 'rerunfailures': '15.1', 'html': '4.1.1', 'Faker': '37.4.0', 'xdist': '3.8.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: metadata-3.1.1, rerunfailures-15.1, html-4.1.1, Faker-37.4.0, xdist-3.8.0
collecting ... collected 0 items / 1 error

==================================== ERRORS ====================================
_____________________ ERROR collecting tests/test_login.py _____________________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_login.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_login.py:13: in <module>
    from pages.login_page import LoginPage
pages/login_page.py:4: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250702_140729/report.html -
=========================== short test summary info ============================
ERROR tests/test_login.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.15s ===============================
--------------------------------------------
Test Run Finished: 2025-07-02 14:07:30
Duration: 2 seconds
Status: FAILURE
Exit Code: 2
============================================
========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-02 14:40:01
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.10.18, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.10.18/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.10.18', 'Platform': 'Linux-6.11.0-1015-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'metadata': '3.1.1', 'rerunfailures': '15.1', 'html': '4.1.1', 'Faker': '37.4.0', 'xdist': '3.8.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: metadata-3.1.1, rerunfailures-15.1, html-4.1.1, Faker-37.4.0, xdist-3.8.0
collecting ... collected 0 items / 20 errors

==================================== ERRORS ====================================
___________________ ERROR collecting tests/test_all_sales.py ___________________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_all_sales.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_all_sales.py:7: in <module>
    from pages.all_sales_page import AllSales
pages/all_sales_page.py:10: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
______________ ERROR collecting tests/test_create_credit_memo.py _______________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_create_credit_memo.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_create_credit_memo.py:5: in <module>
    from pages.create_credit_memo import CreditMemo
pages/create_credit_memo.py:14: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
________________ ERROR collecting tests/test_create_invoice.py _________________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_create_invoice.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_create_invoice.py:4: in <module>
    from pages.create_invoice import Create_Invoice
pages/create_invoice.py:7: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
____________ ERROR collecting tests/test_create_product_service.py _____________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_create_product_service.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_create_product_service.py:4: in <module>
    from self import driver
E   ModuleNotFoundError: No module named 'self'
_____________ ERROR collecting tests/test_create_refund_receipt.py _____________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_create_refund_receipt.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_create_refund_receipt.py:5: in <module>
    from pages.create_refund_receipt import RefundReceipt
pages/create_refund_receipt.py:14: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
_____________ ERROR collecting tests/test_create_sales_receipt.py ______________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_create_sales_receipt.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_create_sales_receipt.py:5: in <module>
    from pages.create_sales_receipt import SalesReceipt
pages/create_sales_receipt.py:14: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
________________ ERROR collecting tests/test_createcustomer.py _________________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_createcustomer.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_createcustomer.py:3: in <module>
    from pages.create_customer import CreateCustomer
pages/create_customer.py:17: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
_________________ ERROR collecting tests/test_customer_list.py _________________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_customer_list.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_customer_list.py:7: in <module>
    from pages.customer_list import CustomerList
pages/customer_list.py:11: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
___________ ERROR collecting tests/test_customer_transaction_list.py ___________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_customer_transaction_list.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_customer_transaction_list.py:7: in <module>
    from pages.customer_list import CustomerList
pages/customer_list.py:11: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
___________ ERROR collecting tests/test_expense/test_bill_payment.py ___________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_expense/test_bill_payment.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_expense/test_bill_payment.py:5: in <module>
    from pages.expenses.bill_payment import BillPayment
pages/expenses/bill_payment.py:15: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
___________ ERROR collecting tests/test_expense/test_create_bill.py ____________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_expense/test_create_bill.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_expense/test_create_bill.py:7: in <module>
    from pages.expenses.create_bill import Create_Bill
pages/expenses/create_bill.py:11: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
___________ ERROR collecting tests/test_expense/test_create_check.py ___________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_expense/test_create_check.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_expense/test_create_check.py:4: in <module>
    from pages.expenses.create_check import Create_Check
pages/expenses/create_check.py:11: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
__________ ERROR collecting tests/test_expense/test_create_expense.py __________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_expense/test_create_expense.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_expense/test_create_expense.py:7: in <module>
    from pages.expenses.create_expense import Create_Expense
pages/expenses/create_expense.py:11: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
______ ERROR collecting tests/test_expense/test_create_purchase_order.py _______
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_expense/test_create_purchase_order.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_expense/test_create_purchase_order.py:5: in <module>
    from pages.expenses.create_purchase_order import Create_Purchase_Order
pages/expenses/create_purchase_order.py:11: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
__________ ERROR collecting tests/test_expense/test_create_vendor.py ___________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_expense/test_create_vendor.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_expense/test_create_vendor.py:7: in <module>
    from pages.expenses.create_vendor import Create_Vendor
pages/expenses/create_vendor.py:9: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
_______ ERROR collecting tests/test_expense/test_create_vendor_credit.py _______
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_expense/test_create_vendor_credit.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_expense/test_create_vendor_credit.py:5: in <module>
    from pages.expenses.create_vendor_credit import Create_Vendor_Credit
pages/expenses/create_vendor_credit.py:11: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
___________ ERROR collecting tests/test_expense/test_expense_list.py ___________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_expense/test_expense_list.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_expense/test_expense_list.py:7: in <module>
    from pages.expenses.expense_list import  ExpenseList
pages/expenses/expense_list.py:16: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
__________________ ERROR collecting tests/test_invoce_list.py __________________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_invoce_list.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_invoce_list.py:7: in <module>
    from pages.invoices_list import InvoicesList
pages/invoices_list.py:11: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
_____________________ ERROR collecting tests/test_login.py _____________________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_login.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_login.py:13: in <module>
    from pages.login_page import LoginPage
pages/login_page.py:4: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
________________ ERROR collecting tests/test_receive_payment.py ________________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_receive_payment.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_receive_payment.py:5: in <module>
    from pages.receive_payment import ReceivePayment
pages/receive_payment.py:15: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250702_144004/report.html -
=========================== short test summary info ============================
ERROR tests/test_all_sales.py
ERROR tests/test_create_credit_memo.py
ERROR tests/test_create_invoice.py
ERROR tests/test_create_product_service.py
ERROR tests/test_create_refund_receipt.py
ERROR tests/test_create_sales_receipt.py
ERROR tests/test_createcustomer.py
ERROR tests/test_customer_list.py
ERROR tests/test_customer_transaction_list.py
ERROR tests/test_expense/test_bill_payment.py
ERROR tests/test_expense/test_create_bill.py
ERROR tests/test_expense/test_create_check.py
ERROR tests/test_expense/test_create_expense.py
ERROR tests/test_expense/test_create_purchase_order.py
ERROR tests/test_expense/test_create_vendor.py
ERROR tests/test_expense/test_create_vendor_credit.py
ERROR tests/test_expense/test_expense_list.py
ERROR tests/test_invoce_list.py
ERROR tests/test_login.py
ERROR tests/test_receive_payment.py
!!!!!!!!!!!!!!!!!!! Interrupted: 20 errors during collection !!!!!!!!!!!!!!!!!!!
============================== 20 errors in 0.56s ==============================
--------------------------------------------
Test Run Finished: 2025-07-02 14:40:05
Duration: 4 seconds
Status: FAILURE
Exit Code: 2
============================================
========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-02 14:42:58
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.10.18, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.10.18/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.10.18', 'Platform': 'Linux-6.11.0-1015-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'metadata': '3.1.1', 'rerunfailures': '15.1', 'html': '4.1.1', 'Faker': '37.4.0', 'xdist': '3.8.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: metadata-3.1.1, rerunfailures-15.1, html-4.1.1, Faker-37.4.0, xdist-3.8.0
collecting ... collected 0 items / 1 error

==================================== ERRORS ====================================
_____________________ ERROR collecting tests/test_login.py _____________________
ImportError while importing test module '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_login.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_login.py:13: in <module>
    from pages.login_page import LoginPage
pages/login_page.py:4: in <module>
    from actions.actions import Actions
actions/actions.py:3: in <module>
    from asyncio import timeout
E   ImportError: cannot import name 'timeout' from 'asyncio' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/__init__.py)
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250702_144301/report.html -
=========================== short test summary info ============================
ERROR tests/test_login.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.17s ===============================
--------------------------------------------
Test Run Finished: 2025-07-02 14:43:01
Duration: 3 seconds
Status: FAILURE
Exit Code: 2
============================================
========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-02 14:54:56
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.5/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.5', 'Platform': 'Linux-6.11.0-1015-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'metadata': '3.1.1', 'rerunfailures': '15.1', 'html': '4.1.1', 'Faker': '37.4.0', 'xdist': '3.8.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: metadata-3.1.1, rerunfailures-15.1, html-4.1.1, Faker-37.4.0, xdist-3.8.0
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ERROR [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] ERROR [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ERROR [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] ERROR [ 21%]
tests/test_login.py::test_invalid_email_login[username0] ERROR           [ 26%]
tests/test_login.py::test_invalid_email_login[username1] ERROR           [ 31%]
tests/test_login.py::test_invalid_email_login[username2] ERROR           [ 36%]
tests/test_login.py::test_invalid_email_login[username3] ERROR           [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] ERROR [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] ERROR [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] ERROR [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ERROR [ 63%]
tests/test_login.py::test_blank_username_validation ERROR                [ 68%]
tests/test_login.py::test_blank_password_validation ERROR                [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] ERROR      [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] ERROR      [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] ERROR      [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] ERROR      [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] ERROR      [100%]

==================================== ERRORS ====================================
_ ERROR at setup of test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6d217f0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x555fb586b336 \\u003Cunknown>\\n#17 0x7f588a49caa4 \\u003Cunknown>\\n#18 0x7f588a529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x555fb586c45a <unknown>
E       #1 0x555fb5311760 <unknown>
E       #2 0x555fb534c0d8 <unknown>
E       #3 0x555fb53472cf <unknown>
E       #4 0x555fb53978d6 <unknown>
E       #5 0x555fb5396f96 <unknown>
E       #6 0x555fb5388c23 <unknown>
E       #7 0x555fb53554a5 <unknown>
E       #8 0x555fb5356111 <unknown>
E       #9 0x555fb5830f1b <unknown>
E       #10 0x555fb5834e19 <unknown>
E       #11 0x555fb5817ac9 <unknown>
E       #12 0x555fb58359c8 <unknown>
E       #13 0x555fb57fc34f <unknown>
E       #14 0x555fb5859a28 <unknown>
E       #15 0x555fb5859c06 <unknown>
E       #16 0x555fb586b336 <unknown>
E       #17 0x7f588a49caa4 <unknown>
E       #18 0x7f588a529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x555fb586c45a <unknown>
E           #1 0x555fb5311760 <unknown>
E           #2 0x555fb534c0d8 <unknown>
E           #3 0x555fb53472cf <unknown>
E           #4 0x555fb53978d6 <unknown>
E           #5 0x555fb5396f96 <unknown>
E           #6 0x555fb5388c23 <unknown>
E           #7 0x555fb53554a5 <unknown>
E           #8 0x555fb5356111 <unknown>
E           #9 0x555fb5830f1b <unknown>
E           #10 0x555fb5834e19 <unknown>
E           #11 0x555fb5817ac9 <unknown>
E           #12 0x555fb58359c8 <unknown>
E           #13 0x555fb57fc34f <unknown>
E           #14 0x555fb5859a28 <unknown>
E           #15 0x555fb5859c06 <unknown>
E           #16 0x555fb586b336 <unknown>
E           #17 0x7f588a49caa4 <unknown>
E           #18 0x7f588a529c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:54:58,435 - INFO - Test data loaded successfully.
2025-07-02 14:54:58,435 - INFO - Starting test with Chrome browser
2025-07-02 14:54:58,435 - INFO - ====== WebDriver manager ======
2025-07-02 14:54:59,563 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:54:59,596 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:54:59,627 - INFO - There is no [linux64] chromedriver "137.0.7151.119" for browser google-chrome "137.0.7151" in cache
2025-07-02 14:54:59,627 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:54:59,717 - INFO - WebDriver version 137.0.7151.119 selected
2025-07-02 14:54:59,719 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
2025-07-02 14:54:59,720 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
2025-07-02 14:54:59,766 - INFO - Driver downloading response is 200
2025-07-02 14:54:59,865 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:00,007 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119]
2025-07-02 14:55:02,185 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x555fb586c45a <unknown>
#1 0x555fb5311760 <unknown>
#2 0x555fb534c0d8 <unknown>
#3 0x555fb53472cf <unknown>
#4 0x555fb53978d6 <unknown>
#5 0x555fb5396f96 <unknown>
#6 0x555fb5388c23 <unknown>
#7 0x555fb53554a5 <unknown>
#8 0x555fb5356111 <unknown>
#9 0x555fb5830f1b <unknown>
#10 0x555fb5834e19 <unknown>
#11 0x555fb5817ac9 <unknown>
#12 0x555fb58359c8 <unknown>
#13 0x555fb57fc34f <unknown>
#14 0x555fb5859a28 <unknown>
#15 0x555fb5859c06 <unknown>
#16 0x555fb586b336 <unknown>
#17 0x7f588a49caa4 <unknown>
#18 0x7f588a529c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "137.0.7151.119" for browser google-chrome "137.0.7151" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 137.0.7151.119 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119]
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x555fb586c45a <unknown>
#1 0x555fb5311760 <unknown>
#2 0x555fb534c0d8 <unknown>
#3 0x555fb53472cf <unknown>
#4 0x555fb53978d6 <unknown>
#5 0x555fb5396f96 <unknown>
#6 0x555fb5388c23 <unknown>
#7 0x555fb53554a5 <unknown>
#8 0x555fb5356111 <unknown>
#9 0x555fb5830f1b <unknown>
#10 0x555fb5834e19 <unknown>
#11 0x555fb5817ac9 <unknown>
#12 0x555fb58359c8 <unknown>
#13 0x555fb57fc34f <unknown>
#14 0x555fb5859a28 <unknown>
#15 0x555fb5859c06 <unknown>
#16 0x555fb586b336 <unknown>
#17 0x7f588a49caa4 <unknown>
#18 0x7f588a529c3c <unknown>
____ ERROR at setup of test_valid_login[samatakamble9@gmail.com-Samata@16] _____

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6d2ee90>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55d375c17336 \\u003Cunknown>\\n#17 0x7fae31a9caa4 \\u003Cunknown>\\n#18 0x7fae31b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55d375c1845a <unknown>
E       #1 0x55d3756bd760 <unknown>
E       #2 0x55d3756f80d8 <unknown>
E       #3 0x55d3756f32cf <unknown>
E       #4 0x55d3757438d6 <unknown>
E       #5 0x55d375742f96 <unknown>
E       #6 0x55d375734c23 <unknown>
E       #7 0x55d3757014a5 <unknown>
E       #8 0x55d375702111 <unknown>
E       #9 0x55d375bdcf1b <unknown>
E       #10 0x55d375be0e19 <unknown>
E       #11 0x55d375bc3ac9 <unknown>
E       #12 0x55d375be19c8 <unknown>
E       #13 0x55d375ba834f <unknown>
E       #14 0x55d375c05a28 <unknown>
E       #15 0x55d375c05c06 <unknown>
E       #16 0x55d375c17336 <unknown>
E       #17 0x7fae31a9caa4 <unknown>
E       #18 0x7fae31b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55d375c1845a <unknown>
E           #1 0x55d3756bd760 <unknown>
E           #2 0x55d3756f80d8 <unknown>
E           #3 0x55d3756f32cf <unknown>
E           #4 0x55d3757438d6 <unknown>
E           #5 0x55d375742f96 <unknown>
E           #6 0x55d375734c23 <unknown>
E           #7 0x55d3757014a5 <unknown>
E           #8 0x55d375702111 <unknown>
E           #9 0x55d375bdcf1b <unknown>
E           #10 0x55d375be0e19 <unknown>
E           #11 0x55d375bc3ac9 <unknown>
E           #12 0x55d375be19c8 <unknown>
E           #13 0x55d375ba834f <unknown>
E           #14 0x55d375c05a28 <unknown>
E           #15 0x55d375c05c06 <unknown>
E           #16 0x55d375c17336 <unknown>
E           #17 0x7fae31a9caa4 <unknown>
E           #18 0x7fae31b29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:02,250 - INFO - Starting test with Chrome browser
2025-07-02 14:55:02,251 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:02,357 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:02,391 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:02,437 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:03,528 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55d375c1845a <unknown>
#1 0x55d3756bd760 <unknown>
#2 0x55d3756f80d8 <unknown>
#3 0x55d3756f32cf <unknown>
#4 0x55d3757438d6 <unknown>
#5 0x55d375742f96 <unknown>
#6 0x55d375734c23 <unknown>
#7 0x55d3757014a5 <unknown>
#8 0x55d375702111 <unknown>
#9 0x55d375bdcf1b <unknown>
#10 0x55d375be0e19 <unknown>
#11 0x55d375bc3ac9 <unknown>
#12 0x55d375be19c8 <unknown>
#13 0x55d375ba834f <unknown>
#14 0x55d375c05a28 <unknown>
#15 0x55d375c05c06 <unknown>
#16 0x55d375c17336 <unknown>
#17 0x7fae31a9caa4 <unknown>
#18 0x7fae31b29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55d375c1845a <unknown>
#1 0x55d3756bd760 <unknown>
#2 0x55d3756f80d8 <unknown>
#3 0x55d3756f32cf <unknown>
#4 0x55d3757438d6 <unknown>
#5 0x55d375742f96 <unknown>
#6 0x55d375734c23 <unknown>
#7 0x55d3757014a5 <unknown>
#8 0x55d375702111 <unknown>
#9 0x55d375bdcf1b <unknown>
#10 0x55d375be0e19 <unknown>
#11 0x55d375bc3ac9 <unknown>
#12 0x55d375be19c8 <unknown>
#13 0x55d375ba834f <unknown>
#14 0x55d375c05a28 <unknown>
#15 0x55d375c05c06 <unknown>
#16 0x55d375c17336 <unknown>
#17 0x7fae31a9caa4 <unknown>
#18 0x7fae31b29c3c <unknown>
__ ERROR at setup of test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ___

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6cec690>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55d0048e9336 \\u003Cunknown>\\n#17 0x7f71dc49caa4 \\u003Cunknown>\\n#18 0x7f71dc529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55d0048ea45a <unknown>
E       #1 0x55d00438f760 <unknown>
E       #2 0x55d0043ca0d8 <unknown>
E       #3 0x55d0043c52cf <unknown>
E       #4 0x55d0044158d6 <unknown>
E       #5 0x55d004414f96 <unknown>
E       #6 0x55d004406c23 <unknown>
E       #7 0x55d0043d34a5 <unknown>
E       #8 0x55d0043d4111 <unknown>
E       #9 0x55d0048aef1b <unknown>
E       #10 0x55d0048b2e19 <unknown>
E       #11 0x55d004895ac9 <unknown>
E       #12 0x55d0048b39c8 <unknown>
E       #13 0x55d00487a34f <unknown>
E       #14 0x55d0048d7a28 <unknown>
E       #15 0x55d0048d7c06 <unknown>
E       #16 0x55d0048e9336 <unknown>
E       #17 0x7f71dc49caa4 <unknown>
E       #18 0x7f71dc529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55d0048ea45a <unknown>
E           #1 0x55d00438f760 <unknown>
E           #2 0x55d0043ca0d8 <unknown>
E           #3 0x55d0043c52cf <unknown>
E           #4 0x55d0044158d6 <unknown>
E           #5 0x55d004414f96 <unknown>
E           #6 0x55d004406c23 <unknown>
E           #7 0x55d0043d34a5 <unknown>
E           #8 0x55d0043d4111 <unknown>
E           #9 0x55d0048aef1b <unknown>
E           #10 0x55d0048b2e19 <unknown>
E           #11 0x55d004895ac9 <unknown>
E           #12 0x55d0048b39c8 <unknown>
E           #13 0x55d00487a34f <unknown>
E           #14 0x55d0048d7a28 <unknown>
E           #15 0x55d0048d7c06 <unknown>
E           #16 0x55d0048e9336 <unknown>
E           #17 0x7f71dc49caa4 <unknown>
E           #18 0x7f71dc529c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:03,567 - INFO - Starting test with Chrome browser
2025-07-02 14:55:03,567 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:03,673 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:03,707 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:03,740 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:04,829 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55d0048ea45a <unknown>
#1 0x55d00438f760 <unknown>
#2 0x55d0043ca0d8 <unknown>
#3 0x55d0043c52cf <unknown>
#4 0x55d0044158d6 <unknown>
#5 0x55d004414f96 <unknown>
#6 0x55d004406c23 <unknown>
#7 0x55d0043d34a5 <unknown>
#8 0x55d0043d4111 <unknown>
#9 0x55d0048aef1b <unknown>
#10 0x55d0048b2e19 <unknown>
#11 0x55d004895ac9 <unknown>
#12 0x55d0048b39c8 <unknown>
#13 0x55d00487a34f <unknown>
#14 0x55d0048d7a28 <unknown>
#15 0x55d0048d7c06 <unknown>
#16 0x55d0048e9336 <unknown>
#17 0x7f71dc49caa4 <unknown>
#18 0x7f71dc529c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55d0048ea45a <unknown>
#1 0x55d00438f760 <unknown>
#2 0x55d0043ca0d8 <unknown>
#3 0x55d0043c52cf <unknown>
#4 0x55d0044158d6 <unknown>
#5 0x55d004414f96 <unknown>
#6 0x55d004406c23 <unknown>
#7 0x55d0043d34a5 <unknown>
#8 0x55d0043d4111 <unknown>
#9 0x55d0048aef1b <unknown>
#10 0x55d0048b2e19 <unknown>
#11 0x55d004895ac9 <unknown>
#12 0x55d0048b39c8 <unknown>
#13 0x55d00487a34f <unknown>
#14 0x55d0048d7a28 <unknown>
#15 0x55d0048d7c06 <unknown>
#16 0x55d0048e9336 <unknown>
#17 0x7f71dc49caa4 <unknown>
#18 0x7f71dc529c3c <unknown>
_ ERROR at setup of test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f5ef4770>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x564591069336 \\u003Cunknown>\\n#17 0x7f6a8ec9caa4 \\u003Cunknown>\\n#18 0x7f6a8ed29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x56459106a45a <unknown>
E       #1 0x564590b0f760 <unknown>
E       #2 0x564590b4a0d8 <unknown>
E       #3 0x564590b452cf <unknown>
E       #4 0x564590b958d6 <unknown>
E       #5 0x564590b94f96 <unknown>
E       #6 0x564590b86c23 <unknown>
E       #7 0x564590b534a5 <unknown>
E       #8 0x564590b54111 <unknown>
E       #9 0x56459102ef1b <unknown>
E       #10 0x564591032e19 <unknown>
E       #11 0x564591015ac9 <unknown>
E       #12 0x5645910339c8 <unknown>
E       #13 0x564590ffa34f <unknown>
E       #14 0x564591057a28 <unknown>
E       #15 0x564591057c06 <unknown>
E       #16 0x564591069336 <unknown>
E       #17 0x7f6a8ec9caa4 <unknown>
E       #18 0x7f6a8ed29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x56459106a45a <unknown>
E           #1 0x564590b0f760 <unknown>
E           #2 0x564590b4a0d8 <unknown>
E           #3 0x564590b452cf <unknown>
E           #4 0x564590b958d6 <unknown>
E           #5 0x564590b94f96 <unknown>
E           #6 0x564590b86c23 <unknown>
E           #7 0x564590b534a5 <unknown>
E           #8 0x564590b54111 <unknown>
E           #9 0x56459102ef1b <unknown>
E           #10 0x564591032e19 <unknown>
E           #11 0x564591015ac9 <unknown>
E           #12 0x5645910339c8 <unknown>
E           #13 0x564590ffa34f <unknown>
E           #14 0x564591057a28 <unknown>
E           #15 0x564591057c06 <unknown>
E           #16 0x564591069336 <unknown>
E           #17 0x7f6a8ec9caa4 <unknown>
E           #18 0x7f6a8ed29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:04,866 - INFO - Starting test with Chrome browser
2025-07-02 14:55:04,866 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:04,972 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:05,010 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:05,041 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:06,133 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56459106a45a <unknown>
#1 0x564590b0f760 <unknown>
#2 0x564590b4a0d8 <unknown>
#3 0x564590b452cf <unknown>
#4 0x564590b958d6 <unknown>
#5 0x564590b94f96 <unknown>
#6 0x564590b86c23 <unknown>
#7 0x564590b534a5 <unknown>
#8 0x564590b54111 <unknown>
#9 0x56459102ef1b <unknown>
#10 0x564591032e19 <unknown>
#11 0x564591015ac9 <unknown>
#12 0x5645910339c8 <unknown>
#13 0x564590ffa34f <unknown>
#14 0x564591057a28 <unknown>
#15 0x564591057c06 <unknown>
#16 0x564591069336 <unknown>
#17 0x7f6a8ec9caa4 <unknown>
#18 0x7f6a8ed29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56459106a45a <unknown>
#1 0x564590b0f760 <unknown>
#2 0x564590b4a0d8 <unknown>
#3 0x564590b452cf <unknown>
#4 0x564590b958d6 <unknown>
#5 0x564590b94f96 <unknown>
#6 0x564590b86c23 <unknown>
#7 0x564590b534a5 <unknown>
#8 0x564590b54111 <unknown>
#9 0x56459102ef1b <unknown>
#10 0x564591032e19 <unknown>
#11 0x564591015ac9 <unknown>
#12 0x5645910339c8 <unknown>
#13 0x564590ffa34f <unknown>
#14 0x564591057a28 <unknown>
#15 0x564591057c06 <unknown>
#16 0x564591069336 <unknown>
#17 0x7f6a8ec9caa4 <unknown>
#18 0x7f6a8ed29c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username0] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f5ef5940>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x562df1ad5336 \\u003Cunknown>\\n#17 0x7fa19aa9caa4 \\u003Cunknown>\\n#18 0x7fa19ab29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x562df1ad645a <unknown>
E       #1 0x562df157b760 <unknown>
E       #2 0x562df15b60d8 <unknown>
E       #3 0x562df15b12cf <unknown>
E       #4 0x562df16018d6 <unknown>
E       #5 0x562df1600f96 <unknown>
E       #6 0x562df15f2c23 <unknown>
E       #7 0x562df15bf4a5 <unknown>
E       #8 0x562df15c0111 <unknown>
E       #9 0x562df1a9af1b <unknown>
E       #10 0x562df1a9ee19 <unknown>
E       #11 0x562df1a81ac9 <unknown>
E       #12 0x562df1a9f9c8 <unknown>
E       #13 0x562df1a6634f <unknown>
E       #14 0x562df1ac3a28 <unknown>
E       #15 0x562df1ac3c06 <unknown>
E       #16 0x562df1ad5336 <unknown>
E       #17 0x7fa19aa9caa4 <unknown>
E       #18 0x7fa19ab29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x562df1ad645a <unknown>
E           #1 0x562df157b760 <unknown>
E           #2 0x562df15b60d8 <unknown>
E           #3 0x562df15b12cf <unknown>
E           #4 0x562df16018d6 <unknown>
E           #5 0x562df1600f96 <unknown>
E           #6 0x562df15f2c23 <unknown>
E           #7 0x562df15bf4a5 <unknown>
E           #8 0x562df15c0111 <unknown>
E           #9 0x562df1a9af1b <unknown>
E           #10 0x562df1a9ee19 <unknown>
E           #11 0x562df1a81ac9 <unknown>
E           #12 0x562df1a9f9c8 <unknown>
E           #13 0x562df1a6634f <unknown>
E           #14 0x562df1ac3a28 <unknown>
E           #15 0x562df1ac3c06 <unknown>
E           #16 0x562df1ad5336 <unknown>
E           #17 0x7fa19aa9caa4 <unknown>
E           #18 0x7fa19ab29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:06,170 - INFO - Starting test with Chrome browser
2025-07-02 14:55:06,170 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:06,279 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:06,311 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:06,343 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:07,433 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x562df1ad645a <unknown>
#1 0x562df157b760 <unknown>
#2 0x562df15b60d8 <unknown>
#3 0x562df15b12cf <unknown>
#4 0x562df16018d6 <unknown>
#5 0x562df1600f96 <unknown>
#6 0x562df15f2c23 <unknown>
#7 0x562df15bf4a5 <unknown>
#8 0x562df15c0111 <unknown>
#9 0x562df1a9af1b <unknown>
#10 0x562df1a9ee19 <unknown>
#11 0x562df1a81ac9 <unknown>
#12 0x562df1a9f9c8 <unknown>
#13 0x562df1a6634f <unknown>
#14 0x562df1ac3a28 <unknown>
#15 0x562df1ac3c06 <unknown>
#16 0x562df1ad5336 <unknown>
#17 0x7fa19aa9caa4 <unknown>
#18 0x7fa19ab29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x562df1ad645a <unknown>
#1 0x562df157b760 <unknown>
#2 0x562df15b60d8 <unknown>
#3 0x562df15b12cf <unknown>
#4 0x562df16018d6 <unknown>
#5 0x562df1600f96 <unknown>
#6 0x562df15f2c23 <unknown>
#7 0x562df15bf4a5 <unknown>
#8 0x562df15c0111 <unknown>
#9 0x562df1a9af1b <unknown>
#10 0x562df1a9ee19 <unknown>
#11 0x562df1a81ac9 <unknown>
#12 0x562df1a9f9c8 <unknown>
#13 0x562df1a6634f <unknown>
#14 0x562df1ac3a28 <unknown>
#15 0x562df1ac3c06 <unknown>
#16 0x562df1ad5336 <unknown>
#17 0x7fa19aa9caa4 <unknown>
#18 0x7fa19ab29c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username1] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f7bf4830>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x555f7572c336 \\u003Cunknown>\\n#17 0x7f6fd889caa4 \\u003Cunknown>\\n#18 0x7f6fd8929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x555f7572d45a <unknown>
E       #1 0x555f751d2760 <unknown>
E       #2 0x555f7520d0d8 <unknown>
E       #3 0x555f752082cf <unknown>
E       #4 0x555f752588d6 <unknown>
E       #5 0x555f75257f96 <unknown>
E       #6 0x555f75249c23 <unknown>
E       #7 0x555f752164a5 <unknown>
E       #8 0x555f75217111 <unknown>
E       #9 0x555f756f1f1b <unknown>
E       #10 0x555f756f5e19 <unknown>
E       #11 0x555f756d8ac9 <unknown>
E       #12 0x555f756f69c8 <unknown>
E       #13 0x555f756bd34f <unknown>
E       #14 0x555f7571aa28 <unknown>
E       #15 0x555f7571ac06 <unknown>
E       #16 0x555f7572c336 <unknown>
E       #17 0x7f6fd889caa4 <unknown>
E       #18 0x7f6fd8929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x555f7572d45a <unknown>
E           #1 0x555f751d2760 <unknown>
E           #2 0x555f7520d0d8 <unknown>
E           #3 0x555f752082cf <unknown>
E           #4 0x555f752588d6 <unknown>
E           #5 0x555f75257f96 <unknown>
E           #6 0x555f75249c23 <unknown>
E           #7 0x555f752164a5 <unknown>
E           #8 0x555f75217111 <unknown>
E           #9 0x555f756f1f1b <unknown>
E           #10 0x555f756f5e19 <unknown>
E           #11 0x555f756d8ac9 <unknown>
E           #12 0x555f756f69c8 <unknown>
E           #13 0x555f756bd34f <unknown>
E           #14 0x555f7571aa28 <unknown>
E           #15 0x555f7571ac06 <unknown>
E           #16 0x555f7572c336 <unknown>
E           #17 0x7f6fd889caa4 <unknown>
E           #18 0x7f6fd8929c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:07,471 - INFO - Starting test with Chrome browser
2025-07-02 14:55:07,471 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:07,577 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:07,609 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:07,640 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:08,729 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x555f7572d45a <unknown>
#1 0x555f751d2760 <unknown>
#2 0x555f7520d0d8 <unknown>
#3 0x555f752082cf <unknown>
#4 0x555f752588d6 <unknown>
#5 0x555f75257f96 <unknown>
#6 0x555f75249c23 <unknown>
#7 0x555f752164a5 <unknown>
#8 0x555f75217111 <unknown>
#9 0x555f756f1f1b <unknown>
#10 0x555f756f5e19 <unknown>
#11 0x555f756d8ac9 <unknown>
#12 0x555f756f69c8 <unknown>
#13 0x555f756bd34f <unknown>
#14 0x555f7571aa28 <unknown>
#15 0x555f7571ac06 <unknown>
#16 0x555f7572c336 <unknown>
#17 0x7f6fd889caa4 <unknown>
#18 0x7f6fd8929c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x555f7572d45a <unknown>
#1 0x555f751d2760 <unknown>
#2 0x555f7520d0d8 <unknown>
#3 0x555f752082cf <unknown>
#4 0x555f752588d6 <unknown>
#5 0x555f75257f96 <unknown>
#6 0x555f75249c23 <unknown>
#7 0x555f752164a5 <unknown>
#8 0x555f75217111 <unknown>
#9 0x555f756f1f1b <unknown>
#10 0x555f756f5e19 <unknown>
#11 0x555f756d8ac9 <unknown>
#12 0x555f756f69c8 <unknown>
#13 0x555f756bd34f <unknown>
#14 0x555f7571aa28 <unknown>
#15 0x555f7571ac06 <unknown>
#16 0x555f7572c336 <unknown>
#17 0x7f6fd889caa4 <unknown>
#18 0x7f6fd8929c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username2] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6cd2690>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x563f131ba336 \\u003Cunknown>\\n#17 0x7fc6e0c9caa4 \\u003Cunknown>\\n#18 0x7fc6e0d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x563f131bb45a <unknown>
E       #1 0x563f12c60760 <unknown>
E       #2 0x563f12c9b0d8 <unknown>
E       #3 0x563f12c962cf <unknown>
E       #4 0x563f12ce68d6 <unknown>
E       #5 0x563f12ce5f96 <unknown>
E       #6 0x563f12cd7c23 <unknown>
E       #7 0x563f12ca44a5 <unknown>
E       #8 0x563f12ca5111 <unknown>
E       #9 0x563f1317ff1b <unknown>
E       #10 0x563f13183e19 <unknown>
E       #11 0x563f13166ac9 <unknown>
E       #12 0x563f131849c8 <unknown>
E       #13 0x563f1314b34f <unknown>
E       #14 0x563f131a8a28 <unknown>
E       #15 0x563f131a8c06 <unknown>
E       #16 0x563f131ba336 <unknown>
E       #17 0x7fc6e0c9caa4 <unknown>
E       #18 0x7fc6e0d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x563f131bb45a <unknown>
E           #1 0x563f12c60760 <unknown>
E           #2 0x563f12c9b0d8 <unknown>
E           #3 0x563f12c962cf <unknown>
E           #4 0x563f12ce68d6 <unknown>
E           #5 0x563f12ce5f96 <unknown>
E           #6 0x563f12cd7c23 <unknown>
E           #7 0x563f12ca44a5 <unknown>
E           #8 0x563f12ca5111 <unknown>
E           #9 0x563f1317ff1b <unknown>
E           #10 0x563f13183e19 <unknown>
E           #11 0x563f13166ac9 <unknown>
E           #12 0x563f131849c8 <unknown>
E           #13 0x563f1314b34f <unknown>
E           #14 0x563f131a8a28 <unknown>
E           #15 0x563f131a8c06 <unknown>
E           #16 0x563f131ba336 <unknown>
E           #17 0x7fc6e0c9caa4 <unknown>
E           #18 0x7fc6e0d29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:08,768 - INFO - Starting test with Chrome browser
2025-07-02 14:55:08,768 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:08,875 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:08,906 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:08,937 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:10,027 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x563f131bb45a <unknown>
#1 0x563f12c60760 <unknown>
#2 0x563f12c9b0d8 <unknown>
#3 0x563f12c962cf <unknown>
#4 0x563f12ce68d6 <unknown>
#5 0x563f12ce5f96 <unknown>
#6 0x563f12cd7c23 <unknown>
#7 0x563f12ca44a5 <unknown>
#8 0x563f12ca5111 <unknown>
#9 0x563f1317ff1b <unknown>
#10 0x563f13183e19 <unknown>
#11 0x563f13166ac9 <unknown>
#12 0x563f131849c8 <unknown>
#13 0x563f1314b34f <unknown>
#14 0x563f131a8a28 <unknown>
#15 0x563f131a8c06 <unknown>
#16 0x563f131ba336 <unknown>
#17 0x7fc6e0c9caa4 <unknown>
#18 0x7fc6e0d29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x563f131bb45a <unknown>
#1 0x563f12c60760 <unknown>
#2 0x563f12c9b0d8 <unknown>
#3 0x563f12c962cf <unknown>
#4 0x563f12ce68d6 <unknown>
#5 0x563f12ce5f96 <unknown>
#6 0x563f12cd7c23 <unknown>
#7 0x563f12ca44a5 <unknown>
#8 0x563f12ca5111 <unknown>
#9 0x563f1317ff1b <unknown>
#10 0x563f13183e19 <unknown>
#11 0x563f13166ac9 <unknown>
#12 0x563f131849c8 <unknown>
#13 0x563f1314b34f <unknown>
#14 0x563f131a8a28 <unknown>
#15 0x563f131a8c06 <unknown>
#16 0x563f131ba336 <unknown>
#17 0x7fc6e0c9caa4 <unknown>
#18 0x7fc6e0d29c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username3] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f7bfacf0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55cae05dc336 \\u003Cunknown>\\n#17 0x7fa20f69caa4 \\u003Cunknown>\\n#18 0x7fa20f729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55cae05dd45a <unknown>
E       #1 0x55cae0082760 <unknown>
E       #2 0x55cae00bd0d8 <unknown>
E       #3 0x55cae00b82cf <unknown>
E       #4 0x55cae01088d6 <unknown>
E       #5 0x55cae0107f96 <unknown>
E       #6 0x55cae00f9c23 <unknown>
E       #7 0x55cae00c64a5 <unknown>
E       #8 0x55cae00c7111 <unknown>
E       #9 0x55cae05a1f1b <unknown>
E       #10 0x55cae05a5e19 <unknown>
E       #11 0x55cae0588ac9 <unknown>
E       #12 0x55cae05a69c8 <unknown>
E       #13 0x55cae056d34f <unknown>
E       #14 0x55cae05caa28 <unknown>
E       #15 0x55cae05cac06 <unknown>
E       #16 0x55cae05dc336 <unknown>
E       #17 0x7fa20f69caa4 <unknown>
E       #18 0x7fa20f729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55cae05dd45a <unknown>
E           #1 0x55cae0082760 <unknown>
E           #2 0x55cae00bd0d8 <unknown>
E           #3 0x55cae00b82cf <unknown>
E           #4 0x55cae01088d6 <unknown>
E           #5 0x55cae0107f96 <unknown>
E           #6 0x55cae00f9c23 <unknown>
E           #7 0x55cae00c64a5 <unknown>
E           #8 0x55cae00c7111 <unknown>
E           #9 0x55cae05a1f1b <unknown>
E           #10 0x55cae05a5e19 <unknown>
E           #11 0x55cae0588ac9 <unknown>
E           #12 0x55cae05a69c8 <unknown>
E           #13 0x55cae056d34f <unknown>
E           #14 0x55cae05caa28 <unknown>
E           #15 0x55cae05cac06 <unknown>
E           #16 0x55cae05dc336 <unknown>
E           #17 0x7fa20f69caa4 <unknown>
E           #18 0x7fa20f729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:10,064 - INFO - Starting test with Chrome browser
2025-07-02 14:55:10,064 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:10,172 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:10,203 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:10,234 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:11,324 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55cae05dd45a <unknown>
#1 0x55cae0082760 <unknown>
#2 0x55cae00bd0d8 <unknown>
#3 0x55cae00b82cf <unknown>
#4 0x55cae01088d6 <unknown>
#5 0x55cae0107f96 <unknown>
#6 0x55cae00f9c23 <unknown>
#7 0x55cae00c64a5 <unknown>
#8 0x55cae00c7111 <unknown>
#9 0x55cae05a1f1b <unknown>
#10 0x55cae05a5e19 <unknown>
#11 0x55cae0588ac9 <unknown>
#12 0x55cae05a69c8 <unknown>
#13 0x55cae056d34f <unknown>
#14 0x55cae05caa28 <unknown>
#15 0x55cae05cac06 <unknown>
#16 0x55cae05dc336 <unknown>
#17 0x7fa20f69caa4 <unknown>
#18 0x7fa20f729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55cae05dd45a <unknown>
#1 0x55cae0082760 <unknown>
#2 0x55cae00bd0d8 <unknown>
#3 0x55cae00b82cf <unknown>
#4 0x55cae01088d6 <unknown>
#5 0x55cae0107f96 <unknown>
#6 0x55cae00f9c23 <unknown>
#7 0x55cae00c64a5 <unknown>
#8 0x55cae00c7111 <unknown>
#9 0x55cae05a1f1b <unknown>
#10 0x55cae05a5e19 <unknown>
#11 0x55cae0588ac9 <unknown>
#12 0x55cae05a69c8 <unknown>
#13 0x55cae056d34f <unknown>
#14 0x55cae05caa28 <unknown>
#15 0x55cae05cac06 <unknown>
#16 0x55cae05dc336 <unknown>
#17 0x7fa20f69caa4 <unknown>
#18 0x7fa20f729c3c <unknown>
_ ERROR at setup of test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6cf0b50>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x564975392336 \\u003Cunknown>\\n#17 0x7f26d529caa4 \\u003Cunknown>\\n#18 0x7f26d5329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x56497539345a <unknown>
E       #1 0x564974e38760 <unknown>
E       #2 0x564974e730d8 <unknown>
E       #3 0x564974e6e2cf <unknown>
E       #4 0x564974ebe8d6 <unknown>
E       #5 0x564974ebdf96 <unknown>
E       #6 0x564974eafc23 <unknown>
E       #7 0x564974e7c4a5 <unknown>
E       #8 0x564974e7d111 <unknown>
E       #9 0x564975357f1b <unknown>
E       #10 0x56497535be19 <unknown>
E       #11 0x56497533eac9 <unknown>
E       #12 0x56497535c9c8 <unknown>
E       #13 0x56497532334f <unknown>
E       #14 0x564975380a28 <unknown>
E       #15 0x564975380c06 <unknown>
E       #16 0x564975392336 <unknown>
E       #17 0x7f26d529caa4 <unknown>
E       #18 0x7f26d5329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x56497539345a <unknown>
E           #1 0x564974e38760 <unknown>
E           #2 0x564974e730d8 <unknown>
E           #3 0x564974e6e2cf <unknown>
E           #4 0x564974ebe8d6 <unknown>
E           #5 0x564974ebdf96 <unknown>
E           #6 0x564974eafc23 <unknown>
E           #7 0x564974e7c4a5 <unknown>
E           #8 0x564974e7d111 <unknown>
E           #9 0x564975357f1b <unknown>
E           #10 0x56497535be19 <unknown>
E           #11 0x56497533eac9 <unknown>
E           #12 0x56497535c9c8 <unknown>
E           #13 0x56497532334f <unknown>
E           #14 0x564975380a28 <unknown>
E           #15 0x564975380c06 <unknown>
E           #16 0x564975392336 <unknown>
E           #17 0x7f26d529caa4 <unknown>
E           #18 0x7f26d5329c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:11,361 - INFO - Starting test with Chrome browser
2025-07-02 14:55:11,362 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:11,468 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:11,499 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:11,531 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:12,621 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56497539345a <unknown>
#1 0x564974e38760 <unknown>
#2 0x564974e730d8 <unknown>
#3 0x564974e6e2cf <unknown>
#4 0x564974ebe8d6 <unknown>
#5 0x564974ebdf96 <unknown>
#6 0x564974eafc23 <unknown>
#7 0x564974e7c4a5 <unknown>
#8 0x564974e7d111 <unknown>
#9 0x564975357f1b <unknown>
#10 0x56497535be19 <unknown>
#11 0x56497533eac9 <unknown>
#12 0x56497535c9c8 <unknown>
#13 0x56497532334f <unknown>
#14 0x564975380a28 <unknown>
#15 0x564975380c06 <unknown>
#16 0x564975392336 <unknown>
#17 0x7f26d529caa4 <unknown>
#18 0x7f26d5329c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56497539345a <unknown>
#1 0x564974e38760 <unknown>
#2 0x564974e730d8 <unknown>
#3 0x564974e6e2cf <unknown>
#4 0x564974ebe8d6 <unknown>
#5 0x564974ebdf96 <unknown>
#6 0x564974eafc23 <unknown>
#7 0x564974e7c4a5 <unknown>
#8 0x564974e7d111 <unknown>
#9 0x564975357f1b <unknown>
#10 0x56497535be19 <unknown>
#11 0x56497533eac9 <unknown>
#12 0x56497535c9c8 <unknown>
#13 0x56497532334f <unknown>
#14 0x564975380a28 <unknown>
#15 0x564975380c06 <unknown>
#16 0x564975392336 <unknown>
#17 0x7f26d529caa4 <unknown>
#18 0x7f26d5329c3c <unknown>
_ ERROR at setup of test_invalid_password_login[samatakamble9@gmail.com-Password@12] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6cf3150>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5561bd1c0336 \\u003Cunknown>\\n#17 0x7fc09ce9caa4 \\u003Cunknown>\\n#18 0x7fc09cf29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5561bd1c145a <unknown>
E       #1 0x5561bcc66760 <unknown>
E       #2 0x5561bcca10d8 <unknown>
E       #3 0x5561bcc9c2cf <unknown>
E       #4 0x5561bccec8d6 <unknown>
E       #5 0x5561bccebf96 <unknown>
E       #6 0x5561bccddc23 <unknown>
E       #7 0x5561bccaa4a5 <unknown>
E       #8 0x5561bccab111 <unknown>
E       #9 0x5561bd185f1b <unknown>
E       #10 0x5561bd189e19 <unknown>
E       #11 0x5561bd16cac9 <unknown>
E       #12 0x5561bd18a9c8 <unknown>
E       #13 0x5561bd15134f <unknown>
E       #14 0x5561bd1aea28 <unknown>
E       #15 0x5561bd1aec06 <unknown>
E       #16 0x5561bd1c0336 <unknown>
E       #17 0x7fc09ce9caa4 <unknown>
E       #18 0x7fc09cf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5561bd1c145a <unknown>
E           #1 0x5561bcc66760 <unknown>
E           #2 0x5561bcca10d8 <unknown>
E           #3 0x5561bcc9c2cf <unknown>
E           #4 0x5561bccec8d6 <unknown>
E           #5 0x5561bccebf96 <unknown>
E           #6 0x5561bccddc23 <unknown>
E           #7 0x5561bccaa4a5 <unknown>
E           #8 0x5561bccab111 <unknown>
E           #9 0x5561bd185f1b <unknown>
E           #10 0x5561bd189e19 <unknown>
E           #11 0x5561bd16cac9 <unknown>
E           #12 0x5561bd18a9c8 <unknown>
E           #13 0x5561bd15134f <unknown>
E           #14 0x5561bd1aea28 <unknown>
E           #15 0x5561bd1aec06 <unknown>
E           #16 0x5561bd1c0336 <unknown>
E           #17 0x7fc09ce9caa4 <unknown>
E           #18 0x7fc09cf29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:12,659 - INFO - Starting test with Chrome browser
2025-07-02 14:55:12,659 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:12,765 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:12,798 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:12,832 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:13,922 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5561bd1c145a <unknown>
#1 0x5561bcc66760 <unknown>
#2 0x5561bcca10d8 <unknown>
#3 0x5561bcc9c2cf <unknown>
#4 0x5561bccec8d6 <unknown>
#5 0x5561bccebf96 <unknown>
#6 0x5561bccddc23 <unknown>
#7 0x5561bccaa4a5 <unknown>
#8 0x5561bccab111 <unknown>
#9 0x5561bd185f1b <unknown>
#10 0x5561bd189e19 <unknown>
#11 0x5561bd16cac9 <unknown>
#12 0x5561bd18a9c8 <unknown>
#13 0x5561bd15134f <unknown>
#14 0x5561bd1aea28 <unknown>
#15 0x5561bd1aec06 <unknown>
#16 0x5561bd1c0336 <unknown>
#17 0x7fc09ce9caa4 <unknown>
#18 0x7fc09cf29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5561bd1c145a <unknown>
#1 0x5561bcc66760 <unknown>
#2 0x5561bcca10d8 <unknown>
#3 0x5561bcc9c2cf <unknown>
#4 0x5561bccec8d6 <unknown>
#5 0x5561bccebf96 <unknown>
#6 0x5561bccddc23 <unknown>
#7 0x5561bccaa4a5 <unknown>
#8 0x5561bccab111 <unknown>
#9 0x5561bd185f1b <unknown>
#10 0x5561bd189e19 <unknown>
#11 0x5561bd16cac9 <unknown>
#12 0x5561bd18a9c8 <unknown>
#13 0x5561bd15134f <unknown>
#14 0x5561bd1aea28 <unknown>
#15 0x5561bd1aec06 <unknown>
#16 0x5561bd1c0336 <unknown>
#17 0x7fc09ce9caa4 <unknown>
#18 0x7fc09cf29c3c <unknown>
_ ERROR at setup of test_invalid_password_login[shubhamdabir07@gmail.com-Password] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6d35040>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55a93847e336 \\u003Cunknown>\\n#17 0x7f6da849caa4 \\u003Cunknown>\\n#18 0x7f6da8529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55a93847f45a <unknown>
E       #1 0x55a937f24760 <unknown>
E       #2 0x55a937f5f0d8 <unknown>
E       #3 0x55a937f5a2cf <unknown>
E       #4 0x55a937faa8d6 <unknown>
E       #5 0x55a937fa9f96 <unknown>
E       #6 0x55a937f9bc23 <unknown>
E       #7 0x55a937f684a5 <unknown>
E       #8 0x55a937f69111 <unknown>
E       #9 0x55a938443f1b <unknown>
E       #10 0x55a938447e19 <unknown>
E       #11 0x55a93842aac9 <unknown>
E       #12 0x55a9384489c8 <unknown>
E       #13 0x55a93840f34f <unknown>
E       #14 0x55a93846ca28 <unknown>
E       #15 0x55a93846cc06 <unknown>
E       #16 0x55a93847e336 <unknown>
E       #17 0x7f6da849caa4 <unknown>
E       #18 0x7f6da8529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55a93847f45a <unknown>
E           #1 0x55a937f24760 <unknown>
E           #2 0x55a937f5f0d8 <unknown>
E           #3 0x55a937f5a2cf <unknown>
E           #4 0x55a937faa8d6 <unknown>
E           #5 0x55a937fa9f96 <unknown>
E           #6 0x55a937f9bc23 <unknown>
E           #7 0x55a937f684a5 <unknown>
E           #8 0x55a937f69111 <unknown>
E           #9 0x55a938443f1b <unknown>
E           #10 0x55a938447e19 <unknown>
E           #11 0x55a93842aac9 <unknown>
E           #12 0x55a9384489c8 <unknown>
E           #13 0x55a93840f34f <unknown>
E           #14 0x55a93846ca28 <unknown>
E           #15 0x55a93846cc06 <unknown>
E           #16 0x55a93847e336 <unknown>
E           #17 0x7f6da849caa4 <unknown>
E           #18 0x7f6da8529c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:13,961 - INFO - Starting test with Chrome browser
2025-07-02 14:55:13,961 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:14,067 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:14,099 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:14,130 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:15,220 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a93847f45a <unknown>
#1 0x55a937f24760 <unknown>
#2 0x55a937f5f0d8 <unknown>
#3 0x55a937f5a2cf <unknown>
#4 0x55a937faa8d6 <unknown>
#5 0x55a937fa9f96 <unknown>
#6 0x55a937f9bc23 <unknown>
#7 0x55a937f684a5 <unknown>
#8 0x55a937f69111 <unknown>
#9 0x55a938443f1b <unknown>
#10 0x55a938447e19 <unknown>
#11 0x55a93842aac9 <unknown>
#12 0x55a9384489c8 <unknown>
#13 0x55a93840f34f <unknown>
#14 0x55a93846ca28 <unknown>
#15 0x55a93846cc06 <unknown>
#16 0x55a93847e336 <unknown>
#17 0x7f6da849caa4 <unknown>
#18 0x7f6da8529c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a93847f45a <unknown>
#1 0x55a937f24760 <unknown>
#2 0x55a937f5f0d8 <unknown>
#3 0x55a937f5a2cf <unknown>
#4 0x55a937faa8d6 <unknown>
#5 0x55a937fa9f96 <unknown>
#6 0x55a937f9bc23 <unknown>
#7 0x55a937f684a5 <unknown>
#8 0x55a937f69111 <unknown>
#9 0x55a938443f1b <unknown>
#10 0x55a938447e19 <unknown>
#11 0x55a93842aac9 <unknown>
#12 0x55a9384489c8 <unknown>
#13 0x55a93840f34f <unknown>
#14 0x55a93846ca28 <unknown>
#15 0x55a93846cc06 <unknown>
#16 0x55a93847e336 <unknown>
#17 0x7f6da849caa4 <unknown>
#18 0x7f6da8529c3c <unknown>
_ ERROR at setup of test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f5ec95e0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x557227597336 \\u003Cunknown>\\n#17 0x7f7cb509caa4 \\u003Cunknown>\\n#18 0x7f7cb5129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55722759845a <unknown>
E       #1 0x55722703d760 <unknown>
E       #2 0x5572270780d8 <unknown>
E       #3 0x5572270732cf <unknown>
E       #4 0x5572270c38d6 <unknown>
E       #5 0x5572270c2f96 <unknown>
E       #6 0x5572270b4c23 <unknown>
E       #7 0x5572270814a5 <unknown>
E       #8 0x557227082111 <unknown>
E       #9 0x55722755cf1b <unknown>
E       #10 0x557227560e19 <unknown>
E       #11 0x557227543ac9 <unknown>
E       #12 0x5572275619c8 <unknown>
E       #13 0x55722752834f <unknown>
E       #14 0x557227585a28 <unknown>
E       #15 0x557227585c06 <unknown>
E       #16 0x557227597336 <unknown>
E       #17 0x7f7cb509caa4 <unknown>
E       #18 0x7f7cb5129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55722759845a <unknown>
E           #1 0x55722703d760 <unknown>
E           #2 0x5572270780d8 <unknown>
E           #3 0x5572270732cf <unknown>
E           #4 0x5572270c38d6 <unknown>
E           #5 0x5572270c2f96 <unknown>
E           #6 0x5572270b4c23 <unknown>
E           #7 0x5572270814a5 <unknown>
E           #8 0x557227082111 <unknown>
E           #9 0x55722755cf1b <unknown>
E           #10 0x557227560e19 <unknown>
E           #11 0x557227543ac9 <unknown>
E           #12 0x5572275619c8 <unknown>
E           #13 0x55722752834f <unknown>
E           #14 0x557227585a28 <unknown>
E           #15 0x557227585c06 <unknown>
E           #16 0x557227597336 <unknown>
E           #17 0x7f7cb509caa4 <unknown>
E           #18 0x7f7cb5129c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:15,258 - INFO - Starting test with Chrome browser
2025-07-02 14:55:15,258 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:15,365 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:15,396 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:15,426 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:16,516 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55722759845a <unknown>
#1 0x55722703d760 <unknown>
#2 0x5572270780d8 <unknown>
#3 0x5572270732cf <unknown>
#4 0x5572270c38d6 <unknown>
#5 0x5572270c2f96 <unknown>
#6 0x5572270b4c23 <unknown>
#7 0x5572270814a5 <unknown>
#8 0x557227082111 <unknown>
#9 0x55722755cf1b <unknown>
#10 0x557227560e19 <unknown>
#11 0x557227543ac9 <unknown>
#12 0x5572275619c8 <unknown>
#13 0x55722752834f <unknown>
#14 0x557227585a28 <unknown>
#15 0x557227585c06 <unknown>
#16 0x557227597336 <unknown>
#17 0x7f7cb509caa4 <unknown>
#18 0x7f7cb5129c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55722759845a <unknown>
#1 0x55722703d760 <unknown>
#2 0x5572270780d8 <unknown>
#3 0x5572270732cf <unknown>
#4 0x5572270c38d6 <unknown>
#5 0x5572270c2f96 <unknown>
#6 0x5572270b4c23 <unknown>
#7 0x5572270814a5 <unknown>
#8 0x557227082111 <unknown>
#9 0x55722755cf1b <unknown>
#10 0x557227560e19 <unknown>
#11 0x557227543ac9 <unknown>
#12 0x5572275619c8 <unknown>
#13 0x55722752834f <unknown>
#14 0x557227585a28 <unknown>
#15 0x557227585c06 <unknown>
#16 0x557227597336 <unknown>
#17 0x7f7cb509caa4 <unknown>
#18 0x7f7cb5129c3c <unknown>
_______________ ERROR at setup of test_blank_username_validation _______________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f7b93230>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5637e03b0336 \\u003Cunknown>\\n#17 0x7fc2ef89caa4 \\u003Cunknown>\\n#18 0x7fc2ef929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5637e03b145a <unknown>
E       #1 0x5637dfe56760 <unknown>
E       #2 0x5637dfe910d8 <unknown>
E       #3 0x5637dfe8c2cf <unknown>
E       #4 0x5637dfedc8d6 <unknown>
E       #5 0x5637dfedbf96 <unknown>
E       #6 0x5637dfecdc23 <unknown>
E       #7 0x5637dfe9a4a5 <unknown>
E       #8 0x5637dfe9b111 <unknown>
E       #9 0x5637e0375f1b <unknown>
E       #10 0x5637e0379e19 <unknown>
E       #11 0x5637e035cac9 <unknown>
E       #12 0x5637e037a9c8 <unknown>
E       #13 0x5637e034134f <unknown>
E       #14 0x5637e039ea28 <unknown>
E       #15 0x5637e039ec06 <unknown>
E       #16 0x5637e03b0336 <unknown>
E       #17 0x7fc2ef89caa4 <unknown>
E       #18 0x7fc2ef929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5637e03b145a <unknown>
E           #1 0x5637dfe56760 <unknown>
E           #2 0x5637dfe910d8 <unknown>
E           #3 0x5637dfe8c2cf <unknown>
E           #4 0x5637dfedc8d6 <unknown>
E           #5 0x5637dfedbf96 <unknown>
E           #6 0x5637dfecdc23 <unknown>
E           #7 0x5637dfe9a4a5 <unknown>
E           #8 0x5637dfe9b111 <unknown>
E           #9 0x5637e0375f1b <unknown>
E           #10 0x5637e0379e19 <unknown>
E           #11 0x5637e035cac9 <unknown>
E           #12 0x5637e037a9c8 <unknown>
E           #13 0x5637e034134f <unknown>
E           #14 0x5637e039ea28 <unknown>
E           #15 0x5637e039ec06 <unknown>
E           #16 0x5637e03b0336 <unknown>
E           #17 0x7fc2ef89caa4 <unknown>
E           #18 0x7fc2ef929c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:16,553 - INFO - Starting test with Chrome browser
2025-07-02 14:55:16,553 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:16,661 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:16,692 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:16,722 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:17,812 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5637e03b145a <unknown>
#1 0x5637dfe56760 <unknown>
#2 0x5637dfe910d8 <unknown>
#3 0x5637dfe8c2cf <unknown>
#4 0x5637dfedc8d6 <unknown>
#5 0x5637dfedbf96 <unknown>
#6 0x5637dfecdc23 <unknown>
#7 0x5637dfe9a4a5 <unknown>
#8 0x5637dfe9b111 <unknown>
#9 0x5637e0375f1b <unknown>
#10 0x5637e0379e19 <unknown>
#11 0x5637e035cac9 <unknown>
#12 0x5637e037a9c8 <unknown>
#13 0x5637e034134f <unknown>
#14 0x5637e039ea28 <unknown>
#15 0x5637e039ec06 <unknown>
#16 0x5637e03b0336 <unknown>
#17 0x7fc2ef89caa4 <unknown>
#18 0x7fc2ef929c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5637e03b145a <unknown>
#1 0x5637dfe56760 <unknown>
#2 0x5637dfe910d8 <unknown>
#3 0x5637dfe8c2cf <unknown>
#4 0x5637dfedc8d6 <unknown>
#5 0x5637dfedbf96 <unknown>
#6 0x5637dfecdc23 <unknown>
#7 0x5637dfe9a4a5 <unknown>
#8 0x5637dfe9b111 <unknown>
#9 0x5637e0375f1b <unknown>
#10 0x5637e0379e19 <unknown>
#11 0x5637e035cac9 <unknown>
#12 0x5637e037a9c8 <unknown>
#13 0x5637e034134f <unknown>
#14 0x5637e039ea28 <unknown>
#15 0x5637e039ec06 <unknown>
#16 0x5637e03b0336 <unknown>
#17 0x7fc2ef89caa4 <unknown>
#18 0x7fc2ef929c3c <unknown>
_______________ ERROR at setup of test_blank_password_validation _______________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f5f09630>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55a79eb3e336 \\u003Cunknown>\\n#17 0x7f7a57c9caa4 \\u003Cunknown>\\n#18 0x7f7a57d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55a79eb3f45a <unknown>
E       #1 0x55a79e5e4760 <unknown>
E       #2 0x55a79e61f0d8 <unknown>
E       #3 0x55a79e61a2cf <unknown>
E       #4 0x55a79e66a8d6 <unknown>
E       #5 0x55a79e669f96 <unknown>
E       #6 0x55a79e65bc23 <unknown>
E       #7 0x55a79e6284a5 <unknown>
E       #8 0x55a79e629111 <unknown>
E       #9 0x55a79eb03f1b <unknown>
E       #10 0x55a79eb07e19 <unknown>
E       #11 0x55a79eaeaac9 <unknown>
E       #12 0x55a79eb089c8 <unknown>
E       #13 0x55a79eacf34f <unknown>
E       #14 0x55a79eb2ca28 <unknown>
E       #15 0x55a79eb2cc06 <unknown>
E       #16 0x55a79eb3e336 <unknown>
E       #17 0x7f7a57c9caa4 <unknown>
E       #18 0x7f7a57d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55a79eb3f45a <unknown>
E           #1 0x55a79e5e4760 <unknown>
E           #2 0x55a79e61f0d8 <unknown>
E           #3 0x55a79e61a2cf <unknown>
E           #4 0x55a79e66a8d6 <unknown>
E           #5 0x55a79e669f96 <unknown>
E           #6 0x55a79e65bc23 <unknown>
E           #7 0x55a79e6284a5 <unknown>
E           #8 0x55a79e629111 <unknown>
E           #9 0x55a79eb03f1b <unknown>
E           #10 0x55a79eb07e19 <unknown>
E           #11 0x55a79eaeaac9 <unknown>
E           #12 0x55a79eb089c8 <unknown>
E           #13 0x55a79eacf34f <unknown>
E           #14 0x55a79eb2ca28 <unknown>
E           #15 0x55a79eb2cc06 <unknown>
E           #16 0x55a79eb3e336 <unknown>
E           #17 0x7f7a57c9caa4 <unknown>
E           #18 0x7f7a57d29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:17,849 - INFO - Starting test with Chrome browser
2025-07-02 14:55:17,850 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:17,956 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:17,988 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:18,019 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:19,108 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a79eb3f45a <unknown>
#1 0x55a79e5e4760 <unknown>
#2 0x55a79e61f0d8 <unknown>
#3 0x55a79e61a2cf <unknown>
#4 0x55a79e66a8d6 <unknown>
#5 0x55a79e669f96 <unknown>
#6 0x55a79e65bc23 <unknown>
#7 0x55a79e6284a5 <unknown>
#8 0x55a79e629111 <unknown>
#9 0x55a79eb03f1b <unknown>
#10 0x55a79eb07e19 <unknown>
#11 0x55a79eaeaac9 <unknown>
#12 0x55a79eb089c8 <unknown>
#13 0x55a79eacf34f <unknown>
#14 0x55a79eb2ca28 <unknown>
#15 0x55a79eb2cc06 <unknown>
#16 0x55a79eb3e336 <unknown>
#17 0x7f7a57c9caa4 <unknown>
#18 0x7f7a57d29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a79eb3f45a <unknown>
#1 0x55a79e5e4760 <unknown>
#2 0x55a79e61f0d8 <unknown>
#3 0x55a79e61a2cf <unknown>
#4 0x55a79e66a8d6 <unknown>
#5 0x55a79e669f96 <unknown>
#6 0x55a79e65bc23 <unknown>
#7 0x55a79e6284a5 <unknown>
#8 0x55a79e629111 <unknown>
#9 0x55a79eb03f1b <unknown>
#10 0x55a79eb07e19 <unknown>
#11 0x55a79eaeaac9 <unknown>
#12 0x55a79eb089c8 <unknown>
#13 0x55a79eacf34f <unknown>
#14 0x55a79eb2ca28 <unknown>
#15 0x55a79eb2cc06 <unknown>
#16 0x55a79eb3e336 <unknown>
#17 0x7f7a57c9caa4 <unknown>
#18 0x7f7a57d29c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username0] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f5ecd090>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x558d03d70336 \\u003Cunknown>\\n#17 0x7f95c509caa4 \\u003Cunknown>\\n#18 0x7f95c5129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x558d03d7145a <unknown>
E       #1 0x558d03816760 <unknown>
E       #2 0x558d038510d8 <unknown>
E       #3 0x558d0384c2cf <unknown>
E       #4 0x558d0389c8d6 <unknown>
E       #5 0x558d0389bf96 <unknown>
E       #6 0x558d0388dc23 <unknown>
E       #7 0x558d0385a4a5 <unknown>
E       #8 0x558d0385b111 <unknown>
E       #9 0x558d03d35f1b <unknown>
E       #10 0x558d03d39e19 <unknown>
E       #11 0x558d03d1cac9 <unknown>
E       #12 0x558d03d3a9c8 <unknown>
E       #13 0x558d03d0134f <unknown>
E       #14 0x558d03d5ea28 <unknown>
E       #15 0x558d03d5ec06 <unknown>
E       #16 0x558d03d70336 <unknown>
E       #17 0x7f95c509caa4 <unknown>
E       #18 0x7f95c5129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x558d03d7145a <unknown>
E           #1 0x558d03816760 <unknown>
E           #2 0x558d038510d8 <unknown>
E           #3 0x558d0384c2cf <unknown>
E           #4 0x558d0389c8d6 <unknown>
E           #5 0x558d0389bf96 <unknown>
E           #6 0x558d0388dc23 <unknown>
E           #7 0x558d0385a4a5 <unknown>
E           #8 0x558d0385b111 <unknown>
E           #9 0x558d03d35f1b <unknown>
E           #10 0x558d03d39e19 <unknown>
E           #11 0x558d03d1cac9 <unknown>
E           #12 0x558d03d3a9c8 <unknown>
E           #13 0x558d03d0134f <unknown>
E           #14 0x558d03d5ea28 <unknown>
E           #15 0x558d03d5ec06 <unknown>
E           #16 0x558d03d70336 <unknown>
E           #17 0x7f95c509caa4 <unknown>
E           #18 0x7f95c5129c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:19,147 - INFO - Starting test with Chrome browser
2025-07-02 14:55:19,148 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:19,254 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:19,286 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:19,318 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:20,407 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x558d03d7145a <unknown>
#1 0x558d03816760 <unknown>
#2 0x558d038510d8 <unknown>
#3 0x558d0384c2cf <unknown>
#4 0x558d0389c8d6 <unknown>
#5 0x558d0389bf96 <unknown>
#6 0x558d0388dc23 <unknown>
#7 0x558d0385a4a5 <unknown>
#8 0x558d0385b111 <unknown>
#9 0x558d03d35f1b <unknown>
#10 0x558d03d39e19 <unknown>
#11 0x558d03d1cac9 <unknown>
#12 0x558d03d3a9c8 <unknown>
#13 0x558d03d0134f <unknown>
#14 0x558d03d5ea28 <unknown>
#15 0x558d03d5ec06 <unknown>
#16 0x558d03d70336 <unknown>
#17 0x7f95c509caa4 <unknown>
#18 0x7f95c5129c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x558d03d7145a <unknown>
#1 0x558d03816760 <unknown>
#2 0x558d038510d8 <unknown>
#3 0x558d0384c2cf <unknown>
#4 0x558d0389c8d6 <unknown>
#5 0x558d0389bf96 <unknown>
#6 0x558d0388dc23 <unknown>
#7 0x558d0385a4a5 <unknown>
#8 0x558d0385b111 <unknown>
#9 0x558d03d35f1b <unknown>
#10 0x558d03d39e19 <unknown>
#11 0x558d03d1cac9 <unknown>
#12 0x558d03d3a9c8 <unknown>
#13 0x558d03d0134f <unknown>
#14 0x558d03d5ea28 <unknown>
#15 0x558d03d5ec06 <unknown>
#16 0x558d03d70336 <unknown>
#17 0x7f95c509caa4 <unknown>
#18 0x7f95c5129c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username1] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6d73290>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x564fd9112336 \\u003Cunknown>\\n#17 0x7fc5ea69caa4 \\u003Cunknown>\\n#18 0x7fc5ea729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x564fd911345a <unknown>
E       #1 0x564fd8bb8760 <unknown>
E       #2 0x564fd8bf30d8 <unknown>
E       #3 0x564fd8bee2cf <unknown>
E       #4 0x564fd8c3e8d6 <unknown>
E       #5 0x564fd8c3df96 <unknown>
E       #6 0x564fd8c2fc23 <unknown>
E       #7 0x564fd8bfc4a5 <unknown>
E       #8 0x564fd8bfd111 <unknown>
E       #9 0x564fd90d7f1b <unknown>
E       #10 0x564fd90dbe19 <unknown>
E       #11 0x564fd90beac9 <unknown>
E       #12 0x564fd90dc9c8 <unknown>
E       #13 0x564fd90a334f <unknown>
E       #14 0x564fd9100a28 <unknown>
E       #15 0x564fd9100c06 <unknown>
E       #16 0x564fd9112336 <unknown>
E       #17 0x7fc5ea69caa4 <unknown>
E       #18 0x7fc5ea729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x564fd911345a <unknown>
E           #1 0x564fd8bb8760 <unknown>
E           #2 0x564fd8bf30d8 <unknown>
E           #3 0x564fd8bee2cf <unknown>
E           #4 0x564fd8c3e8d6 <unknown>
E           #5 0x564fd8c3df96 <unknown>
E           #6 0x564fd8c2fc23 <unknown>
E           #7 0x564fd8bfc4a5 <unknown>
E           #8 0x564fd8bfd111 <unknown>
E           #9 0x564fd90d7f1b <unknown>
E           #10 0x564fd90dbe19 <unknown>
E           #11 0x564fd90beac9 <unknown>
E           #12 0x564fd90dc9c8 <unknown>
E           #13 0x564fd90a334f <unknown>
E           #14 0x564fd9100a28 <unknown>
E           #15 0x564fd9100c06 <unknown>
E           #16 0x564fd9112336 <unknown>
E           #17 0x7fc5ea69caa4 <unknown>
E           #18 0x7fc5ea729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:20,445 - INFO - Starting test with Chrome browser
2025-07-02 14:55:20,445 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:20,552 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:20,583 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:20,614 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:21,705 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564fd911345a <unknown>
#1 0x564fd8bb8760 <unknown>
#2 0x564fd8bf30d8 <unknown>
#3 0x564fd8bee2cf <unknown>
#4 0x564fd8c3e8d6 <unknown>
#5 0x564fd8c3df96 <unknown>
#6 0x564fd8c2fc23 <unknown>
#7 0x564fd8bfc4a5 <unknown>
#8 0x564fd8bfd111 <unknown>
#9 0x564fd90d7f1b <unknown>
#10 0x564fd90dbe19 <unknown>
#11 0x564fd90beac9 <unknown>
#12 0x564fd90dc9c8 <unknown>
#13 0x564fd90a334f <unknown>
#14 0x564fd9100a28 <unknown>
#15 0x564fd9100c06 <unknown>
#16 0x564fd9112336 <unknown>
#17 0x7fc5ea69caa4 <unknown>
#18 0x7fc5ea729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564fd911345a <unknown>
#1 0x564fd8bb8760 <unknown>
#2 0x564fd8bf30d8 <unknown>
#3 0x564fd8bee2cf <unknown>
#4 0x564fd8c3e8d6 <unknown>
#5 0x564fd8c3df96 <unknown>
#6 0x564fd8c2fc23 <unknown>
#7 0x564fd8bfc4a5 <unknown>
#8 0x564fd8bfd111 <unknown>
#9 0x564fd90d7f1b <unknown>
#10 0x564fd90dbe19 <unknown>
#11 0x564fd90beac9 <unknown>
#12 0x564fd90dc9c8 <unknown>
#13 0x564fd90a334f <unknown>
#14 0x564fd9100a28 <unknown>
#15 0x564fd9100c06 <unknown>
#16 0x564fd9112336 <unknown>
#17 0x7fc5ea69caa4 <unknown>
#18 0x7fc5ea729c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username2] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6d73d10>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x562b25aae336 \\u003Cunknown>\\n#17 0x7f39a2e9caa4 \\u003Cunknown>\\n#18 0x7f39a2f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x562b25aaf45a <unknown>
E       #1 0x562b25554760 <unknown>
E       #2 0x562b2558f0d8 <unknown>
E       #3 0x562b2558a2cf <unknown>
E       #4 0x562b255da8d6 <unknown>
E       #5 0x562b255d9f96 <unknown>
E       #6 0x562b255cbc23 <unknown>
E       #7 0x562b255984a5 <unknown>
E       #8 0x562b25599111 <unknown>
E       #9 0x562b25a73f1b <unknown>
E       #10 0x562b25a77e19 <unknown>
E       #11 0x562b25a5aac9 <unknown>
E       #12 0x562b25a789c8 <unknown>
E       #13 0x562b25a3f34f <unknown>
E       #14 0x562b25a9ca28 <unknown>
E       #15 0x562b25a9cc06 <unknown>
E       #16 0x562b25aae336 <unknown>
E       #17 0x7f39a2e9caa4 <unknown>
E       #18 0x7f39a2f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x562b25aaf45a <unknown>
E           #1 0x562b25554760 <unknown>
E           #2 0x562b2558f0d8 <unknown>
E           #3 0x562b2558a2cf <unknown>
E           #4 0x562b255da8d6 <unknown>
E           #5 0x562b255d9f96 <unknown>
E           #6 0x562b255cbc23 <unknown>
E           #7 0x562b255984a5 <unknown>
E           #8 0x562b25599111 <unknown>
E           #9 0x562b25a73f1b <unknown>
E           #10 0x562b25a77e19 <unknown>
E           #11 0x562b25a5aac9 <unknown>
E           #12 0x562b25a789c8 <unknown>
E           #13 0x562b25a3f34f <unknown>
E           #14 0x562b25a9ca28 <unknown>
E           #15 0x562b25a9cc06 <unknown>
E           #16 0x562b25aae336 <unknown>
E           #17 0x7f39a2e9caa4 <unknown>
E           #18 0x7f39a2f29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:21,743 - INFO - Starting test with Chrome browser
2025-07-02 14:55:21,743 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:21,850 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:21,882 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:21,915 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:23,005 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x562b25aaf45a <unknown>
#1 0x562b25554760 <unknown>
#2 0x562b2558f0d8 <unknown>
#3 0x562b2558a2cf <unknown>
#4 0x562b255da8d6 <unknown>
#5 0x562b255d9f96 <unknown>
#6 0x562b255cbc23 <unknown>
#7 0x562b255984a5 <unknown>
#8 0x562b25599111 <unknown>
#9 0x562b25a73f1b <unknown>
#10 0x562b25a77e19 <unknown>
#11 0x562b25a5aac9 <unknown>
#12 0x562b25a789c8 <unknown>
#13 0x562b25a3f34f <unknown>
#14 0x562b25a9ca28 <unknown>
#15 0x562b25a9cc06 <unknown>
#16 0x562b25aae336 <unknown>
#17 0x7f39a2e9caa4 <unknown>
#18 0x7f39a2f29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x562b25aaf45a <unknown>
#1 0x562b25554760 <unknown>
#2 0x562b2558f0d8 <unknown>
#3 0x562b2558a2cf <unknown>
#4 0x562b255da8d6 <unknown>
#5 0x562b255d9f96 <unknown>
#6 0x562b255cbc23 <unknown>
#7 0x562b255984a5 <unknown>
#8 0x562b25599111 <unknown>
#9 0x562b25a73f1b <unknown>
#10 0x562b25a77e19 <unknown>
#11 0x562b25a5aac9 <unknown>
#12 0x562b25a789c8 <unknown>
#13 0x562b25a3f34f <unknown>
#14 0x562b25a9ca28 <unknown>
#15 0x562b25a9cc06 <unknown>
#16 0x562b25aae336 <unknown>
#17 0x7f39a2e9caa4 <unknown>
#18 0x7f39a2f29c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username3] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6d0b5f0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5655085f1336 \\u003Cunknown>\\n#17 0x7fb99aa9caa4 \\u003Cunknown>\\n#18 0x7fb99ab29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5655085f245a <unknown>
E       #1 0x565508097760 <unknown>
E       #2 0x5655080d20d8 <unknown>
E       #3 0x5655080cd2cf <unknown>
E       #4 0x56550811d8d6 <unknown>
E       #5 0x56550811cf96 <unknown>
E       #6 0x56550810ec23 <unknown>
E       #7 0x5655080db4a5 <unknown>
E       #8 0x5655080dc111 <unknown>
E       #9 0x5655085b6f1b <unknown>
E       #10 0x5655085bae19 <unknown>
E       #11 0x56550859dac9 <unknown>
E       #12 0x5655085bb9c8 <unknown>
E       #13 0x56550858234f <unknown>
E       #14 0x5655085dfa28 <unknown>
E       #15 0x5655085dfc06 <unknown>
E       #16 0x5655085f1336 <unknown>
E       #17 0x7fb99aa9caa4 <unknown>
E       #18 0x7fb99ab29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5655085f245a <unknown>
E           #1 0x565508097760 <unknown>
E           #2 0x5655080d20d8 <unknown>
E           #3 0x5655080cd2cf <unknown>
E           #4 0x56550811d8d6 <unknown>
E           #5 0x56550811cf96 <unknown>
E           #6 0x56550810ec23 <unknown>
E           #7 0x5655080db4a5 <unknown>
E           #8 0x5655080dc111 <unknown>
E           #9 0x5655085b6f1b <unknown>
E           #10 0x5655085bae19 <unknown>
E           #11 0x56550859dac9 <unknown>
E           #12 0x5655085bb9c8 <unknown>
E           #13 0x56550858234f <unknown>
E           #14 0x5655085dfa28 <unknown>
E           #15 0x5655085dfc06 <unknown>
E           #16 0x5655085f1336 <unknown>
E           #17 0x7fb99aa9caa4 <unknown>
E           #18 0x7fb99ab29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:23,042 - INFO - Starting test with Chrome browser
2025-07-02 14:55:23,043 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:23,150 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:23,182 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:23,217 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:24,306 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5655085f245a <unknown>
#1 0x565508097760 <unknown>
#2 0x5655080d20d8 <unknown>
#3 0x5655080cd2cf <unknown>
#4 0x56550811d8d6 <unknown>
#5 0x56550811cf96 <unknown>
#6 0x56550810ec23 <unknown>
#7 0x5655080db4a5 <unknown>
#8 0x5655080dc111 <unknown>
#9 0x5655085b6f1b <unknown>
#10 0x5655085bae19 <unknown>
#11 0x56550859dac9 <unknown>
#12 0x5655085bb9c8 <unknown>
#13 0x56550858234f <unknown>
#14 0x5655085dfa28 <unknown>
#15 0x5655085dfc06 <unknown>
#16 0x5655085f1336 <unknown>
#17 0x7fb99aa9caa4 <unknown>
#18 0x7fb99ab29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5655085f245a <unknown>
#1 0x565508097760 <unknown>
#2 0x5655080d20d8 <unknown>
#3 0x5655080cd2cf <unknown>
#4 0x56550811d8d6 <unknown>
#5 0x56550811cf96 <unknown>
#6 0x56550810ec23 <unknown>
#7 0x5655080db4a5 <unknown>
#8 0x5655080dc111 <unknown>
#9 0x5655085b6f1b <unknown>
#10 0x5655085bae19 <unknown>
#11 0x56550859dac9 <unknown>
#12 0x5655085bb9c8 <unknown>
#13 0x56550858234f <unknown>
#14 0x5655085dfa28 <unknown>
#15 0x5655085dfc06 <unknown>
#16 0x5655085f1336 <unknown>
#17 0x7fb99aa9caa4 <unknown>
#18 0x7fb99ab29c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username4] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f6d0a150>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5617981b8336 \\u003Cunknown>\\n#17 0x7fe00de9caa4 \\u003Cunknown>\\n#18 0x7fe00df29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5617981b945a <unknown>
E       #1 0x561797c5e760 <unknown>
E       #2 0x561797c990d8 <unknown>
E       #3 0x561797c942cf <unknown>
E       #4 0x561797ce48d6 <unknown>
E       #5 0x561797ce3f96 <unknown>
E       #6 0x561797cd5c23 <unknown>
E       #7 0x561797ca24a5 <unknown>
E       #8 0x561797ca3111 <unknown>
E       #9 0x56179817df1b <unknown>
E       #10 0x561798181e19 <unknown>
E       #11 0x561798164ac9 <unknown>
E       #12 0x5617981829c8 <unknown>
E       #13 0x56179814934f <unknown>
E       #14 0x5617981a6a28 <unknown>
E       #15 0x5617981a6c06 <unknown>
E       #16 0x5617981b8336 <unknown>
E       #17 0x7fe00de9caa4 <unknown>
E       #18 0x7fe00df29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5617981b945a <unknown>
E           #1 0x561797c5e760 <unknown>
E           #2 0x561797c990d8 <unknown>
E           #3 0x561797c942cf <unknown>
E           #4 0x561797ce48d6 <unknown>
E           #5 0x561797ce3f96 <unknown>
E           #6 0x561797cd5c23 <unknown>
E           #7 0x561797ca24a5 <unknown>
E           #8 0x561797ca3111 <unknown>
E           #9 0x56179817df1b <unknown>
E           #10 0x561798181e19 <unknown>
E           #11 0x561798164ac9 <unknown>
E           #12 0x5617981829c8 <unknown>
E           #13 0x56179814934f <unknown>
E           #14 0x5617981a6a28 <unknown>
E           #15 0x5617981a6c06 <unknown>
E           #16 0x5617981b8336 <unknown>
E           #17 0x7fe00de9caa4 <unknown>
E           #18 0x7fe00df29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 14:55:24,345 - INFO - Starting test with Chrome browser
2025-07-02 14:55:24,345 - INFO - ====== WebDriver manager ======
2025-07-02 14:55:24,452 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:24,483 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 14:55:24,514 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 14:55:25,604 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5617981b945a <unknown>
#1 0x561797c5e760 <unknown>
#2 0x561797c990d8 <unknown>
#3 0x561797c942cf <unknown>
#4 0x561797ce48d6 <unknown>
#5 0x561797ce3f96 <unknown>
#6 0x561797cd5c23 <unknown>
#7 0x561797ca24a5 <unknown>
#8 0x561797ca3111 <unknown>
#9 0x56179817df1b <unknown>
#10 0x561798181e19 <unknown>
#11 0x561798164ac9 <unknown>
#12 0x5617981829c8 <unknown>
#13 0x56179814934f <unknown>
#14 0x5617981a6a28 <unknown>
#15 0x5617981a6c06 <unknown>
#16 0x5617981b8336 <unknown>
#17 0x7fe00de9caa4 <unknown>
#18 0x7fe00df29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5617981b945a <unknown>
#1 0x561797c5e760 <unknown>
#2 0x561797c990d8 <unknown>
#3 0x561797c942cf <unknown>
#4 0x561797ce48d6 <unknown>
#5 0x561797ce3f96 <unknown>
#6 0x561797cd5c23 <unknown>
#7 0x561797ca24a5 <unknown>
#8 0x561797ca3111 <unknown>
#9 0x56179817df1b <unknown>
#10 0x561798181e19 <unknown>
#11 0x561798164ac9 <unknown>
#12 0x5617981829c8 <unknown>
#13 0x56179814934f <unknown>
#14 0x5617981a6a28 <unknown>
#15 0x5617981a6c06 <unknown>
#16 0x5617981b8336 <unknown>
#17 0x7fe00de9caa4 <unknown>
#18 0x7fe00df29c3c <unknown>
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250702_145458/report.html -
=========================== short test summary info ============================
ERROR tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x555fb586c45a <unknown>
#1 0x555fb5311760 <unknown>
#2 0x555fb534c0d8 <unknown>
#3 0x555fb53472cf <unknown>
#4 0x555fb53978d6 <unknown>
#5 0x555fb5396f96 <unknown>
#6 0x555fb5388c23 <unknown>
#7 0x555fb53554a5 <unknown>
#8 0x555fb5356111 <unknown>
#9 0x555fb5830f1b <unknown>
#10 0x555fb5834e19 <unknown>
#11 0x555fb5817ac9 <unknown>
#12 0x555fb58359c8 <unknown>
#13 0x555fb57fc34f <unknown>
#14 0x555fb5859a28 <unknown>
#15 0x555fb5859c06 <unknown>
#16 0x555fb586b336 <unknown>
#17 0x7f588a49caa4 <unknown>
#18 0x7f588a529c3c <unknown>
ERROR tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55d375c1845a <unknown>
#1 0x55d3756bd760 <unknown>
#2 0x55d3756f80d8 <unknown>
#3 0x55d3756f32cf <unknown>
#4 0x55d3757438d6 <unknown>
#5 0x55d375742f96 <unknown>
#6 0x55d375734c23 <unknown>
#7 0x55d3757014a5 <unknown>
#8 0x55d375702111 <unknown>
#9 0x55d375bdcf1b <unknown>
#10 0x55d375be0e19 <unknown>
#11 0x55d375bc3ac9 <unknown>
#12 0x55d375be19c8 <unknown>
#13 0x55d375ba834f <unknown>
#14 0x55d375c05a28 <unknown>
#15 0x55d375c05c06 <unknown>
#16 0x55d375c17336 <unknown>
#17 0x7fae31a9caa4 <unknown>
#18 0x7fae31b29c3c <unknown>
ERROR tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55d0048ea45a <unknown>
#1 0x55d00438f760 <unknown>
#2 0x55d0043ca0d8 <unknown>
#3 0x55d0043c52cf <unknown>
#4 0x55d0044158d6 <unknown>
#5 0x55d004414f96 <unknown>
#6 0x55d004406c23 <unknown>
#7 0x55d0043d34a5 <unknown>
#8 0x55d0043d4111 <unknown>
#9 0x55d0048aef1b <unknown>
#10 0x55d0048b2e19 <unknown>
#11 0x55d004895ac9 <unknown>
#12 0x55d0048b39c8 <unknown>
#13 0x55d00487a34f <unknown>
#14 0x55d0048d7a28 <unknown>
#15 0x55d0048d7c06 <unknown>
#16 0x55d0048e9336 <unknown>
#17 0x7f71dc49caa4 <unknown>
#18 0x7f71dc529c3c <unknown>
ERROR tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56459106a45a <unknown>
#1 0x564590b0f760 <unknown>
#2 0x564590b4a0d8 <unknown>
#3 0x564590b452cf <unknown>
#4 0x564590b958d6 <unknown>
#5 0x564590b94f96 <unknown>
#6 0x564590b86c23 <unknown>
#7 0x564590b534a5 <unknown>
#8 0x564590b54111 <unknown>
#9 0x56459102ef1b <unknown>
#10 0x564591032e19 <unknown>
#11 0x564591015ac9 <unknown>
#12 0x5645910339c8 <unknown>
#13 0x564590ffa34f <unknown>
#14 0x564591057a28 <unknown>
#15 0x564591057c06 <unknown>
#16 0x564591069336 <unknown>
#17 0x7f6a8ec9caa4 <unknown>
#18 0x7f6a8ed29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username0] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x562df1ad645a <unknown>
#1 0x562df157b760 <unknown>
#2 0x562df15b60d8 <unknown>
#3 0x562df15b12cf <unknown>
#4 0x562df16018d6 <unknown>
#5 0x562df1600f96 <unknown>
#6 0x562df15f2c23 <unknown>
#7 0x562df15bf4a5 <unknown>
#8 0x562df15c0111 <unknown>
#9 0x562df1a9af1b <unknown>
#10 0x562df1a9ee19 <unknown>
#11 0x562df1a81ac9 <unknown>
#12 0x562df1a9f9c8 <unknown>
#13 0x562df1a6634f <unknown>
#14 0x562df1ac3a28 <unknown>
#15 0x562df1ac3c06 <unknown>
#16 0x562df1ad5336 <unknown>
#17 0x7fa19aa9caa4 <unknown>
#18 0x7fa19ab29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username1] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x555f7572d45a <unknown>
#1 0x555f751d2760 <unknown>
#2 0x555f7520d0d8 <unknown>
#3 0x555f752082cf <unknown>
#4 0x555f752588d6 <unknown>
#5 0x555f75257f96 <unknown>
#6 0x555f75249c23 <unknown>
#7 0x555f752164a5 <unknown>
#8 0x555f75217111 <unknown>
#9 0x555f756f1f1b <unknown>
#10 0x555f756f5e19 <unknown>
#11 0x555f756d8ac9 <unknown>
#12 0x555f756f69c8 <unknown>
#13 0x555f756bd34f <unknown>
#14 0x555f7571aa28 <unknown>
#15 0x555f7571ac06 <unknown>
#16 0x555f7572c336 <unknown>
#17 0x7f6fd889caa4 <unknown>
#18 0x7f6fd8929c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username2] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x563f131bb45a <unknown>
#1 0x563f12c60760 <unknown>
#2 0x563f12c9b0d8 <unknown>
#3 0x563f12c962cf <unknown>
#4 0x563f12ce68d6 <unknown>
#5 0x563f12ce5f96 <unknown>
#6 0x563f12cd7c23 <unknown>
#7 0x563f12ca44a5 <unknown>
#8 0x563f12ca5111 <unknown>
#9 0x563f1317ff1b <unknown>
#10 0x563f13183e19 <unknown>
#11 0x563f13166ac9 <unknown>
#12 0x563f131849c8 <unknown>
#13 0x563f1314b34f <unknown>
#14 0x563f131a8a28 <unknown>
#15 0x563f131a8c06 <unknown>
#16 0x563f131ba336 <unknown>
#17 0x7fc6e0c9caa4 <unknown>
#18 0x7fc6e0d29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username3] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55cae05dd45a <unknown>
#1 0x55cae0082760 <unknown>
#2 0x55cae00bd0d8 <unknown>
#3 0x55cae00b82cf <unknown>
#4 0x55cae01088d6 <unknown>
#5 0x55cae0107f96 <unknown>
#6 0x55cae00f9c23 <unknown>
#7 0x55cae00c64a5 <unknown>
#8 0x55cae00c7111 <unknown>
#9 0x55cae05a1f1b <unknown>
#10 0x55cae05a5e19 <unknown>
#11 0x55cae0588ac9 <unknown>
#12 0x55cae05a69c8 <unknown>
#13 0x55cae056d34f <unknown>
#14 0x55cae05caa28 <unknown>
#15 0x55cae05cac06 <unknown>
#16 0x55cae05dc336 <unknown>
#17 0x7fa20f69caa4 <unknown>
#18 0x7fa20f729c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56497539345a <unknown>
#1 0x564974e38760 <unknown>
#2 0x564974e730d8 <unknown>
#3 0x564974e6e2cf <unknown>
#4 0x564974ebe8d6 <unknown>
#5 0x564974ebdf96 <unknown>
#6 0x564974eafc23 <unknown>
#7 0x564974e7c4a5 <unknown>
#8 0x564974e7d111 <unknown>
#9 0x564975357f1b <unknown>
#10 0x56497535be19 <unknown>
#11 0x56497533eac9 <unknown>
#12 0x56497535c9c8 <unknown>
#13 0x56497532334f <unknown>
#14 0x564975380a28 <unknown>
#15 0x564975380c06 <unknown>
#16 0x564975392336 <unknown>
#17 0x7f26d529caa4 <unknown>
#18 0x7f26d5329c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5561bd1c145a <unknown>
#1 0x5561bcc66760 <unknown>
#2 0x5561bcca10d8 <unknown>
#3 0x5561bcc9c2cf <unknown>
#4 0x5561bccec8d6 <unknown>
#5 0x5561bccebf96 <unknown>
#6 0x5561bccddc23 <unknown>
#7 0x5561bccaa4a5 <unknown>
#8 0x5561bccab111 <unknown>
#9 0x5561bd185f1b <unknown>
#10 0x5561bd189e19 <unknown>
#11 0x5561bd16cac9 <unknown>
#12 0x5561bd18a9c8 <unknown>
#13 0x5561bd15134f <unknown>
#14 0x5561bd1aea28 <unknown>
#15 0x5561bd1aec06 <unknown>
#16 0x5561bd1c0336 <unknown>
#17 0x7fc09ce9caa4 <unknown>
#18 0x7fc09cf29c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a93847f45a <unknown>
#1 0x55a937f24760 <unknown>
#2 0x55a937f5f0d8 <unknown>
#3 0x55a937f5a2cf <unknown>
#4 0x55a937faa8d6 <unknown>
#5 0x55a937fa9f96 <unknown>
#6 0x55a937f9bc23 <unknown>
#7 0x55a937f684a5 <unknown>
#8 0x55a937f69111 <unknown>
#9 0x55a938443f1b <unknown>
#10 0x55a938447e19 <unknown>
#11 0x55a93842aac9 <unknown>
#12 0x55a9384489c8 <unknown>
#13 0x55a93840f34f <unknown>
#14 0x55a93846ca28 <unknown>
#15 0x55a93846cc06 <unknown>
#16 0x55a93847e336 <unknown>
#17 0x7f6da849caa4 <unknown>
#18 0x7f6da8529c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55722759845a <unknown>
#1 0x55722703d760 <unknown>
#2 0x5572270780d8 <unknown>
#3 0x5572270732cf <unknown>
#4 0x5572270c38d6 <unknown>
#5 0x5572270c2f96 <unknown>
#6 0x5572270b4c23 <unknown>
#7 0x5572270814a5 <unknown>
#8 0x557227082111 <unknown>
#9 0x55722755cf1b <unknown>
#10 0x557227560e19 <unknown>
#11 0x557227543ac9 <unknown>
#12 0x5572275619c8 <unknown>
#13 0x55722752834f <unknown>
#14 0x557227585a28 <unknown>
#15 0x557227585c06 <unknown>
#16 0x557227597336 <unknown>
#17 0x7f7cb509caa4 <unknown>
#18 0x7f7cb5129c3c <unknown>
ERROR tests/test_login.py::test_blank_username_validation - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5637e03b145a <unknown>
#1 0x5637dfe56760 <unknown>
#2 0x5637dfe910d8 <unknown>
#3 0x5637dfe8c2cf <unknown>
#4 0x5637dfedc8d6 <unknown>
#5 0x5637dfedbf96 <unknown>
#6 0x5637dfecdc23 <unknown>
#7 0x5637dfe9a4a5 <unknown>
#8 0x5637dfe9b111 <unknown>
#9 0x5637e0375f1b <unknown>
#10 0x5637e0379e19 <unknown>
#11 0x5637e035cac9 <unknown>
#12 0x5637e037a9c8 <unknown>
#13 0x5637e034134f <unknown>
#14 0x5637e039ea28 <unknown>
#15 0x5637e039ec06 <unknown>
#16 0x5637e03b0336 <unknown>
#17 0x7fc2ef89caa4 <unknown>
#18 0x7fc2ef929c3c <unknown>
ERROR tests/test_login.py::test_blank_password_validation - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a79eb3f45a <unknown>
#1 0x55a79e5e4760 <unknown>
#2 0x55a79e61f0d8 <unknown>
#3 0x55a79e61a2cf <unknown>
#4 0x55a79e66a8d6 <unknown>
#5 0x55a79e669f96 <unknown>
#6 0x55a79e65bc23 <unknown>
#7 0x55a79e6284a5 <unknown>
#8 0x55a79e629111 <unknown>
#9 0x55a79eb03f1b <unknown>
#10 0x55a79eb07e19 <unknown>
#11 0x55a79eaeaac9 <unknown>
#12 0x55a79eb089c8 <unknown>
#13 0x55a79eacf34f <unknown>
#14 0x55a79eb2ca28 <unknown>
#15 0x55a79eb2cc06 <unknown>
#16 0x55a79eb3e336 <unknown>
#17 0x7f7a57c9caa4 <unknown>
#18 0x7f7a57d29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username0] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x558d03d7145a <unknown>
#1 0x558d03816760 <unknown>
#2 0x558d038510d8 <unknown>
#3 0x558d0384c2cf <unknown>
#4 0x558d0389c8d6 <unknown>
#5 0x558d0389bf96 <unknown>
#6 0x558d0388dc23 <unknown>
#7 0x558d0385a4a5 <unknown>
#8 0x558d0385b111 <unknown>
#9 0x558d03d35f1b <unknown>
#10 0x558d03d39e19 <unknown>
#11 0x558d03d1cac9 <unknown>
#12 0x558d03d3a9c8 <unknown>
#13 0x558d03d0134f <unknown>
#14 0x558d03d5ea28 <unknown>
#15 0x558d03d5ec06 <unknown>
#16 0x558d03d70336 <unknown>
#17 0x7f95c509caa4 <unknown>
#18 0x7f95c5129c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username1] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564fd911345a <unknown>
#1 0x564fd8bb8760 <unknown>
#2 0x564fd8bf30d8 <unknown>
#3 0x564fd8bee2cf <unknown>
#4 0x564fd8c3e8d6 <unknown>
#5 0x564fd8c3df96 <unknown>
#6 0x564fd8c2fc23 <unknown>
#7 0x564fd8bfc4a5 <unknown>
#8 0x564fd8bfd111 <unknown>
#9 0x564fd90d7f1b <unknown>
#10 0x564fd90dbe19 <unknown>
#11 0x564fd90beac9 <unknown>
#12 0x564fd90dc9c8 <unknown>
#13 0x564fd90a334f <unknown>
#14 0x564fd9100a28 <unknown>
#15 0x564fd9100c06 <unknown>
#16 0x564fd9112336 <unknown>
#17 0x7fc5ea69caa4 <unknown>
#18 0x7fc5ea729c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username2] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x562b25aaf45a <unknown>
#1 0x562b25554760 <unknown>
#2 0x562b2558f0d8 <unknown>
#3 0x562b2558a2cf <unknown>
#4 0x562b255da8d6 <unknown>
#5 0x562b255d9f96 <unknown>
#6 0x562b255cbc23 <unknown>
#7 0x562b255984a5 <unknown>
#8 0x562b25599111 <unknown>
#9 0x562b25a73f1b <unknown>
#10 0x562b25a77e19 <unknown>
#11 0x562b25a5aac9 <unknown>
#12 0x562b25a789c8 <unknown>
#13 0x562b25a3f34f <unknown>
#14 0x562b25a9ca28 <unknown>
#15 0x562b25a9cc06 <unknown>
#16 0x562b25aae336 <unknown>
#17 0x7f39a2e9caa4 <unknown>
#18 0x7f39a2f29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username3] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5655085f245a <unknown>
#1 0x565508097760 <unknown>
#2 0x5655080d20d8 <unknown>
#3 0x5655080cd2cf <unknown>
#4 0x56550811d8d6 <unknown>
#5 0x56550811cf96 <unknown>
#6 0x56550810ec23 <unknown>
#7 0x5655080db4a5 <unknown>
#8 0x5655080dc111 <unknown>
#9 0x5655085b6f1b <unknown>
#10 0x5655085bae19 <unknown>
#11 0x56550859dac9 <unknown>
#12 0x5655085bb9c8 <unknown>
#13 0x56550858234f <unknown>
#14 0x5655085dfa28 <unknown>
#15 0x5655085dfc06 <unknown>
#16 0x5655085f1336 <unknown>
#17 0x7fb99aa9caa4 <unknown>
#18 0x7fb99ab29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username4] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5617981b945a <unknown>
#1 0x561797c5e760 <unknown>
#2 0x561797c990d8 <unknown>
#3 0x561797c942cf <unknown>
#4 0x561797ce48d6 <unknown>
#5 0x561797ce3f96 <unknown>
#6 0x561797cd5c23 <unknown>
#7 0x561797ca24a5 <unknown>
#8 0x561797ca3111 <unknown>
#9 0x56179817df1b <unknown>
#10 0x561798181e19 <unknown>
#11 0x561798164ac9 <unknown>
#12 0x5617981829c8 <unknown>
#13 0x56179814934f <unknown>
#14 0x5617981a6a28 <unknown>
#15 0x5617981a6c06 <unknown>
#16 0x5617981b8336 <unknown>
#17 0x7fe00de9caa4 <unknown>
#18 0x7fe00df29c3c <unknown>
============================= 19 errors in 27.30s ==============================
--------------------------------------------
Test Run Finished: 2025-07-02 14:55:25
Duration: 29 seconds
Status: FAILURE
Exit Code: 1
============================================
========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-02 18:31:52
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.5/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.5', 'Platform': 'Linux-6.11.0-1015-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'metadata': '3.1.1', 'rerunfailures': '15.1', 'html': '4.1.1', 'Faker': '37.4.0', 'xdist': '3.8.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: metadata-3.1.1, rerunfailures-15.1, html-4.1.1, Faker-37.4.0, xdist-3.8.0
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ERROR [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] ERROR [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ERROR [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] ERROR [ 21%]
tests/test_login.py::test_invalid_email_login[username0] ERROR           [ 26%]
tests/test_login.py::test_invalid_email_login[username1] ERROR           [ 31%]
tests/test_login.py::test_invalid_email_login[username2] ERROR           [ 36%]
tests/test_login.py::test_invalid_email_login[username3] ERROR           [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] ERROR [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] ERROR [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] ERROR [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ERROR [ 63%]
tests/test_login.py::test_blank_username_validation ERROR                [ 68%]
tests/test_login.py::test_blank_password_validation ERROR                [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] ERROR      [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] ERROR      [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] ERROR      [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] ERROR      [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] ERROR      [100%]

==================================== ERRORS ====================================
_ ERROR at setup of test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef8c957f0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5573f3ad8336 \\u003Cunknown>\\n#17 0x7f5276c9caa4 \\u003Cunknown>\\n#18 0x7f5276d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5573f3ad945a <unknown>
E       #1 0x5573f357e760 <unknown>
E       #2 0x5573f35b90d8 <unknown>
E       #3 0x5573f35b42cf <unknown>
E       #4 0x5573f36048d6 <unknown>
E       #5 0x5573f3603f96 <unknown>
E       #6 0x5573f35f5c23 <unknown>
E       #7 0x5573f35c24a5 <unknown>
E       #8 0x5573f35c3111 <unknown>
E       #9 0x5573f3a9df1b <unknown>
E       #10 0x5573f3aa1e19 <unknown>
E       #11 0x5573f3a84ac9 <unknown>
E       #12 0x5573f3aa29c8 <unknown>
E       #13 0x5573f3a6934f <unknown>
E       #14 0x5573f3ac6a28 <unknown>
E       #15 0x5573f3ac6c06 <unknown>
E       #16 0x5573f3ad8336 <unknown>
E       #17 0x7f5276c9caa4 <unknown>
E       #18 0x7f5276d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5573f3ad945a <unknown>
E           #1 0x5573f357e760 <unknown>
E           #2 0x5573f35b90d8 <unknown>
E           #3 0x5573f35b42cf <unknown>
E           #4 0x5573f36048d6 <unknown>
E           #5 0x5573f3603f96 <unknown>
E           #6 0x5573f35f5c23 <unknown>
E           #7 0x5573f35c24a5 <unknown>
E           #8 0x5573f35c3111 <unknown>
E           #9 0x5573f3a9df1b <unknown>
E           #10 0x5573f3aa1e19 <unknown>
E           #11 0x5573f3a84ac9 <unknown>
E           #12 0x5573f3aa29c8 <unknown>
E           #13 0x5573f3a6934f <unknown>
E           #14 0x5573f3ac6a28 <unknown>
E           #15 0x5573f3ac6c06 <unknown>
E           #16 0x5573f3ad8336 <unknown>
E           #17 0x7f5276c9caa4 <unknown>
E           #18 0x7f5276d29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:31:55,670 - INFO - Test data loaded successfully.
2025-07-02 18:31:55,670 - INFO - Starting test with Chrome browser
2025-07-02 18:31:55,670 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:01,798 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:01,812 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:01,824 - INFO - There is no [linux64] chromedriver "137.0.7151.119" for browser google-chrome "137.0.7151" in cache
2025-07-02 18:32:01,824 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:01,862 - INFO - WebDriver version 137.0.7151.119 selected
2025-07-02 18:32:01,865 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
2025-07-02 18:32:01,866 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
2025-07-02 18:32:01,879 - INFO - Driver downloading response is 200
2025-07-02 18:32:01,920 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:02,046 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119]
2025-07-02 18:32:05,313 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5573f3ad945a <unknown>
#1 0x5573f357e760 <unknown>
#2 0x5573f35b90d8 <unknown>
#3 0x5573f35b42cf <unknown>
#4 0x5573f36048d6 <unknown>
#5 0x5573f3603f96 <unknown>
#6 0x5573f35f5c23 <unknown>
#7 0x5573f35c24a5 <unknown>
#8 0x5573f35c3111 <unknown>
#9 0x5573f3a9df1b <unknown>
#10 0x5573f3aa1e19 <unknown>
#11 0x5573f3a84ac9 <unknown>
#12 0x5573f3aa29c8 <unknown>
#13 0x5573f3a6934f <unknown>
#14 0x5573f3ac6a28 <unknown>
#15 0x5573f3ac6c06 <unknown>
#16 0x5573f3ad8336 <unknown>
#17 0x7f5276c9caa4 <unknown>
#18 0x7f5276d29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "137.0.7151.119" for browser google-chrome "137.0.7151" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 137.0.7151.119 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119]
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5573f3ad945a <unknown>
#1 0x5573f357e760 <unknown>
#2 0x5573f35b90d8 <unknown>
#3 0x5573f35b42cf <unknown>
#4 0x5573f36048d6 <unknown>
#5 0x5573f3603f96 <unknown>
#6 0x5573f35f5c23 <unknown>
#7 0x5573f35c24a5 <unknown>
#8 0x5573f35c3111 <unknown>
#9 0x5573f3a9df1b <unknown>
#10 0x5573f3aa1e19 <unknown>
#11 0x5573f3a84ac9 <unknown>
#12 0x5573f3aa29c8 <unknown>
#13 0x5573f3a6934f <unknown>
#14 0x5573f3ac6a28 <unknown>
#15 0x5573f3ac6c06 <unknown>
#16 0x5573f3ad8336 <unknown>
#17 0x7f5276c9caa4 <unknown>
#18 0x7f5276d29c3c <unknown>
____ ERROR at setup of test_valid_login[samatakamble9@gmail.com-Samata@16] _____

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef8ca2e90>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5575e3fa0336 \\u003Cunknown>\\n#17 0x7f53e229caa4 \\u003Cunknown>\\n#18 0x7f53e2329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5575e3fa145a <unknown>
E       #1 0x5575e3a46760 <unknown>
E       #2 0x5575e3a810d8 <unknown>
E       #3 0x5575e3a7c2cf <unknown>
E       #4 0x5575e3acc8d6 <unknown>
E       #5 0x5575e3acbf96 <unknown>
E       #6 0x5575e3abdc23 <unknown>
E       #7 0x5575e3a8a4a5 <unknown>
E       #8 0x5575e3a8b111 <unknown>
E       #9 0x5575e3f65f1b <unknown>
E       #10 0x5575e3f69e19 <unknown>
E       #11 0x5575e3f4cac9 <unknown>
E       #12 0x5575e3f6a9c8 <unknown>
E       #13 0x5575e3f3134f <unknown>
E       #14 0x5575e3f8ea28 <unknown>
E       #15 0x5575e3f8ec06 <unknown>
E       #16 0x5575e3fa0336 <unknown>
E       #17 0x7f53e229caa4 <unknown>
E       #18 0x7f53e2329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5575e3fa145a <unknown>
E           #1 0x5575e3a46760 <unknown>
E           #2 0x5575e3a810d8 <unknown>
E           #3 0x5575e3a7c2cf <unknown>
E           #4 0x5575e3acc8d6 <unknown>
E           #5 0x5575e3acbf96 <unknown>
E           #6 0x5575e3abdc23 <unknown>
E           #7 0x5575e3a8a4a5 <unknown>
E           #8 0x5575e3a8b111 <unknown>
E           #9 0x5575e3f65f1b <unknown>
E           #10 0x5575e3f69e19 <unknown>
E           #11 0x5575e3f4cac9 <unknown>
E           #12 0x5575e3f6a9c8 <unknown>
E           #13 0x5575e3f3134f <unknown>
E           #14 0x5575e3f8ea28 <unknown>
E           #15 0x5575e3f8ec06 <unknown>
E           #16 0x5575e3fa0336 <unknown>
E           #17 0x7f53e229caa4 <unknown>
E           #18 0x7f53e2329c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:05,384 - INFO - Starting test with Chrome browser
2025-07-02 18:32:05,385 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:05,492 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:05,505 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:05,536 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:06,627 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5575e3fa145a <unknown>
#1 0x5575e3a46760 <unknown>
#2 0x5575e3a810d8 <unknown>
#3 0x5575e3a7c2cf <unknown>
#4 0x5575e3acc8d6 <unknown>
#5 0x5575e3acbf96 <unknown>
#6 0x5575e3abdc23 <unknown>
#7 0x5575e3a8a4a5 <unknown>
#8 0x5575e3a8b111 <unknown>
#9 0x5575e3f65f1b <unknown>
#10 0x5575e3f69e19 <unknown>
#11 0x5575e3f4cac9 <unknown>
#12 0x5575e3f6a9c8 <unknown>
#13 0x5575e3f3134f <unknown>
#14 0x5575e3f8ea28 <unknown>
#15 0x5575e3f8ec06 <unknown>
#16 0x5575e3fa0336 <unknown>
#17 0x7f53e229caa4 <unknown>
#18 0x7f53e2329c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5575e3fa145a <unknown>
#1 0x5575e3a46760 <unknown>
#2 0x5575e3a810d8 <unknown>
#3 0x5575e3a7c2cf <unknown>
#4 0x5575e3acc8d6 <unknown>
#5 0x5575e3acbf96 <unknown>
#6 0x5575e3abdc23 <unknown>
#7 0x5575e3a8a4a5 <unknown>
#8 0x5575e3a8b111 <unknown>
#9 0x5575e3f65f1b <unknown>
#10 0x5575e3f69e19 <unknown>
#11 0x5575e3f4cac9 <unknown>
#12 0x5575e3f6a9c8 <unknown>
#13 0x5575e3f3134f <unknown>
#14 0x5575e3f8ea28 <unknown>
#15 0x5575e3f8ec06 <unknown>
#16 0x5575e3fa0336 <unknown>
#17 0x7f53e229caa4 <unknown>
#18 0x7f53e2329c3c <unknown>
__ ERROR at setup of test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ___

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef7c94690>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55cc4cf83336 \\u003Cunknown>\\n#17 0x7faf08a9caa4 \\u003Cunknown>\\n#18 0x7faf08b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55cc4cf8445a <unknown>
E       #1 0x55cc4ca29760 <unknown>
E       #2 0x55cc4ca640d8 <unknown>
E       #3 0x55cc4ca5f2cf <unknown>
E       #4 0x55cc4caaf8d6 <unknown>
E       #5 0x55cc4caaef96 <unknown>
E       #6 0x55cc4caa0c23 <unknown>
E       #7 0x55cc4ca6d4a5 <unknown>
E       #8 0x55cc4ca6e111 <unknown>
E       #9 0x55cc4cf48f1b <unknown>
E       #10 0x55cc4cf4ce19 <unknown>
E       #11 0x55cc4cf2fac9 <unknown>
E       #12 0x55cc4cf4d9c8 <unknown>
E       #13 0x55cc4cf1434f <unknown>
E       #14 0x55cc4cf71a28 <unknown>
E       #15 0x55cc4cf71c06 <unknown>
E       #16 0x55cc4cf83336 <unknown>
E       #17 0x7faf08a9caa4 <unknown>
E       #18 0x7faf08b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55cc4cf8445a <unknown>
E           #1 0x55cc4ca29760 <unknown>
E           #2 0x55cc4ca640d8 <unknown>
E           #3 0x55cc4ca5f2cf <unknown>
E           #4 0x55cc4caaf8d6 <unknown>
E           #5 0x55cc4caaef96 <unknown>
E           #6 0x55cc4caa0c23 <unknown>
E           #7 0x55cc4ca6d4a5 <unknown>
E           #8 0x55cc4ca6e111 <unknown>
E           #9 0x55cc4cf48f1b <unknown>
E           #10 0x55cc4cf4ce19 <unknown>
E           #11 0x55cc4cf2fac9 <unknown>
E           #12 0x55cc4cf4d9c8 <unknown>
E           #13 0x55cc4cf1434f <unknown>
E           #14 0x55cc4cf71a28 <unknown>
E           #15 0x55cc4cf71c06 <unknown>
E           #16 0x55cc4cf83336 <unknown>
E           #17 0x7faf08a9caa4 <unknown>
E           #18 0x7faf08b29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:06,666 - INFO - Starting test with Chrome browser
2025-07-02 18:32:06,666 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:06,776 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:06,786 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:06,795 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:07,885 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55cc4cf8445a <unknown>
#1 0x55cc4ca29760 <unknown>
#2 0x55cc4ca640d8 <unknown>
#3 0x55cc4ca5f2cf <unknown>
#4 0x55cc4caaf8d6 <unknown>
#5 0x55cc4caaef96 <unknown>
#6 0x55cc4caa0c23 <unknown>
#7 0x55cc4ca6d4a5 <unknown>
#8 0x55cc4ca6e111 <unknown>
#9 0x55cc4cf48f1b <unknown>
#10 0x55cc4cf4ce19 <unknown>
#11 0x55cc4cf2fac9 <unknown>
#12 0x55cc4cf4d9c8 <unknown>
#13 0x55cc4cf1434f <unknown>
#14 0x55cc4cf71a28 <unknown>
#15 0x55cc4cf71c06 <unknown>
#16 0x55cc4cf83336 <unknown>
#17 0x7faf08a9caa4 <unknown>
#18 0x7faf08b29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55cc4cf8445a <unknown>
#1 0x55cc4ca29760 <unknown>
#2 0x55cc4ca640d8 <unknown>
#3 0x55cc4ca5f2cf <unknown>
#4 0x55cc4caaf8d6 <unknown>
#5 0x55cc4caaef96 <unknown>
#6 0x55cc4caa0c23 <unknown>
#7 0x55cc4ca6d4a5 <unknown>
#8 0x55cc4ca6e111 <unknown>
#9 0x55cc4cf48f1b <unknown>
#10 0x55cc4cf4ce19 <unknown>
#11 0x55cc4cf2fac9 <unknown>
#12 0x55cc4cf4d9c8 <unknown>
#13 0x55cc4cf1434f <unknown>
#14 0x55cc4cf71a28 <unknown>
#15 0x55cc4cf71c06 <unknown>
#16 0x55cc4cf83336 <unknown>
#17 0x7faf08a9caa4 <unknown>
#18 0x7faf08b29c3c <unknown>
_ ERROR at setup of test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef7cd8770>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55ed8efe4336 \\u003Cunknown>\\n#17 0x7fc6b769caa4 \\u003Cunknown>\\n#18 0x7fc6b7729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55ed8efe545a <unknown>
E       #1 0x55ed8ea8a760 <unknown>
E       #2 0x55ed8eac50d8 <unknown>
E       #3 0x55ed8eac02cf <unknown>
E       #4 0x55ed8eb108d6 <unknown>
E       #5 0x55ed8eb0ff96 <unknown>
E       #6 0x55ed8eb01c23 <unknown>
E       #7 0x55ed8eace4a5 <unknown>
E       #8 0x55ed8eacf111 <unknown>
E       #9 0x55ed8efa9f1b <unknown>
E       #10 0x55ed8efade19 <unknown>
E       #11 0x55ed8ef90ac9 <unknown>
E       #12 0x55ed8efae9c8 <unknown>
E       #13 0x55ed8ef7534f <unknown>
E       #14 0x55ed8efd2a28 <unknown>
E       #15 0x55ed8efd2c06 <unknown>
E       #16 0x55ed8efe4336 <unknown>
E       #17 0x7fc6b769caa4 <unknown>
E       #18 0x7fc6b7729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55ed8efe545a <unknown>
E           #1 0x55ed8ea8a760 <unknown>
E           #2 0x55ed8eac50d8 <unknown>
E           #3 0x55ed8eac02cf <unknown>
E           #4 0x55ed8eb108d6 <unknown>
E           #5 0x55ed8eb0ff96 <unknown>
E           #6 0x55ed8eb01c23 <unknown>
E           #7 0x55ed8eace4a5 <unknown>
E           #8 0x55ed8eacf111 <unknown>
E           #9 0x55ed8efa9f1b <unknown>
E           #10 0x55ed8efade19 <unknown>
E           #11 0x55ed8ef90ac9 <unknown>
E           #12 0x55ed8efae9c8 <unknown>
E           #13 0x55ed8ef7534f <unknown>
E           #14 0x55ed8efd2a28 <unknown>
E           #15 0x55ed8efd2c06 <unknown>
E           #16 0x55ed8efe4336 <unknown>
E           #17 0x7fc6b769caa4 <unknown>
E           #18 0x7fc6b7729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:07,922 - INFO - Starting test with Chrome browser
2025-07-02 18:32:07,922 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:08,030 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:08,045 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:08,057 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:09,149 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ed8efe545a <unknown>
#1 0x55ed8ea8a760 <unknown>
#2 0x55ed8eac50d8 <unknown>
#3 0x55ed8eac02cf <unknown>
#4 0x55ed8eb108d6 <unknown>
#5 0x55ed8eb0ff96 <unknown>
#6 0x55ed8eb01c23 <unknown>
#7 0x55ed8eace4a5 <unknown>
#8 0x55ed8eacf111 <unknown>
#9 0x55ed8efa9f1b <unknown>
#10 0x55ed8efade19 <unknown>
#11 0x55ed8ef90ac9 <unknown>
#12 0x55ed8efae9c8 <unknown>
#13 0x55ed8ef7534f <unknown>
#14 0x55ed8efd2a28 <unknown>
#15 0x55ed8efd2c06 <unknown>
#16 0x55ed8efe4336 <unknown>
#17 0x7fc6b769caa4 <unknown>
#18 0x7fc6b7729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ed8efe545a <unknown>
#1 0x55ed8ea8a760 <unknown>
#2 0x55ed8eac50d8 <unknown>
#3 0x55ed8eac02cf <unknown>
#4 0x55ed8eb108d6 <unknown>
#5 0x55ed8eb0ff96 <unknown>
#6 0x55ed8eb01c23 <unknown>
#7 0x55ed8eace4a5 <unknown>
#8 0x55ed8eacf111 <unknown>
#9 0x55ed8efa9f1b <unknown>
#10 0x55ed8efade19 <unknown>
#11 0x55ed8ef90ac9 <unknown>
#12 0x55ed8efae9c8 <unknown>
#13 0x55ed8ef7534f <unknown>
#14 0x55ed8efd2a28 <unknown>
#15 0x55ed8efd2c06 <unknown>
#16 0x55ed8efe4336 <unknown>
#17 0x7fc6b769caa4 <unknown>
#18 0x7fc6b7729c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username0] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef7cd9940>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x564a7d289336 \\u003Cunknown>\\n#17 0x7f3a98a9caa4 \\u003Cunknown>\\n#18 0x7f3a98b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x564a7d28a45a <unknown>
E       #1 0x564a7cd2f760 <unknown>
E       #2 0x564a7cd6a0d8 <unknown>
E       #3 0x564a7cd652cf <unknown>
E       #4 0x564a7cdb58d6 <unknown>
E       #5 0x564a7cdb4f96 <unknown>
E       #6 0x564a7cda6c23 <unknown>
E       #7 0x564a7cd734a5 <unknown>
E       #8 0x564a7cd74111 <unknown>
E       #9 0x564a7d24ef1b <unknown>
E       #10 0x564a7d252e19 <unknown>
E       #11 0x564a7d235ac9 <unknown>
E       #12 0x564a7d2539c8 <unknown>
E       #13 0x564a7d21a34f <unknown>
E       #14 0x564a7d277a28 <unknown>
E       #15 0x564a7d277c06 <unknown>
E       #16 0x564a7d289336 <unknown>
E       #17 0x7f3a98a9caa4 <unknown>
E       #18 0x7f3a98b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x564a7d28a45a <unknown>
E           #1 0x564a7cd2f760 <unknown>
E           #2 0x564a7cd6a0d8 <unknown>
E           #3 0x564a7cd652cf <unknown>
E           #4 0x564a7cdb58d6 <unknown>
E           #5 0x564a7cdb4f96 <unknown>
E           #6 0x564a7cda6c23 <unknown>
E           #7 0x564a7cd734a5 <unknown>
E           #8 0x564a7cd74111 <unknown>
E           #9 0x564a7d24ef1b <unknown>
E           #10 0x564a7d252e19 <unknown>
E           #11 0x564a7d235ac9 <unknown>
E           #12 0x564a7d2539c8 <unknown>
E           #13 0x564a7d21a34f <unknown>
E           #14 0x564a7d277a28 <unknown>
E           #15 0x564a7d277c06 <unknown>
E           #16 0x564a7d289336 <unknown>
E           #17 0x7f3a98a9caa4 <unknown>
E           #18 0x7f3a98b29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:09,186 - INFO - Starting test with Chrome browser
2025-07-02 18:32:09,186 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:09,293 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:09,306 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:09,315 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:10,405 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564a7d28a45a <unknown>
#1 0x564a7cd2f760 <unknown>
#2 0x564a7cd6a0d8 <unknown>
#3 0x564a7cd652cf <unknown>
#4 0x564a7cdb58d6 <unknown>
#5 0x564a7cdb4f96 <unknown>
#6 0x564a7cda6c23 <unknown>
#7 0x564a7cd734a5 <unknown>
#8 0x564a7cd74111 <unknown>
#9 0x564a7d24ef1b <unknown>
#10 0x564a7d252e19 <unknown>
#11 0x564a7d235ac9 <unknown>
#12 0x564a7d2539c8 <unknown>
#13 0x564a7d21a34f <unknown>
#14 0x564a7d277a28 <unknown>
#15 0x564a7d277c06 <unknown>
#16 0x564a7d289336 <unknown>
#17 0x7f3a98a9caa4 <unknown>
#18 0x7f3a98b29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564a7d28a45a <unknown>
#1 0x564a7cd2f760 <unknown>
#2 0x564a7cd6a0d8 <unknown>
#3 0x564a7cd652cf <unknown>
#4 0x564a7cdb58d6 <unknown>
#5 0x564a7cdb4f96 <unknown>
#6 0x564a7cda6c23 <unknown>
#7 0x564a7cd734a5 <unknown>
#8 0x564a7cd74111 <unknown>
#9 0x564a7d24ef1b <unknown>
#10 0x564a7d252e19 <unknown>
#11 0x564a7d235ac9 <unknown>
#12 0x564a7d2539c8 <unknown>
#13 0x564a7d21a34f <unknown>
#14 0x564a7d277a28 <unknown>
#15 0x564a7d277c06 <unknown>
#16 0x564a7d289336 <unknown>
#17 0x7f3a98a9caa4 <unknown>
#18 0x7f3a98b29c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username1] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef9bf4830>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55c5711cc336 \\u003Cunknown>\\n#17 0x7faedac9caa4 \\u003Cunknown>\\n#18 0x7faedad29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55c5711cd45a <unknown>
E       #1 0x55c570c72760 <unknown>
E       #2 0x55c570cad0d8 <unknown>
E       #3 0x55c570ca82cf <unknown>
E       #4 0x55c570cf88d6 <unknown>
E       #5 0x55c570cf7f96 <unknown>
E       #6 0x55c570ce9c23 <unknown>
E       #7 0x55c570cb64a5 <unknown>
E       #8 0x55c570cb7111 <unknown>
E       #9 0x55c571191f1b <unknown>
E       #10 0x55c571195e19 <unknown>
E       #11 0x55c571178ac9 <unknown>
E       #12 0x55c5711969c8 <unknown>
E       #13 0x55c57115d34f <unknown>
E       #14 0x55c5711baa28 <unknown>
E       #15 0x55c5711bac06 <unknown>
E       #16 0x55c5711cc336 <unknown>
E       #17 0x7faedac9caa4 <unknown>
E       #18 0x7faedad29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55c5711cd45a <unknown>
E           #1 0x55c570c72760 <unknown>
E           #2 0x55c570cad0d8 <unknown>
E           #3 0x55c570ca82cf <unknown>
E           #4 0x55c570cf88d6 <unknown>
E           #5 0x55c570cf7f96 <unknown>
E           #6 0x55c570ce9c23 <unknown>
E           #7 0x55c570cb64a5 <unknown>
E           #8 0x55c570cb7111 <unknown>
E           #9 0x55c571191f1b <unknown>
E           #10 0x55c571195e19 <unknown>
E           #11 0x55c571178ac9 <unknown>
E           #12 0x55c5711969c8 <unknown>
E           #13 0x55c57115d34f <unknown>
E           #14 0x55c5711baa28 <unknown>
E           #15 0x55c5711bac06 <unknown>
E           #16 0x55c5711cc336 <unknown>
E           #17 0x7faedac9caa4 <unknown>
E           #18 0x7faedad29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:10,442 - INFO - Starting test with Chrome browser
2025-07-02 18:32:10,442 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:10,549 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:10,559 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:10,571 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:11,662 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55c5711cd45a <unknown>
#1 0x55c570c72760 <unknown>
#2 0x55c570cad0d8 <unknown>
#3 0x55c570ca82cf <unknown>
#4 0x55c570cf88d6 <unknown>
#5 0x55c570cf7f96 <unknown>
#6 0x55c570ce9c23 <unknown>
#7 0x55c570cb64a5 <unknown>
#8 0x55c570cb7111 <unknown>
#9 0x55c571191f1b <unknown>
#10 0x55c571195e19 <unknown>
#11 0x55c571178ac9 <unknown>
#12 0x55c5711969c8 <unknown>
#13 0x55c57115d34f <unknown>
#14 0x55c5711baa28 <unknown>
#15 0x55c5711bac06 <unknown>
#16 0x55c5711cc336 <unknown>
#17 0x7faedac9caa4 <unknown>
#18 0x7faedad29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55c5711cd45a <unknown>
#1 0x55c570c72760 <unknown>
#2 0x55c570cad0d8 <unknown>
#3 0x55c570ca82cf <unknown>
#4 0x55c570cf88d6 <unknown>
#5 0x55c570cf7f96 <unknown>
#6 0x55c570ce9c23 <unknown>
#7 0x55c570cb64a5 <unknown>
#8 0x55c570cb7111 <unknown>
#9 0x55c571191f1b <unknown>
#10 0x55c571195e19 <unknown>
#11 0x55c571178ac9 <unknown>
#12 0x55c5711969c8 <unknown>
#13 0x55c57115d34f <unknown>
#14 0x55c5711baa28 <unknown>
#15 0x55c5711bac06 <unknown>
#16 0x55c5711cc336 <unknown>
#17 0x7faedac9caa4 <unknown>
#18 0x7faedad29c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username2] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef8c66690>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55e149bb4336 \\u003Cunknown>\\n#17 0x7f130e09caa4 \\u003Cunknown>\\n#18 0x7f130e129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55e149bb545a <unknown>
E       #1 0x55e14965a760 <unknown>
E       #2 0x55e1496950d8 <unknown>
E       #3 0x55e1496902cf <unknown>
E       #4 0x55e1496e08d6 <unknown>
E       #5 0x55e1496dff96 <unknown>
E       #6 0x55e1496d1c23 <unknown>
E       #7 0x55e14969e4a5 <unknown>
E       #8 0x55e14969f111 <unknown>
E       #9 0x55e149b79f1b <unknown>
E       #10 0x55e149b7de19 <unknown>
E       #11 0x55e149b60ac9 <unknown>
E       #12 0x55e149b7e9c8 <unknown>
E       #13 0x55e149b4534f <unknown>
E       #14 0x55e149ba2a28 <unknown>
E       #15 0x55e149ba2c06 <unknown>
E       #16 0x55e149bb4336 <unknown>
E       #17 0x7f130e09caa4 <unknown>
E       #18 0x7f130e129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55e149bb545a <unknown>
E           #1 0x55e14965a760 <unknown>
E           #2 0x55e1496950d8 <unknown>
E           #3 0x55e1496902cf <unknown>
E           #4 0x55e1496e08d6 <unknown>
E           #5 0x55e1496dff96 <unknown>
E           #6 0x55e1496d1c23 <unknown>
E           #7 0x55e14969e4a5 <unknown>
E           #8 0x55e14969f111 <unknown>
E           #9 0x55e149b79f1b <unknown>
E           #10 0x55e149b7de19 <unknown>
E           #11 0x55e149b60ac9 <unknown>
E           #12 0x55e149b7e9c8 <unknown>
E           #13 0x55e149b4534f <unknown>
E           #14 0x55e149ba2a28 <unknown>
E           #15 0x55e149ba2c06 <unknown>
E           #16 0x55e149bb4336 <unknown>
E           #17 0x7f130e09caa4 <unknown>
E           #18 0x7f130e129c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:11,700 - INFO - Starting test with Chrome browser
2025-07-02 18:32:11,700 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:11,807 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:11,818 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:11,829 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:12,920 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55e149bb545a <unknown>
#1 0x55e14965a760 <unknown>
#2 0x55e1496950d8 <unknown>
#3 0x55e1496902cf <unknown>
#4 0x55e1496e08d6 <unknown>
#5 0x55e1496dff96 <unknown>
#6 0x55e1496d1c23 <unknown>
#7 0x55e14969e4a5 <unknown>
#8 0x55e14969f111 <unknown>
#9 0x55e149b79f1b <unknown>
#10 0x55e149b7de19 <unknown>
#11 0x55e149b60ac9 <unknown>
#12 0x55e149b7e9c8 <unknown>
#13 0x55e149b4534f <unknown>
#14 0x55e149ba2a28 <unknown>
#15 0x55e149ba2c06 <unknown>
#16 0x55e149bb4336 <unknown>
#17 0x7f130e09caa4 <unknown>
#18 0x7f130e129c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55e149bb545a <unknown>
#1 0x55e14965a760 <unknown>
#2 0x55e1496950d8 <unknown>
#3 0x55e1496902cf <unknown>
#4 0x55e1496e08d6 <unknown>
#5 0x55e1496dff96 <unknown>
#6 0x55e1496d1c23 <unknown>
#7 0x55e14969e4a5 <unknown>
#8 0x55e14969f111 <unknown>
#9 0x55e149b79f1b <unknown>
#10 0x55e149b7de19 <unknown>
#11 0x55e149b60ac9 <unknown>
#12 0x55e149b7e9c8 <unknown>
#13 0x55e149b4534f <unknown>
#14 0x55e149ba2a28 <unknown>
#15 0x55e149ba2c06 <unknown>
#16 0x55e149bb4336 <unknown>
#17 0x7f130e09caa4 <unknown>
#18 0x7f130e129c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username3] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef9bfacf0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55842e1ff336 \\u003Cunknown>\\n#17 0x7fceed09caa4 \\u003Cunknown>\\n#18 0x7fceed129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55842e20045a <unknown>
E       #1 0x55842dca5760 <unknown>
E       #2 0x55842dce00d8 <unknown>
E       #3 0x55842dcdb2cf <unknown>
E       #4 0x55842dd2b8d6 <unknown>
E       #5 0x55842dd2af96 <unknown>
E       #6 0x55842dd1cc23 <unknown>
E       #7 0x55842dce94a5 <unknown>
E       #8 0x55842dcea111 <unknown>
E       #9 0x55842e1c4f1b <unknown>
E       #10 0x55842e1c8e19 <unknown>
E       #11 0x55842e1abac9 <unknown>
E       #12 0x55842e1c99c8 <unknown>
E       #13 0x55842e19034f <unknown>
E       #14 0x55842e1eda28 <unknown>
E       #15 0x55842e1edc06 <unknown>
E       #16 0x55842e1ff336 <unknown>
E       #17 0x7fceed09caa4 <unknown>
E       #18 0x7fceed129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55842e20045a <unknown>
E           #1 0x55842dca5760 <unknown>
E           #2 0x55842dce00d8 <unknown>
E           #3 0x55842dcdb2cf <unknown>
E           #4 0x55842dd2b8d6 <unknown>
E           #5 0x55842dd2af96 <unknown>
E           #6 0x55842dd1cc23 <unknown>
E           #7 0x55842dce94a5 <unknown>
E           #8 0x55842dcea111 <unknown>
E           #9 0x55842e1c4f1b <unknown>
E           #10 0x55842e1c8e19 <unknown>
E           #11 0x55842e1abac9 <unknown>
E           #12 0x55842e1c99c8 <unknown>
E           #13 0x55842e19034f <unknown>
E           #14 0x55842e1eda28 <unknown>
E           #15 0x55842e1edc06 <unknown>
E           #16 0x55842e1ff336 <unknown>
E           #17 0x7fceed09caa4 <unknown>
E           #18 0x7fceed129c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:12,958 - INFO - Starting test with Chrome browser
2025-07-02 18:32:12,958 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:13,066 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:13,079 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:13,089 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:14,180 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55842e20045a <unknown>
#1 0x55842dca5760 <unknown>
#2 0x55842dce00d8 <unknown>
#3 0x55842dcdb2cf <unknown>
#4 0x55842dd2b8d6 <unknown>
#5 0x55842dd2af96 <unknown>
#6 0x55842dd1cc23 <unknown>
#7 0x55842dce94a5 <unknown>
#8 0x55842dcea111 <unknown>
#9 0x55842e1c4f1b <unknown>
#10 0x55842e1c8e19 <unknown>
#11 0x55842e1abac9 <unknown>
#12 0x55842e1c99c8 <unknown>
#13 0x55842e19034f <unknown>
#14 0x55842e1eda28 <unknown>
#15 0x55842e1edc06 <unknown>
#16 0x55842e1ff336 <unknown>
#17 0x7fceed09caa4 <unknown>
#18 0x7fceed129c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55842e20045a <unknown>
#1 0x55842dca5760 <unknown>
#2 0x55842dce00d8 <unknown>
#3 0x55842dcdb2cf <unknown>
#4 0x55842dd2b8d6 <unknown>
#5 0x55842dd2af96 <unknown>
#6 0x55842dd1cc23 <unknown>
#7 0x55842dce94a5 <unknown>
#8 0x55842dcea111 <unknown>
#9 0x55842e1c4f1b <unknown>
#10 0x55842e1c8e19 <unknown>
#11 0x55842e1abac9 <unknown>
#12 0x55842e1c99c8 <unknown>
#13 0x55842e19034f <unknown>
#14 0x55842e1eda28 <unknown>
#15 0x55842e1edc06 <unknown>
#16 0x55842e1ff336 <unknown>
#17 0x7fceed09caa4 <unknown>
#18 0x7fceed129c3c <unknown>
_ ERROR at setup of test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef8c7cb50>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x564d0a308336 \\u003Cunknown>\\n#17 0x7fd7dbe9caa4 \\u003Cunknown>\\n#18 0x7fd7dbf29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x564d0a30945a <unknown>
E       #1 0x564d09dae760 <unknown>
E       #2 0x564d09de90d8 <unknown>
E       #3 0x564d09de42cf <unknown>
E       #4 0x564d09e348d6 <unknown>
E       #5 0x564d09e33f96 <unknown>
E       #6 0x564d09e25c23 <unknown>
E       #7 0x564d09df24a5 <unknown>
E       #8 0x564d09df3111 <unknown>
E       #9 0x564d0a2cdf1b <unknown>
E       #10 0x564d0a2d1e19 <unknown>
E       #11 0x564d0a2b4ac9 <unknown>
E       #12 0x564d0a2d29c8 <unknown>
E       #13 0x564d0a29934f <unknown>
E       #14 0x564d0a2f6a28 <unknown>
E       #15 0x564d0a2f6c06 <unknown>
E       #16 0x564d0a308336 <unknown>
E       #17 0x7fd7dbe9caa4 <unknown>
E       #18 0x7fd7dbf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x564d0a30945a <unknown>
E           #1 0x564d09dae760 <unknown>
E           #2 0x564d09de90d8 <unknown>
E           #3 0x564d09de42cf <unknown>
E           #4 0x564d09e348d6 <unknown>
E           #5 0x564d09e33f96 <unknown>
E           #6 0x564d09e25c23 <unknown>
E           #7 0x564d09df24a5 <unknown>
E           #8 0x564d09df3111 <unknown>
E           #9 0x564d0a2cdf1b <unknown>
E           #10 0x564d0a2d1e19 <unknown>
E           #11 0x564d0a2b4ac9 <unknown>
E           #12 0x564d0a2d29c8 <unknown>
E           #13 0x564d0a29934f <unknown>
E           #14 0x564d0a2f6a28 <unknown>
E           #15 0x564d0a2f6c06 <unknown>
E           #16 0x564d0a308336 <unknown>
E           #17 0x7fd7dbe9caa4 <unknown>
E           #18 0x7fd7dbf29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:14,217 - INFO - Starting test with Chrome browser
2025-07-02 18:32:14,218 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:14,325 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:14,339 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:14,348 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:15,438 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564d0a30945a <unknown>
#1 0x564d09dae760 <unknown>
#2 0x564d09de90d8 <unknown>
#3 0x564d09de42cf <unknown>
#4 0x564d09e348d6 <unknown>
#5 0x564d09e33f96 <unknown>
#6 0x564d09e25c23 <unknown>
#7 0x564d09df24a5 <unknown>
#8 0x564d09df3111 <unknown>
#9 0x564d0a2cdf1b <unknown>
#10 0x564d0a2d1e19 <unknown>
#11 0x564d0a2b4ac9 <unknown>
#12 0x564d0a2d29c8 <unknown>
#13 0x564d0a29934f <unknown>
#14 0x564d0a2f6a28 <unknown>
#15 0x564d0a2f6c06 <unknown>
#16 0x564d0a308336 <unknown>
#17 0x7fd7dbe9caa4 <unknown>
#18 0x7fd7dbf29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564d0a30945a <unknown>
#1 0x564d09dae760 <unknown>
#2 0x564d09de90d8 <unknown>
#3 0x564d09de42cf <unknown>
#4 0x564d09e348d6 <unknown>
#5 0x564d09e33f96 <unknown>
#6 0x564d09e25c23 <unknown>
#7 0x564d09df24a5 <unknown>
#8 0x564d09df3111 <unknown>
#9 0x564d0a2cdf1b <unknown>
#10 0x564d0a2d1e19 <unknown>
#11 0x564d0a2b4ac9 <unknown>
#12 0x564d0a2d29c8 <unknown>
#13 0x564d0a29934f <unknown>
#14 0x564d0a2f6a28 <unknown>
#15 0x564d0a2f6c06 <unknown>
#16 0x564d0a308336 <unknown>
#17 0x7fd7dbe9caa4 <unknown>
#18 0x7fd7dbf29c3c <unknown>
_ ERROR at setup of test_invalid_password_login[samatakamble9@gmail.com-Password@12] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef8c7f150>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5650d4575336 \\u003Cunknown>\\n#17 0x7f8970a9caa4 \\u003Cunknown>\\n#18 0x7f8970b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5650d457645a <unknown>
E       #1 0x5650d401b760 <unknown>
E       #2 0x5650d40560d8 <unknown>
E       #3 0x5650d40512cf <unknown>
E       #4 0x5650d40a18d6 <unknown>
E       #5 0x5650d40a0f96 <unknown>
E       #6 0x5650d4092c23 <unknown>
E       #7 0x5650d405f4a5 <unknown>
E       #8 0x5650d4060111 <unknown>
E       #9 0x5650d453af1b <unknown>
E       #10 0x5650d453ee19 <unknown>
E       #11 0x5650d4521ac9 <unknown>
E       #12 0x5650d453f9c8 <unknown>
E       #13 0x5650d450634f <unknown>
E       #14 0x5650d4563a28 <unknown>
E       #15 0x5650d4563c06 <unknown>
E       #16 0x5650d4575336 <unknown>
E       #17 0x7f8970a9caa4 <unknown>
E       #18 0x7f8970b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5650d457645a <unknown>
E           #1 0x5650d401b760 <unknown>
E           #2 0x5650d40560d8 <unknown>
E           #3 0x5650d40512cf <unknown>
E           #4 0x5650d40a18d6 <unknown>
E           #5 0x5650d40a0f96 <unknown>
E           #6 0x5650d4092c23 <unknown>
E           #7 0x5650d405f4a5 <unknown>
E           #8 0x5650d4060111 <unknown>
E           #9 0x5650d453af1b <unknown>
E           #10 0x5650d453ee19 <unknown>
E           #11 0x5650d4521ac9 <unknown>
E           #12 0x5650d453f9c8 <unknown>
E           #13 0x5650d450634f <unknown>
E           #14 0x5650d4563a28 <unknown>
E           #15 0x5650d4563c06 <unknown>
E           #16 0x5650d4575336 <unknown>
E           #17 0x7f8970a9caa4 <unknown>
E           #18 0x7f8970b29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:15,476 - INFO - Starting test with Chrome browser
2025-07-02 18:32:15,476 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:15,583 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:15,595 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:15,605 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:16,695 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5650d457645a <unknown>
#1 0x5650d401b760 <unknown>
#2 0x5650d40560d8 <unknown>
#3 0x5650d40512cf <unknown>
#4 0x5650d40a18d6 <unknown>
#5 0x5650d40a0f96 <unknown>
#6 0x5650d4092c23 <unknown>
#7 0x5650d405f4a5 <unknown>
#8 0x5650d4060111 <unknown>
#9 0x5650d453af1b <unknown>
#10 0x5650d453ee19 <unknown>
#11 0x5650d4521ac9 <unknown>
#12 0x5650d453f9c8 <unknown>
#13 0x5650d450634f <unknown>
#14 0x5650d4563a28 <unknown>
#15 0x5650d4563c06 <unknown>
#16 0x5650d4575336 <unknown>
#17 0x7f8970a9caa4 <unknown>
#18 0x7f8970b29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5650d457645a <unknown>
#1 0x5650d401b760 <unknown>
#2 0x5650d40560d8 <unknown>
#3 0x5650d40512cf <unknown>
#4 0x5650d40a18d6 <unknown>
#5 0x5650d40a0f96 <unknown>
#6 0x5650d4092c23 <unknown>
#7 0x5650d405f4a5 <unknown>
#8 0x5650d4060111 <unknown>
#9 0x5650d453af1b <unknown>
#10 0x5650d453ee19 <unknown>
#11 0x5650d4521ac9 <unknown>
#12 0x5650d453f9c8 <unknown>
#13 0x5650d450634f <unknown>
#14 0x5650d4563a28 <unknown>
#15 0x5650d4563c06 <unknown>
#16 0x5650d4575336 <unknown>
#17 0x7f8970a9caa4 <unknown>
#18 0x7f8970b29c3c <unknown>
_ ERROR at setup of test_invalid_password_login[shubhamdabir07@gmail.com-Password] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef8ca9040>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x559934701336 \\u003Cunknown>\\n#17 0x7f701869caa4 \\u003Cunknown>\\n#18 0x7f7018729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55993470245a <unknown>
E       #1 0x5599341a7760 <unknown>
E       #2 0x5599341e20d8 <unknown>
E       #3 0x5599341dd2cf <unknown>
E       #4 0x55993422d8d6 <unknown>
E       #5 0x55993422cf96 <unknown>
E       #6 0x55993421ec23 <unknown>
E       #7 0x5599341eb4a5 <unknown>
E       #8 0x5599341ec111 <unknown>
E       #9 0x5599346c6f1b <unknown>
E       #10 0x5599346cae19 <unknown>
E       #11 0x5599346adac9 <unknown>
E       #12 0x5599346cb9c8 <unknown>
E       #13 0x55993469234f <unknown>
E       #14 0x5599346efa28 <unknown>
E       #15 0x5599346efc06 <unknown>
E       #16 0x559934701336 <unknown>
E       #17 0x7f701869caa4 <unknown>
E       #18 0x7f7018729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55993470245a <unknown>
E           #1 0x5599341a7760 <unknown>
E           #2 0x5599341e20d8 <unknown>
E           #3 0x5599341dd2cf <unknown>
E           #4 0x55993422d8d6 <unknown>
E           #5 0x55993422cf96 <unknown>
E           #6 0x55993421ec23 <unknown>
E           #7 0x5599341eb4a5 <unknown>
E           #8 0x5599341ec111 <unknown>
E           #9 0x5599346c6f1b <unknown>
E           #10 0x5599346cae19 <unknown>
E           #11 0x5599346adac9 <unknown>
E           #12 0x5599346cb9c8 <unknown>
E           #13 0x55993469234f <unknown>
E           #14 0x5599346efa28 <unknown>
E           #15 0x5599346efc06 <unknown>
E           #16 0x559934701336 <unknown>
E           #17 0x7f701869caa4 <unknown>
E           #18 0x7f7018729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:16,733 - INFO - Starting test with Chrome browser
2025-07-02 18:32:16,734 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:16,842 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:16,857 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:16,867 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:17,958 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55993470245a <unknown>
#1 0x5599341a7760 <unknown>
#2 0x5599341e20d8 <unknown>
#3 0x5599341dd2cf <unknown>
#4 0x55993422d8d6 <unknown>
#5 0x55993422cf96 <unknown>
#6 0x55993421ec23 <unknown>
#7 0x5599341eb4a5 <unknown>
#8 0x5599341ec111 <unknown>
#9 0x5599346c6f1b <unknown>
#10 0x5599346cae19 <unknown>
#11 0x5599346adac9 <unknown>
#12 0x5599346cb9c8 <unknown>
#13 0x55993469234f <unknown>
#14 0x5599346efa28 <unknown>
#15 0x5599346efc06 <unknown>
#16 0x559934701336 <unknown>
#17 0x7f701869caa4 <unknown>
#18 0x7f7018729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55993470245a <unknown>
#1 0x5599341a7760 <unknown>
#2 0x5599341e20d8 <unknown>
#3 0x5599341dd2cf <unknown>
#4 0x55993422d8d6 <unknown>
#5 0x55993422cf96 <unknown>
#6 0x55993421ec23 <unknown>
#7 0x5599341eb4a5 <unknown>
#8 0x5599341ec111 <unknown>
#9 0x5599346c6f1b <unknown>
#10 0x5599346cae19 <unknown>
#11 0x5599346adac9 <unknown>
#12 0x5599346cb9c8 <unknown>
#13 0x55993469234f <unknown>
#14 0x5599346efa28 <unknown>
#15 0x5599346efc06 <unknown>
#16 0x559934701336 <unknown>
#17 0x7f701869caa4 <unknown>
#18 0x7f7018729c3c <unknown>
_ ERROR at setup of test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef7c615e0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x558d4675b336 \\u003Cunknown>\\n#17 0x7f4b2a29caa4 \\u003Cunknown>\\n#18 0x7f4b2a329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x558d4675c45a <unknown>
E       #1 0x558d46201760 <unknown>
E       #2 0x558d4623c0d8 <unknown>
E       #3 0x558d462372cf <unknown>
E       #4 0x558d462878d6 <unknown>
E       #5 0x558d46286f96 <unknown>
E       #6 0x558d46278c23 <unknown>
E       #7 0x558d462454a5 <unknown>
E       #8 0x558d46246111 <unknown>
E       #9 0x558d46720f1b <unknown>
E       #10 0x558d46724e19 <unknown>
E       #11 0x558d46707ac9 <unknown>
E       #12 0x558d467259c8 <unknown>
E       #13 0x558d466ec34f <unknown>
E       #14 0x558d46749a28 <unknown>
E       #15 0x558d46749c06 <unknown>
E       #16 0x558d4675b336 <unknown>
E       #17 0x7f4b2a29caa4 <unknown>
E       #18 0x7f4b2a329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x558d4675c45a <unknown>
E           #1 0x558d46201760 <unknown>
E           #2 0x558d4623c0d8 <unknown>
E           #3 0x558d462372cf <unknown>
E           #4 0x558d462878d6 <unknown>
E           #5 0x558d46286f96 <unknown>
E           #6 0x558d46278c23 <unknown>
E           #7 0x558d462454a5 <unknown>
E           #8 0x558d46246111 <unknown>
E           #9 0x558d46720f1b <unknown>
E           #10 0x558d46724e19 <unknown>
E           #11 0x558d46707ac9 <unknown>
E           #12 0x558d467259c8 <unknown>
E           #13 0x558d466ec34f <unknown>
E           #14 0x558d46749a28 <unknown>
E           #15 0x558d46749c06 <unknown>
E           #16 0x558d4675b336 <unknown>
E           #17 0x7f4b2a29caa4 <unknown>
E           #18 0x7f4b2a329c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:17,995 - INFO - Starting test with Chrome browser
2025-07-02 18:32:17,995 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:18,104 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:18,115 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:18,126 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:19,218 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x558d4675c45a <unknown>
#1 0x558d46201760 <unknown>
#2 0x558d4623c0d8 <unknown>
#3 0x558d462372cf <unknown>
#4 0x558d462878d6 <unknown>
#5 0x558d46286f96 <unknown>
#6 0x558d46278c23 <unknown>
#7 0x558d462454a5 <unknown>
#8 0x558d46246111 <unknown>
#9 0x558d46720f1b <unknown>
#10 0x558d46724e19 <unknown>
#11 0x558d46707ac9 <unknown>
#12 0x558d467259c8 <unknown>
#13 0x558d466ec34f <unknown>
#14 0x558d46749a28 <unknown>
#15 0x558d46749c06 <unknown>
#16 0x558d4675b336 <unknown>
#17 0x7f4b2a29caa4 <unknown>
#18 0x7f4b2a329c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x558d4675c45a <unknown>
#1 0x558d46201760 <unknown>
#2 0x558d4623c0d8 <unknown>
#3 0x558d462372cf <unknown>
#4 0x558d462878d6 <unknown>
#5 0x558d46286f96 <unknown>
#6 0x558d46278c23 <unknown>
#7 0x558d462454a5 <unknown>
#8 0x558d46246111 <unknown>
#9 0x558d46720f1b <unknown>
#10 0x558d46724e19 <unknown>
#11 0x558d46707ac9 <unknown>
#12 0x558d467259c8 <unknown>
#13 0x558d466ec34f <unknown>
#14 0x558d46749a28 <unknown>
#15 0x558d46749c06 <unknown>
#16 0x558d4675b336 <unknown>
#17 0x7f4b2a29caa4 <unknown>
#18 0x7f4b2a329c3c <unknown>
_______________ ERROR at setup of test_blank_username_validation _______________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef9b93230>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55ed69081336 \\u003Cunknown>\\n#17 0x7fb87589caa4 \\u003Cunknown>\\n#18 0x7fb875929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55ed6908245a <unknown>
E       #1 0x55ed68b27760 <unknown>
E       #2 0x55ed68b620d8 <unknown>
E       #3 0x55ed68b5d2cf <unknown>
E       #4 0x55ed68bad8d6 <unknown>
E       #5 0x55ed68bacf96 <unknown>
E       #6 0x55ed68b9ec23 <unknown>
E       #7 0x55ed68b6b4a5 <unknown>
E       #8 0x55ed68b6c111 <unknown>
E       #9 0x55ed69046f1b <unknown>
E       #10 0x55ed6904ae19 <unknown>
E       #11 0x55ed6902dac9 <unknown>
E       #12 0x55ed6904b9c8 <unknown>
E       #13 0x55ed6901234f <unknown>
E       #14 0x55ed6906fa28 <unknown>
E       #15 0x55ed6906fc06 <unknown>
E       #16 0x55ed69081336 <unknown>
E       #17 0x7fb87589caa4 <unknown>
E       #18 0x7fb875929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55ed6908245a <unknown>
E           #1 0x55ed68b27760 <unknown>
E           #2 0x55ed68b620d8 <unknown>
E           #3 0x55ed68b5d2cf <unknown>
E           #4 0x55ed68bad8d6 <unknown>
E           #5 0x55ed68bacf96 <unknown>
E           #6 0x55ed68b9ec23 <unknown>
E           #7 0x55ed68b6b4a5 <unknown>
E           #8 0x55ed68b6c111 <unknown>
E           #9 0x55ed69046f1b <unknown>
E           #10 0x55ed6904ae19 <unknown>
E           #11 0x55ed6902dac9 <unknown>
E           #12 0x55ed6904b9c8 <unknown>
E           #13 0x55ed6901234f <unknown>
E           #14 0x55ed6906fa28 <unknown>
E           #15 0x55ed6906fc06 <unknown>
E           #16 0x55ed69081336 <unknown>
E           #17 0x7fb87589caa4 <unknown>
E           #18 0x7fb875929c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:19,255 - INFO - Starting test with Chrome browser
2025-07-02 18:32:19,255 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:19,364 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:19,375 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:19,386 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:20,479 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ed6908245a <unknown>
#1 0x55ed68b27760 <unknown>
#2 0x55ed68b620d8 <unknown>
#3 0x55ed68b5d2cf <unknown>
#4 0x55ed68bad8d6 <unknown>
#5 0x55ed68bacf96 <unknown>
#6 0x55ed68b9ec23 <unknown>
#7 0x55ed68b6b4a5 <unknown>
#8 0x55ed68b6c111 <unknown>
#9 0x55ed69046f1b <unknown>
#10 0x55ed6904ae19 <unknown>
#11 0x55ed6902dac9 <unknown>
#12 0x55ed6904b9c8 <unknown>
#13 0x55ed6901234f <unknown>
#14 0x55ed6906fa28 <unknown>
#15 0x55ed6906fc06 <unknown>
#16 0x55ed69081336 <unknown>
#17 0x7fb87589caa4 <unknown>
#18 0x7fb875929c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ed6908245a <unknown>
#1 0x55ed68b27760 <unknown>
#2 0x55ed68b620d8 <unknown>
#3 0x55ed68b5d2cf <unknown>
#4 0x55ed68bad8d6 <unknown>
#5 0x55ed68bacf96 <unknown>
#6 0x55ed68b9ec23 <unknown>
#7 0x55ed68b6b4a5 <unknown>
#8 0x55ed68b6c111 <unknown>
#9 0x55ed69046f1b <unknown>
#10 0x55ed6904ae19 <unknown>
#11 0x55ed6902dac9 <unknown>
#12 0x55ed6904b9c8 <unknown>
#13 0x55ed6901234f <unknown>
#14 0x55ed6906fa28 <unknown>
#15 0x55ed6906fc06 <unknown>
#16 0x55ed69081336 <unknown>
#17 0x7fb87589caa4 <unknown>
#18 0x7fb875929c3c <unknown>
_______________ ERROR at setup of test_blank_password_validation _______________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef7c5d630>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55c89011e336 \\u003Cunknown>\\n#17 0x7fa88869caa4 \\u003Cunknown>\\n#18 0x7fa888729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55c89011f45a <unknown>
E       #1 0x55c88fbc4760 <unknown>
E       #2 0x55c88fbff0d8 <unknown>
E       #3 0x55c88fbfa2cf <unknown>
E       #4 0x55c88fc4a8d6 <unknown>
E       #5 0x55c88fc49f96 <unknown>
E       #6 0x55c88fc3bc23 <unknown>
E       #7 0x55c88fc084a5 <unknown>
E       #8 0x55c88fc09111 <unknown>
E       #9 0x55c8900e3f1b <unknown>
E       #10 0x55c8900e7e19 <unknown>
E       #11 0x55c8900caac9 <unknown>
E       #12 0x55c8900e89c8 <unknown>
E       #13 0x55c8900af34f <unknown>
E       #14 0x55c89010ca28 <unknown>
E       #15 0x55c89010cc06 <unknown>
E       #16 0x55c89011e336 <unknown>
E       #17 0x7fa88869caa4 <unknown>
E       #18 0x7fa888729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55c89011f45a <unknown>
E           #1 0x55c88fbc4760 <unknown>
E           #2 0x55c88fbff0d8 <unknown>
E           #3 0x55c88fbfa2cf <unknown>
E           #4 0x55c88fc4a8d6 <unknown>
E           #5 0x55c88fc49f96 <unknown>
E           #6 0x55c88fc3bc23 <unknown>
E           #7 0x55c88fc084a5 <unknown>
E           #8 0x55c88fc09111 <unknown>
E           #9 0x55c8900e3f1b <unknown>
E           #10 0x55c8900e7e19 <unknown>
E           #11 0x55c8900caac9 <unknown>
E           #12 0x55c8900e89c8 <unknown>
E           #13 0x55c8900af34f <unknown>
E           #14 0x55c89010ca28 <unknown>
E           #15 0x55c89010cc06 <unknown>
E           #16 0x55c89011e336 <unknown>
E           #17 0x7fa88869caa4 <unknown>
E           #18 0x7fa888729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:20,516 - INFO - Starting test with Chrome browser
2025-07-02 18:32:20,516 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:20,626 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:20,638 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:20,647 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:21,739 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55c89011f45a <unknown>
#1 0x55c88fbc4760 <unknown>
#2 0x55c88fbff0d8 <unknown>
#3 0x55c88fbfa2cf <unknown>
#4 0x55c88fc4a8d6 <unknown>
#5 0x55c88fc49f96 <unknown>
#6 0x55c88fc3bc23 <unknown>
#7 0x55c88fc084a5 <unknown>
#8 0x55c88fc09111 <unknown>
#9 0x55c8900e3f1b <unknown>
#10 0x55c8900e7e19 <unknown>
#11 0x55c8900caac9 <unknown>
#12 0x55c8900e89c8 <unknown>
#13 0x55c8900af34f <unknown>
#14 0x55c89010ca28 <unknown>
#15 0x55c89010cc06 <unknown>
#16 0x55c89011e336 <unknown>
#17 0x7fa88869caa4 <unknown>
#18 0x7fa888729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55c89011f45a <unknown>
#1 0x55c88fbc4760 <unknown>
#2 0x55c88fbff0d8 <unknown>
#3 0x55c88fbfa2cf <unknown>
#4 0x55c88fc4a8d6 <unknown>
#5 0x55c88fc49f96 <unknown>
#6 0x55c88fc3bc23 <unknown>
#7 0x55c88fc084a5 <unknown>
#8 0x55c88fc09111 <unknown>
#9 0x55c8900e3f1b <unknown>
#10 0x55c8900e7e19 <unknown>
#11 0x55c8900caac9 <unknown>
#12 0x55c8900e89c8 <unknown>
#13 0x55c8900af34f <unknown>
#14 0x55c89010ca28 <unknown>
#15 0x55c89010cc06 <unknown>
#16 0x55c89011e336 <unknown>
#17 0x7fa88869caa4 <unknown>
#18 0x7fa888729c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username0] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef7c91090>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55e774aee336 \\u003Cunknown>\\n#17 0x7fef9d89caa4 \\u003Cunknown>\\n#18 0x7fef9d929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55e774aef45a <unknown>
E       #1 0x55e774594760 <unknown>
E       #2 0x55e7745cf0d8 <unknown>
E       #3 0x55e7745ca2cf <unknown>
E       #4 0x55e77461a8d6 <unknown>
E       #5 0x55e774619f96 <unknown>
E       #6 0x55e77460bc23 <unknown>
E       #7 0x55e7745d84a5 <unknown>
E       #8 0x55e7745d9111 <unknown>
E       #9 0x55e774ab3f1b <unknown>
E       #10 0x55e774ab7e19 <unknown>
E       #11 0x55e774a9aac9 <unknown>
E       #12 0x55e774ab89c8 <unknown>
E       #13 0x55e774a7f34f <unknown>
E       #14 0x55e774adca28 <unknown>
E       #15 0x55e774adcc06 <unknown>
E       #16 0x55e774aee336 <unknown>
E       #17 0x7fef9d89caa4 <unknown>
E       #18 0x7fef9d929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55e774aef45a <unknown>
E           #1 0x55e774594760 <unknown>
E           #2 0x55e7745cf0d8 <unknown>
E           #3 0x55e7745ca2cf <unknown>
E           #4 0x55e77461a8d6 <unknown>
E           #5 0x55e774619f96 <unknown>
E           #6 0x55e77460bc23 <unknown>
E           #7 0x55e7745d84a5 <unknown>
E           #8 0x55e7745d9111 <unknown>
E           #9 0x55e774ab3f1b <unknown>
E           #10 0x55e774ab7e19 <unknown>
E           #11 0x55e774a9aac9 <unknown>
E           #12 0x55e774ab89c8 <unknown>
E           #13 0x55e774a7f34f <unknown>
E           #14 0x55e774adca28 <unknown>
E           #15 0x55e774adcc06 <unknown>
E           #16 0x55e774aee336 <unknown>
E           #17 0x7fef9d89caa4 <unknown>
E           #18 0x7fef9d929c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:21,777 - INFO - Starting test with Chrome browser
2025-07-02 18:32:21,777 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:21,885 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:21,897 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:21,905 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:22,997 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55e774aef45a <unknown>
#1 0x55e774594760 <unknown>
#2 0x55e7745cf0d8 <unknown>
#3 0x55e7745ca2cf <unknown>
#4 0x55e77461a8d6 <unknown>
#5 0x55e774619f96 <unknown>
#6 0x55e77460bc23 <unknown>
#7 0x55e7745d84a5 <unknown>
#8 0x55e7745d9111 <unknown>
#9 0x55e774ab3f1b <unknown>
#10 0x55e774ab7e19 <unknown>
#11 0x55e774a9aac9 <unknown>
#12 0x55e774ab89c8 <unknown>
#13 0x55e774a7f34f <unknown>
#14 0x55e774adca28 <unknown>
#15 0x55e774adcc06 <unknown>
#16 0x55e774aee336 <unknown>
#17 0x7fef9d89caa4 <unknown>
#18 0x7fef9d929c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55e774aef45a <unknown>
#1 0x55e774594760 <unknown>
#2 0x55e7745cf0d8 <unknown>
#3 0x55e7745ca2cf <unknown>
#4 0x55e77461a8d6 <unknown>
#5 0x55e774619f96 <unknown>
#6 0x55e77460bc23 <unknown>
#7 0x55e7745d84a5 <unknown>
#8 0x55e7745d9111 <unknown>
#9 0x55e774ab3f1b <unknown>
#10 0x55e774ab7e19 <unknown>
#11 0x55e774a9aac9 <unknown>
#12 0x55e774ab89c8 <unknown>
#13 0x55e774a7f34f <unknown>
#14 0x55e774adca28 <unknown>
#15 0x55e774adcc06 <unknown>
#16 0x55e774aee336 <unknown>
#17 0x7fef9d89caa4 <unknown>
#18 0x7fef9d929c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username1] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef8ce7110>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x56448f83b336 \\u003Cunknown>\\n#17 0x7f166e69caa4 \\u003Cunknown>\\n#18 0x7f166e729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x56448f83c45a <unknown>
E       #1 0x56448f2e1760 <unknown>
E       #2 0x56448f31c0d8 <unknown>
E       #3 0x56448f3172cf <unknown>
E       #4 0x56448f3678d6 <unknown>
E       #5 0x56448f366f96 <unknown>
E       #6 0x56448f358c23 <unknown>
E       #7 0x56448f3254a5 <unknown>
E       #8 0x56448f326111 <unknown>
E       #9 0x56448f800f1b <unknown>
E       #10 0x56448f804e19 <unknown>
E       #11 0x56448f7e7ac9 <unknown>
E       #12 0x56448f8059c8 <unknown>
E       #13 0x56448f7cc34f <unknown>
E       #14 0x56448f829a28 <unknown>
E       #15 0x56448f829c06 <unknown>
E       #16 0x56448f83b336 <unknown>
E       #17 0x7f166e69caa4 <unknown>
E       #18 0x7f166e729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x56448f83c45a <unknown>
E           #1 0x56448f2e1760 <unknown>
E           #2 0x56448f31c0d8 <unknown>
E           #3 0x56448f3172cf <unknown>
E           #4 0x56448f3678d6 <unknown>
E           #5 0x56448f366f96 <unknown>
E           #6 0x56448f358c23 <unknown>
E           #7 0x56448f3254a5 <unknown>
E           #8 0x56448f326111 <unknown>
E           #9 0x56448f800f1b <unknown>
E           #10 0x56448f804e19 <unknown>
E           #11 0x56448f7e7ac9 <unknown>
E           #12 0x56448f8059c8 <unknown>
E           #13 0x56448f7cc34f <unknown>
E           #14 0x56448f829a28 <unknown>
E           #15 0x56448f829c06 <unknown>
E           #16 0x56448f83b336 <unknown>
E           #17 0x7f166e69caa4 <unknown>
E           #18 0x7f166e729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:23,034 - INFO - Starting test with Chrome browser
2025-07-02 18:32:23,034 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:23,142 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:23,154 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:23,165 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:24,258 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56448f83c45a <unknown>
#1 0x56448f2e1760 <unknown>
#2 0x56448f31c0d8 <unknown>
#3 0x56448f3172cf <unknown>
#4 0x56448f3678d6 <unknown>
#5 0x56448f366f96 <unknown>
#6 0x56448f358c23 <unknown>
#7 0x56448f3254a5 <unknown>
#8 0x56448f326111 <unknown>
#9 0x56448f800f1b <unknown>
#10 0x56448f804e19 <unknown>
#11 0x56448f7e7ac9 <unknown>
#12 0x56448f8059c8 <unknown>
#13 0x56448f7cc34f <unknown>
#14 0x56448f829a28 <unknown>
#15 0x56448f829c06 <unknown>
#16 0x56448f83b336 <unknown>
#17 0x7f166e69caa4 <unknown>
#18 0x7f166e729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56448f83c45a <unknown>
#1 0x56448f2e1760 <unknown>
#2 0x56448f31c0d8 <unknown>
#3 0x56448f3172cf <unknown>
#4 0x56448f3678d6 <unknown>
#5 0x56448f366f96 <unknown>
#6 0x56448f358c23 <unknown>
#7 0x56448f3254a5 <unknown>
#8 0x56448f326111 <unknown>
#9 0x56448f800f1b <unknown>
#10 0x56448f804e19 <unknown>
#11 0x56448f7e7ac9 <unknown>
#12 0x56448f8059c8 <unknown>
#13 0x56448f7cc34f <unknown>
#14 0x56448f829a28 <unknown>
#15 0x56448f829c06 <unknown>
#16 0x56448f83b336 <unknown>
#17 0x7f166e69caa4 <unknown>
#18 0x7f166e729c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username2] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef8ce7d10>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x564001e60336 \\u003Cunknown>\\n#17 0x7f54a569caa4 \\u003Cunknown>\\n#18 0x7f54a5729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x564001e6145a <unknown>
E       #1 0x564001906760 <unknown>
E       #2 0x5640019410d8 <unknown>
E       #3 0x56400193c2cf <unknown>
E       #4 0x56400198c8d6 <unknown>
E       #5 0x56400198bf96 <unknown>
E       #6 0x56400197dc23 <unknown>
E       #7 0x56400194a4a5 <unknown>
E       #8 0x56400194b111 <unknown>
E       #9 0x564001e25f1b <unknown>
E       #10 0x564001e29e19 <unknown>
E       #11 0x564001e0cac9 <unknown>
E       #12 0x564001e2a9c8 <unknown>
E       #13 0x564001df134f <unknown>
E       #14 0x564001e4ea28 <unknown>
E       #15 0x564001e4ec06 <unknown>
E       #16 0x564001e60336 <unknown>
E       #17 0x7f54a569caa4 <unknown>
E       #18 0x7f54a5729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x564001e6145a <unknown>
E           #1 0x564001906760 <unknown>
E           #2 0x5640019410d8 <unknown>
E           #3 0x56400193c2cf <unknown>
E           #4 0x56400198c8d6 <unknown>
E           #5 0x56400198bf96 <unknown>
E           #6 0x56400197dc23 <unknown>
E           #7 0x56400194a4a5 <unknown>
E           #8 0x56400194b111 <unknown>
E           #9 0x564001e25f1b <unknown>
E           #10 0x564001e29e19 <unknown>
E           #11 0x564001e0cac9 <unknown>
E           #12 0x564001e2a9c8 <unknown>
E           #13 0x564001df134f <unknown>
E           #14 0x564001e4ea28 <unknown>
E           #15 0x564001e4ec06 <unknown>
E           #16 0x564001e60336 <unknown>
E           #17 0x7f54a569caa4 <unknown>
E           #18 0x7f54a5729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:24,297 - INFO - Starting test with Chrome browser
2025-07-02 18:32:24,297 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:24,406 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:24,419 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:24,429 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:25,521 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564001e6145a <unknown>
#1 0x564001906760 <unknown>
#2 0x5640019410d8 <unknown>
#3 0x56400193c2cf <unknown>
#4 0x56400198c8d6 <unknown>
#5 0x56400198bf96 <unknown>
#6 0x56400197dc23 <unknown>
#7 0x56400194a4a5 <unknown>
#8 0x56400194b111 <unknown>
#9 0x564001e25f1b <unknown>
#10 0x564001e29e19 <unknown>
#11 0x564001e0cac9 <unknown>
#12 0x564001e2a9c8 <unknown>
#13 0x564001df134f <unknown>
#14 0x564001e4ea28 <unknown>
#15 0x564001e4ec06 <unknown>
#16 0x564001e60336 <unknown>
#17 0x7f54a569caa4 <unknown>
#18 0x7f54a5729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564001e6145a <unknown>
#1 0x564001906760 <unknown>
#2 0x5640019410d8 <unknown>
#3 0x56400193c2cf <unknown>
#4 0x56400198c8d6 <unknown>
#5 0x56400198bf96 <unknown>
#6 0x56400197dc23 <unknown>
#7 0x56400194a4a5 <unknown>
#8 0x56400194b111 <unknown>
#9 0x564001e25f1b <unknown>
#10 0x564001e29e19 <unknown>
#11 0x564001e0cac9 <unknown>
#12 0x564001e2a9c8 <unknown>
#13 0x564001df134f <unknown>
#14 0x564001e4ea28 <unknown>
#15 0x564001e4ec06 <unknown>
#16 0x564001e60336 <unknown>
#17 0x7f54a569caa4 <unknown>
#18 0x7f54a5729c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username3] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef7c7f5f0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5592b7d5b336 \\u003Cunknown>\\n#17 0x7fcdb1e9caa4 \\u003Cunknown>\\n#18 0x7fcdb1f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5592b7d5c45a <unknown>
E       #1 0x5592b7801760 <unknown>
E       #2 0x5592b783c0d8 <unknown>
E       #3 0x5592b78372cf <unknown>
E       #4 0x5592b78878d6 <unknown>
E       #5 0x5592b7886f96 <unknown>
E       #6 0x5592b7878c23 <unknown>
E       #7 0x5592b78454a5 <unknown>
E       #8 0x5592b7846111 <unknown>
E       #9 0x5592b7d20f1b <unknown>
E       #10 0x5592b7d24e19 <unknown>
E       #11 0x5592b7d07ac9 <unknown>
E       #12 0x5592b7d259c8 <unknown>
E       #13 0x5592b7cec34f <unknown>
E       #14 0x5592b7d49a28 <unknown>
E       #15 0x5592b7d49c06 <unknown>
E       #16 0x5592b7d5b336 <unknown>
E       #17 0x7fcdb1e9caa4 <unknown>
E       #18 0x7fcdb1f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5592b7d5c45a <unknown>
E           #1 0x5592b7801760 <unknown>
E           #2 0x5592b783c0d8 <unknown>
E           #3 0x5592b78372cf <unknown>
E           #4 0x5592b78878d6 <unknown>
E           #5 0x5592b7886f96 <unknown>
E           #6 0x5592b7878c23 <unknown>
E           #7 0x5592b78454a5 <unknown>
E           #8 0x5592b7846111 <unknown>
E           #9 0x5592b7d20f1b <unknown>
E           #10 0x5592b7d24e19 <unknown>
E           #11 0x5592b7d07ac9 <unknown>
E           #12 0x5592b7d259c8 <unknown>
E           #13 0x5592b7cec34f <unknown>
E           #14 0x5592b7d49a28 <unknown>
E           #15 0x5592b7d49c06 <unknown>
E           #16 0x5592b7d5b336 <unknown>
E           #17 0x7fcdb1e9caa4 <unknown>
E           #18 0x7fcdb1f29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:25,558 - INFO - Starting test with Chrome browser
2025-07-02 18:32:25,559 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:25,668 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:25,680 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:25,690 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:26,782 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5592b7d5c45a <unknown>
#1 0x5592b7801760 <unknown>
#2 0x5592b783c0d8 <unknown>
#3 0x5592b78372cf <unknown>
#4 0x5592b78878d6 <unknown>
#5 0x5592b7886f96 <unknown>
#6 0x5592b7878c23 <unknown>
#7 0x5592b78454a5 <unknown>
#8 0x5592b7846111 <unknown>
#9 0x5592b7d20f1b <unknown>
#10 0x5592b7d24e19 <unknown>
#11 0x5592b7d07ac9 <unknown>
#12 0x5592b7d259c8 <unknown>
#13 0x5592b7cec34f <unknown>
#14 0x5592b7d49a28 <unknown>
#15 0x5592b7d49c06 <unknown>
#16 0x5592b7d5b336 <unknown>
#17 0x7fcdb1e9caa4 <unknown>
#18 0x7fcdb1f29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5592b7d5c45a <unknown>
#1 0x5592b7801760 <unknown>
#2 0x5592b783c0d8 <unknown>
#3 0x5592b78372cf <unknown>
#4 0x5592b78878d6 <unknown>
#5 0x5592b7886f96 <unknown>
#6 0x5592b7878c23 <unknown>
#7 0x5592b78454a5 <unknown>
#8 0x5592b7846111 <unknown>
#9 0x5592b7d20f1b <unknown>
#10 0x5592b7d24e19 <unknown>
#11 0x5592b7d07ac9 <unknown>
#12 0x5592b7d259c8 <unknown>
#13 0x5592b7cec34f <unknown>
#14 0x5592b7d49a28 <unknown>
#15 0x5592b7d49c06 <unknown>
#16 0x5592b7d5b336 <unknown>
#17 0x7fcdb1e9caa4 <unknown>
#18 0x7fcdb1f29c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username4] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efef7c7e150>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x556dd92a8336 \\u003Cunknown>\\n#17 0x7fd0ff29caa4 \\u003Cunknown>\\n#18 0x7fd0ff329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x556dd92a945a <unknown>
E       #1 0x556dd8d4e760 <unknown>
E       #2 0x556dd8d890d8 <unknown>
E       #3 0x556dd8d842cf <unknown>
E       #4 0x556dd8dd48d6 <unknown>
E       #5 0x556dd8dd3f96 <unknown>
E       #6 0x556dd8dc5c23 <unknown>
E       #7 0x556dd8d924a5 <unknown>
E       #8 0x556dd8d93111 <unknown>
E       #9 0x556dd926df1b <unknown>
E       #10 0x556dd9271e19 <unknown>
E       #11 0x556dd9254ac9 <unknown>
E       #12 0x556dd92729c8 <unknown>
E       #13 0x556dd923934f <unknown>
E       #14 0x556dd9296a28 <unknown>
E       #15 0x556dd9296c06 <unknown>
E       #16 0x556dd92a8336 <unknown>
E       #17 0x7fd0ff29caa4 <unknown>
E       #18 0x7fd0ff329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x556dd92a945a <unknown>
E           #1 0x556dd8d4e760 <unknown>
E           #2 0x556dd8d890d8 <unknown>
E           #3 0x556dd8d842cf <unknown>
E           #4 0x556dd8dd48d6 <unknown>
E           #5 0x556dd8dd3f96 <unknown>
E           #6 0x556dd8dc5c23 <unknown>
E           #7 0x556dd8d924a5 <unknown>
E           #8 0x556dd8d93111 <unknown>
E           #9 0x556dd926df1b <unknown>
E           #10 0x556dd9271e19 <unknown>
E           #11 0x556dd9254ac9 <unknown>
E           #12 0x556dd92729c8 <unknown>
E           #13 0x556dd923934f <unknown>
E           #14 0x556dd9296a28 <unknown>
E           #15 0x556dd9296c06 <unknown>
E           #16 0x556dd92a8336 <unknown>
E           #17 0x7fd0ff29caa4 <unknown>
E           #18 0x7fd0ff329c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 18:32:26,820 - INFO - Starting test with Chrome browser
2025-07-02 18:32:26,820 - INFO - ====== WebDriver manager ======
2025-07-02 18:32:26,929 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:26,940 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 18:32:26,951 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 18:32:28,044 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x556dd92a945a <unknown>
#1 0x556dd8d4e760 <unknown>
#2 0x556dd8d890d8 <unknown>
#3 0x556dd8d842cf <unknown>
#4 0x556dd8dd48d6 <unknown>
#5 0x556dd8dd3f96 <unknown>
#6 0x556dd8dc5c23 <unknown>
#7 0x556dd8d924a5 <unknown>
#8 0x556dd8d93111 <unknown>
#9 0x556dd926df1b <unknown>
#10 0x556dd9271e19 <unknown>
#11 0x556dd9254ac9 <unknown>
#12 0x556dd92729c8 <unknown>
#13 0x556dd923934f <unknown>
#14 0x556dd9296a28 <unknown>
#15 0x556dd9296c06 <unknown>
#16 0x556dd92a8336 <unknown>
#17 0x7fd0ff29caa4 <unknown>
#18 0x7fd0ff329c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x556dd92a945a <unknown>
#1 0x556dd8d4e760 <unknown>
#2 0x556dd8d890d8 <unknown>
#3 0x556dd8d842cf <unknown>
#4 0x556dd8dd48d6 <unknown>
#5 0x556dd8dd3f96 <unknown>
#6 0x556dd8dc5c23 <unknown>
#7 0x556dd8d924a5 <unknown>
#8 0x556dd8d93111 <unknown>
#9 0x556dd926df1b <unknown>
#10 0x556dd9271e19 <unknown>
#11 0x556dd9254ac9 <unknown>
#12 0x556dd92729c8 <unknown>
#13 0x556dd923934f <unknown>
#14 0x556dd9296a28 <unknown>
#15 0x556dd9296c06 <unknown>
#16 0x556dd92a8336 <unknown>
#17 0x7fd0ff29caa4 <unknown>
#18 0x7fd0ff329c3c <unknown>
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250702_183155/report.html -
=========================== short test summary info ============================
ERROR tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5573f3ad945a <unknown>
#1 0x5573f357e760 <unknown>
#2 0x5573f35b90d8 <unknown>
#3 0x5573f35b42cf <unknown>
#4 0x5573f36048d6 <unknown>
#5 0x5573f3603f96 <unknown>
#6 0x5573f35f5c23 <unknown>
#7 0x5573f35c24a5 <unknown>
#8 0x5573f35c3111 <unknown>
#9 0x5573f3a9df1b <unknown>
#10 0x5573f3aa1e19 <unknown>
#11 0x5573f3a84ac9 <unknown>
#12 0x5573f3aa29c8 <unknown>
#13 0x5573f3a6934f <unknown>
#14 0x5573f3ac6a28 <unknown>
#15 0x5573f3ac6c06 <unknown>
#16 0x5573f3ad8336 <unknown>
#17 0x7f5276c9caa4 <unknown>
#18 0x7f5276d29c3c <unknown>
ERROR tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5575e3fa145a <unknown>
#1 0x5575e3a46760 <unknown>
#2 0x5575e3a810d8 <unknown>
#3 0x5575e3a7c2cf <unknown>
#4 0x5575e3acc8d6 <unknown>
#5 0x5575e3acbf96 <unknown>
#6 0x5575e3abdc23 <unknown>
#7 0x5575e3a8a4a5 <unknown>
#8 0x5575e3a8b111 <unknown>
#9 0x5575e3f65f1b <unknown>
#10 0x5575e3f69e19 <unknown>
#11 0x5575e3f4cac9 <unknown>
#12 0x5575e3f6a9c8 <unknown>
#13 0x5575e3f3134f <unknown>
#14 0x5575e3f8ea28 <unknown>
#15 0x5575e3f8ec06 <unknown>
#16 0x5575e3fa0336 <unknown>
#17 0x7f53e229caa4 <unknown>
#18 0x7f53e2329c3c <unknown>
ERROR tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55cc4cf8445a <unknown>
#1 0x55cc4ca29760 <unknown>
#2 0x55cc4ca640d8 <unknown>
#3 0x55cc4ca5f2cf <unknown>
#4 0x55cc4caaf8d6 <unknown>
#5 0x55cc4caaef96 <unknown>
#6 0x55cc4caa0c23 <unknown>
#7 0x55cc4ca6d4a5 <unknown>
#8 0x55cc4ca6e111 <unknown>
#9 0x55cc4cf48f1b <unknown>
#10 0x55cc4cf4ce19 <unknown>
#11 0x55cc4cf2fac9 <unknown>
#12 0x55cc4cf4d9c8 <unknown>
#13 0x55cc4cf1434f <unknown>
#14 0x55cc4cf71a28 <unknown>
#15 0x55cc4cf71c06 <unknown>
#16 0x55cc4cf83336 <unknown>
#17 0x7faf08a9caa4 <unknown>
#18 0x7faf08b29c3c <unknown>
ERROR tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ed8efe545a <unknown>
#1 0x55ed8ea8a760 <unknown>
#2 0x55ed8eac50d8 <unknown>
#3 0x55ed8eac02cf <unknown>
#4 0x55ed8eb108d6 <unknown>
#5 0x55ed8eb0ff96 <unknown>
#6 0x55ed8eb01c23 <unknown>
#7 0x55ed8eace4a5 <unknown>
#8 0x55ed8eacf111 <unknown>
#9 0x55ed8efa9f1b <unknown>
#10 0x55ed8efade19 <unknown>
#11 0x55ed8ef90ac9 <unknown>
#12 0x55ed8efae9c8 <unknown>
#13 0x55ed8ef7534f <unknown>
#14 0x55ed8efd2a28 <unknown>
#15 0x55ed8efd2c06 <unknown>
#16 0x55ed8efe4336 <unknown>
#17 0x7fc6b769caa4 <unknown>
#18 0x7fc6b7729c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username0] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564a7d28a45a <unknown>
#1 0x564a7cd2f760 <unknown>
#2 0x564a7cd6a0d8 <unknown>
#3 0x564a7cd652cf <unknown>
#4 0x564a7cdb58d6 <unknown>
#5 0x564a7cdb4f96 <unknown>
#6 0x564a7cda6c23 <unknown>
#7 0x564a7cd734a5 <unknown>
#8 0x564a7cd74111 <unknown>
#9 0x564a7d24ef1b <unknown>
#10 0x564a7d252e19 <unknown>
#11 0x564a7d235ac9 <unknown>
#12 0x564a7d2539c8 <unknown>
#13 0x564a7d21a34f <unknown>
#14 0x564a7d277a28 <unknown>
#15 0x564a7d277c06 <unknown>
#16 0x564a7d289336 <unknown>
#17 0x7f3a98a9caa4 <unknown>
#18 0x7f3a98b29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username1] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55c5711cd45a <unknown>
#1 0x55c570c72760 <unknown>
#2 0x55c570cad0d8 <unknown>
#3 0x55c570ca82cf <unknown>
#4 0x55c570cf88d6 <unknown>
#5 0x55c570cf7f96 <unknown>
#6 0x55c570ce9c23 <unknown>
#7 0x55c570cb64a5 <unknown>
#8 0x55c570cb7111 <unknown>
#9 0x55c571191f1b <unknown>
#10 0x55c571195e19 <unknown>
#11 0x55c571178ac9 <unknown>
#12 0x55c5711969c8 <unknown>
#13 0x55c57115d34f <unknown>
#14 0x55c5711baa28 <unknown>
#15 0x55c5711bac06 <unknown>
#16 0x55c5711cc336 <unknown>
#17 0x7faedac9caa4 <unknown>
#18 0x7faedad29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username2] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55e149bb545a <unknown>
#1 0x55e14965a760 <unknown>
#2 0x55e1496950d8 <unknown>
#3 0x55e1496902cf <unknown>
#4 0x55e1496e08d6 <unknown>
#5 0x55e1496dff96 <unknown>
#6 0x55e1496d1c23 <unknown>
#7 0x55e14969e4a5 <unknown>
#8 0x55e14969f111 <unknown>
#9 0x55e149b79f1b <unknown>
#10 0x55e149b7de19 <unknown>
#11 0x55e149b60ac9 <unknown>
#12 0x55e149b7e9c8 <unknown>
#13 0x55e149b4534f <unknown>
#14 0x55e149ba2a28 <unknown>
#15 0x55e149ba2c06 <unknown>
#16 0x55e149bb4336 <unknown>
#17 0x7f130e09caa4 <unknown>
#18 0x7f130e129c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username3] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55842e20045a <unknown>
#1 0x55842dca5760 <unknown>
#2 0x55842dce00d8 <unknown>
#3 0x55842dcdb2cf <unknown>
#4 0x55842dd2b8d6 <unknown>
#5 0x55842dd2af96 <unknown>
#6 0x55842dd1cc23 <unknown>
#7 0x55842dce94a5 <unknown>
#8 0x55842dcea111 <unknown>
#9 0x55842e1c4f1b <unknown>
#10 0x55842e1c8e19 <unknown>
#11 0x55842e1abac9 <unknown>
#12 0x55842e1c99c8 <unknown>
#13 0x55842e19034f <unknown>
#14 0x55842e1eda28 <unknown>
#15 0x55842e1edc06 <unknown>
#16 0x55842e1ff336 <unknown>
#17 0x7fceed09caa4 <unknown>
#18 0x7fceed129c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564d0a30945a <unknown>
#1 0x564d09dae760 <unknown>
#2 0x564d09de90d8 <unknown>
#3 0x564d09de42cf <unknown>
#4 0x564d09e348d6 <unknown>
#5 0x564d09e33f96 <unknown>
#6 0x564d09e25c23 <unknown>
#7 0x564d09df24a5 <unknown>
#8 0x564d09df3111 <unknown>
#9 0x564d0a2cdf1b <unknown>
#10 0x564d0a2d1e19 <unknown>
#11 0x564d0a2b4ac9 <unknown>
#12 0x564d0a2d29c8 <unknown>
#13 0x564d0a29934f <unknown>
#14 0x564d0a2f6a28 <unknown>
#15 0x564d0a2f6c06 <unknown>
#16 0x564d0a308336 <unknown>
#17 0x7fd7dbe9caa4 <unknown>
#18 0x7fd7dbf29c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5650d457645a <unknown>
#1 0x5650d401b760 <unknown>
#2 0x5650d40560d8 <unknown>
#3 0x5650d40512cf <unknown>
#4 0x5650d40a18d6 <unknown>
#5 0x5650d40a0f96 <unknown>
#6 0x5650d4092c23 <unknown>
#7 0x5650d405f4a5 <unknown>
#8 0x5650d4060111 <unknown>
#9 0x5650d453af1b <unknown>
#10 0x5650d453ee19 <unknown>
#11 0x5650d4521ac9 <unknown>
#12 0x5650d453f9c8 <unknown>
#13 0x5650d450634f <unknown>
#14 0x5650d4563a28 <unknown>
#15 0x5650d4563c06 <unknown>
#16 0x5650d4575336 <unknown>
#17 0x7f8970a9caa4 <unknown>
#18 0x7f8970b29c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55993470245a <unknown>
#1 0x5599341a7760 <unknown>
#2 0x5599341e20d8 <unknown>
#3 0x5599341dd2cf <unknown>
#4 0x55993422d8d6 <unknown>
#5 0x55993422cf96 <unknown>
#6 0x55993421ec23 <unknown>
#7 0x5599341eb4a5 <unknown>
#8 0x5599341ec111 <unknown>
#9 0x5599346c6f1b <unknown>
#10 0x5599346cae19 <unknown>
#11 0x5599346adac9 <unknown>
#12 0x5599346cb9c8 <unknown>
#13 0x55993469234f <unknown>
#14 0x5599346efa28 <unknown>
#15 0x5599346efc06 <unknown>
#16 0x559934701336 <unknown>
#17 0x7f701869caa4 <unknown>
#18 0x7f7018729c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x558d4675c45a <unknown>
#1 0x558d46201760 <unknown>
#2 0x558d4623c0d8 <unknown>
#3 0x558d462372cf <unknown>
#4 0x558d462878d6 <unknown>
#5 0x558d46286f96 <unknown>
#6 0x558d46278c23 <unknown>
#7 0x558d462454a5 <unknown>
#8 0x558d46246111 <unknown>
#9 0x558d46720f1b <unknown>
#10 0x558d46724e19 <unknown>
#11 0x558d46707ac9 <unknown>
#12 0x558d467259c8 <unknown>
#13 0x558d466ec34f <unknown>
#14 0x558d46749a28 <unknown>
#15 0x558d46749c06 <unknown>
#16 0x558d4675b336 <unknown>
#17 0x7f4b2a29caa4 <unknown>
#18 0x7f4b2a329c3c <unknown>
ERROR tests/test_login.py::test_blank_username_validation - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ed6908245a <unknown>
#1 0x55ed68b27760 <unknown>
#2 0x55ed68b620d8 <unknown>
#3 0x55ed68b5d2cf <unknown>
#4 0x55ed68bad8d6 <unknown>
#5 0x55ed68bacf96 <unknown>
#6 0x55ed68b9ec23 <unknown>
#7 0x55ed68b6b4a5 <unknown>
#8 0x55ed68b6c111 <unknown>
#9 0x55ed69046f1b <unknown>
#10 0x55ed6904ae19 <unknown>
#11 0x55ed6902dac9 <unknown>
#12 0x55ed6904b9c8 <unknown>
#13 0x55ed6901234f <unknown>
#14 0x55ed6906fa28 <unknown>
#15 0x55ed6906fc06 <unknown>
#16 0x55ed69081336 <unknown>
#17 0x7fb87589caa4 <unknown>
#18 0x7fb875929c3c <unknown>
ERROR tests/test_login.py::test_blank_password_validation - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55c89011f45a <unknown>
#1 0x55c88fbc4760 <unknown>
#2 0x55c88fbff0d8 <unknown>
#3 0x55c88fbfa2cf <unknown>
#4 0x55c88fc4a8d6 <unknown>
#5 0x55c88fc49f96 <unknown>
#6 0x55c88fc3bc23 <unknown>
#7 0x55c88fc084a5 <unknown>
#8 0x55c88fc09111 <unknown>
#9 0x55c8900e3f1b <unknown>
#10 0x55c8900e7e19 <unknown>
#11 0x55c8900caac9 <unknown>
#12 0x55c8900e89c8 <unknown>
#13 0x55c8900af34f <unknown>
#14 0x55c89010ca28 <unknown>
#15 0x55c89010cc06 <unknown>
#16 0x55c89011e336 <unknown>
#17 0x7fa88869caa4 <unknown>
#18 0x7fa888729c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username0] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55e774aef45a <unknown>
#1 0x55e774594760 <unknown>
#2 0x55e7745cf0d8 <unknown>
#3 0x55e7745ca2cf <unknown>
#4 0x55e77461a8d6 <unknown>
#5 0x55e774619f96 <unknown>
#6 0x55e77460bc23 <unknown>
#7 0x55e7745d84a5 <unknown>
#8 0x55e7745d9111 <unknown>
#9 0x55e774ab3f1b <unknown>
#10 0x55e774ab7e19 <unknown>
#11 0x55e774a9aac9 <unknown>
#12 0x55e774ab89c8 <unknown>
#13 0x55e774a7f34f <unknown>
#14 0x55e774adca28 <unknown>
#15 0x55e774adcc06 <unknown>
#16 0x55e774aee336 <unknown>
#17 0x7fef9d89caa4 <unknown>
#18 0x7fef9d929c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username1] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56448f83c45a <unknown>
#1 0x56448f2e1760 <unknown>
#2 0x56448f31c0d8 <unknown>
#3 0x56448f3172cf <unknown>
#4 0x56448f3678d6 <unknown>
#5 0x56448f366f96 <unknown>
#6 0x56448f358c23 <unknown>
#7 0x56448f3254a5 <unknown>
#8 0x56448f326111 <unknown>
#9 0x56448f800f1b <unknown>
#10 0x56448f804e19 <unknown>
#11 0x56448f7e7ac9 <unknown>
#12 0x56448f8059c8 <unknown>
#13 0x56448f7cc34f <unknown>
#14 0x56448f829a28 <unknown>
#15 0x56448f829c06 <unknown>
#16 0x56448f83b336 <unknown>
#17 0x7f166e69caa4 <unknown>
#18 0x7f166e729c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username2] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x564001e6145a <unknown>
#1 0x564001906760 <unknown>
#2 0x5640019410d8 <unknown>
#3 0x56400193c2cf <unknown>
#4 0x56400198c8d6 <unknown>
#5 0x56400198bf96 <unknown>
#6 0x56400197dc23 <unknown>
#7 0x56400194a4a5 <unknown>
#8 0x56400194b111 <unknown>
#9 0x564001e25f1b <unknown>
#10 0x564001e29e19 <unknown>
#11 0x564001e0cac9 <unknown>
#12 0x564001e2a9c8 <unknown>
#13 0x564001df134f <unknown>
#14 0x564001e4ea28 <unknown>
#15 0x564001e4ec06 <unknown>
#16 0x564001e60336 <unknown>
#17 0x7f54a569caa4 <unknown>
#18 0x7f54a5729c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username3] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5592b7d5c45a <unknown>
#1 0x5592b7801760 <unknown>
#2 0x5592b783c0d8 <unknown>
#3 0x5592b78372cf <unknown>
#4 0x5592b78878d6 <unknown>
#5 0x5592b7886f96 <unknown>
#6 0x5592b7878c23 <unknown>
#7 0x5592b78454a5 <unknown>
#8 0x5592b7846111 <unknown>
#9 0x5592b7d20f1b <unknown>
#10 0x5592b7d24e19 <unknown>
#11 0x5592b7d07ac9 <unknown>
#12 0x5592b7d259c8 <unknown>
#13 0x5592b7cec34f <unknown>
#14 0x5592b7d49a28 <unknown>
#15 0x5592b7d49c06 <unknown>
#16 0x5592b7d5b336 <unknown>
#17 0x7fcdb1e9caa4 <unknown>
#18 0x7fcdb1f29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username4] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x556dd92a945a <unknown>
#1 0x556dd8d4e760 <unknown>
#2 0x556dd8d890d8 <unknown>
#3 0x556dd8d842cf <unknown>
#4 0x556dd8dd48d6 <unknown>
#5 0x556dd8dd3f96 <unknown>
#6 0x556dd8dc5c23 <unknown>
#7 0x556dd8d924a5 <unknown>
#8 0x556dd8d93111 <unknown>
#9 0x556dd926df1b <unknown>
#10 0x556dd9271e19 <unknown>
#11 0x556dd9254ac9 <unknown>
#12 0x556dd92729c8 <unknown>
#13 0x556dd923934f <unknown>
#14 0x556dd9296a28 <unknown>
#15 0x556dd9296c06 <unknown>
#16 0x556dd92a8336 <unknown>
#17 0x7fd0ff29caa4 <unknown>
#18 0x7fd0ff329c3c <unknown>
============================= 19 errors in 32.51s ==============================
--------------------------------------------
Test Run Finished: 2025-07-02 18:32:28
Duration: 36 seconds
Status: FAILURE
Exit Code: 1
============================================
========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-02 19:04:53
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.5/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.5', 'Platform': 'Linux-6.11.0-1015-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'metadata': '3.1.1', 'rerunfailures': '15.1', 'html': '4.1.1', 'Faker': '37.4.0', 'xdist': '3.8.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: metadata-3.1.1, rerunfailures-15.1, html-4.1.1, Faker-37.4.0, xdist-3.8.0
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ERROR [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] ERROR [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ERROR [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] ERROR [ 21%]
tests/test_login.py::test_invalid_email_login[username0] ERROR           [ 26%]
tests/test_login.py::test_invalid_email_login[username1] ERROR           [ 31%]
tests/test_login.py::test_invalid_email_login[username2] ERROR           [ 36%]
tests/test_login.py::test_invalid_email_login[username3] ERROR           [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] ERROR [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] ERROR [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] ERROR [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ERROR [ 63%]
tests/test_login.py::test_blank_username_validation ERROR                [ 68%]
tests/test_login.py::test_blank_password_validation ERROR                [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] ERROR      [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] ERROR      [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] ERROR      [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] ERROR      [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] ERROR      [100%]

==================================== ERRORS ====================================
_ ERROR at setup of test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f99d7f0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x560181667336 \\u003Cunknown>\\n#17 0x7fabb669caa4 \\u003Cunknown>\\n#18 0x7fabb6729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x56018166845a <unknown>
E       #1 0x56018110d760 <unknown>
E       #2 0x5601811480d8 <unknown>
E       #3 0x5601811432cf <unknown>
E       #4 0x5601811938d6 <unknown>
E       #5 0x560181192f96 <unknown>
E       #6 0x560181184c23 <unknown>
E       #7 0x5601811514a5 <unknown>
E       #8 0x560181152111 <unknown>
E       #9 0x56018162cf1b <unknown>
E       #10 0x560181630e19 <unknown>
E       #11 0x560181613ac9 <unknown>
E       #12 0x5601816319c8 <unknown>
E       #13 0x5601815f834f <unknown>
E       #14 0x560181655a28 <unknown>
E       #15 0x560181655c06 <unknown>
E       #16 0x560181667336 <unknown>
E       #17 0x7fabb669caa4 <unknown>
E       #18 0x7fabb6729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x56018166845a <unknown>
E           #1 0x56018110d760 <unknown>
E           #2 0x5601811480d8 <unknown>
E           #3 0x5601811432cf <unknown>
E           #4 0x5601811938d6 <unknown>
E           #5 0x560181192f96 <unknown>
E           #6 0x560181184c23 <unknown>
E           #7 0x5601811514a5 <unknown>
E           #8 0x560181152111 <unknown>
E           #9 0x56018162cf1b <unknown>
E           #10 0x560181630e19 <unknown>
E           #11 0x560181613ac9 <unknown>
E           #12 0x5601816319c8 <unknown>
E           #13 0x5601815f834f <unknown>
E           #14 0x560181655a28 <unknown>
E           #15 0x560181655c06 <unknown>
E           #16 0x560181667336 <unknown>
E           #17 0x7fabb669caa4 <unknown>
E           #18 0x7fabb6729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:04:56,684 - INFO - Test data loaded successfully.
2025-07-02 19:04:56,685 - INFO - Starting test with Chrome browser
2025-07-02 19:04:56,685 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:03,921 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:03,960 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:03,991 - INFO - There is no [linux64] chromedriver "137.0.7151.119" for browser google-chrome "137.0.7151" in cache
2025-07-02 19:05:03,991 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:04,085 - INFO - WebDriver version 137.0.7151.119 selected
2025-07-02 19:05:04,088 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
2025-07-02 19:05:04,089 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
2025-07-02 19:05:04,137 - INFO - Driver downloading response is 200
2025-07-02 19:05:04,242 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:04,386 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119]
2025-07-02 19:05:08,697 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56018166845a <unknown>
#1 0x56018110d760 <unknown>
#2 0x5601811480d8 <unknown>
#3 0x5601811432cf <unknown>
#4 0x5601811938d6 <unknown>
#5 0x560181192f96 <unknown>
#6 0x560181184c23 <unknown>
#7 0x5601811514a5 <unknown>
#8 0x560181152111 <unknown>
#9 0x56018162cf1b <unknown>
#10 0x560181630e19 <unknown>
#11 0x560181613ac9 <unknown>
#12 0x5601816319c8 <unknown>
#13 0x5601815f834f <unknown>
#14 0x560181655a28 <unknown>
#15 0x560181655c06 <unknown>
#16 0x560181667336 <unknown>
#17 0x7fabb669caa4 <unknown>
#18 0x7fabb6729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "137.0.7151.119" for browser google-chrome "137.0.7151" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 137.0.7151.119 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.119/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119]
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56018166845a <unknown>
#1 0x56018110d760 <unknown>
#2 0x5601811480d8 <unknown>
#3 0x5601811432cf <unknown>
#4 0x5601811938d6 <unknown>
#5 0x560181192f96 <unknown>
#6 0x560181184c23 <unknown>
#7 0x5601811514a5 <unknown>
#8 0x560181152111 <unknown>
#9 0x56018162cf1b <unknown>
#10 0x560181630e19 <unknown>
#11 0x560181613ac9 <unknown>
#12 0x5601816319c8 <unknown>
#13 0x5601815f834f <unknown>
#14 0x560181655a28 <unknown>
#15 0x560181655c06 <unknown>
#16 0x560181667336 <unknown>
#17 0x7fabb669caa4 <unknown>
#18 0x7fabb6729c3c <unknown>
____ ERROR at setup of test_valid_login[samatakamble9@gmail.com-Samata@16] _____

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f9aae90>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55a1ba323336 \\u003Cunknown>\\n#17 0x7fa3c1e9caa4 \\u003Cunknown>\\n#18 0x7fa3c1f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55a1ba32445a <unknown>
E       #1 0x55a1b9dc9760 <unknown>
E       #2 0x55a1b9e040d8 <unknown>
E       #3 0x55a1b9dff2cf <unknown>
E       #4 0x55a1b9e4f8d6 <unknown>
E       #5 0x55a1b9e4ef96 <unknown>
E       #6 0x55a1b9e40c23 <unknown>
E       #7 0x55a1b9e0d4a5 <unknown>
E       #8 0x55a1b9e0e111 <unknown>
E       #9 0x55a1ba2e8f1b <unknown>
E       #10 0x55a1ba2ece19 <unknown>
E       #11 0x55a1ba2cfac9 <unknown>
E       #12 0x55a1ba2ed9c8 <unknown>
E       #13 0x55a1ba2b434f <unknown>
E       #14 0x55a1ba311a28 <unknown>
E       #15 0x55a1ba311c06 <unknown>
E       #16 0x55a1ba323336 <unknown>
E       #17 0x7fa3c1e9caa4 <unknown>
E       #18 0x7fa3c1f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55a1ba32445a <unknown>
E           #1 0x55a1b9dc9760 <unknown>
E           #2 0x55a1b9e040d8 <unknown>
E           #3 0x55a1b9dff2cf <unknown>
E           #4 0x55a1b9e4f8d6 <unknown>
E           #5 0x55a1b9e4ef96 <unknown>
E           #6 0x55a1b9e40c23 <unknown>
E           #7 0x55a1b9e0d4a5 <unknown>
E           #8 0x55a1b9e0e111 <unknown>
E           #9 0x55a1ba2e8f1b <unknown>
E           #10 0x55a1ba2ece19 <unknown>
E           #11 0x55a1ba2cfac9 <unknown>
E           #12 0x55a1ba2ed9c8 <unknown>
E           #13 0x55a1ba2b434f <unknown>
E           #14 0x55a1ba311a28 <unknown>
E           #15 0x55a1ba311c06 <unknown>
E           #16 0x55a1ba323336 <unknown>
E           #17 0x7fa3c1e9caa4 <unknown>
E           #18 0x7fa3c1f29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:08,763 - INFO - Starting test with Chrome browser
2025-07-02 19:05:08,763 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:08,872 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:08,904 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:09,028 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:10,119 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a1ba32445a <unknown>
#1 0x55a1b9dc9760 <unknown>
#2 0x55a1b9e040d8 <unknown>
#3 0x55a1b9dff2cf <unknown>
#4 0x55a1b9e4f8d6 <unknown>
#5 0x55a1b9e4ef96 <unknown>
#6 0x55a1b9e40c23 <unknown>
#7 0x55a1b9e0d4a5 <unknown>
#8 0x55a1b9e0e111 <unknown>
#9 0x55a1ba2e8f1b <unknown>
#10 0x55a1ba2ece19 <unknown>
#11 0x55a1ba2cfac9 <unknown>
#12 0x55a1ba2ed9c8 <unknown>
#13 0x55a1ba2b434f <unknown>
#14 0x55a1ba311a28 <unknown>
#15 0x55a1ba311c06 <unknown>
#16 0x55a1ba323336 <unknown>
#17 0x7fa3c1e9caa4 <unknown>
#18 0x7fa3c1f29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a1ba32445a <unknown>
#1 0x55a1b9dc9760 <unknown>
#2 0x55a1b9e040d8 <unknown>
#3 0x55a1b9dff2cf <unknown>
#4 0x55a1b9e4f8d6 <unknown>
#5 0x55a1b9e4ef96 <unknown>
#6 0x55a1b9e40c23 <unknown>
#7 0x55a1b9e0d4a5 <unknown>
#8 0x55a1b9e0e111 <unknown>
#9 0x55a1ba2e8f1b <unknown>
#10 0x55a1ba2ece19 <unknown>
#11 0x55a1ba2cfac9 <unknown>
#12 0x55a1ba2ed9c8 <unknown>
#13 0x55a1ba2b434f <unknown>
#14 0x55a1ba311a28 <unknown>
#15 0x55a1ba311c06 <unknown>
#16 0x55a1ba323336 <unknown>
#17 0x7fa3c1e9caa4 <unknown>
#18 0x7fa3c1f29c3c <unknown>
__ ERROR at setup of test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ___

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f968690>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55aac4d54336 \\u003Cunknown>\\n#17 0x7f03ba29caa4 \\u003Cunknown>\\n#18 0x7f03ba329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55aac4d5545a <unknown>
E       #1 0x55aac47fa760 <unknown>
E       #2 0x55aac48350d8 <unknown>
E       #3 0x55aac48302cf <unknown>
E       #4 0x55aac48808d6 <unknown>
E       #5 0x55aac487ff96 <unknown>
E       #6 0x55aac4871c23 <unknown>
E       #7 0x55aac483e4a5 <unknown>
E       #8 0x55aac483f111 <unknown>
E       #9 0x55aac4d19f1b <unknown>
E       #10 0x55aac4d1de19 <unknown>
E       #11 0x55aac4d00ac9 <unknown>
E       #12 0x55aac4d1e9c8 <unknown>
E       #13 0x55aac4ce534f <unknown>
E       #14 0x55aac4d42a28 <unknown>
E       #15 0x55aac4d42c06 <unknown>
E       #16 0x55aac4d54336 <unknown>
E       #17 0x7f03ba29caa4 <unknown>
E       #18 0x7f03ba329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55aac4d5545a <unknown>
E           #1 0x55aac47fa760 <unknown>
E           #2 0x55aac48350d8 <unknown>
E           #3 0x55aac48302cf <unknown>
E           #4 0x55aac48808d6 <unknown>
E           #5 0x55aac487ff96 <unknown>
E           #6 0x55aac4871c23 <unknown>
E           #7 0x55aac483e4a5 <unknown>
E           #8 0x55aac483f111 <unknown>
E           #9 0x55aac4d19f1b <unknown>
E           #10 0x55aac4d1de19 <unknown>
E           #11 0x55aac4d00ac9 <unknown>
E           #12 0x55aac4d1e9c8 <unknown>
E           #13 0x55aac4ce534f <unknown>
E           #14 0x55aac4d42a28 <unknown>
E           #15 0x55aac4d42c06 <unknown>
E           #16 0x55aac4d54336 <unknown>
E           #17 0x7f03ba29caa4 <unknown>
E           #18 0x7f03ba329c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:10,159 - INFO - Starting test with Chrome browser
2025-07-02 19:05:10,159 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:10,271 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:10,303 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:10,334 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:11,424 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55aac4d5545a <unknown>
#1 0x55aac47fa760 <unknown>
#2 0x55aac48350d8 <unknown>
#3 0x55aac48302cf <unknown>
#4 0x55aac48808d6 <unknown>
#5 0x55aac487ff96 <unknown>
#6 0x55aac4871c23 <unknown>
#7 0x55aac483e4a5 <unknown>
#8 0x55aac483f111 <unknown>
#9 0x55aac4d19f1b <unknown>
#10 0x55aac4d1de19 <unknown>
#11 0x55aac4d00ac9 <unknown>
#12 0x55aac4d1e9c8 <unknown>
#13 0x55aac4ce534f <unknown>
#14 0x55aac4d42a28 <unknown>
#15 0x55aac4d42c06 <unknown>
#16 0x55aac4d54336 <unknown>
#17 0x7f03ba29caa4 <unknown>
#18 0x7f03ba329c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55aac4d5545a <unknown>
#1 0x55aac47fa760 <unknown>
#2 0x55aac48350d8 <unknown>
#3 0x55aac48302cf <unknown>
#4 0x55aac48808d6 <unknown>
#5 0x55aac487ff96 <unknown>
#6 0x55aac4871c23 <unknown>
#7 0x55aac483e4a5 <unknown>
#8 0x55aac483f111 <unknown>
#9 0x55aac4d19f1b <unknown>
#10 0x55aac4d1de19 <unknown>
#11 0x55aac4d00ac9 <unknown>
#12 0x55aac4d1e9c8 <unknown>
#13 0x55aac4ce534f <unknown>
#14 0x55aac4d42a28 <unknown>
#15 0x55aac4d42c06 <unknown>
#16 0x55aac4d54336 <unknown>
#17 0x7f03ba29caa4 <unknown>
#18 0x7f03ba329c3c <unknown>
_ ERROR at setup of test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4ea70770>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5601a407e336 \\u003Cunknown>\\n#17 0x7f7cbd89caa4 \\u003Cunknown>\\n#18 0x7f7cbd929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5601a407f45a <unknown>
E       #1 0x5601a3b24760 <unknown>
E       #2 0x5601a3b5f0d8 <unknown>
E       #3 0x5601a3b5a2cf <unknown>
E       #4 0x5601a3baa8d6 <unknown>
E       #5 0x5601a3ba9f96 <unknown>
E       #6 0x5601a3b9bc23 <unknown>
E       #7 0x5601a3b684a5 <unknown>
E       #8 0x5601a3b69111 <unknown>
E       #9 0x5601a4043f1b <unknown>
E       #10 0x5601a4047e19 <unknown>
E       #11 0x5601a402aac9 <unknown>
E       #12 0x5601a40489c8 <unknown>
E       #13 0x5601a400f34f <unknown>
E       #14 0x5601a406ca28 <unknown>
E       #15 0x5601a406cc06 <unknown>
E       #16 0x5601a407e336 <unknown>
E       #17 0x7f7cbd89caa4 <unknown>
E       #18 0x7f7cbd929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5601a407f45a <unknown>
E           #1 0x5601a3b24760 <unknown>
E           #2 0x5601a3b5f0d8 <unknown>
E           #3 0x5601a3b5a2cf <unknown>
E           #4 0x5601a3baa8d6 <unknown>
E           #5 0x5601a3ba9f96 <unknown>
E           #6 0x5601a3b9bc23 <unknown>
E           #7 0x5601a3b684a5 <unknown>
E           #8 0x5601a3b69111 <unknown>
E           #9 0x5601a4043f1b <unknown>
E           #10 0x5601a4047e19 <unknown>
E           #11 0x5601a402aac9 <unknown>
E           #12 0x5601a40489c8 <unknown>
E           #13 0x5601a400f34f <unknown>
E           #14 0x5601a406ca28 <unknown>
E           #15 0x5601a406cc06 <unknown>
E           #16 0x5601a407e336 <unknown>
E           #17 0x7f7cbd89caa4 <unknown>
E           #18 0x7f7cbd929c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:11,462 - INFO - Starting test with Chrome browser
2025-07-02 19:05:11,462 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:11,573 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:11,605 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:11,636 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:12,726 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5601a407f45a <unknown>
#1 0x5601a3b24760 <unknown>
#2 0x5601a3b5f0d8 <unknown>
#3 0x5601a3b5a2cf <unknown>
#4 0x5601a3baa8d6 <unknown>
#5 0x5601a3ba9f96 <unknown>
#6 0x5601a3b9bc23 <unknown>
#7 0x5601a3b684a5 <unknown>
#8 0x5601a3b69111 <unknown>
#9 0x5601a4043f1b <unknown>
#10 0x5601a4047e19 <unknown>
#11 0x5601a402aac9 <unknown>
#12 0x5601a40489c8 <unknown>
#13 0x5601a400f34f <unknown>
#14 0x5601a406ca28 <unknown>
#15 0x5601a406cc06 <unknown>
#16 0x5601a407e336 <unknown>
#17 0x7f7cbd89caa4 <unknown>
#18 0x7f7cbd929c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5601a407f45a <unknown>
#1 0x5601a3b24760 <unknown>
#2 0x5601a3b5f0d8 <unknown>
#3 0x5601a3b5a2cf <unknown>
#4 0x5601a3baa8d6 <unknown>
#5 0x5601a3ba9f96 <unknown>
#6 0x5601a3b9bc23 <unknown>
#7 0x5601a3b684a5 <unknown>
#8 0x5601a3b69111 <unknown>
#9 0x5601a4043f1b <unknown>
#10 0x5601a4047e19 <unknown>
#11 0x5601a402aac9 <unknown>
#12 0x5601a40489c8 <unknown>
#13 0x5601a400f34f <unknown>
#14 0x5601a406ca28 <unknown>
#15 0x5601a406cc06 <unknown>
#16 0x5601a407e336 <unknown>
#17 0x7f7cbd89caa4 <unknown>
#18 0x7f7cbd929c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username0] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4ea71940>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55a8bc9d4336 \\u003Cunknown>\\n#17 0x7f274ce9caa4 \\u003Cunknown>\\n#18 0x7f274cf29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55a8bc9d545a <unknown>
E       #1 0x55a8bc47a760 <unknown>
E       #2 0x55a8bc4b50d8 <unknown>
E       #3 0x55a8bc4b02cf <unknown>
E       #4 0x55a8bc5008d6 <unknown>
E       #5 0x55a8bc4fff96 <unknown>
E       #6 0x55a8bc4f1c23 <unknown>
E       #7 0x55a8bc4be4a5 <unknown>
E       #8 0x55a8bc4bf111 <unknown>
E       #9 0x55a8bc999f1b <unknown>
E       #10 0x55a8bc99de19 <unknown>
E       #11 0x55a8bc980ac9 <unknown>
E       #12 0x55a8bc99e9c8 <unknown>
E       #13 0x55a8bc96534f <unknown>
E       #14 0x55a8bc9c2a28 <unknown>
E       #15 0x55a8bc9c2c06 <unknown>
E       #16 0x55a8bc9d4336 <unknown>
E       #17 0x7f274ce9caa4 <unknown>
E       #18 0x7f274cf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55a8bc9d545a <unknown>
E           #1 0x55a8bc47a760 <unknown>
E           #2 0x55a8bc4b50d8 <unknown>
E           #3 0x55a8bc4b02cf <unknown>
E           #4 0x55a8bc5008d6 <unknown>
E           #5 0x55a8bc4fff96 <unknown>
E           #6 0x55a8bc4f1c23 <unknown>
E           #7 0x55a8bc4be4a5 <unknown>
E           #8 0x55a8bc4bf111 <unknown>
E           #9 0x55a8bc999f1b <unknown>
E           #10 0x55a8bc99de19 <unknown>
E           #11 0x55a8bc980ac9 <unknown>
E           #12 0x55a8bc99e9c8 <unknown>
E           #13 0x55a8bc96534f <unknown>
E           #14 0x55a8bc9c2a28 <unknown>
E           #15 0x55a8bc9c2c06 <unknown>
E           #16 0x55a8bc9d4336 <unknown>
E           #17 0x7f274ce9caa4 <unknown>
E           #18 0x7f274cf29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:12,765 - INFO - Starting test with Chrome browser
2025-07-02 19:05:12,765 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:12,881 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:12,914 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:12,947 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:14,037 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a8bc9d545a <unknown>
#1 0x55a8bc47a760 <unknown>
#2 0x55a8bc4b50d8 <unknown>
#3 0x55a8bc4b02cf <unknown>
#4 0x55a8bc5008d6 <unknown>
#5 0x55a8bc4fff96 <unknown>
#6 0x55a8bc4f1c23 <unknown>
#7 0x55a8bc4be4a5 <unknown>
#8 0x55a8bc4bf111 <unknown>
#9 0x55a8bc999f1b <unknown>
#10 0x55a8bc99de19 <unknown>
#11 0x55a8bc980ac9 <unknown>
#12 0x55a8bc99e9c8 <unknown>
#13 0x55a8bc96534f <unknown>
#14 0x55a8bc9c2a28 <unknown>
#15 0x55a8bc9c2c06 <unknown>
#16 0x55a8bc9d4336 <unknown>
#17 0x7f274ce9caa4 <unknown>
#18 0x7f274cf29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a8bc9d545a <unknown>
#1 0x55a8bc47a760 <unknown>
#2 0x55a8bc4b50d8 <unknown>
#3 0x55a8bc4b02cf <unknown>
#4 0x55a8bc5008d6 <unknown>
#5 0x55a8bc4fff96 <unknown>
#6 0x55a8bc4f1c23 <unknown>
#7 0x55a8bc4be4a5 <unknown>
#8 0x55a8bc4bf111 <unknown>
#9 0x55a8bc999f1b <unknown>
#10 0x55a8bc99de19 <unknown>
#11 0x55a8bc980ac9 <unknown>
#12 0x55a8bc99e9c8 <unknown>
#13 0x55a8bc96534f <unknown>
#14 0x55a8bc9c2a28 <unknown>
#15 0x55a8bc9c2c06 <unknown>
#16 0x55a8bc9d4336 <unknown>
#17 0x7f274ce9caa4 <unknown>
#18 0x7f274cf29c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username1] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa508e4830>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5636fa01e336 \\u003Cunknown>\\n#17 0x7feccf49caa4 \\u003Cunknown>\\n#18 0x7feccf529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5636fa01f45a <unknown>
E       #1 0x5636f9ac4760 <unknown>
E       #2 0x5636f9aff0d8 <unknown>
E       #3 0x5636f9afa2cf <unknown>
E       #4 0x5636f9b4a8d6 <unknown>
E       #5 0x5636f9b49f96 <unknown>
E       #6 0x5636f9b3bc23 <unknown>
E       #7 0x5636f9b084a5 <unknown>
E       #8 0x5636f9b09111 <unknown>
E       #9 0x5636f9fe3f1b <unknown>
E       #10 0x5636f9fe7e19 <unknown>
E       #11 0x5636f9fcaac9 <unknown>
E       #12 0x5636f9fe89c8 <unknown>
E       #13 0x5636f9faf34f <unknown>
E       #14 0x5636fa00ca28 <unknown>
E       #15 0x5636fa00cc06 <unknown>
E       #16 0x5636fa01e336 <unknown>
E       #17 0x7feccf49caa4 <unknown>
E       #18 0x7feccf529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5636fa01f45a <unknown>
E           #1 0x5636f9ac4760 <unknown>
E           #2 0x5636f9aff0d8 <unknown>
E           #3 0x5636f9afa2cf <unknown>
E           #4 0x5636f9b4a8d6 <unknown>
E           #5 0x5636f9b49f96 <unknown>
E           #6 0x5636f9b3bc23 <unknown>
E           #7 0x5636f9b084a5 <unknown>
E           #8 0x5636f9b09111 <unknown>
E           #9 0x5636f9fe3f1b <unknown>
E           #10 0x5636f9fe7e19 <unknown>
E           #11 0x5636f9fcaac9 <unknown>
E           #12 0x5636f9fe89c8 <unknown>
E           #13 0x5636f9faf34f <unknown>
E           #14 0x5636fa00ca28 <unknown>
E           #15 0x5636fa00cc06 <unknown>
E           #16 0x5636fa01e336 <unknown>
E           #17 0x7feccf49caa4 <unknown>
E           #18 0x7feccf529c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:14,074 - INFO - Starting test with Chrome browser
2025-07-02 19:05:14,074 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:14,187 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:14,220 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:14,252 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:15,342 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5636fa01f45a <unknown>
#1 0x5636f9ac4760 <unknown>
#2 0x5636f9aff0d8 <unknown>
#3 0x5636f9afa2cf <unknown>
#4 0x5636f9b4a8d6 <unknown>
#5 0x5636f9b49f96 <unknown>
#6 0x5636f9b3bc23 <unknown>
#7 0x5636f9b084a5 <unknown>
#8 0x5636f9b09111 <unknown>
#9 0x5636f9fe3f1b <unknown>
#10 0x5636f9fe7e19 <unknown>
#11 0x5636f9fcaac9 <unknown>
#12 0x5636f9fe89c8 <unknown>
#13 0x5636f9faf34f <unknown>
#14 0x5636fa00ca28 <unknown>
#15 0x5636fa00cc06 <unknown>
#16 0x5636fa01e336 <unknown>
#17 0x7feccf49caa4 <unknown>
#18 0x7feccf529c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5636fa01f45a <unknown>
#1 0x5636f9ac4760 <unknown>
#2 0x5636f9aff0d8 <unknown>
#3 0x5636f9afa2cf <unknown>
#4 0x5636f9b4a8d6 <unknown>
#5 0x5636f9b49f96 <unknown>
#6 0x5636f9b3bc23 <unknown>
#7 0x5636f9b084a5 <unknown>
#8 0x5636f9b09111 <unknown>
#9 0x5636f9fe3f1b <unknown>
#10 0x5636f9fe7e19 <unknown>
#11 0x5636f9fcaac9 <unknown>
#12 0x5636f9fe89c8 <unknown>
#13 0x5636f9faf34f <unknown>
#14 0x5636fa00ca28 <unknown>
#15 0x5636fa00cc06 <unknown>
#16 0x5636fa01e336 <unknown>
#17 0x7feccf49caa4 <unknown>
#18 0x7feccf529c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username2] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f94e690>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55ad9ac52336 \\u003Cunknown>\\n#17 0x7fa31d69caa4 \\u003Cunknown>\\n#18 0x7fa31d729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55ad9ac5345a <unknown>
E       #1 0x55ad9a6f8760 <unknown>
E       #2 0x55ad9a7330d8 <unknown>
E       #3 0x55ad9a72e2cf <unknown>
E       #4 0x55ad9a77e8d6 <unknown>
E       #5 0x55ad9a77df96 <unknown>
E       #6 0x55ad9a76fc23 <unknown>
E       #7 0x55ad9a73c4a5 <unknown>
E       #8 0x55ad9a73d111 <unknown>
E       #9 0x55ad9ac17f1b <unknown>
E       #10 0x55ad9ac1be19 <unknown>
E       #11 0x55ad9abfeac9 <unknown>
E       #12 0x55ad9ac1c9c8 <unknown>
E       #13 0x55ad9abe334f <unknown>
E       #14 0x55ad9ac40a28 <unknown>
E       #15 0x55ad9ac40c06 <unknown>
E       #16 0x55ad9ac52336 <unknown>
E       #17 0x7fa31d69caa4 <unknown>
E       #18 0x7fa31d729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55ad9ac5345a <unknown>
E           #1 0x55ad9a6f8760 <unknown>
E           #2 0x55ad9a7330d8 <unknown>
E           #3 0x55ad9a72e2cf <unknown>
E           #4 0x55ad9a77e8d6 <unknown>
E           #5 0x55ad9a77df96 <unknown>
E           #6 0x55ad9a76fc23 <unknown>
E           #7 0x55ad9a73c4a5 <unknown>
E           #8 0x55ad9a73d111 <unknown>
E           #9 0x55ad9ac17f1b <unknown>
E           #10 0x55ad9ac1be19 <unknown>
E           #11 0x55ad9abfeac9 <unknown>
E           #12 0x55ad9ac1c9c8 <unknown>
E           #13 0x55ad9abe334f <unknown>
E           #14 0x55ad9ac40a28 <unknown>
E           #15 0x55ad9ac40c06 <unknown>
E           #16 0x55ad9ac52336 <unknown>
E           #17 0x7fa31d69caa4 <unknown>
E           #18 0x7fa31d729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:15,381 - INFO - Starting test with Chrome browser
2025-07-02 19:05:15,381 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:15,493 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:15,527 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:15,558 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:16,648 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ad9ac5345a <unknown>
#1 0x55ad9a6f8760 <unknown>
#2 0x55ad9a7330d8 <unknown>
#3 0x55ad9a72e2cf <unknown>
#4 0x55ad9a77e8d6 <unknown>
#5 0x55ad9a77df96 <unknown>
#6 0x55ad9a76fc23 <unknown>
#7 0x55ad9a73c4a5 <unknown>
#8 0x55ad9a73d111 <unknown>
#9 0x55ad9ac17f1b <unknown>
#10 0x55ad9ac1be19 <unknown>
#11 0x55ad9abfeac9 <unknown>
#12 0x55ad9ac1c9c8 <unknown>
#13 0x55ad9abe334f <unknown>
#14 0x55ad9ac40a28 <unknown>
#15 0x55ad9ac40c06 <unknown>
#16 0x55ad9ac52336 <unknown>
#17 0x7fa31d69caa4 <unknown>
#18 0x7fa31d729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ad9ac5345a <unknown>
#1 0x55ad9a6f8760 <unknown>
#2 0x55ad9a7330d8 <unknown>
#3 0x55ad9a72e2cf <unknown>
#4 0x55ad9a77e8d6 <unknown>
#5 0x55ad9a77df96 <unknown>
#6 0x55ad9a76fc23 <unknown>
#7 0x55ad9a73c4a5 <unknown>
#8 0x55ad9a73d111 <unknown>
#9 0x55ad9ac17f1b <unknown>
#10 0x55ad9ac1be19 <unknown>
#11 0x55ad9abfeac9 <unknown>
#12 0x55ad9ac1c9c8 <unknown>
#13 0x55ad9abe334f <unknown>
#14 0x55ad9ac40a28 <unknown>
#15 0x55ad9ac40c06 <unknown>
#16 0x55ad9ac52336 <unknown>
#17 0x7fa31d69caa4 <unknown>
#18 0x7fa31d729c3c <unknown>
____________ ERROR at setup of test_invalid_email_login[username3] _____________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa508eacf0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x562343996336 \\u003Cunknown>\\n#17 0x7f48e9a9caa4 \\u003Cunknown>\\n#18 0x7f48e9b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x56234399745a <unknown>
E       #1 0x56234343c760 <unknown>
E       #2 0x5623434770d8 <unknown>
E       #3 0x5623434722cf <unknown>
E       #4 0x5623434c28d6 <unknown>
E       #5 0x5623434c1f96 <unknown>
E       #6 0x5623434b3c23 <unknown>
E       #7 0x5623434804a5 <unknown>
E       #8 0x562343481111 <unknown>
E       #9 0x56234395bf1b <unknown>
E       #10 0x56234395fe19 <unknown>
E       #11 0x562343942ac9 <unknown>
E       #12 0x5623439609c8 <unknown>
E       #13 0x56234392734f <unknown>
E       #14 0x562343984a28 <unknown>
E       #15 0x562343984c06 <unknown>
E       #16 0x562343996336 <unknown>
E       #17 0x7f48e9a9caa4 <unknown>
E       #18 0x7f48e9b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x56234399745a <unknown>
E           #1 0x56234343c760 <unknown>
E           #2 0x5623434770d8 <unknown>
E           #3 0x5623434722cf <unknown>
E           #4 0x5623434c28d6 <unknown>
E           #5 0x5623434c1f96 <unknown>
E           #6 0x5623434b3c23 <unknown>
E           #7 0x5623434804a5 <unknown>
E           #8 0x562343481111 <unknown>
E           #9 0x56234395bf1b <unknown>
E           #10 0x56234395fe19 <unknown>
E           #11 0x562343942ac9 <unknown>
E           #12 0x5623439609c8 <unknown>
E           #13 0x56234392734f <unknown>
E           #14 0x562343984a28 <unknown>
E           #15 0x562343984c06 <unknown>
E           #16 0x562343996336 <unknown>
E           #17 0x7f48e9a9caa4 <unknown>
E           #18 0x7f48e9b29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:16,687 - INFO - Starting test with Chrome browser
2025-07-02 19:05:16,687 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:16,798 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:16,829 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:16,862 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:17,955 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56234399745a <unknown>
#1 0x56234343c760 <unknown>
#2 0x5623434770d8 <unknown>
#3 0x5623434722cf <unknown>
#4 0x5623434c28d6 <unknown>
#5 0x5623434c1f96 <unknown>
#6 0x5623434b3c23 <unknown>
#7 0x5623434804a5 <unknown>
#8 0x562343481111 <unknown>
#9 0x56234395bf1b <unknown>
#10 0x56234395fe19 <unknown>
#11 0x562343942ac9 <unknown>
#12 0x5623439609c8 <unknown>
#13 0x56234392734f <unknown>
#14 0x562343984a28 <unknown>
#15 0x562343984c06 <unknown>
#16 0x562343996336 <unknown>
#17 0x7f48e9a9caa4 <unknown>
#18 0x7f48e9b29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56234399745a <unknown>
#1 0x56234343c760 <unknown>
#2 0x5623434770d8 <unknown>
#3 0x5623434722cf <unknown>
#4 0x5623434c28d6 <unknown>
#5 0x5623434c1f96 <unknown>
#6 0x5623434b3c23 <unknown>
#7 0x5623434804a5 <unknown>
#8 0x562343481111 <unknown>
#9 0x56234395bf1b <unknown>
#10 0x56234395fe19 <unknown>
#11 0x562343942ac9 <unknown>
#12 0x5623439609c8 <unknown>
#13 0x56234392734f <unknown>
#14 0x562343984a28 <unknown>
#15 0x562343984c06 <unknown>
#16 0x562343996336 <unknown>
#17 0x7f48e9a9caa4 <unknown>
#18 0x7f48e9b29c3c <unknown>
_ ERROR at setup of test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f96cb50>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5601acb7b336 \\u003Cunknown>\\n#17 0x7f446e29caa4 \\u003Cunknown>\\n#18 0x7f446e329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5601acb7c45a <unknown>
E       #1 0x5601ac621760 <unknown>
E       #2 0x5601ac65c0d8 <unknown>
E       #3 0x5601ac6572cf <unknown>
E       #4 0x5601ac6a78d6 <unknown>
E       #5 0x5601ac6a6f96 <unknown>
E       #6 0x5601ac698c23 <unknown>
E       #7 0x5601ac6654a5 <unknown>
E       #8 0x5601ac666111 <unknown>
E       #9 0x5601acb40f1b <unknown>
E       #10 0x5601acb44e19 <unknown>
E       #11 0x5601acb27ac9 <unknown>
E       #12 0x5601acb459c8 <unknown>
E       #13 0x5601acb0c34f <unknown>
E       #14 0x5601acb69a28 <unknown>
E       #15 0x5601acb69c06 <unknown>
E       #16 0x5601acb7b336 <unknown>
E       #17 0x7f446e29caa4 <unknown>
E       #18 0x7f446e329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5601acb7c45a <unknown>
E           #1 0x5601ac621760 <unknown>
E           #2 0x5601ac65c0d8 <unknown>
E           #3 0x5601ac6572cf <unknown>
E           #4 0x5601ac6a78d6 <unknown>
E           #5 0x5601ac6a6f96 <unknown>
E           #6 0x5601ac698c23 <unknown>
E           #7 0x5601ac6654a5 <unknown>
E           #8 0x5601ac666111 <unknown>
E           #9 0x5601acb40f1b <unknown>
E           #10 0x5601acb44e19 <unknown>
E           #11 0x5601acb27ac9 <unknown>
E           #12 0x5601acb459c8 <unknown>
E           #13 0x5601acb0c34f <unknown>
E           #14 0x5601acb69a28 <unknown>
E           #15 0x5601acb69c06 <unknown>
E           #16 0x5601acb7b336 <unknown>
E           #17 0x7f446e29caa4 <unknown>
E           #18 0x7f446e329c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:18,003 - INFO - Starting test with Chrome browser
2025-07-02 19:05:18,003 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:18,113 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:18,146 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:18,177 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:19,267 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5601acb7c45a <unknown>
#1 0x5601ac621760 <unknown>
#2 0x5601ac65c0d8 <unknown>
#3 0x5601ac6572cf <unknown>
#4 0x5601ac6a78d6 <unknown>
#5 0x5601ac6a6f96 <unknown>
#6 0x5601ac698c23 <unknown>
#7 0x5601ac6654a5 <unknown>
#8 0x5601ac666111 <unknown>
#9 0x5601acb40f1b <unknown>
#10 0x5601acb44e19 <unknown>
#11 0x5601acb27ac9 <unknown>
#12 0x5601acb459c8 <unknown>
#13 0x5601acb0c34f <unknown>
#14 0x5601acb69a28 <unknown>
#15 0x5601acb69c06 <unknown>
#16 0x5601acb7b336 <unknown>
#17 0x7f446e29caa4 <unknown>
#18 0x7f446e329c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5601acb7c45a <unknown>
#1 0x5601ac621760 <unknown>
#2 0x5601ac65c0d8 <unknown>
#3 0x5601ac6572cf <unknown>
#4 0x5601ac6a78d6 <unknown>
#5 0x5601ac6a6f96 <unknown>
#6 0x5601ac698c23 <unknown>
#7 0x5601ac6654a5 <unknown>
#8 0x5601ac666111 <unknown>
#9 0x5601acb40f1b <unknown>
#10 0x5601acb44e19 <unknown>
#11 0x5601acb27ac9 <unknown>
#12 0x5601acb459c8 <unknown>
#13 0x5601acb0c34f <unknown>
#14 0x5601acb69a28 <unknown>
#15 0x5601acb69c06 <unknown>
#16 0x5601acb7b336 <unknown>
#17 0x7f446e29caa4 <unknown>
#18 0x7f446e329c3c <unknown>
_ ERROR at setup of test_invalid_password_login[samatakamble9@gmail.com-Password@12] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f96f150>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x5602c1d22336 \\u003Cunknown>\\n#17 0x7f06a789caa4 \\u003Cunknown>\\n#18 0x7f06a7929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x5602c1d2345a <unknown>
E       #1 0x5602c17c8760 <unknown>
E       #2 0x5602c18030d8 <unknown>
E       #3 0x5602c17fe2cf <unknown>
E       #4 0x5602c184e8d6 <unknown>
E       #5 0x5602c184df96 <unknown>
E       #6 0x5602c183fc23 <unknown>
E       #7 0x5602c180c4a5 <unknown>
E       #8 0x5602c180d111 <unknown>
E       #9 0x5602c1ce7f1b <unknown>
E       #10 0x5602c1cebe19 <unknown>
E       #11 0x5602c1cceac9 <unknown>
E       #12 0x5602c1cec9c8 <unknown>
E       #13 0x5602c1cb334f <unknown>
E       #14 0x5602c1d10a28 <unknown>
E       #15 0x5602c1d10c06 <unknown>
E       #16 0x5602c1d22336 <unknown>
E       #17 0x7f06a789caa4 <unknown>
E       #18 0x7f06a7929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x5602c1d2345a <unknown>
E           #1 0x5602c17c8760 <unknown>
E           #2 0x5602c18030d8 <unknown>
E           #3 0x5602c17fe2cf <unknown>
E           #4 0x5602c184e8d6 <unknown>
E           #5 0x5602c184df96 <unknown>
E           #6 0x5602c183fc23 <unknown>
E           #7 0x5602c180c4a5 <unknown>
E           #8 0x5602c180d111 <unknown>
E           #9 0x5602c1ce7f1b <unknown>
E           #10 0x5602c1cebe19 <unknown>
E           #11 0x5602c1cceac9 <unknown>
E           #12 0x5602c1cec9c8 <unknown>
E           #13 0x5602c1cb334f <unknown>
E           #14 0x5602c1d10a28 <unknown>
E           #15 0x5602c1d10c06 <unknown>
E           #16 0x5602c1d22336 <unknown>
E           #17 0x7f06a789caa4 <unknown>
E           #18 0x7f06a7929c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:19,304 - INFO - Starting test with Chrome browser
2025-07-02 19:05:19,304 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:19,414 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:19,447 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:19,478 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:20,570 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5602c1d2345a <unknown>
#1 0x5602c17c8760 <unknown>
#2 0x5602c18030d8 <unknown>
#3 0x5602c17fe2cf <unknown>
#4 0x5602c184e8d6 <unknown>
#5 0x5602c184df96 <unknown>
#6 0x5602c183fc23 <unknown>
#7 0x5602c180c4a5 <unknown>
#8 0x5602c180d111 <unknown>
#9 0x5602c1ce7f1b <unknown>
#10 0x5602c1cebe19 <unknown>
#11 0x5602c1cceac9 <unknown>
#12 0x5602c1cec9c8 <unknown>
#13 0x5602c1cb334f <unknown>
#14 0x5602c1d10a28 <unknown>
#15 0x5602c1d10c06 <unknown>
#16 0x5602c1d22336 <unknown>
#17 0x7f06a789caa4 <unknown>
#18 0x7f06a7929c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5602c1d2345a <unknown>
#1 0x5602c17c8760 <unknown>
#2 0x5602c18030d8 <unknown>
#3 0x5602c17fe2cf <unknown>
#4 0x5602c184e8d6 <unknown>
#5 0x5602c184df96 <unknown>
#6 0x5602c183fc23 <unknown>
#7 0x5602c180c4a5 <unknown>
#8 0x5602c180d111 <unknown>
#9 0x5602c1ce7f1b <unknown>
#10 0x5602c1cebe19 <unknown>
#11 0x5602c1cceac9 <unknown>
#12 0x5602c1cec9c8 <unknown>
#13 0x5602c1cb334f <unknown>
#14 0x5602c1d10a28 <unknown>
#15 0x5602c1d10c06 <unknown>
#16 0x5602c1d22336 <unknown>
#17 0x7f06a789caa4 <unknown>
#18 0x7f06a7929c3c <unknown>
_ ERROR at setup of test_invalid_password_login[shubhamdabir07@gmail.com-Password] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f9b1040>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x559c104f9336 \\u003Cunknown>\\n#17 0x7f228589caa4 \\u003Cunknown>\\n#18 0x7f2285929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x559c104fa45a <unknown>
E       #1 0x559c0ff9f760 <unknown>
E       #2 0x559c0ffda0d8 <unknown>
E       #3 0x559c0ffd52cf <unknown>
E       #4 0x559c100258d6 <unknown>
E       #5 0x559c10024f96 <unknown>
E       #6 0x559c10016c23 <unknown>
E       #7 0x559c0ffe34a5 <unknown>
E       #8 0x559c0ffe4111 <unknown>
E       #9 0x559c104bef1b <unknown>
E       #10 0x559c104c2e19 <unknown>
E       #11 0x559c104a5ac9 <unknown>
E       #12 0x559c104c39c8 <unknown>
E       #13 0x559c1048a34f <unknown>
E       #14 0x559c104e7a28 <unknown>
E       #15 0x559c104e7c06 <unknown>
E       #16 0x559c104f9336 <unknown>
E       #17 0x7f228589caa4 <unknown>
E       #18 0x7f2285929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x559c104fa45a <unknown>
E           #1 0x559c0ff9f760 <unknown>
E           #2 0x559c0ffda0d8 <unknown>
E           #3 0x559c0ffd52cf <unknown>
E           #4 0x559c100258d6 <unknown>
E           #5 0x559c10024f96 <unknown>
E           #6 0x559c10016c23 <unknown>
E           #7 0x559c0ffe34a5 <unknown>
E           #8 0x559c0ffe4111 <unknown>
E           #9 0x559c104bef1b <unknown>
E           #10 0x559c104c2e19 <unknown>
E           #11 0x559c104a5ac9 <unknown>
E           #12 0x559c104c39c8 <unknown>
E           #13 0x559c1048a34f <unknown>
E           #14 0x559c104e7a28 <unknown>
E           #15 0x559c104e7c06 <unknown>
E           #16 0x559c104f9336 <unknown>
E           #17 0x7f228589caa4 <unknown>
E           #18 0x7f2285929c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:20,609 - INFO - Starting test with Chrome browser
2025-07-02 19:05:20,609 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:20,719 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:20,750 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:20,782 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:21,872 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x559c104fa45a <unknown>
#1 0x559c0ff9f760 <unknown>
#2 0x559c0ffda0d8 <unknown>
#3 0x559c0ffd52cf <unknown>
#4 0x559c100258d6 <unknown>
#5 0x559c10024f96 <unknown>
#6 0x559c10016c23 <unknown>
#7 0x559c0ffe34a5 <unknown>
#8 0x559c0ffe4111 <unknown>
#9 0x559c104bef1b <unknown>
#10 0x559c104c2e19 <unknown>
#11 0x559c104a5ac9 <unknown>
#12 0x559c104c39c8 <unknown>
#13 0x559c1048a34f <unknown>
#14 0x559c104e7a28 <unknown>
#15 0x559c104e7c06 <unknown>
#16 0x559c104f9336 <unknown>
#17 0x7f228589caa4 <unknown>
#18 0x7f2285929c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x559c104fa45a <unknown>
#1 0x559c0ff9f760 <unknown>
#2 0x559c0ffda0d8 <unknown>
#3 0x559c0ffd52cf <unknown>
#4 0x559c100258d6 <unknown>
#5 0x559c10024f96 <unknown>
#6 0x559c10016c23 <unknown>
#7 0x559c0ffe34a5 <unknown>
#8 0x559c0ffe4111 <unknown>
#9 0x559c104bef1b <unknown>
#10 0x559c104c2e19 <unknown>
#11 0x559c104a5ac9 <unknown>
#12 0x559c104c39c8 <unknown>
#13 0x559c1048a34f <unknown>
#14 0x559c104e7a28 <unknown>
#15 0x559c104e7c06 <unknown>
#16 0x559c104f9336 <unknown>
#17 0x7f228589caa4 <unknown>
#18 0x7f2285929c3c <unknown>
_ ERROR at setup of test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] _

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4eab55e0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x56238365f336 \\u003Cunknown>\\n#17 0x7f186de9caa4 \\u003Cunknown>\\n#18 0x7f186df29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x56238366045a <unknown>
E       #1 0x562383105760 <unknown>
E       #2 0x5623831400d8 <unknown>
E       #3 0x56238313b2cf <unknown>
E       #4 0x56238318b8d6 <unknown>
E       #5 0x56238318af96 <unknown>
E       #6 0x56238317cc23 <unknown>
E       #7 0x5623831494a5 <unknown>
E       #8 0x56238314a111 <unknown>
E       #9 0x562383624f1b <unknown>
E       #10 0x562383628e19 <unknown>
E       #11 0x56238360bac9 <unknown>
E       #12 0x5623836299c8 <unknown>
E       #13 0x5623835f034f <unknown>
E       #14 0x56238364da28 <unknown>
E       #15 0x56238364dc06 <unknown>
E       #16 0x56238365f336 <unknown>
E       #17 0x7f186de9caa4 <unknown>
E       #18 0x7f186df29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x56238366045a <unknown>
E           #1 0x562383105760 <unknown>
E           #2 0x5623831400d8 <unknown>
E           #3 0x56238313b2cf <unknown>
E           #4 0x56238318b8d6 <unknown>
E           #5 0x56238318af96 <unknown>
E           #6 0x56238317cc23 <unknown>
E           #7 0x5623831494a5 <unknown>
E           #8 0x56238314a111 <unknown>
E           #9 0x562383624f1b <unknown>
E           #10 0x562383628e19 <unknown>
E           #11 0x56238360bac9 <unknown>
E           #12 0x5623836299c8 <unknown>
E           #13 0x5623835f034f <unknown>
E           #14 0x56238364da28 <unknown>
E           #15 0x56238364dc06 <unknown>
E           #16 0x56238365f336 <unknown>
E           #17 0x7f186de9caa4 <unknown>
E           #18 0x7f186df29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:21,910 - INFO - Starting test with Chrome browser
2025-07-02 19:05:21,910 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:22,023 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:22,055 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:22,086 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:23,176 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56238366045a <unknown>
#1 0x562383105760 <unknown>
#2 0x5623831400d8 <unknown>
#3 0x56238313b2cf <unknown>
#4 0x56238318b8d6 <unknown>
#5 0x56238318af96 <unknown>
#6 0x56238317cc23 <unknown>
#7 0x5623831494a5 <unknown>
#8 0x56238314a111 <unknown>
#9 0x562383624f1b <unknown>
#10 0x562383628e19 <unknown>
#11 0x56238360bac9 <unknown>
#12 0x5623836299c8 <unknown>
#13 0x5623835f034f <unknown>
#14 0x56238364da28 <unknown>
#15 0x56238364dc06 <unknown>
#16 0x56238365f336 <unknown>
#17 0x7f186de9caa4 <unknown>
#18 0x7f186df29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56238366045a <unknown>
#1 0x562383105760 <unknown>
#2 0x5623831400d8 <unknown>
#3 0x56238313b2cf <unknown>
#4 0x56238318b8d6 <unknown>
#5 0x56238318af96 <unknown>
#6 0x56238317cc23 <unknown>
#7 0x5623831494a5 <unknown>
#8 0x56238314a111 <unknown>
#9 0x562383624f1b <unknown>
#10 0x562383628e19 <unknown>
#11 0x56238360bac9 <unknown>
#12 0x5623836299c8 <unknown>
#13 0x5623835f034f <unknown>
#14 0x56238364da28 <unknown>
#15 0x56238364dc06 <unknown>
#16 0x56238365f336 <unknown>
#17 0x7f186de9caa4 <unknown>
#18 0x7f186df29c3c <unknown>
_______________ ERROR at setup of test_blank_username_validation _______________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa508ff230>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x560ea5a45336 \\u003Cunknown>\\n#17 0x7f8d2029caa4 \\u003Cunknown>\\n#18 0x7f8d20329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x560ea5a4645a <unknown>
E       #1 0x560ea54eb760 <unknown>
E       #2 0x560ea55260d8 <unknown>
E       #3 0x560ea55212cf <unknown>
E       #4 0x560ea55718d6 <unknown>
E       #5 0x560ea5570f96 <unknown>
E       #6 0x560ea5562c23 <unknown>
E       #7 0x560ea552f4a5 <unknown>
E       #8 0x560ea5530111 <unknown>
E       #9 0x560ea5a0af1b <unknown>
E       #10 0x560ea5a0ee19 <unknown>
E       #11 0x560ea59f1ac9 <unknown>
E       #12 0x560ea5a0f9c8 <unknown>
E       #13 0x560ea59d634f <unknown>
E       #14 0x560ea5a33a28 <unknown>
E       #15 0x560ea5a33c06 <unknown>
E       #16 0x560ea5a45336 <unknown>
E       #17 0x7f8d2029caa4 <unknown>
E       #18 0x7f8d20329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x560ea5a4645a <unknown>
E           #1 0x560ea54eb760 <unknown>
E           #2 0x560ea55260d8 <unknown>
E           #3 0x560ea55212cf <unknown>
E           #4 0x560ea55718d6 <unknown>
E           #5 0x560ea5570f96 <unknown>
E           #6 0x560ea5562c23 <unknown>
E           #7 0x560ea552f4a5 <unknown>
E           #8 0x560ea5530111 <unknown>
E           #9 0x560ea5a0af1b <unknown>
E           #10 0x560ea5a0ee19 <unknown>
E           #11 0x560ea59f1ac9 <unknown>
E           #12 0x560ea5a0f9c8 <unknown>
E           #13 0x560ea59d634f <unknown>
E           #14 0x560ea5a33a28 <unknown>
E           #15 0x560ea5a33c06 <unknown>
E           #16 0x560ea5a45336 <unknown>
E           #17 0x7f8d2029caa4 <unknown>
E           #18 0x7f8d20329c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:23,214 - INFO - Starting test with Chrome browser
2025-07-02 19:05:23,214 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:23,324 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:23,357 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:23,389 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:24,479 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x560ea5a4645a <unknown>
#1 0x560ea54eb760 <unknown>
#2 0x560ea55260d8 <unknown>
#3 0x560ea55212cf <unknown>
#4 0x560ea55718d6 <unknown>
#5 0x560ea5570f96 <unknown>
#6 0x560ea5562c23 <unknown>
#7 0x560ea552f4a5 <unknown>
#8 0x560ea5530111 <unknown>
#9 0x560ea5a0af1b <unknown>
#10 0x560ea5a0ee19 <unknown>
#11 0x560ea59f1ac9 <unknown>
#12 0x560ea5a0f9c8 <unknown>
#13 0x560ea59d634f <unknown>
#14 0x560ea5a33a28 <unknown>
#15 0x560ea5a33c06 <unknown>
#16 0x560ea5a45336 <unknown>
#17 0x7f8d2029caa4 <unknown>
#18 0x7f8d20329c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x560ea5a4645a <unknown>
#1 0x560ea54eb760 <unknown>
#2 0x560ea55260d8 <unknown>
#3 0x560ea55212cf <unknown>
#4 0x560ea55718d6 <unknown>
#5 0x560ea5570f96 <unknown>
#6 0x560ea5562c23 <unknown>
#7 0x560ea552f4a5 <unknown>
#8 0x560ea5530111 <unknown>
#9 0x560ea5a0af1b <unknown>
#10 0x560ea5a0ee19 <unknown>
#11 0x560ea59f1ac9 <unknown>
#12 0x560ea5a0f9c8 <unknown>
#13 0x560ea59d634f <unknown>
#14 0x560ea5a33a28 <unknown>
#15 0x560ea5a33c06 <unknown>
#16 0x560ea5a45336 <unknown>
#17 0x7f8d2029caa4 <unknown>
#18 0x7f8d20329c3c <unknown>
_______________ ERROR at setup of test_blank_password_validation _______________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4eaa5630>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55923221b336 \\u003Cunknown>\\n#17 0x7f168149caa4 \\u003Cunknown>\\n#18 0x7f1681529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55923221c45a <unknown>
E       #1 0x559231cc1760 <unknown>
E       #2 0x559231cfc0d8 <unknown>
E       #3 0x559231cf72cf <unknown>
E       #4 0x559231d478d6 <unknown>
E       #5 0x559231d46f96 <unknown>
E       #6 0x559231d38c23 <unknown>
E       #7 0x559231d054a5 <unknown>
E       #8 0x559231d06111 <unknown>
E       #9 0x5592321e0f1b <unknown>
E       #10 0x5592321e4e19 <unknown>
E       #11 0x5592321c7ac9 <unknown>
E       #12 0x5592321e59c8 <unknown>
E       #13 0x5592321ac34f <unknown>
E       #14 0x559232209a28 <unknown>
E       #15 0x559232209c06 <unknown>
E       #16 0x55923221b336 <unknown>
E       #17 0x7f168149caa4 <unknown>
E       #18 0x7f1681529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55923221c45a <unknown>
E           #1 0x559231cc1760 <unknown>
E           #2 0x559231cfc0d8 <unknown>
E           #3 0x559231cf72cf <unknown>
E           #4 0x559231d478d6 <unknown>
E           #5 0x559231d46f96 <unknown>
E           #6 0x559231d38c23 <unknown>
E           #7 0x559231d054a5 <unknown>
E           #8 0x559231d06111 <unknown>
E           #9 0x5592321e0f1b <unknown>
E           #10 0x5592321e4e19 <unknown>
E           #11 0x5592321c7ac9 <unknown>
E           #12 0x5592321e59c8 <unknown>
E           #13 0x5592321ac34f <unknown>
E           #14 0x559232209a28 <unknown>
E           #15 0x559232209c06 <unknown>
E           #16 0x55923221b336 <unknown>
E           #17 0x7f168149caa4 <unknown>
E           #18 0x7f1681529c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:24,517 - INFO - Starting test with Chrome browser
2025-07-02 19:05:24,517 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:24,629 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:24,661 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:24,692 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:25,785 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55923221c45a <unknown>
#1 0x559231cc1760 <unknown>
#2 0x559231cfc0d8 <unknown>
#3 0x559231cf72cf <unknown>
#4 0x559231d478d6 <unknown>
#5 0x559231d46f96 <unknown>
#6 0x559231d38c23 <unknown>
#7 0x559231d054a5 <unknown>
#8 0x559231d06111 <unknown>
#9 0x5592321e0f1b <unknown>
#10 0x5592321e4e19 <unknown>
#11 0x5592321c7ac9 <unknown>
#12 0x5592321e59c8 <unknown>
#13 0x5592321ac34f <unknown>
#14 0x559232209a28 <unknown>
#15 0x559232209c06 <unknown>
#16 0x55923221b336 <unknown>
#17 0x7f168149caa4 <unknown>
#18 0x7f1681529c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55923221c45a <unknown>
#1 0x559231cc1760 <unknown>
#2 0x559231cfc0d8 <unknown>
#3 0x559231cf72cf <unknown>
#4 0x559231d478d6 <unknown>
#5 0x559231d46f96 <unknown>
#6 0x559231d38c23 <unknown>
#7 0x559231d054a5 <unknown>
#8 0x559231d06111 <unknown>
#9 0x5592321e0f1b <unknown>
#10 0x5592321e4e19 <unknown>
#11 0x5592321c7ac9 <unknown>
#12 0x5592321e59c8 <unknown>
#13 0x5592321ac34f <unknown>
#14 0x559232209a28 <unknown>
#15 0x559232209c06 <unknown>
#16 0x55923221b336 <unknown>
#17 0x7f168149caa4 <unknown>
#18 0x7f1681529c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username0] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4ea65090>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x563880692336 \\u003Cunknown>\\n#17 0x7f434a69caa4 \\u003Cunknown>\\n#18 0x7f434a729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x56388069345a <unknown>
E       #1 0x563880138760 <unknown>
E       #2 0x5638801730d8 <unknown>
E       #3 0x56388016e2cf <unknown>
E       #4 0x5638801be8d6 <unknown>
E       #5 0x5638801bdf96 <unknown>
E       #6 0x5638801afc23 <unknown>
E       #7 0x56388017c4a5 <unknown>
E       #8 0x56388017d111 <unknown>
E       #9 0x563880657f1b <unknown>
E       #10 0x56388065be19 <unknown>
E       #11 0x56388063eac9 <unknown>
E       #12 0x56388065c9c8 <unknown>
E       #13 0x56388062334f <unknown>
E       #14 0x563880680a28 <unknown>
E       #15 0x563880680c06 <unknown>
E       #16 0x563880692336 <unknown>
E       #17 0x7f434a69caa4 <unknown>
E       #18 0x7f434a729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x56388069345a <unknown>
E           #1 0x563880138760 <unknown>
E           #2 0x5638801730d8 <unknown>
E           #3 0x56388016e2cf <unknown>
E           #4 0x5638801be8d6 <unknown>
E           #5 0x5638801bdf96 <unknown>
E           #6 0x5638801afc23 <unknown>
E           #7 0x56388017c4a5 <unknown>
E           #8 0x56388017d111 <unknown>
E           #9 0x563880657f1b <unknown>
E           #10 0x56388065be19 <unknown>
E           #11 0x56388063eac9 <unknown>
E           #12 0x56388065c9c8 <unknown>
E           #13 0x56388062334f <unknown>
E           #14 0x563880680a28 <unknown>
E           #15 0x563880680c06 <unknown>
E           #16 0x563880692336 <unknown>
E           #17 0x7f434a69caa4 <unknown>
E           #18 0x7f434a729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:25,824 - INFO - Starting test with Chrome browser
2025-07-02 19:05:25,824 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:25,935 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:25,967 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:25,999 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:27,091 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56388069345a <unknown>
#1 0x563880138760 <unknown>
#2 0x5638801730d8 <unknown>
#3 0x56388016e2cf <unknown>
#4 0x5638801be8d6 <unknown>
#5 0x5638801bdf96 <unknown>
#6 0x5638801afc23 <unknown>
#7 0x56388017c4a5 <unknown>
#8 0x56388017d111 <unknown>
#9 0x563880657f1b <unknown>
#10 0x56388065be19 <unknown>
#11 0x56388063eac9 <unknown>
#12 0x56388065c9c8 <unknown>
#13 0x56388062334f <unknown>
#14 0x563880680a28 <unknown>
#15 0x563880680c06 <unknown>
#16 0x563880692336 <unknown>
#17 0x7f434a69caa4 <unknown>
#18 0x7f434a729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56388069345a <unknown>
#1 0x563880138760 <unknown>
#2 0x5638801730d8 <unknown>
#3 0x56388016e2cf <unknown>
#4 0x5638801be8d6 <unknown>
#5 0x5638801bdf96 <unknown>
#6 0x5638801afc23 <unknown>
#7 0x56388017c4a5 <unknown>
#8 0x56388017d111 <unknown>
#9 0x563880657f1b <unknown>
#10 0x56388065be19 <unknown>
#11 0x56388063eac9 <unknown>
#12 0x56388065c9c8 <unknown>
#13 0x56388062334f <unknown>
#14 0x563880680a28 <unknown>
#15 0x563880680c06 <unknown>
#16 0x563880692336 <unknown>
#17 0x7f434a69caa4 <unknown>
#18 0x7f434a729c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username1] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f9ef290>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x558c8a9c9336 \\u003Cunknown>\\n#17 0x7f54df69caa4 \\u003Cunknown>\\n#18 0x7f54df729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x558c8a9ca45a <unknown>
E       #1 0x558c8a46f760 <unknown>
E       #2 0x558c8a4aa0d8 <unknown>
E       #3 0x558c8a4a52cf <unknown>
E       #4 0x558c8a4f58d6 <unknown>
E       #5 0x558c8a4f4f96 <unknown>
E       #6 0x558c8a4e6c23 <unknown>
E       #7 0x558c8a4b34a5 <unknown>
E       #8 0x558c8a4b4111 <unknown>
E       #9 0x558c8a98ef1b <unknown>
E       #10 0x558c8a992e19 <unknown>
E       #11 0x558c8a975ac9 <unknown>
E       #12 0x558c8a9939c8 <unknown>
E       #13 0x558c8a95a34f <unknown>
E       #14 0x558c8a9b7a28 <unknown>
E       #15 0x558c8a9b7c06 <unknown>
E       #16 0x558c8a9c9336 <unknown>
E       #17 0x7f54df69caa4 <unknown>
E       #18 0x7f54df729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x558c8a9ca45a <unknown>
E           #1 0x558c8a46f760 <unknown>
E           #2 0x558c8a4aa0d8 <unknown>
E           #3 0x558c8a4a52cf <unknown>
E           #4 0x558c8a4f58d6 <unknown>
E           #5 0x558c8a4f4f96 <unknown>
E           #6 0x558c8a4e6c23 <unknown>
E           #7 0x558c8a4b34a5 <unknown>
E           #8 0x558c8a4b4111 <unknown>
E           #9 0x558c8a98ef1b <unknown>
E           #10 0x558c8a992e19 <unknown>
E           #11 0x558c8a975ac9 <unknown>
E           #12 0x558c8a9939c8 <unknown>
E           #13 0x558c8a95a34f <unknown>
E           #14 0x558c8a9b7a28 <unknown>
E           #15 0x558c8a9b7c06 <unknown>
E           #16 0x558c8a9c9336 <unknown>
E           #17 0x7f54df69caa4 <unknown>
E           #18 0x7f54df729c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:27,128 - INFO - Starting test with Chrome browser
2025-07-02 19:05:27,129 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:27,238 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:27,270 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:27,302 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:28,393 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x558c8a9ca45a <unknown>
#1 0x558c8a46f760 <unknown>
#2 0x558c8a4aa0d8 <unknown>
#3 0x558c8a4a52cf <unknown>
#4 0x558c8a4f58d6 <unknown>
#5 0x558c8a4f4f96 <unknown>
#6 0x558c8a4e6c23 <unknown>
#7 0x558c8a4b34a5 <unknown>
#8 0x558c8a4b4111 <unknown>
#9 0x558c8a98ef1b <unknown>
#10 0x558c8a992e19 <unknown>
#11 0x558c8a975ac9 <unknown>
#12 0x558c8a9939c8 <unknown>
#13 0x558c8a95a34f <unknown>
#14 0x558c8a9b7a28 <unknown>
#15 0x558c8a9b7c06 <unknown>
#16 0x558c8a9c9336 <unknown>
#17 0x7f54df69caa4 <unknown>
#18 0x7f54df729c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x558c8a9ca45a <unknown>
#1 0x558c8a46f760 <unknown>
#2 0x558c8a4aa0d8 <unknown>
#3 0x558c8a4a52cf <unknown>
#4 0x558c8a4f58d6 <unknown>
#5 0x558c8a4f4f96 <unknown>
#6 0x558c8a4e6c23 <unknown>
#7 0x558c8a4b34a5 <unknown>
#8 0x558c8a4b4111 <unknown>
#9 0x558c8a98ef1b <unknown>
#10 0x558c8a992e19 <unknown>
#11 0x558c8a975ac9 <unknown>
#12 0x558c8a9939c8 <unknown>
#13 0x558c8a95a34f <unknown>
#14 0x558c8a9b7a28 <unknown>
#15 0x558c8a9b7c06 <unknown>
#16 0x558c8a9c9336 <unknown>
#17 0x7f54df69caa4 <unknown>
#18 0x7f54df729c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username2] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f9efd10>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55ce9e6d2336 \\u003Cunknown>\\n#17 0x7f4e05a9caa4 \\u003Cunknown>\\n#18 0x7f4e05b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55ce9e6d345a <unknown>
E       #1 0x55ce9e178760 <unknown>
E       #2 0x55ce9e1b30d8 <unknown>
E       #3 0x55ce9e1ae2cf <unknown>
E       #4 0x55ce9e1fe8d6 <unknown>
E       #5 0x55ce9e1fdf96 <unknown>
E       #6 0x55ce9e1efc23 <unknown>
E       #7 0x55ce9e1bc4a5 <unknown>
E       #8 0x55ce9e1bd111 <unknown>
E       #9 0x55ce9e697f1b <unknown>
E       #10 0x55ce9e69be19 <unknown>
E       #11 0x55ce9e67eac9 <unknown>
E       #12 0x55ce9e69c9c8 <unknown>
E       #13 0x55ce9e66334f <unknown>
E       #14 0x55ce9e6c0a28 <unknown>
E       #15 0x55ce9e6c0c06 <unknown>
E       #16 0x55ce9e6d2336 <unknown>
E       #17 0x7f4e05a9caa4 <unknown>
E       #18 0x7f4e05b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55ce9e6d345a <unknown>
E           #1 0x55ce9e178760 <unknown>
E           #2 0x55ce9e1b30d8 <unknown>
E           #3 0x55ce9e1ae2cf <unknown>
E           #4 0x55ce9e1fe8d6 <unknown>
E           #5 0x55ce9e1fdf96 <unknown>
E           #6 0x55ce9e1efc23 <unknown>
E           #7 0x55ce9e1bc4a5 <unknown>
E           #8 0x55ce9e1bd111 <unknown>
E           #9 0x55ce9e697f1b <unknown>
E           #10 0x55ce9e69be19 <unknown>
E           #11 0x55ce9e67eac9 <unknown>
E           #12 0x55ce9e69c9c8 <unknown>
E           #13 0x55ce9e66334f <unknown>
E           #14 0x55ce9e6c0a28 <unknown>
E           #15 0x55ce9e6c0c06 <unknown>
E           #16 0x55ce9e6d2336 <unknown>
E           #17 0x7f4e05a9caa4 <unknown>
E           #18 0x7f4e05b29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:28,431 - INFO - Starting test with Chrome browser
2025-07-02 19:05:28,432 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:28,543 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:28,576 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:28,609 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:29,701 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ce9e6d345a <unknown>
#1 0x55ce9e178760 <unknown>
#2 0x55ce9e1b30d8 <unknown>
#3 0x55ce9e1ae2cf <unknown>
#4 0x55ce9e1fe8d6 <unknown>
#5 0x55ce9e1fdf96 <unknown>
#6 0x55ce9e1efc23 <unknown>
#7 0x55ce9e1bc4a5 <unknown>
#8 0x55ce9e1bd111 <unknown>
#9 0x55ce9e697f1b <unknown>
#10 0x55ce9e69be19 <unknown>
#11 0x55ce9e67eac9 <unknown>
#12 0x55ce9e69c9c8 <unknown>
#13 0x55ce9e66334f <unknown>
#14 0x55ce9e6c0a28 <unknown>
#15 0x55ce9e6c0c06 <unknown>
#16 0x55ce9e6d2336 <unknown>
#17 0x7f4e05a9caa4 <unknown>
#18 0x7f4e05b29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ce9e6d345a <unknown>
#1 0x55ce9e178760 <unknown>
#2 0x55ce9e1b30d8 <unknown>
#3 0x55ce9e1ae2cf <unknown>
#4 0x55ce9e1fe8d6 <unknown>
#5 0x55ce9e1fdf96 <unknown>
#6 0x55ce9e1efc23 <unknown>
#7 0x55ce9e1bc4a5 <unknown>
#8 0x55ce9e1bd111 <unknown>
#9 0x55ce9e697f1b <unknown>
#10 0x55ce9e69be19 <unknown>
#11 0x55ce9e67eac9 <unknown>
#12 0x55ce9e69c9c8 <unknown>
#13 0x55ce9e66334f <unknown>
#14 0x55ce9e6c0a28 <unknown>
#15 0x55ce9e6c0c06 <unknown>
#16 0x55ce9e6d2336 <unknown>
#17 0x7f4e05a9caa4 <unknown>
#18 0x7f4e05b29c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username3] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f9875f0>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x556f8c785336 \\u003Cunknown>\\n#17 0x7ff696c9caa4 \\u003Cunknown>\\n#18 0x7ff696d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x556f8c78645a <unknown>
E       #1 0x556f8c22b760 <unknown>
E       #2 0x556f8c2660d8 <unknown>
E       #3 0x556f8c2612cf <unknown>
E       #4 0x556f8c2b18d6 <unknown>
E       #5 0x556f8c2b0f96 <unknown>
E       #6 0x556f8c2a2c23 <unknown>
E       #7 0x556f8c26f4a5 <unknown>
E       #8 0x556f8c270111 <unknown>
E       #9 0x556f8c74af1b <unknown>
E       #10 0x556f8c74ee19 <unknown>
E       #11 0x556f8c731ac9 <unknown>
E       #12 0x556f8c74f9c8 <unknown>
E       #13 0x556f8c71634f <unknown>
E       #14 0x556f8c773a28 <unknown>
E       #15 0x556f8c773c06 <unknown>
E       #16 0x556f8c785336 <unknown>
E       #17 0x7ff696c9caa4 <unknown>
E       #18 0x7ff696d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x556f8c78645a <unknown>
E           #1 0x556f8c22b760 <unknown>
E           #2 0x556f8c2660d8 <unknown>
E           #3 0x556f8c2612cf <unknown>
E           #4 0x556f8c2b18d6 <unknown>
E           #5 0x556f8c2b0f96 <unknown>
E           #6 0x556f8c2a2c23 <unknown>
E           #7 0x556f8c26f4a5 <unknown>
E           #8 0x556f8c270111 <unknown>
E           #9 0x556f8c74af1b <unknown>
E           #10 0x556f8c74ee19 <unknown>
E           #11 0x556f8c731ac9 <unknown>
E           #12 0x556f8c74f9c8 <unknown>
E           #13 0x556f8c71634f <unknown>
E           #14 0x556f8c773a28 <unknown>
E           #15 0x556f8c773c06 <unknown>
E           #16 0x556f8c785336 <unknown>
E           #17 0x7ff696c9caa4 <unknown>
E           #18 0x7ff696d29c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:29,739 - INFO - Starting test with Chrome browser
2025-07-02 19:05:29,739 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:29,849 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:29,881 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:29,912 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:31,003 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x556f8c78645a <unknown>
#1 0x556f8c22b760 <unknown>
#2 0x556f8c2660d8 <unknown>
#3 0x556f8c2612cf <unknown>
#4 0x556f8c2b18d6 <unknown>
#5 0x556f8c2b0f96 <unknown>
#6 0x556f8c2a2c23 <unknown>
#7 0x556f8c26f4a5 <unknown>
#8 0x556f8c270111 <unknown>
#9 0x556f8c74af1b <unknown>
#10 0x556f8c74ee19 <unknown>
#11 0x556f8c731ac9 <unknown>
#12 0x556f8c74f9c8 <unknown>
#13 0x556f8c71634f <unknown>
#14 0x556f8c773a28 <unknown>
#15 0x556f8c773c06 <unknown>
#16 0x556f8c785336 <unknown>
#17 0x7ff696c9caa4 <unknown>
#18 0x7ff696d29c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x556f8c78645a <unknown>
#1 0x556f8c22b760 <unknown>
#2 0x556f8c2660d8 <unknown>
#3 0x556f8c2612cf <unknown>
#4 0x556f8c2b18d6 <unknown>
#5 0x556f8c2b0f96 <unknown>
#6 0x556f8c2a2c23 <unknown>
#7 0x556f8c26f4a5 <unknown>
#8 0x556f8c270111 <unknown>
#9 0x556f8c74af1b <unknown>
#10 0x556f8c74ee19 <unknown>
#11 0x556f8c731ac9 <unknown>
#12 0x556f8c74f9c8 <unknown>
#13 0x556f8c71634f <unknown>
#14 0x556f8c773a28 <unknown>
#15 0x556f8c773c06 <unknown>
#16 0x556f8c785336 <unknown>
#17 0x7ff696c9caa4 <unknown>
#18 0x7ff696d29c3c <unknown>
__________ ERROR at setup of test_invalid_email_validation[username4] __________

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__
    super().__init__(
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__
    super().__init__(command_executor=executor, options=options)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__
    self.start_session(capabilities)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa4f986150>
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: probably user data d...\\n#16 0x55815b0f3336 \\u003Cunknown>\\n#17 0x7f6fd349caa4 \\u003Cunknown>\\n#18 0x7f6fd3529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E       Stacktrace:
E       #0 0x55815b0f445a <unknown>
E       #1 0x55815ab99760 <unknown>
E       #2 0x55815abd40d8 <unknown>
E       #3 0x55815abcf2cf <unknown>
E       #4 0x55815ac1f8d6 <unknown>
E       #5 0x55815ac1ef96 <unknown>
E       #6 0x55815ac10c23 <unknown>
E       #7 0x55815abdd4a5 <unknown>
E       #8 0x55815abde111 <unknown>
E       #9 0x55815b0b8f1b <unknown>
E       #10 0x55815b0bce19 <unknown>
E       #11 0x55815b09fac9 <unknown>
E       #12 0x55815b0bd9c8 <unknown>
E       #13 0x55815b08434f <unknown>
E       #14 0x55815b0e1a28 <unknown>
E       #15 0x55815b0e1c06 <unknown>
E       #16 0x55815b0f3336 <unknown>
E       #17 0x7f6fd349caa4 <unknown>
E       #18 0x7f6fd3529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup():
        browser = BROWSER.lower()
        driver = None
        logger.info(f"Starting test with {browser.capitalize()} browser")
    
        try:
            if browser == "chrome":
                options = ChromeOptions()
                options.add_argument("--disable-gpu")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--force-device-scale-factor=0.85")
                #options.add_argument("--headless=new")
                options.add_argument("--disable-extensions")
                options.add_argument("--remote-debugging-port=9222")
                options.add_experimental_option("excludeSwitches", ["enable-logging"])
                options.set_capability("unhandledPromptBehavior", "accept")
                #options.add_argument(f"--user-data-dir={mkdtemp()}")
                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            elif browser == "firefox":
                options = FirefoxOptions()
                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            elif browser == "edge":
                options = EdgeOptions()
                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            else:
                raise ValueError(f"Unsupported browser: {browser}")
    
            driver.maximize_window()
            driver.implicitly_wait(30)
            driver.get(URL)
            logger.info(f"Navigated to URL: {URL}")
    
            if ENABLE_LOGIN:
                login(driver)
    
            yield driver
    
        except Exception as e:
            logger.error(f"Driver setup failed: {e}")
>           pytest.fail(f"Driver setup failed: {e}")
E           Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
E           Stacktrace:
E           #0 0x55815b0f445a <unknown>
E           #1 0x55815ab99760 <unknown>
E           #2 0x55815abd40d8 <unknown>
E           #3 0x55815abcf2cf <unknown>
E           #4 0x55815ac1f8d6 <unknown>
E           #5 0x55815ac1ef96 <unknown>
E           #6 0x55815ac10c23 <unknown>
E           #7 0x55815abdd4a5 <unknown>
E           #8 0x55815abde111 <unknown>
E           #9 0x55815b0b8f1b <unknown>
E           #10 0x55815b0bce19 <unknown>
E           #11 0x55815b09fac9 <unknown>
E           #12 0x55815b0bd9c8 <unknown>
E           #13 0x55815b08434f <unknown>
E           #14 0x55815b0e1a28 <unknown>
E           #15 0x55815b0e1c06 <unknown>
E           #16 0x55815b0f3336 <unknown>
E           #17 0x7f6fd349caa4 <unknown>
E           #18 0x7f6fd3529c3c <unknown>

conftest.py:127: Failed
---------------------------- Captured stderr setup -----------------------------
2025-07-02 19:05:31,042 - INFO - Starting test with Chrome browser
2025-07-02 19:05:31,042 - INFO - ====== WebDriver manager ======
2025-07-02 19:05:31,152 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:31,185 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-02 19:05:31,216 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
2025-07-02 19:05:32,307 - ERROR - Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55815b0f445a <unknown>
#1 0x55815ab99760 <unknown>
#2 0x55815abd40d8 <unknown>
#3 0x55815abcf2cf <unknown>
#4 0x55815ac1f8d6 <unknown>
#5 0x55815ac1ef96 <unknown>
#6 0x55815ac10c23 <unknown>
#7 0x55815abdd4a5 <unknown>
#8 0x55815abde111 <unknown>
#9 0x55815b0b8f1b <unknown>
#10 0x55815b0bce19 <unknown>
#11 0x55815b09fac9 <unknown>
#12 0x55815b0bd9c8 <unknown>
#13 0x55815b08434f <unknown>
#14 0x55815b0e1a28 <unknown>
#15 0x55815b0e1c06 <unknown>
#16 0x55815b0f3336 <unknown>
#17 0x7f6fd349caa4 <unknown>
#18 0x7f6fd3529c3c <unknown>

------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/137.0.7151.119/chromedriver-linux64/chromedriver] found in cache
ERROR    conftest:conftest.py:126 Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55815b0f445a <unknown>
#1 0x55815ab99760 <unknown>
#2 0x55815abd40d8 <unknown>
#3 0x55815abcf2cf <unknown>
#4 0x55815ac1f8d6 <unknown>
#5 0x55815ac1ef96 <unknown>
#6 0x55815ac10c23 <unknown>
#7 0x55815abdd4a5 <unknown>
#8 0x55815abde111 <unknown>
#9 0x55815b0b8f1b <unknown>
#10 0x55815b0bce19 <unknown>
#11 0x55815b09fac9 <unknown>
#12 0x55815b0bd9c8 <unknown>
#13 0x55815b08434f <unknown>
#14 0x55815b0e1a28 <unknown>
#15 0x55815b0e1c06 <unknown>
#16 0x55815b0f3336 <unknown>
#17 0x7f6fd349caa4 <unknown>
#18 0x7f6fd3529c3c <unknown>
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250702_190456/report.html -
=========================== short test summary info ============================
ERROR tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56018166845a <unknown>
#1 0x56018110d760 <unknown>
#2 0x5601811480d8 <unknown>
#3 0x5601811432cf <unknown>
#4 0x5601811938d6 <unknown>
#5 0x560181192f96 <unknown>
#6 0x560181184c23 <unknown>
#7 0x5601811514a5 <unknown>
#8 0x560181152111 <unknown>
#9 0x56018162cf1b <unknown>
#10 0x560181630e19 <unknown>
#11 0x560181613ac9 <unknown>
#12 0x5601816319c8 <unknown>
#13 0x5601815f834f <unknown>
#14 0x560181655a28 <unknown>
#15 0x560181655c06 <unknown>
#16 0x560181667336 <unknown>
#17 0x7fabb669caa4 <unknown>
#18 0x7fabb6729c3c <unknown>
ERROR tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a1ba32445a <unknown>
#1 0x55a1b9dc9760 <unknown>
#2 0x55a1b9e040d8 <unknown>
#3 0x55a1b9dff2cf <unknown>
#4 0x55a1b9e4f8d6 <unknown>
#5 0x55a1b9e4ef96 <unknown>
#6 0x55a1b9e40c23 <unknown>
#7 0x55a1b9e0d4a5 <unknown>
#8 0x55a1b9e0e111 <unknown>
#9 0x55a1ba2e8f1b <unknown>
#10 0x55a1ba2ece19 <unknown>
#11 0x55a1ba2cfac9 <unknown>
#12 0x55a1ba2ed9c8 <unknown>
#13 0x55a1ba2b434f <unknown>
#14 0x55a1ba311a28 <unknown>
#15 0x55a1ba311c06 <unknown>
#16 0x55a1ba323336 <unknown>
#17 0x7fa3c1e9caa4 <unknown>
#18 0x7fa3c1f29c3c <unknown>
ERROR tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55aac4d5545a <unknown>
#1 0x55aac47fa760 <unknown>
#2 0x55aac48350d8 <unknown>
#3 0x55aac48302cf <unknown>
#4 0x55aac48808d6 <unknown>
#5 0x55aac487ff96 <unknown>
#6 0x55aac4871c23 <unknown>
#7 0x55aac483e4a5 <unknown>
#8 0x55aac483f111 <unknown>
#9 0x55aac4d19f1b <unknown>
#10 0x55aac4d1de19 <unknown>
#11 0x55aac4d00ac9 <unknown>
#12 0x55aac4d1e9c8 <unknown>
#13 0x55aac4ce534f <unknown>
#14 0x55aac4d42a28 <unknown>
#15 0x55aac4d42c06 <unknown>
#16 0x55aac4d54336 <unknown>
#17 0x7f03ba29caa4 <unknown>
#18 0x7f03ba329c3c <unknown>
ERROR tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5601a407f45a <unknown>
#1 0x5601a3b24760 <unknown>
#2 0x5601a3b5f0d8 <unknown>
#3 0x5601a3b5a2cf <unknown>
#4 0x5601a3baa8d6 <unknown>
#5 0x5601a3ba9f96 <unknown>
#6 0x5601a3b9bc23 <unknown>
#7 0x5601a3b684a5 <unknown>
#8 0x5601a3b69111 <unknown>
#9 0x5601a4043f1b <unknown>
#10 0x5601a4047e19 <unknown>
#11 0x5601a402aac9 <unknown>
#12 0x5601a40489c8 <unknown>
#13 0x5601a400f34f <unknown>
#14 0x5601a406ca28 <unknown>
#15 0x5601a406cc06 <unknown>
#16 0x5601a407e336 <unknown>
#17 0x7f7cbd89caa4 <unknown>
#18 0x7f7cbd929c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username0] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55a8bc9d545a <unknown>
#1 0x55a8bc47a760 <unknown>
#2 0x55a8bc4b50d8 <unknown>
#3 0x55a8bc4b02cf <unknown>
#4 0x55a8bc5008d6 <unknown>
#5 0x55a8bc4fff96 <unknown>
#6 0x55a8bc4f1c23 <unknown>
#7 0x55a8bc4be4a5 <unknown>
#8 0x55a8bc4bf111 <unknown>
#9 0x55a8bc999f1b <unknown>
#10 0x55a8bc99de19 <unknown>
#11 0x55a8bc980ac9 <unknown>
#12 0x55a8bc99e9c8 <unknown>
#13 0x55a8bc96534f <unknown>
#14 0x55a8bc9c2a28 <unknown>
#15 0x55a8bc9c2c06 <unknown>
#16 0x55a8bc9d4336 <unknown>
#17 0x7f274ce9caa4 <unknown>
#18 0x7f274cf29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username1] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5636fa01f45a <unknown>
#1 0x5636f9ac4760 <unknown>
#2 0x5636f9aff0d8 <unknown>
#3 0x5636f9afa2cf <unknown>
#4 0x5636f9b4a8d6 <unknown>
#5 0x5636f9b49f96 <unknown>
#6 0x5636f9b3bc23 <unknown>
#7 0x5636f9b084a5 <unknown>
#8 0x5636f9b09111 <unknown>
#9 0x5636f9fe3f1b <unknown>
#10 0x5636f9fe7e19 <unknown>
#11 0x5636f9fcaac9 <unknown>
#12 0x5636f9fe89c8 <unknown>
#13 0x5636f9faf34f <unknown>
#14 0x5636fa00ca28 <unknown>
#15 0x5636fa00cc06 <unknown>
#16 0x5636fa01e336 <unknown>
#17 0x7feccf49caa4 <unknown>
#18 0x7feccf529c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username2] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ad9ac5345a <unknown>
#1 0x55ad9a6f8760 <unknown>
#2 0x55ad9a7330d8 <unknown>
#3 0x55ad9a72e2cf <unknown>
#4 0x55ad9a77e8d6 <unknown>
#5 0x55ad9a77df96 <unknown>
#6 0x55ad9a76fc23 <unknown>
#7 0x55ad9a73c4a5 <unknown>
#8 0x55ad9a73d111 <unknown>
#9 0x55ad9ac17f1b <unknown>
#10 0x55ad9ac1be19 <unknown>
#11 0x55ad9abfeac9 <unknown>
#12 0x55ad9ac1c9c8 <unknown>
#13 0x55ad9abe334f <unknown>
#14 0x55ad9ac40a28 <unknown>
#15 0x55ad9ac40c06 <unknown>
#16 0x55ad9ac52336 <unknown>
#17 0x7fa31d69caa4 <unknown>
#18 0x7fa31d729c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_login[username3] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56234399745a <unknown>
#1 0x56234343c760 <unknown>
#2 0x5623434770d8 <unknown>
#3 0x5623434722cf <unknown>
#4 0x5623434c28d6 <unknown>
#5 0x5623434c1f96 <unknown>
#6 0x5623434b3c23 <unknown>
#7 0x5623434804a5 <unknown>
#8 0x562343481111 <unknown>
#9 0x56234395bf1b <unknown>
#10 0x56234395fe19 <unknown>
#11 0x562343942ac9 <unknown>
#12 0x5623439609c8 <unknown>
#13 0x56234392734f <unknown>
#14 0x562343984a28 <unknown>
#15 0x562343984c06 <unknown>
#16 0x562343996336 <unknown>
#17 0x7f48e9a9caa4 <unknown>
#18 0x7f48e9b29c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5601acb7c45a <unknown>
#1 0x5601ac621760 <unknown>
#2 0x5601ac65c0d8 <unknown>
#3 0x5601ac6572cf <unknown>
#4 0x5601ac6a78d6 <unknown>
#5 0x5601ac6a6f96 <unknown>
#6 0x5601ac698c23 <unknown>
#7 0x5601ac6654a5 <unknown>
#8 0x5601ac666111 <unknown>
#9 0x5601acb40f1b <unknown>
#10 0x5601acb44e19 <unknown>
#11 0x5601acb27ac9 <unknown>
#12 0x5601acb459c8 <unknown>
#13 0x5601acb0c34f <unknown>
#14 0x5601acb69a28 <unknown>
#15 0x5601acb69c06 <unknown>
#16 0x5601acb7b336 <unknown>
#17 0x7f446e29caa4 <unknown>
#18 0x7f446e329c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x5602c1d2345a <unknown>
#1 0x5602c17c8760 <unknown>
#2 0x5602c18030d8 <unknown>
#3 0x5602c17fe2cf <unknown>
#4 0x5602c184e8d6 <unknown>
#5 0x5602c184df96 <unknown>
#6 0x5602c183fc23 <unknown>
#7 0x5602c180c4a5 <unknown>
#8 0x5602c180d111 <unknown>
#9 0x5602c1ce7f1b <unknown>
#10 0x5602c1cebe19 <unknown>
#11 0x5602c1cceac9 <unknown>
#12 0x5602c1cec9c8 <unknown>
#13 0x5602c1cb334f <unknown>
#14 0x5602c1d10a28 <unknown>
#15 0x5602c1d10c06 <unknown>
#16 0x5602c1d22336 <unknown>
#17 0x7f06a789caa4 <unknown>
#18 0x7f06a7929c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x559c104fa45a <unknown>
#1 0x559c0ff9f760 <unknown>
#2 0x559c0ffda0d8 <unknown>
#3 0x559c0ffd52cf <unknown>
#4 0x559c100258d6 <unknown>
#5 0x559c10024f96 <unknown>
#6 0x559c10016c23 <unknown>
#7 0x559c0ffe34a5 <unknown>
#8 0x559c0ffe4111 <unknown>
#9 0x559c104bef1b <unknown>
#10 0x559c104c2e19 <unknown>
#11 0x559c104a5ac9 <unknown>
#12 0x559c104c39c8 <unknown>
#13 0x559c1048a34f <unknown>
#14 0x559c104e7a28 <unknown>
#15 0x559c104e7c06 <unknown>
#16 0x559c104f9336 <unknown>
#17 0x7f228589caa4 <unknown>
#18 0x7f2285929c3c <unknown>
ERROR tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56238366045a <unknown>
#1 0x562383105760 <unknown>
#2 0x5623831400d8 <unknown>
#3 0x56238313b2cf <unknown>
#4 0x56238318b8d6 <unknown>
#5 0x56238318af96 <unknown>
#6 0x56238317cc23 <unknown>
#7 0x5623831494a5 <unknown>
#8 0x56238314a111 <unknown>
#9 0x562383624f1b <unknown>
#10 0x562383628e19 <unknown>
#11 0x56238360bac9 <unknown>
#12 0x5623836299c8 <unknown>
#13 0x5623835f034f <unknown>
#14 0x56238364da28 <unknown>
#15 0x56238364dc06 <unknown>
#16 0x56238365f336 <unknown>
#17 0x7f186de9caa4 <unknown>
#18 0x7f186df29c3c <unknown>
ERROR tests/test_login.py::test_blank_username_validation - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x560ea5a4645a <unknown>
#1 0x560ea54eb760 <unknown>
#2 0x560ea55260d8 <unknown>
#3 0x560ea55212cf <unknown>
#4 0x560ea55718d6 <unknown>
#5 0x560ea5570f96 <unknown>
#6 0x560ea5562c23 <unknown>
#7 0x560ea552f4a5 <unknown>
#8 0x560ea5530111 <unknown>
#9 0x560ea5a0af1b <unknown>
#10 0x560ea5a0ee19 <unknown>
#11 0x560ea59f1ac9 <unknown>
#12 0x560ea5a0f9c8 <unknown>
#13 0x560ea59d634f <unknown>
#14 0x560ea5a33a28 <unknown>
#15 0x560ea5a33c06 <unknown>
#16 0x560ea5a45336 <unknown>
#17 0x7f8d2029caa4 <unknown>
#18 0x7f8d20329c3c <unknown>
ERROR tests/test_login.py::test_blank_password_validation - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55923221c45a <unknown>
#1 0x559231cc1760 <unknown>
#2 0x559231cfc0d8 <unknown>
#3 0x559231cf72cf <unknown>
#4 0x559231d478d6 <unknown>
#5 0x559231d46f96 <unknown>
#6 0x559231d38c23 <unknown>
#7 0x559231d054a5 <unknown>
#8 0x559231d06111 <unknown>
#9 0x5592321e0f1b <unknown>
#10 0x5592321e4e19 <unknown>
#11 0x5592321c7ac9 <unknown>
#12 0x5592321e59c8 <unknown>
#13 0x5592321ac34f <unknown>
#14 0x559232209a28 <unknown>
#15 0x559232209c06 <unknown>
#16 0x55923221b336 <unknown>
#17 0x7f168149caa4 <unknown>
#18 0x7f1681529c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username0] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x56388069345a <unknown>
#1 0x563880138760 <unknown>
#2 0x5638801730d8 <unknown>
#3 0x56388016e2cf <unknown>
#4 0x5638801be8d6 <unknown>
#5 0x5638801bdf96 <unknown>
#6 0x5638801afc23 <unknown>
#7 0x56388017c4a5 <unknown>
#8 0x56388017d111 <unknown>
#9 0x563880657f1b <unknown>
#10 0x56388065be19 <unknown>
#11 0x56388063eac9 <unknown>
#12 0x56388065c9c8 <unknown>
#13 0x56388062334f <unknown>
#14 0x563880680a28 <unknown>
#15 0x563880680c06 <unknown>
#16 0x563880692336 <unknown>
#17 0x7f434a69caa4 <unknown>
#18 0x7f434a729c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username1] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x558c8a9ca45a <unknown>
#1 0x558c8a46f760 <unknown>
#2 0x558c8a4aa0d8 <unknown>
#3 0x558c8a4a52cf <unknown>
#4 0x558c8a4f58d6 <unknown>
#5 0x558c8a4f4f96 <unknown>
#6 0x558c8a4e6c23 <unknown>
#7 0x558c8a4b34a5 <unknown>
#8 0x558c8a4b4111 <unknown>
#9 0x558c8a98ef1b <unknown>
#10 0x558c8a992e19 <unknown>
#11 0x558c8a975ac9 <unknown>
#12 0x558c8a9939c8 <unknown>
#13 0x558c8a95a34f <unknown>
#14 0x558c8a9b7a28 <unknown>
#15 0x558c8a9b7c06 <unknown>
#16 0x558c8a9c9336 <unknown>
#17 0x7f54df69caa4 <unknown>
#18 0x7f54df729c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username2] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55ce9e6d345a <unknown>
#1 0x55ce9e178760 <unknown>
#2 0x55ce9e1b30d8 <unknown>
#3 0x55ce9e1ae2cf <unknown>
#4 0x55ce9e1fe8d6 <unknown>
#5 0x55ce9e1fdf96 <unknown>
#6 0x55ce9e1efc23 <unknown>
#7 0x55ce9e1bc4a5 <unknown>
#8 0x55ce9e1bd111 <unknown>
#9 0x55ce9e697f1b <unknown>
#10 0x55ce9e69be19 <unknown>
#11 0x55ce9e67eac9 <unknown>
#12 0x55ce9e69c9c8 <unknown>
#13 0x55ce9e66334f <unknown>
#14 0x55ce9e6c0a28 <unknown>
#15 0x55ce9e6c0c06 <unknown>
#16 0x55ce9e6d2336 <unknown>
#17 0x7f4e05a9caa4 <unknown>
#18 0x7f4e05b29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username3] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x556f8c78645a <unknown>
#1 0x556f8c22b760 <unknown>
#2 0x556f8c2660d8 <unknown>
#3 0x556f8c2612cf <unknown>
#4 0x556f8c2b18d6 <unknown>
#5 0x556f8c2b0f96 <unknown>
#6 0x556f8c2a2c23 <unknown>
#7 0x556f8c26f4a5 <unknown>
#8 0x556f8c270111 <unknown>
#9 0x556f8c74af1b <unknown>
#10 0x556f8c74ee19 <unknown>
#11 0x556f8c731ac9 <unknown>
#12 0x556f8c74f9c8 <unknown>
#13 0x556f8c71634f <unknown>
#14 0x556f8c773a28 <unknown>
#15 0x556f8c773c06 <unknown>
#16 0x556f8c785336 <unknown>
#17 0x7ff696c9caa4 <unknown>
#18 0x7ff696d29c3c <unknown>
ERROR tests/test_login.py::test_invalid_email_validation[username4] - Failed: Driver setup failed: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir
Stacktrace:
#0 0x55815b0f445a <unknown>
#1 0x55815ab99760 <unknown>
#2 0x55815abd40d8 <unknown>
#3 0x55815abcf2cf <unknown>
#4 0x55815ac1f8d6 <unknown>
#5 0x55815ac1ef96 <unknown>
#6 0x55815ac10c23 <unknown>
#7 0x55815abdd4a5 <unknown>
#8 0x55815abde111 <unknown>
#9 0x55815b0b8f1b <unknown>
#10 0x55815b0bce19 <unknown>
#11 0x55815b09fac9 <unknown>
#12 0x55815b0bd9c8 <unknown>
#13 0x55815b08434f <unknown>
#14 0x55815b0e1a28 <unknown>
#15 0x55815b0e1c06 <unknown>
#16 0x55815b0f3336 <unknown>
#17 0x7f6fd349caa4 <unknown>
#18 0x7f6fd3529c3c <unknown>
============================= 19 errors in 35.76s ==============================
--------------------------------------------
Test Run Finished: 2025-07-02 19:05:32
Duration: 39 seconds
Status: FAILURE
Exit Code: 1
============================================
