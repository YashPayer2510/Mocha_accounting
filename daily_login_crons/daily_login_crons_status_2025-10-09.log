========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-09 03:46:47
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.11.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.11.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6a048f3c3edb2531675bf6ea708a1d3a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6a048f3c3edb2531675bf6ea708a1d3a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74daf18900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5595d8577fba <unknown>
E       #1 0x5595d7ffc6d0 <unknown>
E       #2 0x5595d804e2aa <unknown>
E       #3 0x5595d804e541 <unknown>
E       #4 0x5595d809c6c4 <unknown>
E       #5 0x5595d8073e5d <unknown>
E       #6 0x5595d8099b54 <unknown>
E       #7 0x5595d8073c03 <unknown>
E       #8 0x5595d80407a8 <unknown>
E       #9 0x5595d8041421 <unknown>
E       #10 0x5595d853cb28 <unknown>
E       #11 0x5595d854087f <unknown>
E       #12 0x5595d8524c49 <unknown>
E       #13 0x5595d8541405 <unknown>
E       #14 0x5595d850a4ff <unknown>
E       #15 0x5595d8565258 <unknown>
E       #16 0x5595d8565432 <unknown>
E       #17 0x5595d8576fa3 <unknown>
E       #18 0x7fc12fc9caa4 <unknown>
E       #19 0x7fc12fd29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 03:46:49,899 - INFO - Test data loaded successfully.
2025-10-09 03:46:49,899 - INFO - Starting test with Chrome browser
2025-10-09 03:46:49,899 - INFO - ====== WebDriver manager ======
2025-10-09 03:46:51,151 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:46:51,206 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:46:51,252 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-09 03:46:51,252 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:46:51,377 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-09 03:46:51,381 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-09 03:46:51,381 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-09 03:46:51,432 - INFO - Driver downloading response is 200
2025-10-09 03:46:51,507 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:46:51,667 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-09 03:46:57,937 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-09 03:46:57,938 - INFO - Starting the test case for valid credentials
2025-10-09 03:46:58,492 - INFO - User enters the email-id
2025-10-09 03:47:00,016 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 03:49:01,674 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a42001b32a54396c0e4b3f3be84f8609")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a42001b32a54396c0e4b3f3be84f8609")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53d940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562fb9983fba <unknown>
E       #1 0x562fb94086d0 <unknown>
E       #2 0x562fb945a2aa <unknown>
E       #3 0x562fb945a541 <unknown>
E       #4 0x562fb94a86c4 <unknown>
E       #5 0x562fb947fe5d <unknown>
E       #6 0x562fb94a5b54 <unknown>
E       #7 0x562fb947fc03 <unknown>
E       #8 0x562fb944c7a8 <unknown>
E       #9 0x562fb944d421 <unknown>
E       #10 0x562fb9948b28 <unknown>
E       #11 0x562fb994c87f <unknown>
E       #12 0x562fb9930c49 <unknown>
E       #13 0x562fb994d405 <unknown>
E       #14 0x562fb99164ff <unknown>
E       #15 0x562fb9971258 <unknown>
E       #16 0x562fb9971432 <unknown>
E       #17 0x562fb9982fa3 <unknown>
E       #18 0x7f7531c9caa4 <unknown>
E       #19 0x7f7531d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 03:49:01,795 - INFO - Starting test with Chrome browser
2025-10-09 03:49:01,795 - INFO - ====== WebDriver manager ======
2025-10-09 03:49:01,862 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:49:01,910 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:49:01,991 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 03:49:02,771 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-09 03:49:02,772 - INFO - Starting the test case for valid credentials
2025-10-09 03:49:03,212 - INFO - User enters the email-id
2025-10-09 03:49:04,718 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 03:51:06,346 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e5ea75a907fef71fa87bc929f6a1a829")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e5ea75a907fef71fa87bc929f6a1a829")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74da6fe480>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d09fcacfba <unknown>
E       #1 0x55d09f7316d0 <unknown>
E       #2 0x55d09f7832aa <unknown>
E       #3 0x55d09f783541 <unknown>
E       #4 0x55d09f7d16c4 <unknown>
E       #5 0x55d09f7a8e5d <unknown>
E       #6 0x55d09f7ceb54 <unknown>
E       #7 0x55d09f7a8c03 <unknown>
E       #8 0x55d09f7757a8 <unknown>
E       #9 0x55d09f776421 <unknown>
E       #10 0x55d09fc71b28 <unknown>
E       #11 0x55d09fc7587f <unknown>
E       #12 0x55d09fc59c49 <unknown>
E       #13 0x55d09fc76405 <unknown>
E       #14 0x55d09fc3f4ff <unknown>
E       #15 0x55d09fc9a258 <unknown>
E       #16 0x55d09fc9a432 <unknown>
E       #17 0x55d09fcabfa3 <unknown>
E       #18 0x7f1a08a9caa4 <unknown>
E       #19 0x7f1a08b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 03:51:06,411 - INFO - Starting test with Chrome browser
2025-10-09 03:51:06,411 - INFO - ====== WebDriver manager ======
2025-10-09 03:51:06,474 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:51:06,520 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:51:06,566 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 03:51:07,937 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-09 03:51:07,938 - INFO - Starting the test case for valid credentials
2025-10-09 03:51:08,083 - INFO - User enters the email-id
2025-10-09 03:51:09,689 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 03:53:11,265 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="cc6ac60244b7cec45ca5e246c273511d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="cc6ac60244b7cec45ca5e246c273511d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53d760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560395304fba <unknown>
E       #1 0x560394d896d0 <unknown>
E       #2 0x560394ddb2aa <unknown>
E       #3 0x560394ddb541 <unknown>
E       #4 0x560394e296c4 <unknown>
E       #5 0x560394e00e5d <unknown>
E       #6 0x560394e26b54 <unknown>
E       #7 0x560394e00c03 <unknown>
E       #8 0x560394dcd7a8 <unknown>
E       #9 0x560394dce421 <unknown>
E       #10 0x5603952c9b28 <unknown>
E       #11 0x5603952cd87f <unknown>
E       #12 0x5603952b1c49 <unknown>
E       #13 0x5603952ce405 <unknown>
E       #14 0x5603952974ff <unknown>
E       #15 0x5603952f2258 <unknown>
E       #16 0x5603952f2432 <unknown>
E       #17 0x560395303fa3 <unknown>
E       #18 0x7fc862e9caa4 <unknown>
E       #19 0x7fc862f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 03:53:11,330 - INFO - Starting test with Chrome browser
2025-10-09 03:53:11,330 - INFO - ====== WebDriver manager ======
2025-10-09 03:53:11,395 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:53:11,442 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:53:11,487 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 03:53:12,224 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-09 03:53:12,226 - INFO - Starting the test case for valid credentials
2025-10-09 03:53:12,634 - INFO - User enters the email-id
2025-10-09 03:53:14,134 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 03:55:15,734 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3a6f646ec1a83de877a1c3f0c36bc01a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3a6f646ec1a83de877a1c3f0c36bc01a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53e020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564f26c2ffba <unknown>
E       #1 0x564f266b46d0 <unknown>
E       #2 0x564f267062aa <unknown>
E       #3 0x564f26706541 <unknown>
E       #4 0x564f267546c4 <unknown>
E       #5 0x564f2672be5d <unknown>
E       #6 0x564f26751b54 <unknown>
E       #7 0x564f2672bc03 <unknown>
E       #8 0x564f266f87a8 <unknown>
E       #9 0x564f266f9421 <unknown>
E       #10 0x564f26bf4b28 <unknown>
E       #11 0x564f26bf887f <unknown>
E       #12 0x564f26bdcc49 <unknown>
E       #13 0x564f26bf9405 <unknown>
E       #14 0x564f26bc24ff <unknown>
E       #15 0x564f26c1d258 <unknown>
E       #16 0x564f26c1d432 <unknown>
E       #17 0x564f26c2efa3 <unknown>
E       #18 0x7f768b89caa4 <unknown>
E       #19 0x7f768b929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 03:55:15,792 - INFO - Starting test with Chrome browser
2025-10-09 03:55:15,792 - INFO - ====== WebDriver manager ======
2025-10-09 03:55:15,856 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:55:15,902 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:55:15,947 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 03:55:18,178 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 03:57:19,955 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2021fdcf0bec3c412ba00112faa76d89")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2021fdcf0bec3c412ba00112faa76d89")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53e0c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x561088d6ffba <unknown>
E       #1 0x5610887f46d0 <unknown>
E       #2 0x5610888462aa <unknown>
E       #3 0x561088846541 <unknown>
E       #4 0x5610888946c4 <unknown>
E       #5 0x56108886be5d <unknown>
E       #6 0x561088891b54 <unknown>
E       #7 0x56108886bc03 <unknown>
E       #8 0x5610888387a8 <unknown>
E       #9 0x561088839421 <unknown>
E       #10 0x561088d34b28 <unknown>
E       #11 0x561088d3887f <unknown>
E       #12 0x561088d1cc49 <unknown>
E       #13 0x561088d39405 <unknown>
E       #14 0x561088d024ff <unknown>
E       #15 0x561088d5d258 <unknown>
E       #16 0x561088d5d432 <unknown>
E       #17 0x561088d6efa3 <unknown>
E       #18 0x7f3f9889caa4 <unknown>
E       #19 0x7f3f98929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 03:57:20,013 - INFO - Starting test with Chrome browser
2025-10-09 03:57:20,013 - INFO - ====== WebDriver manager ======
2025-10-09 03:57:20,077 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:57:20,126 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:57:20,173 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 03:57:21,497 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 03:59:23,240 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="693df53099f7b12411c0f1d8eefd7e5f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="693df53099f7b12411c0f1d8eefd7e5f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53de40>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55af05313fba <unknown>
E       #1 0x55af04d986d0 <unknown>
E       #2 0x55af04dea2aa <unknown>
E       #3 0x55af04dea541 <unknown>
E       #4 0x55af04e386c4 <unknown>
E       #5 0x55af04e0fe5d <unknown>
E       #6 0x55af04e35b54 <unknown>
E       #7 0x55af04e0fc03 <unknown>
E       #8 0x55af04ddc7a8 <unknown>
E       #9 0x55af04ddd421 <unknown>
E       #10 0x55af052d8b28 <unknown>
E       #11 0x55af052dc87f <unknown>
E       #12 0x55af052c0c49 <unknown>
E       #13 0x55af052dd405 <unknown>
E       #14 0x55af052a64ff <unknown>
E       #15 0x55af05301258 <unknown>
E       #16 0x55af05301432 <unknown>
E       #17 0x55af05312fa3 <unknown>
E       #18 0x7f1371e9caa4 <unknown>
E       #19 0x7f1371f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 03:59:23,305 - INFO - Starting test with Chrome browser
2025-10-09 03:59:23,305 - INFO - ====== WebDriver manager ======
2025-10-09 03:59:23,369 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:59:23,415 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 03:59:23,461 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 03:59:24,230 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:01:26,284 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="96ab90c257a2e84d04f754016fec1d1b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="96ab90c257a2e84d04f754016fec1d1b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53e8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x556e5d7aefba <unknown>
E       #1 0x556e5d2336d0 <unknown>
E       #2 0x556e5d2852aa <unknown>
E       #3 0x556e5d285541 <unknown>
E       #4 0x556e5d2d36c4 <unknown>
E       #5 0x556e5d2aae5d <unknown>
E       #6 0x556e5d2d0b54 <unknown>
E       #7 0x556e5d2aac03 <unknown>
E       #8 0x556e5d2777a8 <unknown>
E       #9 0x556e5d278421 <unknown>
E       #10 0x556e5d773b28 <unknown>
E       #11 0x556e5d77787f <unknown>
E       #12 0x556e5d75bc49 <unknown>
E       #13 0x556e5d778405 <unknown>
E       #14 0x556e5d7414ff <unknown>
E       #15 0x556e5d79c258 <unknown>
E       #16 0x556e5d79c432 <unknown>
E       #17 0x556e5d7adfa3 <unknown>
E       #18 0x7f9b05a9caa4 <unknown>
E       #19 0x7f9b05b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:01:26,350 - INFO - Starting test with Chrome browser
2025-10-09 04:01:26,351 - INFO - ====== WebDriver manager ======
2025-10-09 04:01:26,416 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:01:26,462 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:01:26,509 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:01:28,046 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:03:29,819 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="226935fae6571f7697cd7c78870ecebb")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="226935fae6571f7697cd7c78870ecebb")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53ec00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56361f5c7fba <unknown>
E       #1 0x56361f04c6d0 <unknown>
E       #2 0x56361f09e2aa <unknown>
E       #3 0x56361f09e541 <unknown>
E       #4 0x56361f0ec6c4 <unknown>
E       #5 0x56361f0c3e5d <unknown>
E       #6 0x56361f0e9b54 <unknown>
E       #7 0x56361f0c3c03 <unknown>
E       #8 0x56361f0907a8 <unknown>
E       #9 0x56361f091421 <unknown>
E       #10 0x56361f58cb28 <unknown>
E       #11 0x56361f59087f <unknown>
E       #12 0x56361f574c49 <unknown>
E       #13 0x56361f591405 <unknown>
E       #14 0x56361f55a4ff <unknown>
E       #15 0x56361f5b5258 <unknown>
E       #16 0x56361f5b5432 <unknown>
E       #17 0x56361f5c6fa3 <unknown>
E       #18 0x7f4ea189caa4 <unknown>
E       #19 0x7f4ea1929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:03:29,883 - INFO - Starting test with Chrome browser
2025-10-09 04:03:29,883 - INFO - ====== WebDriver manager ======
2025-10-09 04:03:29,947 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:03:29,993 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:03:30,038 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:03:30,786 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:05:34,378 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a2e5d65e8aba0e7e68f0c77055e6bb50")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a2e5d65e8aba0e7e68f0c77055e6bb50")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53e980>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5609d90b6fba <unknown>
E       #1 0x5609d8b3b6d0 <unknown>
E       #2 0x5609d8b8d2aa <unknown>
E       #3 0x5609d8b8d541 <unknown>
E       #4 0x5609d8bdb6c4 <unknown>
E       #5 0x5609d8bb2e5d <unknown>
E       #6 0x5609d8bd8b54 <unknown>
E       #7 0x5609d8bb2c03 <unknown>
E       #8 0x5609d8b7f7a8 <unknown>
E       #9 0x5609d8b80421 <unknown>
E       #10 0x5609d907bb28 <unknown>
E       #11 0x5609d907f87f <unknown>
E       #12 0x5609d9063c49 <unknown>
E       #13 0x5609d9080405 <unknown>
E       #14 0x5609d90494ff <unknown>
E       #15 0x5609d90a4258 <unknown>
E       #16 0x5609d90a4432 <unknown>
E       #17 0x5609d90b5fa3 <unknown>
E       #18 0x7fb83c69caa4 <unknown>
E       #19 0x7fb83c729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:05:34,436 - INFO - Starting test with Chrome browser
2025-10-09 04:05:34,436 - INFO - ====== WebDriver manager ======
2025-10-09 04:05:34,500 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:05:34,557 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:05:34,601 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:05:35,869 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:07:39,168 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8c2bb947da70c7955d5db7ebc922c3c5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8c2bb947da70c7955d5db7ebc922c3c5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53de40>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55dc125e7fba <unknown>
E       #1 0x55dc1206c6d0 <unknown>
E       #2 0x55dc120be2aa <unknown>
E       #3 0x55dc120be541 <unknown>
E       #4 0x55dc1210c6c4 <unknown>
E       #5 0x55dc120e3e5d <unknown>
E       #6 0x55dc12109b54 <unknown>
E       #7 0x55dc120e3c03 <unknown>
E       #8 0x55dc120b07a8 <unknown>
E       #9 0x55dc120b1421 <unknown>
E       #10 0x55dc125acb28 <unknown>
E       #11 0x55dc125b087f <unknown>
E       #12 0x55dc12594c49 <unknown>
E       #13 0x55dc125b1405 <unknown>
E       #14 0x55dc1257a4ff <unknown>
E       #15 0x55dc125d5258 <unknown>
E       #16 0x55dc125d5432 <unknown>
E       #17 0x55dc125e6fa3 <unknown>
E       #18 0x7f926469caa4 <unknown>
E       #19 0x7f9264729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:07:39,233 - INFO - Starting test with Chrome browser
2025-10-09 04:07:39,233 - INFO - ====== WebDriver manager ======
2025-10-09 04:07:39,299 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:07:39,346 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:07:39,391 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:07:40,989 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:09:44,228 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5011ae2ef19f3a4a84b1f2b8fc66e9d1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5011ae2ef19f3a4a84b1f2b8fc66e9d1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53d9e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f5163e3fba <unknown>
E       #1 0x55f515e686d0 <unknown>
E       #2 0x55f515eba2aa <unknown>
E       #3 0x55f515eba541 <unknown>
E       #4 0x55f515f086c4 <unknown>
E       #5 0x55f515edfe5d <unknown>
E       #6 0x55f515f05b54 <unknown>
E       #7 0x55f515edfc03 <unknown>
E       #8 0x55f515eac7a8 <unknown>
E       #9 0x55f515ead421 <unknown>
E       #10 0x55f5163a8b28 <unknown>
E       #11 0x55f5163ac87f <unknown>
E       #12 0x55f516390c49 <unknown>
E       #13 0x55f5163ad405 <unknown>
E       #14 0x55f5163764ff <unknown>
E       #15 0x55f5163d1258 <unknown>
E       #16 0x55f5163d1432 <unknown>
E       #17 0x55f5163e2fa3 <unknown>
E       #18 0x7f152889caa4 <unknown>
E       #19 0x7f1528929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:09:44,292 - INFO - Starting test with Chrome browser
2025-10-09 04:09:44,292 - INFO - ====== WebDriver manager ======
2025-10-09 04:09:44,358 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:09:44,404 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:09:44,449 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:09:46,215 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:11:49,501 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6441fce7fa67d699c2a320b49ec43ea2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
        login_page.disabled_click_login_button()
>       login_page.username_blank_validation(login_test_data)

tests/test_login.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:72: in username_blank_validation
    self.actions.wait_for_element(self.username_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6441fce7fa67d699c2a320b49ec43ea2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53da80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5617f7275fba <unknown>
E       #1 0x5617f6cfa6d0 <unknown>
E       #2 0x5617f6d4c2aa <unknown>
E       #3 0x5617f6d4c541 <unknown>
E       #4 0x5617f6d9a6c4 <unknown>
E       #5 0x5617f6d71e5d <unknown>
E       #6 0x5617f6d97b54 <unknown>
E       #7 0x5617f6d71c03 <unknown>
E       #8 0x5617f6d3e7a8 <unknown>
E       #9 0x5617f6d3f421 <unknown>
E       #10 0x5617f723ab28 <unknown>
E       #11 0x5617f723e87f <unknown>
E       #12 0x5617f7222c49 <unknown>
E       #13 0x5617f723f405 <unknown>
E       #14 0x5617f72084ff <unknown>
E       #15 0x5617f7263258 <unknown>
E       #16 0x5617f7263432 <unknown>
E       #17 0x5617f7274fa3 <unknown>
E       #18 0x7ff58629caa4 <unknown>
E       #19 0x7ff586329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:11:50,566 - INFO - Starting test with Chrome browser
2025-10-09 04:11:50,566 - INFO - ====== WebDriver manager ======
2025-10-09 04:11:50,632 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:11:50,680 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:11:50,727 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:11:52,087 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:13:53,883 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fc7ea5a975f2d2b23b5e55abf9614d39")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
        login_page.click_password()
        login_page.disabled_click_login_button()
>       login_page.password_blank_validation(login_test_data)

tests/test_login.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:78: in password_blank_validation
    self.actions.wait_for_element(self.password_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="fc7ea5a975f2d2b23b5e55abf9614d39")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53f4c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5606bc080fba <unknown>
E       #1 0x5606bbb056d0 <unknown>
E       #2 0x5606bbb572aa <unknown>
E       #3 0x5606bbb57541 <unknown>
E       #4 0x5606bbba56c4 <unknown>
E       #5 0x5606bbb7ce5d <unknown>
E       #6 0x5606bbba2b54 <unknown>
E       #7 0x5606bbb7cc03 <unknown>
E       #8 0x5606bbb497a8 <unknown>
E       #9 0x5606bbb4a421 <unknown>
E       #10 0x5606bc045b28 <unknown>
E       #11 0x5606bc04987f <unknown>
E       #12 0x5606bc02dc49 <unknown>
E       #13 0x5606bc04a405 <unknown>
E       #14 0x5606bc0134ff <unknown>
E       #15 0x5606bc06e258 <unknown>
E       #16 0x5606bc06e432 <unknown>
E       #17 0x5606bc07ffa3 <unknown>
E       #18 0x7f762fe9caa4 <unknown>
E       #19 0x7f762ff29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:13:54,941 - INFO - Starting test with Chrome browser
2025-10-09 04:13:54,941 - INFO - ====== WebDriver manager ======
2025-10-09 04:13:55,005 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:13:55,056 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:13:55,102 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:13:57,068 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:16:00,536 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5b4deb0b7f59fc4cbb5e553e8e7cc882")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5b4deb0b7f59fc4cbb5e553e8e7cc882")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53f2e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f260c86fba <unknown>
E       #1 0x55f26070b6d0 <unknown>
E       #2 0x55f26075d2aa <unknown>
E       #3 0x55f26075d541 <unknown>
E       #4 0x55f2607ab6c4 <unknown>
E       #5 0x55f260782e5d <unknown>
E       #6 0x55f2607a8b54 <unknown>
E       #7 0x55f260782c03 <unknown>
E       #8 0x55f26074f7a8 <unknown>
E       #9 0x55f260750421 <unknown>
E       #10 0x55f260c4bb28 <unknown>
E       #11 0x55f260c4f87f <unknown>
E       #12 0x55f260c33c49 <unknown>
E       #13 0x55f260c50405 <unknown>
E       #14 0x55f260c194ff <unknown>
E       #15 0x55f260c74258 <unknown>
E       #16 0x55f260c74432 <unknown>
E       #17 0x55f260c85fa3 <unknown>
E       #18 0x7f3e1409caa4 <unknown>
E       #19 0x7f3e14129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:16:00,604 - INFO - Starting test with Chrome browser
2025-10-09 04:16:00,604 - INFO - ====== WebDriver manager ======
2025-10-09 04:16:00,668 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:16:00,716 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:16:00,762 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:16:01,576 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:18:03,744 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="81fe9585e4d3a8293bcad8ed9c9c7494")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="81fe9585e4d3a8293bcad8ed9c9c7494")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53d760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f438f76fba <unknown>
E       #1 0x55f4389fb6d0 <unknown>
E       #2 0x55f438a4d2aa <unknown>
E       #3 0x55f438a4d541 <unknown>
E       #4 0x55f438a9b6c4 <unknown>
E       #5 0x55f438a72e5d <unknown>
E       #6 0x55f438a98b54 <unknown>
E       #7 0x55f438a72c03 <unknown>
E       #8 0x55f438a3f7a8 <unknown>
E       #9 0x55f438a40421 <unknown>
E       #10 0x55f438f3bb28 <unknown>
E       #11 0x55f438f3f87f <unknown>
E       #12 0x55f438f23c49 <unknown>
E       #13 0x55f438f40405 <unknown>
E       #14 0x55f438f094ff <unknown>
E       #15 0x55f438f64258 <unknown>
E       #16 0x55f438f64432 <unknown>
E       #17 0x55f438f75fa3 <unknown>
E       #18 0x7fe32c29caa4 <unknown>
E       #19 0x7fe32c329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:18:03,802 - INFO - Starting test with Chrome browser
2025-10-09 04:18:03,803 - INFO - ====== WebDriver manager ======
2025-10-09 04:18:03,865 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:18:03,911 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:18:03,960 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:18:05,280 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:20:07,107 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b69b28e7c4d4bdd42829e82a2466ea6d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b69b28e7c4d4bdd42829e82a2466ea6d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53dda0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56350c6e1fba <unknown>
E       #1 0x56350c1666d0 <unknown>
E       #2 0x56350c1b82aa <unknown>
E       #3 0x56350c1b8541 <unknown>
E       #4 0x56350c2066c4 <unknown>
E       #5 0x56350c1dde5d <unknown>
E       #6 0x56350c203b54 <unknown>
E       #7 0x56350c1ddc03 <unknown>
E       #8 0x56350c1aa7a8 <unknown>
E       #9 0x56350c1ab421 <unknown>
E       #10 0x56350c6a6b28 <unknown>
E       #11 0x56350c6aa87f <unknown>
E       #12 0x56350c68ec49 <unknown>
E       #13 0x56350c6ab405 <unknown>
E       #14 0x56350c6744ff <unknown>
E       #15 0x56350c6cf258 <unknown>
E       #16 0x56350c6cf432 <unknown>
E       #17 0x56350c6e0fa3 <unknown>
E       #18 0x7fb84da9caa4 <unknown>
E       #19 0x7fb84db29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:20:07,171 - INFO - Starting test with Chrome browser
2025-10-09 04:20:07,172 - INFO - ====== WebDriver manager ======
2025-10-09 04:20:07,235 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:20:07,283 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:20:07,327 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:20:08,912 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:22:10,778 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9f6a6073d14108249277ea4d0a33f06e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9f6a6073d14108249277ea4d0a33f06e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53f6a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f832ac2fba <unknown>
E       #1 0x55f8325476d0 <unknown>
E       #2 0x55f8325992aa <unknown>
E       #3 0x55f832599541 <unknown>
E       #4 0x55f8325e76c4 <unknown>
E       #5 0x55f8325bee5d <unknown>
E       #6 0x55f8325e4b54 <unknown>
E       #7 0x55f8325bec03 <unknown>
E       #8 0x55f83258b7a8 <unknown>
E       #9 0x55f83258c421 <unknown>
E       #10 0x55f832a87b28 <unknown>
E       #11 0x55f832a8b87f <unknown>
E       #12 0x55f832a6fc49 <unknown>
E       #13 0x55f832a8c405 <unknown>
E       #14 0x55f832a554ff <unknown>
E       #15 0x55f832ab0258 <unknown>
E       #16 0x55f832ab0432 <unknown>
E       #17 0x55f832ac1fa3 <unknown>
E       #18 0x7f8eb249caa4 <unknown>
E       #19 0x7f8eb2529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:22:11,834 - INFO - Starting test with Chrome browser
2025-10-09 04:22:11,834 - INFO - ====== WebDriver manager ======
2025-10-09 04:22:11,898 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:22:11,946 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:22:11,990 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:22:13,473 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:24:15,417 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9e337507b3081848c76bf9a63bf0062c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9e337507b3081848c76bf9a63bf0062c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f74dc53f880>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5585057e7fba <unknown>
E       #1 0x55850526c6d0 <unknown>
E       #2 0x5585052be2aa <unknown>
E       #3 0x5585052be541 <unknown>
E       #4 0x55850530c6c4 <unknown>
E       #5 0x5585052e3e5d <unknown>
E       #6 0x558505309b54 <unknown>
E       #7 0x5585052e3c03 <unknown>
E       #8 0x5585052b07a8 <unknown>
E       #9 0x5585052b1421 <unknown>
E       #10 0x5585057acb28 <unknown>
E       #11 0x5585057b087f <unknown>
E       #12 0x558505794c49 <unknown>
E       #13 0x5585057b1405 <unknown>
E       #14 0x55850577a4ff <unknown>
E       #15 0x5585057d5258 <unknown>
E       #16 0x5585057d5432 <unknown>
E       #17 0x5585057e6fa3 <unknown>
E       #18 0x7feaff09caa4 <unknown>
E       #19 0x7feaff129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-09 04:24:16,477 - INFO - Starting test with Chrome browser
2025-10-09 04:24:16,477 - INFO - ====== WebDriver manager ======
2025-10-09 04:24:16,542 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:24:16,596 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-09 04:24:16,642 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-09 04:24:18,032 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-09 04:26:19,897 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251009_034649/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5595d8577fba <unknown>
#1 0x5595d7ffc6d0 <unknown>
#2 0x5595d804e2aa <unknown>
#3 0x5595d804e541 <unknown>
#4 0x5595d809c6c4 <unknown>
#5 0x5595d8073e5d <unknown>
#6 0x5595d8099b54 <unknown>
#7 0x5595d8073c03 <unknown>
#8 0x5595d80407a8 <unknown>
#9 0x5595d8041421 <unknown>
#10 0x5595d853cb28 <unknown>
#11 0x5595d854087f <unknown>
#12 0x5595d8524c49 <unknown>
#13 0x5595d8541405 <unknown>
#14 0x5595d850a4ff <unknown>
#15 0x5595d8565258 <unknown>
#16 0x5595d8565432 <unknown>
#17 0x5595d8576fa3 <unknown>
#18 0x7fc12fc9caa4 <unknown>
#19 0x7fc12fd29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562fb9983fba <unknown>
#1 0x562fb94086d0 <unknown>
#2 0x562fb945a2aa <unknown>
#3 0x562fb945a541 <unknown>
#4 0x562fb94a86c4 <unknown>
#5 0x562fb947fe5d <unknown>
#6 0x562fb94a5b54 <unknown>
#7 0x562fb947fc03 <unknown>
#8 0x562fb944c7a8 <unknown>
#9 0x562fb944d421 <unknown>
#10 0x562fb9948b28 <unknown>
#11 0x562fb994c87f <unknown>
#12 0x562fb9930c49 <unknown>
#13 0x562fb994d405 <unknown>
#14 0x562fb99164ff <unknown>
#15 0x562fb9971258 <unknown>
#16 0x562fb9971432 <unknown>
#17 0x562fb9982fa3 <unknown>
#18 0x7f7531c9caa4 <unknown>
#19 0x7f7531d29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d09fcacfba <unknown>
#1 0x55d09f7316d0 <unknown>
#2 0x55d09f7832aa <unknown>
#3 0x55d09f783541 <unknown>
#4 0x55d09f7d16c4 <unknown>
#5 0x55d09f7a8e5d <unknown>
#6 0x55d09f7ceb54 <unknown>
#7 0x55d09f7a8c03 <unknown>
#8 0x55d09f7757a8 <unknown>
#9 0x55d09f776421 <unknown>
#10 0x55d09fc71b28 <unknown>
#11 0x55d09fc7587f <unknown>
#12 0x55d09fc59c49 <unknown>
#13 0x55d09fc76405 <unknown>
#14 0x55d09fc3f4ff <unknown>
#15 0x55d09fc9a258 <unknown>
#16 0x55d09fc9a432 <unknown>
#17 0x55d09fcabfa3 <unknown>
#18 0x7f1a08a9caa4 <unknown>
#19 0x7f1a08b29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560395304fba <unknown>
#1 0x560394d896d0 <unknown>
#2 0x560394ddb2aa <unknown>
#3 0x560394ddb541 <unknown>
#4 0x560394e296c4 <unknown>
#5 0x560394e00e5d <unknown>
#6 0x560394e26b54 <unknown>
#7 0x560394e00c03 <unknown>
#8 0x560394dcd7a8 <unknown>
#9 0x560394dce421 <unknown>
#10 0x5603952c9b28 <unknown>
#11 0x5603952cd87f <unknown>
#12 0x5603952b1c49 <unknown>
#13 0x5603952ce405 <unknown>
#14 0x5603952974ff <unknown>
#15 0x5603952f2258 <unknown>
#16 0x5603952f2432 <unknown>
#17 0x560395303fa3 <unknown>
#18 0x7fc862e9caa4 <unknown>
#19 0x7fc862f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564f26c2ffba <unknown>
#1 0x564f266b46d0 <unknown>
#2 0x564f267062aa <unknown>
#3 0x564f26706541 <unknown>
#4 0x564f267546c4 <unknown>
#5 0x564f2672be5d <unknown>
#6 0x564f26751b54 <unknown>
#7 0x564f2672bc03 <unknown>
#8 0x564f266f87a8 <unknown>
#9 0x564f266f9421 <unknown>
#10 0x564f26bf4b28 <unknown>
#11 0x564f26bf887f <unknown>
#12 0x564f26bdcc49 <unknown>
#13 0x564f26bf9405 <unknown>
#14 0x564f26bc24ff <unknown>
#15 0x564f26c1d258 <unknown>
#16 0x564f26c1d432 <unknown>
#17 0x564f26c2efa3 <unknown>
#18 0x7f768b89caa4 <unknown>
#19 0x7f768b929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x561088d6ffba <unknown>
#1 0x5610887f46d0 <unknown>
#2 0x5610888462aa <unknown>
#3 0x561088846541 <unknown>
#4 0x5610888946c4 <unknown>
#5 0x56108886be5d <unknown>
#6 0x561088891b54 <unknown>
#7 0x56108886bc03 <unknown>
#8 0x5610888387a8 <unknown>
#9 0x561088839421 <unknown>
#10 0x561088d34b28 <unknown>
#11 0x561088d3887f <unknown>
#12 0x561088d1cc49 <unknown>
#13 0x561088d39405 <unknown>
#14 0x561088d024ff <unknown>
#15 0x561088d5d258 <unknown>
#16 0x561088d5d432 <unknown>
#17 0x561088d6efa3 <unknown>
#18 0x7f3f9889caa4 <unknown>
#19 0x7f3f98929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55af05313fba <unknown>
#1 0x55af04d986d0 <unknown>
#2 0x55af04dea2aa <unknown>
#3 0x55af04dea541 <unknown>
#4 0x55af04e386c4 <unknown>
#5 0x55af04e0fe5d <unknown>
#6 0x55af04e35b54 <unknown>
#7 0x55af04e0fc03 <unknown>
#8 0x55af04ddc7a8 <unknown>
#9 0x55af04ddd421 <unknown>
#10 0x55af052d8b28 <unknown>
#11 0x55af052dc87f <unknown>
#12 0x55af052c0c49 <unknown>
#13 0x55af052dd405 <unknown>
#14 0x55af052a64ff <unknown>
#15 0x55af05301258 <unknown>
#16 0x55af05301432 <unknown>
#17 0x55af05312fa3 <unknown>
#18 0x7f1371e9caa4 <unknown>
#19 0x7f1371f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x556e5d7aefba <unknown>
#1 0x556e5d2336d0 <unknown>
#2 0x556e5d2852aa <unknown>
#3 0x556e5d285541 <unknown>
#4 0x556e5d2d36c4 <unknown>
#5 0x556e5d2aae5d <unknown>
#6 0x556e5d2d0b54 <unknown>
#7 0x556e5d2aac03 <unknown>
#8 0x556e5d2777a8 <unknown>
#9 0x556e5d278421 <unknown>
#10 0x556e5d773b28 <unknown>
#11 0x556e5d77787f <unknown>
#12 0x556e5d75bc49 <unknown>
#13 0x556e5d778405 <unknown>
#14 0x556e5d7414ff <unknown>
#15 0x556e5d79c258 <unknown>
#16 0x556e5d79c432 <unknown>
#17 0x556e5d7adfa3 <unknown>
#18 0x7f9b05a9caa4 <unknown>
#19 0x7f9b05b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56361f5c7fba <unknown>
#1 0x56361f04c6d0 <unknown>
#2 0x56361f09e2aa <unknown>
#3 0x56361f09e541 <unknown>
#4 0x56361f0ec6c4 <unknown>
#5 0x56361f0c3e5d <unknown>
#6 0x56361f0e9b54 <unknown>
#7 0x56361f0c3c03 <unknown>
#8 0x56361f0907a8 <unknown>
#9 0x56361f091421 <unknown>
#10 0x56361f58cb28 <unknown>
#11 0x56361f59087f <unknown>
#12 0x56361f574c49 <unknown>
#13 0x56361f591405 <unknown>
#14 0x56361f55a4ff <unknown>
#15 0x56361f5b5258 <unknown>
#16 0x56361f5b5432 <unknown>
#17 0x56361f5c6fa3 <unknown>
#18 0x7f4ea189caa4 <unknown>
#19 0x7f4ea1929c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5609d90b6fba <unknown>
#1 0x5609d8b3b6d0 <unknown>
#2 0x5609d8b8d2aa <unknown>
#3 0x5609d8b8d541 <unknown>
#4 0x5609d8bdb6c4 <unknown>
#5 0x5609d8bb2e5d <unknown>
#6 0x5609d8bd8b54 <unknown>
#7 0x5609d8bb2c03 <unknown>
#8 0x5609d8b7f7a8 <unknown>
#9 0x5609d8b80421 <unknown>
#10 0x5609d907bb28 <unknown>
#11 0x5609d907f87f <unknown>
#12 0x5609d9063c49 <unknown>
#13 0x5609d9080405 <unknown>
#14 0x5609d90494ff <unknown>
#15 0x5609d90a4258 <unknown>
#16 0x5609d90a4432 <unknown>
#17 0x5609d90b5fa3 <unknown>
#18 0x7fb83c69caa4 <unknown>
#19 0x7fb83c729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55dc125e7fba <unknown>
#1 0x55dc1206c6d0 <unknown>
#2 0x55dc120be2aa <unknown>
#3 0x55dc120be541 <unknown>
#4 0x55dc1210c6c4 <unknown>
#5 0x55dc120e3e5d <unknown>
#6 0x55dc12109b54 <unknown>
#7 0x55dc120e3c03 <unknown>
#8 0x55dc120b07a8 <unknown>
#9 0x55dc120b1421 <unknown>
#10 0x55dc125acb28 <unknown>
#11 0x55dc125b087f <unknown>
#12 0x55dc12594c49 <unknown>
#13 0x55dc125b1405 <unknown>
#14 0x55dc1257a4ff <unknown>
#15 0x55dc125d5258 <unknown>
#16 0x55dc125d5432 <unknown>
#17 0x55dc125e6fa3 <unknown>
#18 0x7f926469caa4 <unknown>
#19 0x7f9264729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f5163e3fba <unknown>
#1 0x55f515e686d0 <unknown>
#2 0x55f515eba2aa <unknown>
#3 0x55f515eba541 <unknown>
#4 0x55f515f086c4 <unknown>
#5 0x55f515edfe5d <unknown>
#6 0x55f515f05b54 <unknown>
#7 0x55f515edfc03 <unknown>
#8 0x55f515eac7a8 <unknown>
#9 0x55f515ead421 <unknown>
#10 0x55f5163a8b28 <unknown>
#11 0x55f5163ac87f <unknown>
#12 0x55f516390c49 <unknown>
#13 0x55f5163ad405 <unknown>
#14 0x55f5163764ff <unknown>
#15 0x55f5163d1258 <unknown>
#16 0x55f5163d1432 <unknown>
#17 0x55f5163e2fa3 <unknown>
#18 0x7f152889caa4 <unknown>
#19 0x7f1528929c6c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5617f7275fba <unknown>
#1 0x5617f6cfa6d0 <unknown>
#2 0x5617f6d4c2aa <unknown>
#3 0x5617f6d4c541 <unknown>
#4 0x5617f6d9a6c4 <unknown>
#5 0x5617f6d71e5d <unknown>
#6 0x5617f6d97b54 <unknown>
#7 0x5617f6d71c03 <unknown>
#8 0x5617f6d3e7a8 <unknown>
#9 0x5617f6d3f421 <unknown>
#10 0x5617f723ab28 <unknown>
#11 0x5617f723e87f <unknown>
#12 0x5617f7222c49 <unknown>
#13 0x5617f723f405 <unknown>
#14 0x5617f72084ff <unknown>
#15 0x5617f7263258 <unknown>
#16 0x5617f7263432 <unknown>
#17 0x5617f7274fa3 <unknown>
#18 0x7ff58629caa4 <unknown>
#19 0x7ff586329c6c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5606bc080fba <unknown>
#1 0x5606bbb056d0 <unknown>
#2 0x5606bbb572aa <unknown>
#3 0x5606bbb57541 <unknown>
#4 0x5606bbba56c4 <unknown>
#5 0x5606bbb7ce5d <unknown>
#6 0x5606bbba2b54 <unknown>
#7 0x5606bbb7cc03 <unknown>
#8 0x5606bbb497a8 <unknown>
#9 0x5606bbb4a421 <unknown>
#10 0x5606bc045b28 <unknown>
#11 0x5606bc04987f <unknown>
#12 0x5606bc02dc49 <unknown>
#13 0x5606bc04a405 <unknown>
#14 0x5606bc0134ff <unknown>
#15 0x5606bc06e258 <unknown>
#16 0x5606bc06e432 <unknown>
#17 0x5606bc07ffa3 <unknown>
#18 0x7f762fe9caa4 <unknown>
#19 0x7f762ff29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f260c86fba <unknown>
#1 0x55f26070b6d0 <unknown>
#2 0x55f26075d2aa <unknown>
#3 0x55f26075d541 <unknown>
#4 0x55f2607ab6c4 <unknown>
#5 0x55f260782e5d <unknown>
#6 0x55f2607a8b54 <unknown>
#7 0x55f260782c03 <unknown>
#8 0x55f26074f7a8 <unknown>
#9 0x55f260750421 <unknown>
#10 0x55f260c4bb28 <unknown>
#11 0x55f260c4f87f <unknown>
#12 0x55f260c33c49 <unknown>
#13 0x55f260c50405 <unknown>
#14 0x55f260c194ff <unknown>
#15 0x55f260c74258 <unknown>
#16 0x55f260c74432 <unknown>
#17 0x55f260c85fa3 <unknown>
#18 0x7f3e1409caa4 <unknown>
#19 0x7f3e14129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f438f76fba <unknown>
#1 0x55f4389fb6d0 <unknown>
#2 0x55f438a4d2aa <unknown>
#3 0x55f438a4d541 <unknown>
#4 0x55f438a9b6c4 <unknown>
#5 0x55f438a72e5d <unknown>
#6 0x55f438a98b54 <unknown>
#7 0x55f438a72c03 <unknown>
#8 0x55f438a3f7a8 <unknown>
#9 0x55f438a40421 <unknown>
#10 0x55f438f3bb28 <unknown>
#11 0x55f438f3f87f <unknown>
#12 0x55f438f23c49 <unknown>
#13 0x55f438f40405 <unknown>
#14 0x55f438f094ff <unknown>
#15 0x55f438f64258 <unknown>
#16 0x55f438f64432 <unknown>
#17 0x55f438f75fa3 <unknown>
#18 0x7fe32c29caa4 <unknown>
#19 0x7fe32c329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56350c6e1fba <unknown>
#1 0x56350c1666d0 <unknown>
#2 0x56350c1b82aa <unknown>
#3 0x56350c1b8541 <unknown>
#4 0x56350c2066c4 <unknown>
#5 0x56350c1dde5d <unknown>
#6 0x56350c203b54 <unknown>
#7 0x56350c1ddc03 <unknown>
#8 0x56350c1aa7a8 <unknown>
#9 0x56350c1ab421 <unknown>
#10 0x56350c6a6b28 <unknown>
#11 0x56350c6aa87f <unknown>
#12 0x56350c68ec49 <unknown>
#13 0x56350c6ab405 <unknown>
#14 0x56350c6744ff <unknown>
#15 0x56350c6cf258 <unknown>
#16 0x56350c6cf432 <unknown>
#17 0x56350c6e0fa3 <unknown>
#18 0x7fb84da9caa4 <unknown>
#19 0x7fb84db29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f832ac2fba <unknown>
#1 0x55f8325476d0 <unknown>
#2 0x55f8325992aa <unknown>
#3 0x55f832599541 <unknown>
#4 0x55f8325e76c4 <unknown>
#5 0x55f8325bee5d <unknown>
#6 0x55f8325e4b54 <unknown>
#7 0x55f8325bec03 <unknown>
#8 0x55f83258b7a8 <unknown>
#9 0x55f83258c421 <unknown>
#10 0x55f832a87b28 <unknown>
#11 0x55f832a8b87f <unknown>
#12 0x55f832a6fc49 <unknown>
#13 0x55f832a8c405 <unknown>
#14 0x55f832a554ff <unknown>
#15 0x55f832ab0258 <unknown>
#16 0x55f832ab0432 <unknown>
#17 0x55f832ac1fa3 <unknown>
#18 0x7f8eb249caa4 <unknown>
#19 0x7f8eb2529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5585057e7fba <unknown>
#1 0x55850526c6d0 <unknown>
#2 0x5585052be2aa <unknown>
#3 0x5585052be541 <unknown>
#4 0x55850530c6c4 <unknown>
#5 0x5585052e3e5d <unknown>
#6 0x558505309b54 <unknown>
#7 0x5585052e3c03 <unknown>
#8 0x5585052b07a8 <unknown>
#9 0x5585052b1421 <unknown>
#10 0x5585057acb28 <unknown>
#11 0x5585057b087f <unknown>
#12 0x558505794c49 <unknown>
#13 0x5585057b1405 <unknown>
#14 0x55850577a4ff <unknown>
#15 0x5585057d5258 <unknown>
#16 0x5585057d5432 <unknown>
#17 0x5585057e6fa3 <unknown>
#18 0x7feaff09caa4 <unknown>
#19 0x7feaff129c6c <unknown>
======================= 19 failed in 2370.16s (0:39:30) ========================
--------------------------------------------
Test Run Finished: 2025-10-09 04:26:20
Duration: 2373 seconds
Status: FAILURE
Exit Code: 1
============================================
