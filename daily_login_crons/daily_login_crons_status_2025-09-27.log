========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-27 03:43:13
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="17de2fa16f9f0dda04e15302440d4712")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="17de2fa16f9f0dda04e15302440d4712")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e4882c900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562f4ee0ffba <unknown>
E       #1 0x562f4e8946d0 <unknown>
E       #2 0x562f4e8e62aa <unknown>
E       #3 0x562f4e8e6541 <unknown>
E       #4 0x562f4e9346c4 <unknown>
E       #5 0x562f4e90be5d <unknown>
E       #6 0x562f4e931b54 <unknown>
E       #7 0x562f4e90bc03 <unknown>
E       #8 0x562f4e8d87a8 <unknown>
E       #9 0x562f4e8d9421 <unknown>
E       #10 0x562f4edd4b28 <unknown>
E       #11 0x562f4edd887f <unknown>
E       #12 0x562f4edbcc49 <unknown>
E       #13 0x562f4edd9405 <unknown>
E       #14 0x562f4eda24ff <unknown>
E       #15 0x562f4edfd258 <unknown>
E       #16 0x562f4edfd432 <unknown>
E       #17 0x562f4ee0efa3 <unknown>
E       #18 0x7f0d2cc9caa4 <unknown>
E       #19 0x7f0d2cd29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 03:43:15,605 - INFO - Test data loaded successfully.
2025-09-27 03:43:15,605 - INFO - Starting test with Chrome browser
2025-09-27 03:43:15,605 - INFO - ====== WebDriver manager ======
2025-09-27 03:43:17,040 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:43:17,087 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:43:17,120 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-09-27 03:43:17,120 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:43:17,217 - INFO - WebDriver version 140.0.7339.207 selected
2025-09-27 03:43:17,220 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-27 03:43:17,221 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-27 03:43:17,264 - INFO - Driver downloading response is 200
2025-09-27 03:43:17,326 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:43:17,474 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-09-27 03:43:26,635 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-27 03:43:26,636 - INFO - Starting the test case for valid credentials
2025-09-27 03:43:26,920 - INFO - User enters the email-id
2025-09-27 03:43:28,580 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 03:45:30,241 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="12aec6d73af263f7683836b73a733dbc")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="12aec6d73af263f7683836b73a733dbc")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b598a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a827087fba <unknown>
E       #1 0x55a826b0c6d0 <unknown>
E       #2 0x55a826b5e2aa <unknown>
E       #3 0x55a826b5e541 <unknown>
E       #4 0x55a826bac6c4 <unknown>
E       #5 0x55a826b83e5d <unknown>
E       #6 0x55a826ba9b54 <unknown>
E       #7 0x55a826b83c03 <unknown>
E       #8 0x55a826b507a8 <unknown>
E       #9 0x55a826b51421 <unknown>
E       #10 0x55a82704cb28 <unknown>
E       #11 0x55a82705087f <unknown>
E       #12 0x55a827034c49 <unknown>
E       #13 0x55a827051405 <unknown>
E       #14 0x55a82701a4ff <unknown>
E       #15 0x55a827075258 <unknown>
E       #16 0x55a827075432 <unknown>
E       #17 0x55a827086fa3 <unknown>
E       #18 0x7f09cfc9caa4 <unknown>
E       #19 0x7f09cfd29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 03:45:30,378 - INFO - Starting test with Chrome browser
2025-09-27 03:45:30,378 - INFO - ====== WebDriver manager ======
2025-09-27 03:45:30,444 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:45:30,478 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:45:30,516 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 03:45:32,233 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-27 03:45:32,233 - INFO - Starting the test case for valid credentials
2025-09-27 03:45:32,380 - INFO - User enters the email-id
2025-09-27 03:45:34,066 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 03:47:35,653 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e5a30b019101757939367730eb5ffc83")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e5a30b019101757939367730eb5ffc83")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e47ce23e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f604a22fba <unknown>
E       #1 0x55f6044a76d0 <unknown>
E       #2 0x55f6044f92aa <unknown>
E       #3 0x55f6044f9541 <unknown>
E       #4 0x55f6045476c4 <unknown>
E       #5 0x55f60451ee5d <unknown>
E       #6 0x55f604544b54 <unknown>
E       #7 0x55f60451ec03 <unknown>
E       #8 0x55f6044eb7a8 <unknown>
E       #9 0x55f6044ec421 <unknown>
E       #10 0x55f6049e7b28 <unknown>
E       #11 0x55f6049eb87f <unknown>
E       #12 0x55f6049cfc49 <unknown>
E       #13 0x55f6049ec405 <unknown>
E       #14 0x55f6049b54ff <unknown>
E       #15 0x55f604a10258 <unknown>
E       #16 0x55f604a10432 <unknown>
E       #17 0x55f604a21fa3 <unknown>
E       #18 0x7fad6349caa4 <unknown>
E       #19 0x7fad63529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 03:47:35,710 - INFO - Starting test with Chrome browser
2025-09-27 03:47:35,710 - INFO - ====== WebDriver manager ======
2025-09-27 03:47:35,779 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:47:35,812 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:47:35,843 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 03:47:37,483 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-27 03:47:37,483 - INFO - Starting the test case for valid credentials
2025-09-27 03:47:37,635 - INFO - User enters the email-id
2025-09-27 03:47:39,296 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 03:49:40,874 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7e4838dc63c868e73870ef4a5e4ab32d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7e4838dc63c868e73870ef4a5e4ab32d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b596c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5618f5f83fba <unknown>
E       #1 0x5618f5a086d0 <unknown>
E       #2 0x5618f5a5a2aa <unknown>
E       #3 0x5618f5a5a541 <unknown>
E       #4 0x5618f5aa86c4 <unknown>
E       #5 0x5618f5a7fe5d <unknown>
E       #6 0x5618f5aa5b54 <unknown>
E       #7 0x5618f5a7fc03 <unknown>
E       #8 0x5618f5a4c7a8 <unknown>
E       #9 0x5618f5a4d421 <unknown>
E       #10 0x5618f5f48b28 <unknown>
E       #11 0x5618f5f4c87f <unknown>
E       #12 0x5618f5f30c49 <unknown>
E       #13 0x5618f5f4d405 <unknown>
E       #14 0x5618f5f164ff <unknown>
E       #15 0x5618f5f71258 <unknown>
E       #16 0x5618f5f71432 <unknown>
E       #17 0x5618f5f82fa3 <unknown>
E       #18 0x7fb03549caa4 <unknown>
E       #19 0x7fb035529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 03:49:40,940 - INFO - Starting test with Chrome browser
2025-09-27 03:49:40,940 - INFO - ====== WebDriver manager ======
2025-09-27 03:49:41,008 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:49:41,042 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:49:41,075 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 03:49:42,746 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-27 03:49:42,747 - INFO - Starting the test case for valid credentials
2025-09-27 03:49:42,913 - INFO - User enters the email-id
2025-09-27 03:49:44,582 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 03:51:46,251 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f3acb218d66db4a5d81c63591bdb9169")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f3acb218d66db4a5d81c63591bdb9169")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b59f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d3ded6ffba <unknown>
E       #1 0x55d3de7f46d0 <unknown>
E       #2 0x55d3de8462aa <unknown>
E       #3 0x55d3de846541 <unknown>
E       #4 0x55d3de8946c4 <unknown>
E       #5 0x55d3de86be5d <unknown>
E       #6 0x55d3de891b54 <unknown>
E       #7 0x55d3de86bc03 <unknown>
E       #8 0x55d3de8387a8 <unknown>
E       #9 0x55d3de839421 <unknown>
E       #10 0x55d3ded34b28 <unknown>
E       #11 0x55d3ded3887f <unknown>
E       #12 0x55d3ded1cc49 <unknown>
E       #13 0x55d3ded39405 <unknown>
E       #14 0x55d3ded024ff <unknown>
E       #15 0x55d3ded5d258 <unknown>
E       #16 0x55d3ded5d432 <unknown>
E       #17 0x55d3ded6efa3 <unknown>
E       #18 0x7f303c09caa4 <unknown>
E       #19 0x7f303c129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 03:51:47,317 - INFO - Starting test with Chrome browser
2025-09-27 03:51:47,317 - INFO - ====== WebDriver manager ======
2025-09-27 03:51:47,385 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:51:47,420 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:51:47,455 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 03:51:48,616 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 03:53:50,725 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ffaf4f8c3a6edb043937e12503d5274d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ffaf4f8c3a6edb043937e12503d5274d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b5a020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b396519fba <unknown>
E       #1 0x55b395f9e6d0 <unknown>
E       #2 0x55b395ff02aa <unknown>
E       #3 0x55b395ff0541 <unknown>
E       #4 0x55b39603e6c4 <unknown>
E       #5 0x55b396015e5d <unknown>
E       #6 0x55b39603bb54 <unknown>
E       #7 0x55b396015c03 <unknown>
E       #8 0x55b395fe27a8 <unknown>
E       #9 0x55b395fe3421 <unknown>
E       #10 0x55b3964deb28 <unknown>
E       #11 0x55b3964e287f <unknown>
E       #12 0x55b3964c6c49 <unknown>
E       #13 0x55b3964e3405 <unknown>
E       #14 0x55b3964ac4ff <unknown>
E       #15 0x55b396507258 <unknown>
E       #16 0x55b396507432 <unknown>
E       #17 0x55b396518fa3 <unknown>
E       #18 0x7fd98e29caa4 <unknown>
E       #19 0x7fd98e329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 03:53:50,791 - INFO - Starting test with Chrome browser
2025-09-27 03:53:50,791 - INFO - ====== WebDriver manager ======
2025-09-27 03:53:50,856 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:53:50,893 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:53:50,927 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 03:53:52,490 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 03:55:54,290 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6d1be2388787d1d3616087b3fd65d56e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6d1be2388787d1d3616087b3fd65d56e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b59da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5591940e7fba <unknown>
E       #1 0x559193b6c6d0 <unknown>
E       #2 0x559193bbe2aa <unknown>
E       #3 0x559193bbe541 <unknown>
E       #4 0x559193c0c6c4 <unknown>
E       #5 0x559193be3e5d <unknown>
E       #6 0x559193c09b54 <unknown>
E       #7 0x559193be3c03 <unknown>
E       #8 0x559193bb07a8 <unknown>
E       #9 0x559193bb1421 <unknown>
E       #10 0x5591940acb28 <unknown>
E       #11 0x5591940b087f <unknown>
E       #12 0x559194094c49 <unknown>
E       #13 0x5591940b1405 <unknown>
E       #14 0x55919407a4ff <unknown>
E       #15 0x5591940d5258 <unknown>
E       #16 0x5591940d5432 <unknown>
E       #17 0x5591940e6fa3 <unknown>
E       #18 0x7fa63429caa4 <unknown>
E       #19 0x7fa634329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 03:55:54,355 - INFO - Starting test with Chrome browser
2025-09-27 03:55:54,355 - INFO - ====== WebDriver manager ======
2025-09-27 03:55:54,422 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:55:54,455 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:55:54,492 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 03:55:56,161 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 03:57:57,974 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="041536937c30a62e895f41bfffcc336a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="041536937c30a62e895f41bfffcc336a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b5a840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562526d29fba <unknown>
E       #1 0x5625267ae6d0 <unknown>
E       #2 0x5625268002aa <unknown>
E       #3 0x562526800541 <unknown>
E       #4 0x56252684e6c4 <unknown>
E       #5 0x562526825e5d <unknown>
E       #6 0x56252684bb54 <unknown>
E       #7 0x562526825c03 <unknown>
E       #8 0x5625267f27a8 <unknown>
E       #9 0x5625267f3421 <unknown>
E       #10 0x562526ceeb28 <unknown>
E       #11 0x562526cf287f <unknown>
E       #12 0x562526cd6c49 <unknown>
E       #13 0x562526cf3405 <unknown>
E       #14 0x562526cbc4ff <unknown>
E       #15 0x562526d17258 <unknown>
E       #16 0x562526d17432 <unknown>
E       #17 0x562526d28fa3 <unknown>
E       #18 0x7fe28909caa4 <unknown>
E       #19 0x7fe289129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 03:57:58,040 - INFO - Starting test with Chrome browser
2025-09-27 03:57:58,040 - INFO - ====== WebDriver manager ======
2025-09-27 03:57:58,109 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:57:58,147 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 03:57:58,180 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 03:57:59,871 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 04:00:01,693 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="687ac3621ecf81d83ce03e822256ea6c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="687ac3621ecf81d83ce03e822256ea6c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b5ab60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5563bf22cfba <unknown>
E       #1 0x5563becb16d0 <unknown>
E       #2 0x5563bed032aa <unknown>
E       #3 0x5563bed03541 <unknown>
E       #4 0x5563bed516c4 <unknown>
E       #5 0x5563bed28e5d <unknown>
E       #6 0x5563bed4eb54 <unknown>
E       #7 0x5563bed28c03 <unknown>
E       #8 0x5563becf57a8 <unknown>
E       #9 0x5563becf6421 <unknown>
E       #10 0x5563bf1f1b28 <unknown>
E       #11 0x5563bf1f587f <unknown>
E       #12 0x5563bf1d9c49 <unknown>
E       #13 0x5563bf1f6405 <unknown>
E       #14 0x5563bf1bf4ff <unknown>
E       #15 0x5563bf21a258 <unknown>
E       #16 0x5563bf21a432 <unknown>
E       #17 0x5563bf22bfa3 <unknown>
E       #18 0x7f84c1a9caa4 <unknown>
E       #19 0x7f84c1b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 04:00:01,759 - INFO - Starting test with Chrome browser
2025-09-27 04:00:01,759 - INFO - ====== WebDriver manager ======
2025-09-27 04:00:01,825 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 04:00:01,860 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 04:00:01,893 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 04:00:03,635 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 04:02:07,089 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="268cf5e341d929c55561d408b93ace16")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="268cf5e341d929c55561d408b93ace16")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b5a8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559c06e77fba <unknown>
E       #1 0x559c068fc6d0 <unknown>
E       #2 0x559c0694e2aa <unknown>
E       #3 0x559c0694e541 <unknown>
E       #4 0x559c0699c6c4 <unknown>
E       #5 0x559c06973e5d <unknown>
E       #6 0x559c06999b54 <unknown>
E       #7 0x559c06973c03 <unknown>
E       #8 0x559c069407a8 <unknown>
E       #9 0x559c06941421 <unknown>
E       #10 0x559c06e3cb28 <unknown>
E       #11 0x559c06e4087f <unknown>
E       #12 0x559c06e24c49 <unknown>
E       #13 0x559c06e41405 <unknown>
E       #14 0x559c06e0a4ff <unknown>
E       #15 0x559c06e65258 <unknown>
E       #16 0x559c06e65432 <unknown>
E       #17 0x559c06e76fa3 <unknown>
E       #18 0x7f3c6949caa4 <unknown>
E       #19 0x7f3c69529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 04:02:07,155 - INFO - Starting test with Chrome browser
2025-09-27 04:02:07,155 - INFO - ====== WebDriver manager ======
2025-09-27 04:02:07,225 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 04:02:07,260 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 04:02:07,295 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 04:02:08,907 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 04:04:12,306 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3085fa15f9738e21a842785e1f597e13")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3085fa15f9738e21a842785e1f597e13")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b59da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b6f23b6fba <unknown>
E       #1 0x55b6f1e3b6d0 <unknown>
E       #2 0x55b6f1e8d2aa <unknown>
E       #3 0x55b6f1e8d541 <unknown>
E       #4 0x55b6f1edb6c4 <unknown>
E       #5 0x55b6f1eb2e5d <unknown>
E       #6 0x55b6f1ed8b54 <unknown>
E       #7 0x55b6f1eb2c03 <unknown>
E       #8 0x55b6f1e7f7a8 <unknown>
E       #9 0x55b6f1e80421 <unknown>
E       #10 0x55b6f237bb28 <unknown>
E       #11 0x55b6f237f87f <unknown>
E       #12 0x55b6f2363c49 <unknown>
E       #13 0x55b6f2380405 <unknown>
E       #14 0x55b6f23494ff <unknown>
E       #15 0x55b6f23a4258 <unknown>
E       #16 0x55b6f23a4432 <unknown>
E       #17 0x55b6f23b5fa3 <unknown>
E       #18 0x7f740009caa4 <unknown>
E       #19 0x7f7400129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 04:04:12,371 - INFO - Starting test with Chrome browser
2025-09-27 04:04:12,372 - INFO - ====== WebDriver manager ======
2025-09-27 04:04:12,441 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 04:04:12,476 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 04:04:12,511 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 04:04:14,420 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 04:06:17,925 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b739bab37d999a825191a66199c7f55b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b739bab37d999a825191a66199c7f55b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3e49b59940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564dda34afba <unknown>
E       #1 0x564dd9dcf6d0 <unknown>
E       #2 0x564dd9e212aa <unknown>
E       #3 0x564dd9e21541 <unknown>
E       #4 0x564dd9e6f6c4 <unknown>
E       #5 0x564dd9e46e5d <unknown>
E       #6 0x564dd9e6cb54 <unknown>
E       #7 0x564dd9e46c03 <unknown>
E       #8 0x564dd9e137a8 <unknown>
E       #9 0x564dd9e14421 <unknown>
E       #10 0x564dda30fb28 <unknown>
E       #11 0x564dda31387f <unknown>
E       #12 0x564dda2f7c49 <unknown>
E       #13 0x564dda314405 <unknown>
E       #14 0x564dda2dd4ff <unknown>
E       #15 0x564dda338258 <unknown>
E       #16 0x564dda338432 <unknown>
E       #17 0x564dda349fa3 <unknown>
E       #18 0x7f1ac7e9caa4 <unknown>
E       #19 0x7f1ac7f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-27 04:06:17,990 - INFO - Starting test with Chrome browser
2025-09-27 04:06:17,991 - INFO - ====== WebDriver manager ======
2025-09-27 04:06:18,057 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 04:06:18,090 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-27 04:06:18,125 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-27 04:06:19,622 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-27 04:08:23,094 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250927_034315/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562f4ee0ffba <unknown>
#1 0x562f4e8946d0 <unknown>
#2 0x562f4e8e62aa <unknown>
#3 0x562f4e8e6541 <unknown>
#4 0x562f4e9346c4 <unknown>
#5 0x562f4e90be5d <unknown>
#6 0x562f4e931b54 <unknown>
#7 0x562f4e90bc03 <unknown>
#8 0x562f4e8d87a8 <unknown>
#9 0x562f4e8d9421 <unknown>
#10 0x562f4edd4b28 <unknown>
#11 0x562f4edd887f <unknown>
#12 0x562f4edbcc49 <unknown>
#13 0x562f4edd9405 <unknown>
#14 0x562f4eda24ff <unknown>
#15 0x562f4edfd258 <unknown>
#16 0x562f4edfd432 <unknown>
#17 0x562f4ee0efa3 <unknown>
#18 0x7f0d2cc9caa4 <unknown>
#19 0x7f0d2cd29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a827087fba <unknown>
#1 0x55a826b0c6d0 <unknown>
#2 0x55a826b5e2aa <unknown>
#3 0x55a826b5e541 <unknown>
#4 0x55a826bac6c4 <unknown>
#5 0x55a826b83e5d <unknown>
#6 0x55a826ba9b54 <unknown>
#7 0x55a826b83c03 <unknown>
#8 0x55a826b507a8 <unknown>
#9 0x55a826b51421 <unknown>
#10 0x55a82704cb28 <unknown>
#11 0x55a82705087f <unknown>
#12 0x55a827034c49 <unknown>
#13 0x55a827051405 <unknown>
#14 0x55a82701a4ff <unknown>
#15 0x55a827075258 <unknown>
#16 0x55a827075432 <unknown>
#17 0x55a827086fa3 <unknown>
#18 0x7f09cfc9caa4 <unknown>
#19 0x7f09cfd29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f604a22fba <unknown>
#1 0x55f6044a76d0 <unknown>
#2 0x55f6044f92aa <unknown>
#3 0x55f6044f9541 <unknown>
#4 0x55f6045476c4 <unknown>
#5 0x55f60451ee5d <unknown>
#6 0x55f604544b54 <unknown>
#7 0x55f60451ec03 <unknown>
#8 0x55f6044eb7a8 <unknown>
#9 0x55f6044ec421 <unknown>
#10 0x55f6049e7b28 <unknown>
#11 0x55f6049eb87f <unknown>
#12 0x55f6049cfc49 <unknown>
#13 0x55f6049ec405 <unknown>
#14 0x55f6049b54ff <unknown>
#15 0x55f604a10258 <unknown>
#16 0x55f604a10432 <unknown>
#17 0x55f604a21fa3 <unknown>
#18 0x7fad6349caa4 <unknown>
#19 0x7fad63529c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5618f5f83fba <unknown>
#1 0x5618f5a086d0 <unknown>
#2 0x5618f5a5a2aa <unknown>
#3 0x5618f5a5a541 <unknown>
#4 0x5618f5aa86c4 <unknown>
#5 0x5618f5a7fe5d <unknown>
#6 0x5618f5aa5b54 <unknown>
#7 0x5618f5a7fc03 <unknown>
#8 0x5618f5a4c7a8 <unknown>
#9 0x5618f5a4d421 <unknown>
#10 0x5618f5f48b28 <unknown>
#11 0x5618f5f4c87f <unknown>
#12 0x5618f5f30c49 <unknown>
#13 0x5618f5f4d405 <unknown>
#14 0x5618f5f164ff <unknown>
#15 0x5618f5f71258 <unknown>
#16 0x5618f5f71432 <unknown>
#17 0x5618f5f82fa3 <unknown>
#18 0x7fb03549caa4 <unknown>
#19 0x7fb035529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d3ded6ffba <unknown>
#1 0x55d3de7f46d0 <unknown>
#2 0x55d3de8462aa <unknown>
#3 0x55d3de846541 <unknown>
#4 0x55d3de8946c4 <unknown>
#5 0x55d3de86be5d <unknown>
#6 0x55d3de891b54 <unknown>
#7 0x55d3de86bc03 <unknown>
#8 0x55d3de8387a8 <unknown>
#9 0x55d3de839421 <unknown>
#10 0x55d3ded34b28 <unknown>
#11 0x55d3ded3887f <unknown>
#12 0x55d3ded1cc49 <unknown>
#13 0x55d3ded39405 <unknown>
#14 0x55d3ded024ff <unknown>
#15 0x55d3ded5d258 <unknown>
#16 0x55d3ded5d432 <unknown>
#17 0x55d3ded6efa3 <unknown>
#18 0x7f303c09caa4 <unknown>
#19 0x7f303c129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b396519fba <unknown>
#1 0x55b395f9e6d0 <unknown>
#2 0x55b395ff02aa <unknown>
#3 0x55b395ff0541 <unknown>
#4 0x55b39603e6c4 <unknown>
#5 0x55b396015e5d <unknown>
#6 0x55b39603bb54 <unknown>
#7 0x55b396015c03 <unknown>
#8 0x55b395fe27a8 <unknown>
#9 0x55b395fe3421 <unknown>
#10 0x55b3964deb28 <unknown>
#11 0x55b3964e287f <unknown>
#12 0x55b3964c6c49 <unknown>
#13 0x55b3964e3405 <unknown>
#14 0x55b3964ac4ff <unknown>
#15 0x55b396507258 <unknown>
#16 0x55b396507432 <unknown>
#17 0x55b396518fa3 <unknown>
#18 0x7fd98e29caa4 <unknown>
#19 0x7fd98e329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5591940e7fba <unknown>
#1 0x559193b6c6d0 <unknown>
#2 0x559193bbe2aa <unknown>
#3 0x559193bbe541 <unknown>
#4 0x559193c0c6c4 <unknown>
#5 0x559193be3e5d <unknown>
#6 0x559193c09b54 <unknown>
#7 0x559193be3c03 <unknown>
#8 0x559193bb07a8 <unknown>
#9 0x559193bb1421 <unknown>
#10 0x5591940acb28 <unknown>
#11 0x5591940b087f <unknown>
#12 0x559194094c49 <unknown>
#13 0x5591940b1405 <unknown>
#14 0x55919407a4ff <unknown>
#15 0x5591940d5258 <unknown>
#16 0x5591940d5432 <unknown>
#17 0x5591940e6fa3 <unknown>
#18 0x7fa63429caa4 <unknown>
#19 0x7fa634329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562526d29fba <unknown>
#1 0x5625267ae6d0 <unknown>
#2 0x5625268002aa <unknown>
#3 0x562526800541 <unknown>
#4 0x56252684e6c4 <unknown>
#5 0x562526825e5d <unknown>
#6 0x56252684bb54 <unknown>
#7 0x562526825c03 <unknown>
#8 0x5625267f27a8 <unknown>
#9 0x5625267f3421 <unknown>
#10 0x562526ceeb28 <unknown>
#11 0x562526cf287f <unknown>
#12 0x562526cd6c49 <unknown>
#13 0x562526cf3405 <unknown>
#14 0x562526cbc4ff <unknown>
#15 0x562526d17258 <unknown>
#16 0x562526d17432 <unknown>
#17 0x562526d28fa3 <unknown>
#18 0x7fe28909caa4 <unknown>
#19 0x7fe289129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5563bf22cfba <unknown>
#1 0x5563becb16d0 <unknown>
#2 0x5563bed032aa <unknown>
#3 0x5563bed03541 <unknown>
#4 0x5563bed516c4 <unknown>
#5 0x5563bed28e5d <unknown>
#6 0x5563bed4eb54 <unknown>
#7 0x5563bed28c03 <unknown>
#8 0x5563becf57a8 <unknown>
#9 0x5563becf6421 <unknown>
#10 0x5563bf1f1b28 <unknown>
#11 0x5563bf1f587f <unknown>
#12 0x5563bf1d9c49 <unknown>
#13 0x5563bf1f6405 <unknown>
#14 0x5563bf1bf4ff <unknown>
#15 0x5563bf21a258 <unknown>
#16 0x5563bf21a432 <unknown>
#17 0x5563bf22bfa3 <unknown>
#18 0x7f84c1a9caa4 <unknown>
#19 0x7f84c1b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559c06e77fba <unknown>
#1 0x559c068fc6d0 <unknown>
#2 0x559c0694e2aa <unknown>
#3 0x559c0694e541 <unknown>
#4 0x559c0699c6c4 <unknown>
#5 0x559c06973e5d <unknown>
#6 0x559c06999b54 <unknown>
#7 0x559c06973c03 <unknown>
#8 0x559c069407a8 <unknown>
#9 0x559c06941421 <unknown>
#10 0x559c06e3cb28 <unknown>
#11 0x559c06e4087f <unknown>
#12 0x559c06e24c49 <unknown>
#13 0x559c06e41405 <unknown>
#14 0x559c06e0a4ff <unknown>
#15 0x559c06e65258 <unknown>
#16 0x559c06e65432 <unknown>
#17 0x559c06e76fa3 <unknown>
#18 0x7f3c6949caa4 <unknown>
#19 0x7f3c69529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b6f23b6fba <unknown>
#1 0x55b6f1e3b6d0 <unknown>
#2 0x55b6f1e8d2aa <unknown>
#3 0x55b6f1e8d541 <unknown>
#4 0x55b6f1edb6c4 <unknown>
#5 0x55b6f1eb2e5d <unknown>
#6 0x55b6f1ed8b54 <unknown>
#7 0x55b6f1eb2c03 <unknown>
#8 0x55b6f1e7f7a8 <unknown>
#9 0x55b6f1e80421 <unknown>
#10 0x55b6f237bb28 <unknown>
#11 0x55b6f237f87f <unknown>
#12 0x55b6f2363c49 <unknown>
#13 0x55b6f2380405 <unknown>
#14 0x55b6f23494ff <unknown>
#15 0x55b6f23a4258 <unknown>
#16 0x55b6f23a4432 <unknown>
#17 0x55b6f23b5fa3 <unknown>
#18 0x7f740009caa4 <unknown>
#19 0x7f7400129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564dda34afba <unknown>
#1 0x564dd9dcf6d0 <unknown>
#2 0x564dd9e212aa <unknown>
#3 0x564dd9e21541 <unknown>
#4 0x564dd9e6f6c4 <unknown>
#5 0x564dd9e46e5d <unknown>
#6 0x564dd9e6cb54 <unknown>
#7 0x564dd9e46c03 <unknown>
#8 0x564dd9e137a8 <unknown>
#9 0x564dd9e14421 <unknown>
#10 0x564dda30fb28 <unknown>
#11 0x564dda31387f <unknown>
#12 0x564dda2f7c49 <unknown>
#13 0x564dda314405 <unknown>
#14 0x564dda2dd4ff <unknown>
#15 0x564dda338258 <unknown>
#16 0x564dda338432 <unknown>
#17 0x564dda349fa3 <unknown>
#18 0x7f1ac7e9caa4 <unknown>
#19 0x7f1ac7f29c6c <unknown>
================== 12 failed, 7 passed in 1523.49s (0:25:23) ===================
--------------------------------------------
Test Run Finished: 2025-09-27 04:08:39
Duration: 1526 seconds
Status: FAILURE
Exit Code: 1
============================================
