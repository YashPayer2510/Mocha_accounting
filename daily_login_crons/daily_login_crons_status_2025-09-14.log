========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-14 03:46:03
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1', 'Faker': '37.6.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1, Faker-37.6.0
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a24eec77d139c73a7665b0dce8ed1045")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a24eec77d139c73a7665b0dce8ed1045")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18b9ff2a20>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55dc4463d94a <unknown>
E       #1 0x55dc440b28a0 <unknown>
E       #2 0x55dc44104540 <unknown>
E       #3 0x55dc44104731 <unknown>
E       #4 0x55dc44152824 <unknown>
E       #5 0x55dc4412a05d <unknown>
E       #6 0x55dc4414fc23 <unknown>
E       #7 0x55dc44129e03 <unknown>
E       #8 0x55dc440f6968 <unknown>
E       #9 0x55dc440f75e1 <unknown>
E       #10 0x55dc44601548 <unknown>
E       #11 0x55dc44605272 <unknown>
E       #12 0x55dc445e8313 <unknown>
E       #13 0x55dc44605dc5 <unknown>
E       #14 0x55dc445cd49f <unknown>
E       #15 0x55dc4462a158 <unknown>
E       #16 0x55dc4462a332 <unknown>
E       #17 0x55dc4463ca53 <unknown>
E       #18 0x7fb6b5a9caa4 <unknown>
E       #19 0x7fb6b5b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 03:46:06,845 - INFO - Test data loaded successfully.
2025-09-14 03:46:06,846 - INFO - Starting test with Chrome browser
2025-09-14 03:46:06,846 - INFO - ====== WebDriver manager ======
2025-09-14 03:46:10,179 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:46:10,229 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:46:10,277 - INFO - There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
2025-09-14 03:46:10,277 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:46:10,402 - INFO - WebDriver version 140.0.7339.82 selected
2025-09-14 03:46:10,406 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-14 03:46:10,406 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-14 03:46:10,454 - INFO - Driver downloading response is 200
2025-09-14 03:46:10,529 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:46:10,690 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
2025-09-14 03:46:28,205 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.82 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-14 03:46:28,206 - INFO - Starting the test case for valid credentials
2025-09-14 03:46:28,529 - INFO - User enters the email-id
2025-09-14 03:46:30,405 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 03:48:32,137 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e14dd8420b2e5d19222f4c935c93d985")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e14dd8420b2e5d19222f4c935c93d985")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba059800>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559b36e9f94a <unknown>
E       #1 0x559b369148a0 <unknown>
E       #2 0x559b36966540 <unknown>
E       #3 0x559b36966731 <unknown>
E       #4 0x559b369b4824 <unknown>
E       #5 0x559b3698c05d <unknown>
E       #6 0x559b369b1c23 <unknown>
E       #7 0x559b3698be03 <unknown>
E       #8 0x559b36958968 <unknown>
E       #9 0x559b369595e1 <unknown>
E       #10 0x559b36e63548 <unknown>
E       #11 0x559b36e67272 <unknown>
E       #12 0x559b36e4a313 <unknown>
E       #13 0x559b36e67dc5 <unknown>
E       #14 0x559b36e2f49f <unknown>
E       #15 0x559b36e8c158 <unknown>
E       #16 0x559b36e8c332 <unknown>
E       #17 0x559b36e9ea53 <unknown>
E       #18 0x7f14de69caa4 <unknown>
E       #19 0x7f14de729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 03:48:32,323 - INFO - Starting test with Chrome browser
2025-09-14 03:48:32,323 - INFO - ====== WebDriver manager ======
2025-09-14 03:48:32,389 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:48:32,434 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:48:32,525 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 03:48:34,323 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-14 03:48:34,324 - INFO - Starting the test case for valid credentials
2025-09-14 03:48:34,470 - INFO - User enters the email-id
2025-09-14 03:48:36,336 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 03:50:37,998 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5db1e3fa6df11d4dda9992aeff07f677")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5db1e3fa6df11d4dda9992aeff07f677")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18bbdca3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559d0004f94a <unknown>
E       #1 0x559cffac48a0 <unknown>
E       #2 0x559cffb16540 <unknown>
E       #3 0x559cffb16731 <unknown>
E       #4 0x559cffb64824 <unknown>
E       #5 0x559cffb3c05d <unknown>
E       #6 0x559cffb61c23 <unknown>
E       #7 0x559cffb3be03 <unknown>
E       #8 0x559cffb08968 <unknown>
E       #9 0x559cffb095e1 <unknown>
E       #10 0x559d00013548 <unknown>
E       #11 0x559d00017272 <unknown>
E       #12 0x559cffffa313 <unknown>
E       #13 0x559d00017dc5 <unknown>
E       #14 0x559cfffdf49f <unknown>
E       #15 0x559d0003c158 <unknown>
E       #16 0x559d0003c332 <unknown>
E       #17 0x559d0004ea53 <unknown>
E       #18 0x7f794049caa4 <unknown>
E       #19 0x7f7940529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 03:50:39,055 - INFO - Starting test with Chrome browser
2025-09-14 03:50:39,055 - INFO - ====== WebDriver manager ======
2025-09-14 03:50:39,121 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:50:39,168 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:50:39,214 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 03:50:41,021 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-14 03:50:41,021 - INFO - Starting the test case for valid credentials
2025-09-14 03:50:41,173 - INFO - User enters the email-id
2025-09-14 03:50:43,027 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 03:52:44,695 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="04325406aa3b9ca00a7b332a2950e454")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="04325406aa3b9ca00a7b332a2950e454")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba059620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56125954b94a <unknown>
E       #1 0x561258fc08a0 <unknown>
E       #2 0x561259012540 <unknown>
E       #3 0x561259012731 <unknown>
E       #4 0x561259060824 <unknown>
E       #5 0x56125903805d <unknown>
E       #6 0x56125905dc23 <unknown>
E       #7 0x561259037e03 <unknown>
E       #8 0x561259004968 <unknown>
E       #9 0x5612590055e1 <unknown>
E       #10 0x56125950f548 <unknown>
E       #11 0x561259513272 <unknown>
E       #12 0x5612594f6313 <unknown>
E       #13 0x561259513dc5 <unknown>
E       #14 0x5612594db49f <unknown>
E       #15 0x561259538158 <unknown>
E       #16 0x561259538332 <unknown>
E       #17 0x56125954aa53 <unknown>
E       #18 0x7f3c20c9caa4 <unknown>
E       #19 0x7f3c20d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 03:52:44,753 - INFO - Starting test with Chrome browser
2025-09-14 03:52:44,753 - INFO - ====== WebDriver manager ======
2025-09-14 03:52:44,819 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:52:44,866 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:52:44,910 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 03:52:46,624 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-14 03:52:46,625 - INFO - Starting the test case for valid credentials
2025-09-14 03:52:46,784 - INFO - User enters the email-id
2025-09-14 03:52:48,645 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 03:54:50,270 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="cfab87de05d80471da1ad37254734c34")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="cfab87de05d80471da1ad37254734c34")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba059ee0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e17ba3094a <unknown>
E       #1 0x55e17b4a58a0 <unknown>
E       #2 0x55e17b4f7540 <unknown>
E       #3 0x55e17b4f7731 <unknown>
E       #4 0x55e17b545824 <unknown>
E       #5 0x55e17b51d05d <unknown>
E       #6 0x55e17b542c23 <unknown>
E       #7 0x55e17b51ce03 <unknown>
E       #8 0x55e17b4e9968 <unknown>
E       #9 0x55e17b4ea5e1 <unknown>
E       #10 0x55e17b9f4548 <unknown>
E       #11 0x55e17b9f8272 <unknown>
E       #12 0x55e17b9db313 <unknown>
E       #13 0x55e17b9f8dc5 <unknown>
E       #14 0x55e17b9c049f <unknown>
E       #15 0x55e17ba1d158 <unknown>
E       #16 0x55e17ba1d332 <unknown>
E       #17 0x55e17ba2fa53 <unknown>
E       #18 0x7f04b189caa4 <unknown>
E       #19 0x7f04b1929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 03:54:50,353 - INFO - Starting test with Chrome browser
2025-09-14 03:54:50,353 - INFO - ====== WebDriver manager ======
2025-09-14 03:54:50,418 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:54:50,465 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:54:50,511 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 03:54:52,715 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 03:56:54,507 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fc162fdb7930eb8691e44f4df0a35963")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="fc162fdb7930eb8691e44f4df0a35963")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba059f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a7eec4a94a <unknown>
E       #1 0x55a7ee6bf8a0 <unknown>
E       #2 0x55a7ee711540 <unknown>
E       #3 0x55a7ee711731 <unknown>
E       #4 0x55a7ee75f824 <unknown>
E       #5 0x55a7ee73705d <unknown>
E       #6 0x55a7ee75cc23 <unknown>
E       #7 0x55a7ee736e03 <unknown>
E       #8 0x55a7ee703968 <unknown>
E       #9 0x55a7ee7045e1 <unknown>
E       #10 0x55a7eec0e548 <unknown>
E       #11 0x55a7eec12272 <unknown>
E       #12 0x55a7eebf5313 <unknown>
E       #13 0x55a7eec12dc5 <unknown>
E       #14 0x55a7eebda49f <unknown>
E       #15 0x55a7eec37158 <unknown>
E       #16 0x55a7eec37332 <unknown>
E       #17 0x55a7eec49a53 <unknown>
E       #18 0x7f279e89caa4 <unknown>
E       #19 0x7f279e929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 03:56:54,572 - INFO - Starting test with Chrome browser
2025-09-14 03:56:54,572 - INFO - ====== WebDriver manager ======
2025-09-14 03:56:54,638 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:56:54,683 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:56:54,729 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 03:56:56,395 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 03:58:58,188 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="20b88bdec5f9c75e054b4a1d30d83d59")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="20b88bdec5f9c75e054b4a1d30d83d59")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba059d00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5573c089994a <unknown>
E       #1 0x5573c030e8a0 <unknown>
E       #2 0x5573c0360540 <unknown>
E       #3 0x5573c0360731 <unknown>
E       #4 0x5573c03ae824 <unknown>
E       #5 0x5573c038605d <unknown>
E       #6 0x5573c03abc23 <unknown>
E       #7 0x5573c0385e03 <unknown>
E       #8 0x5573c0352968 <unknown>
E       #9 0x5573c03535e1 <unknown>
E       #10 0x5573c085d548 <unknown>
E       #11 0x5573c0861272 <unknown>
E       #12 0x5573c0844313 <unknown>
E       #13 0x5573c0861dc5 <unknown>
E       #14 0x5573c082949f <unknown>
E       #15 0x5573c0886158 <unknown>
E       #16 0x5573c0886332 <unknown>
E       #17 0x5573c0898a53 <unknown>
E       #18 0x7ffafde9caa4 <unknown>
E       #19 0x7ffafdf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 03:58:58,245 - INFO - Starting test with Chrome browser
2025-09-14 03:58:58,245 - INFO - ====== WebDriver manager ======
2025-09-14 03:58:58,312 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:58:58,358 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 03:58:58,404 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 03:59:00,161 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 04:01:01,936 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ded7079eb63746085c0835bb5e74a9fd")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ded7079eb63746085c0835bb5e74a9fd")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba05a7a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563e98e2d94a <unknown>
E       #1 0x563e988a28a0 <unknown>
E       #2 0x563e988f4540 <unknown>
E       #3 0x563e988f4731 <unknown>
E       #4 0x563e98942824 <unknown>
E       #5 0x563e9891a05d <unknown>
E       #6 0x563e9893fc23 <unknown>
E       #7 0x563e98919e03 <unknown>
E       #8 0x563e988e6968 <unknown>
E       #9 0x563e988e75e1 <unknown>
E       #10 0x563e98df1548 <unknown>
E       #11 0x563e98df5272 <unknown>
E       #12 0x563e98dd8313 <unknown>
E       #13 0x563e98df5dc5 <unknown>
E       #14 0x563e98dbd49f <unknown>
E       #15 0x563e98e1a158 <unknown>
E       #16 0x563e98e1a332 <unknown>
E       #17 0x563e98e2ca53 <unknown>
E       #18 0x7fe03dc9caa4 <unknown>
E       #19 0x7fe03dd29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 04:01:01,996 - INFO - Starting test with Chrome browser
2025-09-14 04:01:01,997 - INFO - ====== WebDriver manager ======
2025-09-14 04:01:02,064 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:01:02,110 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:01:02,155 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 04:01:04,093 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 04:03:05,867 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="deb1c1133aacb1395e9454f1f4fc8e17")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="deb1c1133aacb1395e9454f1f4fc8e17")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba05aac0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5555bb2d494a <unknown>
E       #1 0x5555bad498a0 <unknown>
E       #2 0x5555bad9b540 <unknown>
E       #3 0x5555bad9b731 <unknown>
E       #4 0x5555bade9824 <unknown>
E       #5 0x5555badc105d <unknown>
E       #6 0x5555bade6c23 <unknown>
E       #7 0x5555badc0e03 <unknown>
E       #8 0x5555bad8d968 <unknown>
E       #9 0x5555bad8e5e1 <unknown>
E       #10 0x5555bb298548 <unknown>
E       #11 0x5555bb29c272 <unknown>
E       #12 0x5555bb27f313 <unknown>
E       #13 0x5555bb29cdc5 <unknown>
E       #14 0x5555bb26449f <unknown>
E       #15 0x5555bb2c1158 <unknown>
E       #16 0x5555bb2c1332 <unknown>
E       #17 0x5555bb2d3a53 <unknown>
E       #18 0x7f9cdae9caa4 <unknown>
E       #19 0x7f9cdaf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 04:03:05,933 - INFO - Starting test with Chrome browser
2025-09-14 04:03:05,933 - INFO - ====== WebDriver manager ======
2025-09-14 04:03:05,999 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:03:06,044 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:03:06,088 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 04:03:07,770 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 04:05:11,394 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2eef8082a51ab7a1b2e82729f4215ba5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2eef8082a51ab7a1b2e82729f4215ba5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba05a840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560d5c14794a <unknown>
E       #1 0x560d5bbbc8a0 <unknown>
E       #2 0x560d5bc0e540 <unknown>
E       #3 0x560d5bc0e731 <unknown>
E       #4 0x560d5bc5c824 <unknown>
E       #5 0x560d5bc3405d <unknown>
E       #6 0x560d5bc59c23 <unknown>
E       #7 0x560d5bc33e03 <unknown>
E       #8 0x560d5bc00968 <unknown>
E       #9 0x560d5bc015e1 <unknown>
E       #10 0x560d5c10b548 <unknown>
E       #11 0x560d5c10f272 <unknown>
E       #12 0x560d5c0f2313 <unknown>
E       #13 0x560d5c10fdc5 <unknown>
E       #14 0x560d5c0d749f <unknown>
E       #15 0x560d5c134158 <unknown>
E       #16 0x560d5c134332 <unknown>
E       #17 0x560d5c146a53 <unknown>
E       #18 0x7fd4a1a9caa4 <unknown>
E       #19 0x7fd4a1b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 04:05:11,459 - INFO - Starting test with Chrome browser
2025-09-14 04:05:11,459 - INFO - ====== WebDriver manager ======
2025-09-14 04:05:11,527 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:05:11,573 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:05:11,618 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 04:05:13,340 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 04:07:16,983 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="103c48a0900f20ec1cc3a3982c5dec2b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="103c48a0900f20ec1cc3a3982c5dec2b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba05a2a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a7433fb94a <unknown>
E       #1 0x55a742e708a0 <unknown>
E       #2 0x55a742ec2540 <unknown>
E       #3 0x55a742ec2731 <unknown>
E       #4 0x55a742f10824 <unknown>
E       #5 0x55a742ee805d <unknown>
E       #6 0x55a742f0dc23 <unknown>
E       #7 0x55a742ee7e03 <unknown>
E       #8 0x55a742eb4968 <unknown>
E       #9 0x55a742eb55e1 <unknown>
E       #10 0x55a7433bf548 <unknown>
E       #11 0x55a7433c3272 <unknown>
E       #12 0x55a7433a6313 <unknown>
E       #13 0x55a7433c3dc5 <unknown>
E       #14 0x55a74338b49f <unknown>
E       #15 0x55a7433e8158 <unknown>
E       #16 0x55a7433e8332 <unknown>
E       #17 0x55a7433faa53 <unknown>
E       #18 0x7f255b29caa4 <unknown>
E       #19 0x7f255b329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 04:07:17,042 - INFO - Starting test with Chrome browser
2025-09-14 04:07:17,042 - INFO - ====== WebDriver manager ======
2025-09-14 04:07:17,108 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:07:17,157 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:07:17,201 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 04:07:19,016 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 04:09:22,629 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d5c6f7f78d36812458bcda4b65cc52b8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d5c6f7f78d36812458bcda4b65cc52b8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f18ba059620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d95053a94a <unknown>
E       #1 0x55d94ffaf8a0 <unknown>
E       #2 0x55d950001540 <unknown>
E       #3 0x55d950001731 <unknown>
E       #4 0x55d95004f824 <unknown>
E       #5 0x55d95002705d <unknown>
E       #6 0x55d95004cc23 <unknown>
E       #7 0x55d950026e03 <unknown>
E       #8 0x55d94fff3968 <unknown>
E       #9 0x55d94fff45e1 <unknown>
E       #10 0x55d9504fe548 <unknown>
E       #11 0x55d950502272 <unknown>
E       #12 0x55d9504e5313 <unknown>
E       #13 0x55d950502dc5 <unknown>
E       #14 0x55d9504ca49f <unknown>
E       #15 0x55d950527158 <unknown>
E       #16 0x55d950527332 <unknown>
E       #17 0x55d950539a53 <unknown>
E       #18 0x7f3ac609caa4 <unknown>
E       #19 0x7f3ac6129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-14 04:09:22,695 - INFO - Starting test with Chrome browser
2025-09-14 04:09:22,695 - INFO - ====== WebDriver manager ======
2025-09-14 04:09:22,762 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:09:22,810 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-14 04:09:22,855 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-14 04:09:24,567 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-14 04:11:28,216 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250914_034606/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55dc4463d94a <unknown>
#1 0x55dc440b28a0 <unknown>
#2 0x55dc44104540 <unknown>
#3 0x55dc44104731 <unknown>
#4 0x55dc44152824 <unknown>
#5 0x55dc4412a05d <unknown>
#6 0x55dc4414fc23 <unknown>
#7 0x55dc44129e03 <unknown>
#8 0x55dc440f6968 <unknown>
#9 0x55dc440f75e1 <unknown>
#10 0x55dc44601548 <unknown>
#11 0x55dc44605272 <unknown>
#12 0x55dc445e8313 <unknown>
#13 0x55dc44605dc5 <unknown>
#14 0x55dc445cd49f <unknown>
#15 0x55dc4462a158 <unknown>
#16 0x55dc4462a332 <unknown>
#17 0x55dc4463ca53 <unknown>
#18 0x7fb6b5a9caa4 <unknown>
#19 0x7fb6b5b29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559b36e9f94a <unknown>
#1 0x559b369148a0 <unknown>
#2 0x559b36966540 <unknown>
#3 0x559b36966731 <unknown>
#4 0x559b369b4824 <unknown>
#5 0x559b3698c05d <unknown>
#6 0x559b369b1c23 <unknown>
#7 0x559b3698be03 <unknown>
#8 0x559b36958968 <unknown>
#9 0x559b369595e1 <unknown>
#10 0x559b36e63548 <unknown>
#11 0x559b36e67272 <unknown>
#12 0x559b36e4a313 <unknown>
#13 0x559b36e67dc5 <unknown>
#14 0x559b36e2f49f <unknown>
#15 0x559b36e8c158 <unknown>
#16 0x559b36e8c332 <unknown>
#17 0x559b36e9ea53 <unknown>
#18 0x7f14de69caa4 <unknown>
#19 0x7f14de729c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559d0004f94a <unknown>
#1 0x559cffac48a0 <unknown>
#2 0x559cffb16540 <unknown>
#3 0x559cffb16731 <unknown>
#4 0x559cffb64824 <unknown>
#5 0x559cffb3c05d <unknown>
#6 0x559cffb61c23 <unknown>
#7 0x559cffb3be03 <unknown>
#8 0x559cffb08968 <unknown>
#9 0x559cffb095e1 <unknown>
#10 0x559d00013548 <unknown>
#11 0x559d00017272 <unknown>
#12 0x559cffffa313 <unknown>
#13 0x559d00017dc5 <unknown>
#14 0x559cfffdf49f <unknown>
#15 0x559d0003c158 <unknown>
#16 0x559d0003c332 <unknown>
#17 0x559d0004ea53 <unknown>
#18 0x7f794049caa4 <unknown>
#19 0x7f7940529c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56125954b94a <unknown>
#1 0x561258fc08a0 <unknown>
#2 0x561259012540 <unknown>
#3 0x561259012731 <unknown>
#4 0x561259060824 <unknown>
#5 0x56125903805d <unknown>
#6 0x56125905dc23 <unknown>
#7 0x561259037e03 <unknown>
#8 0x561259004968 <unknown>
#9 0x5612590055e1 <unknown>
#10 0x56125950f548 <unknown>
#11 0x561259513272 <unknown>
#12 0x5612594f6313 <unknown>
#13 0x561259513dc5 <unknown>
#14 0x5612594db49f <unknown>
#15 0x561259538158 <unknown>
#16 0x561259538332 <unknown>
#17 0x56125954aa53 <unknown>
#18 0x7f3c20c9caa4 <unknown>
#19 0x7f3c20d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e17ba3094a <unknown>
#1 0x55e17b4a58a0 <unknown>
#2 0x55e17b4f7540 <unknown>
#3 0x55e17b4f7731 <unknown>
#4 0x55e17b545824 <unknown>
#5 0x55e17b51d05d <unknown>
#6 0x55e17b542c23 <unknown>
#7 0x55e17b51ce03 <unknown>
#8 0x55e17b4e9968 <unknown>
#9 0x55e17b4ea5e1 <unknown>
#10 0x55e17b9f4548 <unknown>
#11 0x55e17b9f8272 <unknown>
#12 0x55e17b9db313 <unknown>
#13 0x55e17b9f8dc5 <unknown>
#14 0x55e17b9c049f <unknown>
#15 0x55e17ba1d158 <unknown>
#16 0x55e17ba1d332 <unknown>
#17 0x55e17ba2fa53 <unknown>
#18 0x7f04b189caa4 <unknown>
#19 0x7f04b1929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a7eec4a94a <unknown>
#1 0x55a7ee6bf8a0 <unknown>
#2 0x55a7ee711540 <unknown>
#3 0x55a7ee711731 <unknown>
#4 0x55a7ee75f824 <unknown>
#5 0x55a7ee73705d <unknown>
#6 0x55a7ee75cc23 <unknown>
#7 0x55a7ee736e03 <unknown>
#8 0x55a7ee703968 <unknown>
#9 0x55a7ee7045e1 <unknown>
#10 0x55a7eec0e548 <unknown>
#11 0x55a7eec12272 <unknown>
#12 0x55a7eebf5313 <unknown>
#13 0x55a7eec12dc5 <unknown>
#14 0x55a7eebda49f <unknown>
#15 0x55a7eec37158 <unknown>
#16 0x55a7eec37332 <unknown>
#17 0x55a7eec49a53 <unknown>
#18 0x7f279e89caa4 <unknown>
#19 0x7f279e929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5573c089994a <unknown>
#1 0x5573c030e8a0 <unknown>
#2 0x5573c0360540 <unknown>
#3 0x5573c0360731 <unknown>
#4 0x5573c03ae824 <unknown>
#5 0x5573c038605d <unknown>
#6 0x5573c03abc23 <unknown>
#7 0x5573c0385e03 <unknown>
#8 0x5573c0352968 <unknown>
#9 0x5573c03535e1 <unknown>
#10 0x5573c085d548 <unknown>
#11 0x5573c0861272 <unknown>
#12 0x5573c0844313 <unknown>
#13 0x5573c0861dc5 <unknown>
#14 0x5573c082949f <unknown>
#15 0x5573c0886158 <unknown>
#16 0x5573c0886332 <unknown>
#17 0x5573c0898a53 <unknown>
#18 0x7ffafde9caa4 <unknown>
#19 0x7ffafdf29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563e98e2d94a <unknown>
#1 0x563e988a28a0 <unknown>
#2 0x563e988f4540 <unknown>
#3 0x563e988f4731 <unknown>
#4 0x563e98942824 <unknown>
#5 0x563e9891a05d <unknown>
#6 0x563e9893fc23 <unknown>
#7 0x563e98919e03 <unknown>
#8 0x563e988e6968 <unknown>
#9 0x563e988e75e1 <unknown>
#10 0x563e98df1548 <unknown>
#11 0x563e98df5272 <unknown>
#12 0x563e98dd8313 <unknown>
#13 0x563e98df5dc5 <unknown>
#14 0x563e98dbd49f <unknown>
#15 0x563e98e1a158 <unknown>
#16 0x563e98e1a332 <unknown>
#17 0x563e98e2ca53 <unknown>
#18 0x7fe03dc9caa4 <unknown>
#19 0x7fe03dd29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5555bb2d494a <unknown>
#1 0x5555bad498a0 <unknown>
#2 0x5555bad9b540 <unknown>
#3 0x5555bad9b731 <unknown>
#4 0x5555bade9824 <unknown>
#5 0x5555badc105d <unknown>
#6 0x5555bade6c23 <unknown>
#7 0x5555badc0e03 <unknown>
#8 0x5555bad8d968 <unknown>
#9 0x5555bad8e5e1 <unknown>
#10 0x5555bb298548 <unknown>
#11 0x5555bb29c272 <unknown>
#12 0x5555bb27f313 <unknown>
#13 0x5555bb29cdc5 <unknown>
#14 0x5555bb26449f <unknown>
#15 0x5555bb2c1158 <unknown>
#16 0x5555bb2c1332 <unknown>
#17 0x5555bb2d3a53 <unknown>
#18 0x7f9cdae9caa4 <unknown>
#19 0x7f9cdaf29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560d5c14794a <unknown>
#1 0x560d5bbbc8a0 <unknown>
#2 0x560d5bc0e540 <unknown>
#3 0x560d5bc0e731 <unknown>
#4 0x560d5bc5c824 <unknown>
#5 0x560d5bc3405d <unknown>
#6 0x560d5bc59c23 <unknown>
#7 0x560d5bc33e03 <unknown>
#8 0x560d5bc00968 <unknown>
#9 0x560d5bc015e1 <unknown>
#10 0x560d5c10b548 <unknown>
#11 0x560d5c10f272 <unknown>
#12 0x560d5c0f2313 <unknown>
#13 0x560d5c10fdc5 <unknown>
#14 0x560d5c0d749f <unknown>
#15 0x560d5c134158 <unknown>
#16 0x560d5c134332 <unknown>
#17 0x560d5c146a53 <unknown>
#18 0x7fd4a1a9caa4 <unknown>
#19 0x7fd4a1b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a7433fb94a <unknown>
#1 0x55a742e708a0 <unknown>
#2 0x55a742ec2540 <unknown>
#3 0x55a742ec2731 <unknown>
#4 0x55a742f10824 <unknown>
#5 0x55a742ee805d <unknown>
#6 0x55a742f0dc23 <unknown>
#7 0x55a742ee7e03 <unknown>
#8 0x55a742eb4968 <unknown>
#9 0x55a742eb55e1 <unknown>
#10 0x55a7433bf548 <unknown>
#11 0x55a7433c3272 <unknown>
#12 0x55a7433a6313 <unknown>
#13 0x55a7433c3dc5 <unknown>
#14 0x55a74338b49f <unknown>
#15 0x55a7433e8158 <unknown>
#16 0x55a7433e8332 <unknown>
#17 0x55a7433faa53 <unknown>
#18 0x7f255b29caa4 <unknown>
#19 0x7f255b329c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d95053a94a <unknown>
#1 0x55d94ffaf8a0 <unknown>
#2 0x55d950001540 <unknown>
#3 0x55d950001731 <unknown>
#4 0x55d95004f824 <unknown>
#5 0x55d95002705d <unknown>
#6 0x55d95004cc23 <unknown>
#7 0x55d950026e03 <unknown>
#8 0x55d94fff3968 <unknown>
#9 0x55d94fff45e1 <unknown>
#10 0x55d9504fe548 <unknown>
#11 0x55d950502272 <unknown>
#12 0x55d9504e5313 <unknown>
#13 0x55d950502dc5 <unknown>
#14 0x55d9504ca49f <unknown>
#15 0x55d950527158 <unknown>
#16 0x55d950527332 <unknown>
#17 0x55d950539a53 <unknown>
#18 0x7f3ac609caa4 <unknown>
#19 0x7f3ac6129c3c <unknown>
================== 12 failed, 7 passed in 1538.65s (0:25:38) ===================
--------------------------------------------
Test Run Finished: 2025-09-14 04:11:45
Duration: 1542 seconds
Status: FAILURE
Exit Code: 1
============================================
