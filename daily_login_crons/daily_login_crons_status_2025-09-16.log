========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-16 03:44:28
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'Faker': '37.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: Faker-37.8.0, rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6d3934823a080f5624e51ab6f0bc5c43")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6d3934823a080f5624e51ab6f0bc5c43")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c0aa20>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55fe944e394a <unknown>
E       #1 0x55fe93f588a0 <unknown>
E       #2 0x55fe93faa540 <unknown>
E       #3 0x55fe93faa731 <unknown>
E       #4 0x55fe93ff8824 <unknown>
E       #5 0x55fe93fd005d <unknown>
E       #6 0x55fe93ff5c23 <unknown>
E       #7 0x55fe93fcfe03 <unknown>
E       #8 0x55fe93f9c968 <unknown>
E       #9 0x55fe93f9d5e1 <unknown>
E       #10 0x55fe944a7548 <unknown>
E       #11 0x55fe944ab272 <unknown>
E       #12 0x55fe9448e313 <unknown>
E       #13 0x55fe944abdc5 <unknown>
E       #14 0x55fe9447349f <unknown>
E       #15 0x55fe944d0158 <unknown>
E       #16 0x55fe944d0332 <unknown>
E       #17 0x55fe944e2a53 <unknown>
E       #18 0x7fcc52c9caa4 <unknown>
E       #19 0x7fcc52d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 03:44:30,756 - INFO - Test data loaded successfully.
2025-09-16 03:44:30,756 - INFO - Starting test with Chrome browser
2025-09-16 03:44:30,756 - INFO - ====== WebDriver manager ======
2025-09-16 03:44:32,684 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:44:32,721 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:44:32,754 - INFO - There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
2025-09-16 03:44:32,754 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:44:32,851 - INFO - WebDriver version 140.0.7339.82 selected
2025-09-16 03:44:32,854 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-16 03:44:32,854 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-16 03:44:32,895 - INFO - Driver downloading response is 200
2025-09-16 03:44:32,945 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:44:33,094 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
2025-09-16 03:44:49,919 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.82 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-16 03:44:49,920 - INFO - Starting the test case for valid credentials
2025-09-16 03:44:50,223 - INFO - User enters the email-id
2025-09-16 03:44:51,911 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 03:46:53,626 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="08bc5c4a7770f6bdf10b1f9c15b003c2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="08bc5c4a7770f6bdf10b1f9c15b003c2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c29800>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55898e08694a <unknown>
E       #1 0x55898dafb8a0 <unknown>
E       #2 0x55898db4d540 <unknown>
E       #3 0x55898db4d731 <unknown>
E       #4 0x55898db9b824 <unknown>
E       #5 0x55898db7305d <unknown>
E       #6 0x55898db98c23 <unknown>
E       #7 0x55898db72e03 <unknown>
E       #8 0x55898db3f968 <unknown>
E       #9 0x55898db405e1 <unknown>
E       #10 0x55898e04a548 <unknown>
E       #11 0x55898e04e272 <unknown>
E       #12 0x55898e031313 <unknown>
E       #13 0x55898e04edc5 <unknown>
E       #14 0x55898e01649f <unknown>
E       #15 0x55898e073158 <unknown>
E       #16 0x55898e073332 <unknown>
E       #17 0x55898e085a53 <unknown>
E       #18 0x7f6e5f49caa4 <unknown>
E       #19 0x7f6e5f529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 03:46:53,845 - INFO - Starting test with Chrome browser
2025-09-16 03:46:53,845 - INFO - ====== WebDriver manager ======
2025-09-16 03:46:53,910 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:46:53,947 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:46:54,041 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 03:46:55,626 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-16 03:46:55,626 - INFO - Starting the test case for valid credentials
2025-09-16 03:46:55,765 - INFO - User enters the email-id
2025-09-16 03:46:57,499 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 03:48:59,118 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e0aae2b454966d2edd1414460f847c07")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e0aae2b454966d2edd1414460f847c07")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab27523e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55aef590694a <unknown>
E       #1 0x55aef537b8a0 <unknown>
E       #2 0x55aef53cd540 <unknown>
E       #3 0x55aef53cd731 <unknown>
E       #4 0x55aef541b824 <unknown>
E       #5 0x55aef53f305d <unknown>
E       #6 0x55aef5418c23 <unknown>
E       #7 0x55aef53f2e03 <unknown>
E       #8 0x55aef53bf968 <unknown>
E       #9 0x55aef53c05e1 <unknown>
E       #10 0x55aef58ca548 <unknown>
E       #11 0x55aef58ce272 <unknown>
E       #12 0x55aef58b1313 <unknown>
E       #13 0x55aef58cedc5 <unknown>
E       #14 0x55aef589649f <unknown>
E       #15 0x55aef58f3158 <unknown>
E       #16 0x55aef58f3332 <unknown>
E       #17 0x55aef5905a53 <unknown>
E       #18 0x7f972d09caa4 <unknown>
E       #19 0x7f972d129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 03:48:59,215 - INFO - Starting test with Chrome browser
2025-09-16 03:48:59,215 - INFO - ====== WebDriver manager ======
2025-09-16 03:48:59,280 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:48:59,319 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:48:59,351 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 03:49:00,973 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-16 03:49:00,973 - INFO - Starting the test case for valid credentials
2025-09-16 03:49:01,118 - INFO - User enters the email-id
2025-09-16 03:49:02,763 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 03:51:04,484 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="52afb900c4d1d2e86e6b076449561a7d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="52afb900c4d1d2e86e6b076449561a7d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c29620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564b5465294a <unknown>
E       #1 0x564b540c78a0 <unknown>
E       #2 0x564b54119540 <unknown>
E       #3 0x564b54119731 <unknown>
E       #4 0x564b54167824 <unknown>
E       #5 0x564b5413f05d <unknown>
E       #6 0x564b54164c23 <unknown>
E       #7 0x564b5413ee03 <unknown>
E       #8 0x564b5410b968 <unknown>
E       #9 0x564b5410c5e1 <unknown>
E       #10 0x564b54616548 <unknown>
E       #11 0x564b5461a272 <unknown>
E       #12 0x564b545fd313 <unknown>
E       #13 0x564b5461adc5 <unknown>
E       #14 0x564b545e249f <unknown>
E       #15 0x564b5463f158 <unknown>
E       #16 0x564b5463f332 <unknown>
E       #17 0x564b54651a53 <unknown>
E       #18 0x7f9bf529caa4 <unknown>
E       #19 0x7f9bf5329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 03:51:04,549 - INFO - Starting test with Chrome browser
2025-09-16 03:51:04,550 - INFO - ====== WebDriver manager ======
2025-09-16 03:51:04,614 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:51:04,649 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:51:04,682 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 03:51:06,228 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-16 03:51:06,229 - INFO - Starting the test case for valid credentials
2025-09-16 03:51:06,384 - INFO - User enters the email-id
2025-09-16 03:51:08,093 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 03:53:09,731 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7fe222925a82b6040bee76c070328594")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7fe222925a82b6040bee76c070328594")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c29ee0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564ba76b694a <unknown>
E       #1 0x564ba712b8a0 <unknown>
E       #2 0x564ba717d540 <unknown>
E       #3 0x564ba717d731 <unknown>
E       #4 0x564ba71cb824 <unknown>
E       #5 0x564ba71a305d <unknown>
E       #6 0x564ba71c8c23 <unknown>
E       #7 0x564ba71a2e03 <unknown>
E       #8 0x564ba716f968 <unknown>
E       #9 0x564ba71705e1 <unknown>
E       #10 0x564ba767a548 <unknown>
E       #11 0x564ba767e272 <unknown>
E       #12 0x564ba7661313 <unknown>
E       #13 0x564ba767edc5 <unknown>
E       #14 0x564ba764649f <unknown>
E       #15 0x564ba76a3158 <unknown>
E       #16 0x564ba76a3332 <unknown>
E       #17 0x564ba76b5a53 <unknown>
E       #18 0x7faa55c9caa4 <unknown>
E       #19 0x7faa55d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 03:53:09,789 - INFO - Starting test with Chrome browser
2025-09-16 03:53:09,789 - INFO - ====== WebDriver manager ======
2025-09-16 03:53:09,854 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:53:09,887 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:53:09,924 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 03:53:12,035 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 03:55:13,860 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6524581b62f52faaa9c290341072c8dc")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6524581b62f52faaa9c290341072c8dc")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c29f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f1e7b3494a <unknown>
E       #1 0x55f1e75a98a0 <unknown>
E       #2 0x55f1e75fb540 <unknown>
E       #3 0x55f1e75fb731 <unknown>
E       #4 0x55f1e7649824 <unknown>
E       #5 0x55f1e762105d <unknown>
E       #6 0x55f1e7646c23 <unknown>
E       #7 0x55f1e7620e03 <unknown>
E       #8 0x55f1e75ed968 <unknown>
E       #9 0x55f1e75ee5e1 <unknown>
E       #10 0x55f1e7af8548 <unknown>
E       #11 0x55f1e7afc272 <unknown>
E       #12 0x55f1e7adf313 <unknown>
E       #13 0x55f1e7afcdc5 <unknown>
E       #14 0x55f1e7ac449f <unknown>
E       #15 0x55f1e7b21158 <unknown>
E       #16 0x55f1e7b21332 <unknown>
E       #17 0x55f1e7b33a53 <unknown>
E       #18 0x7fa61f29caa4 <unknown>
E       #19 0x7fa61f329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 03:55:13,925 - INFO - Starting test with Chrome browser
2025-09-16 03:55:13,925 - INFO - ====== WebDriver manager ======
2025-09-16 03:55:13,990 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:55:14,023 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:55:14,058 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 03:55:15,723 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 03:57:17,559 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f40990158dca90a28c5ec45878f663df")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f40990158dca90a28c5ec45878f663df")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c29d00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56174a9c394a <unknown>
E       #1 0x56174a4388a0 <unknown>
E       #2 0x56174a48a540 <unknown>
E       #3 0x56174a48a731 <unknown>
E       #4 0x56174a4d8824 <unknown>
E       #5 0x56174a4b005d <unknown>
E       #6 0x56174a4d5c23 <unknown>
E       #7 0x56174a4afe03 <unknown>
E       #8 0x56174a47c968 <unknown>
E       #9 0x56174a47d5e1 <unknown>
E       #10 0x56174a987548 <unknown>
E       #11 0x56174a98b272 <unknown>
E       #12 0x56174a96e313 <unknown>
E       #13 0x56174a98bdc5 <unknown>
E       #14 0x56174a95349f <unknown>
E       #15 0x56174a9b0158 <unknown>
E       #16 0x56174a9b0332 <unknown>
E       #17 0x56174a9c2a53 <unknown>
E       #18 0x7f3e9fc9caa4 <unknown>
E       #19 0x7f3e9fd29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 03:57:17,616 - INFO - Starting test with Chrome browser
2025-09-16 03:57:17,617 - INFO - ====== WebDriver manager ======
2025-09-16 03:57:17,681 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:57:17,715 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:57:17,748 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 03:57:19,534 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 03:59:21,365 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8dd7a10917010f34603f22c0360e8499")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8dd7a10917010f34603f22c0360e8499")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c2a7a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557328ef494a <unknown>
E       #1 0x5573289698a0 <unknown>
E       #2 0x5573289bb540 <unknown>
E       #3 0x5573289bb731 <unknown>
E       #4 0x557328a09824 <unknown>
E       #5 0x5573289e105d <unknown>
E       #6 0x557328a06c23 <unknown>
E       #7 0x5573289e0e03 <unknown>
E       #8 0x5573289ad968 <unknown>
E       #9 0x5573289ae5e1 <unknown>
E       #10 0x557328eb8548 <unknown>
E       #11 0x557328ebc272 <unknown>
E       #12 0x557328e9f313 <unknown>
E       #13 0x557328ebcdc5 <unknown>
E       #14 0x557328e8449f <unknown>
E       #15 0x557328ee1158 <unknown>
E       #16 0x557328ee1332 <unknown>
E       #17 0x557328ef3a53 <unknown>
E       #18 0x7fbb5969caa4 <unknown>
E       #19 0x7fbb59729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 03:59:21,425 - INFO - Starting test with Chrome browser
2025-09-16 03:59:21,425 - INFO - ====== WebDriver manager ======
2025-09-16 03:59:21,490 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:59:21,540 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 03:59:21,603 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 03:59:23,239 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 04:01:25,024 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="41b87d152256966c347355e7f203392d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="41b87d152256966c347355e7f203392d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c2aac0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a0c67eb94a <unknown>
E       #1 0x55a0c62608a0 <unknown>
E       #2 0x55a0c62b2540 <unknown>
E       #3 0x55a0c62b2731 <unknown>
E       #4 0x55a0c6300824 <unknown>
E       #5 0x55a0c62d805d <unknown>
E       #6 0x55a0c62fdc23 <unknown>
E       #7 0x55a0c62d7e03 <unknown>
E       #8 0x55a0c62a4968 <unknown>
E       #9 0x55a0c62a55e1 <unknown>
E       #10 0x55a0c67af548 <unknown>
E       #11 0x55a0c67b3272 <unknown>
E       #12 0x55a0c6796313 <unknown>
E       #13 0x55a0c67b3dc5 <unknown>
E       #14 0x55a0c677b49f <unknown>
E       #15 0x55a0c67d8158 <unknown>
E       #16 0x55a0c67d8332 <unknown>
E       #17 0x55a0c67eaa53 <unknown>
E       #18 0x7f503d49caa4 <unknown>
E       #19 0x7f503d529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 04:01:25,088 - INFO - Starting test with Chrome browser
2025-09-16 04:01:25,088 - INFO - ====== WebDriver manager ======
2025-09-16 04:01:25,152 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 04:01:25,203 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 04:01:25,243 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 04:01:26,059 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 04:03:29,789 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bffcb603b18d0bd28840f36b5399e0d4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="bffcb603b18d0bd28840f36b5399e0d4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c2a840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56066a17794a <unknown>
E       #1 0x560669bec8a0 <unknown>
E       #2 0x560669c3e540 <unknown>
E       #3 0x560669c3e731 <unknown>
E       #4 0x560669c8c824 <unknown>
E       #5 0x560669c6405d <unknown>
E       #6 0x560669c89c23 <unknown>
E       #7 0x560669c63e03 <unknown>
E       #8 0x560669c30968 <unknown>
E       #9 0x560669c315e1 <unknown>
E       #10 0x56066a13b548 <unknown>
E       #11 0x56066a13f272 <unknown>
E       #12 0x56066a122313 <unknown>
E       #13 0x56066a13fdc5 <unknown>
E       #14 0x56066a10749f <unknown>
E       #15 0x56066a164158 <unknown>
E       #16 0x56066a164332 <unknown>
E       #17 0x56066a176a53 <unknown>
E       #18 0x7f78ff89caa4 <unknown>
E       #19 0x7f78ff929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 04:03:29,846 - INFO - Starting test with Chrome browser
2025-09-16 04:03:29,846 - INFO - ====== WebDriver manager ======
2025-09-16 04:03:29,911 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 04:03:29,949 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 04:03:30,012 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 04:03:31,526 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 04:05:35,106 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e08fe01be94444f20489940a54cde6a8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e08fe01be94444f20489940a54cde6a8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c2a2a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5596911ca94a <unknown>
E       #1 0x559690c3f8a0 <unknown>
E       #2 0x559690c91540 <unknown>
E       #3 0x559690c91731 <unknown>
E       #4 0x559690cdf824 <unknown>
E       #5 0x559690cb705d <unknown>
E       #6 0x559690cdcc23 <unknown>
E       #7 0x559690cb6e03 <unknown>
E       #8 0x559690c83968 <unknown>
E       #9 0x559690c845e1 <unknown>
E       #10 0x55969118e548 <unknown>
E       #11 0x559691192272 <unknown>
E       #12 0x559691175313 <unknown>
E       #13 0x559691192dc5 <unknown>
E       #14 0x55969115a49f <unknown>
E       #15 0x5596911b7158 <unknown>
E       #16 0x5596911b7332 <unknown>
E       #17 0x5596911c9a53 <unknown>
E       #18 0x7fdfec49caa4 <unknown>
E       #19 0x7fdfec529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 04:05:36,162 - INFO - Starting test with Chrome browser
2025-09-16 04:05:36,163 - INFO - ====== WebDriver manager ======
2025-09-16 04:05:36,228 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 04:05:36,265 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 04:05:36,299 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 04:05:38,825 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 04:07:42,329 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="50820f389ba6fa26474e130b2d064fbb")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="50820f389ba6fa26474e130b2d064fbb")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ffab0c29620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c31ca2094a <unknown>
E       #1 0x55c31c4958a0 <unknown>
E       #2 0x55c31c4e7540 <unknown>
E       #3 0x55c31c4e7731 <unknown>
E       #4 0x55c31c535824 <unknown>
E       #5 0x55c31c50d05d <unknown>
E       #6 0x55c31c532c23 <unknown>
E       #7 0x55c31c50ce03 <unknown>
E       #8 0x55c31c4d9968 <unknown>
E       #9 0x55c31c4da5e1 <unknown>
E       #10 0x55c31c9e4548 <unknown>
E       #11 0x55c31c9e8272 <unknown>
E       #12 0x55c31c9cb313 <unknown>
E       #13 0x55c31c9e8dc5 <unknown>
E       #14 0x55c31c9b049f <unknown>
E       #15 0x55c31ca0d158 <unknown>
E       #16 0x55c31ca0d332 <unknown>
E       #17 0x55c31ca1fa53 <unknown>
E       #18 0x7fc6f1c9caa4 <unknown>
E       #19 0x7fc6f1d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-16 04:07:42,388 - INFO - Starting test with Chrome browser
2025-09-16 04:07:42,388 - INFO - ====== WebDriver manager ======
2025-09-16 04:07:42,452 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 04:07:42,487 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-16 04:07:42,533 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-16 04:07:44,307 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-16 04:09:47,779 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250916_034430/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55fe944e394a <unknown>
#1 0x55fe93f588a0 <unknown>
#2 0x55fe93faa540 <unknown>
#3 0x55fe93faa731 <unknown>
#4 0x55fe93ff8824 <unknown>
#5 0x55fe93fd005d <unknown>
#6 0x55fe93ff5c23 <unknown>
#7 0x55fe93fcfe03 <unknown>
#8 0x55fe93f9c968 <unknown>
#9 0x55fe93f9d5e1 <unknown>
#10 0x55fe944a7548 <unknown>
#11 0x55fe944ab272 <unknown>
#12 0x55fe9448e313 <unknown>
#13 0x55fe944abdc5 <unknown>
#14 0x55fe9447349f <unknown>
#15 0x55fe944d0158 <unknown>
#16 0x55fe944d0332 <unknown>
#17 0x55fe944e2a53 <unknown>
#18 0x7fcc52c9caa4 <unknown>
#19 0x7fcc52d29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55898e08694a <unknown>
#1 0x55898dafb8a0 <unknown>
#2 0x55898db4d540 <unknown>
#3 0x55898db4d731 <unknown>
#4 0x55898db9b824 <unknown>
#5 0x55898db7305d <unknown>
#6 0x55898db98c23 <unknown>
#7 0x55898db72e03 <unknown>
#8 0x55898db3f968 <unknown>
#9 0x55898db405e1 <unknown>
#10 0x55898e04a548 <unknown>
#11 0x55898e04e272 <unknown>
#12 0x55898e031313 <unknown>
#13 0x55898e04edc5 <unknown>
#14 0x55898e01649f <unknown>
#15 0x55898e073158 <unknown>
#16 0x55898e073332 <unknown>
#17 0x55898e085a53 <unknown>
#18 0x7f6e5f49caa4 <unknown>
#19 0x7f6e5f529c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55aef590694a <unknown>
#1 0x55aef537b8a0 <unknown>
#2 0x55aef53cd540 <unknown>
#3 0x55aef53cd731 <unknown>
#4 0x55aef541b824 <unknown>
#5 0x55aef53f305d <unknown>
#6 0x55aef5418c23 <unknown>
#7 0x55aef53f2e03 <unknown>
#8 0x55aef53bf968 <unknown>
#9 0x55aef53c05e1 <unknown>
#10 0x55aef58ca548 <unknown>
#11 0x55aef58ce272 <unknown>
#12 0x55aef58b1313 <unknown>
#13 0x55aef58cedc5 <unknown>
#14 0x55aef589649f <unknown>
#15 0x55aef58f3158 <unknown>
#16 0x55aef58f3332 <unknown>
#17 0x55aef5905a53 <unknown>
#18 0x7f972d09caa4 <unknown>
#19 0x7f972d129c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564b5465294a <unknown>
#1 0x564b540c78a0 <unknown>
#2 0x564b54119540 <unknown>
#3 0x564b54119731 <unknown>
#4 0x564b54167824 <unknown>
#5 0x564b5413f05d <unknown>
#6 0x564b54164c23 <unknown>
#7 0x564b5413ee03 <unknown>
#8 0x564b5410b968 <unknown>
#9 0x564b5410c5e1 <unknown>
#10 0x564b54616548 <unknown>
#11 0x564b5461a272 <unknown>
#12 0x564b545fd313 <unknown>
#13 0x564b5461adc5 <unknown>
#14 0x564b545e249f <unknown>
#15 0x564b5463f158 <unknown>
#16 0x564b5463f332 <unknown>
#17 0x564b54651a53 <unknown>
#18 0x7f9bf529caa4 <unknown>
#19 0x7f9bf5329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564ba76b694a <unknown>
#1 0x564ba712b8a0 <unknown>
#2 0x564ba717d540 <unknown>
#3 0x564ba717d731 <unknown>
#4 0x564ba71cb824 <unknown>
#5 0x564ba71a305d <unknown>
#6 0x564ba71c8c23 <unknown>
#7 0x564ba71a2e03 <unknown>
#8 0x564ba716f968 <unknown>
#9 0x564ba71705e1 <unknown>
#10 0x564ba767a548 <unknown>
#11 0x564ba767e272 <unknown>
#12 0x564ba7661313 <unknown>
#13 0x564ba767edc5 <unknown>
#14 0x564ba764649f <unknown>
#15 0x564ba76a3158 <unknown>
#16 0x564ba76a3332 <unknown>
#17 0x564ba76b5a53 <unknown>
#18 0x7faa55c9caa4 <unknown>
#19 0x7faa55d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f1e7b3494a <unknown>
#1 0x55f1e75a98a0 <unknown>
#2 0x55f1e75fb540 <unknown>
#3 0x55f1e75fb731 <unknown>
#4 0x55f1e7649824 <unknown>
#5 0x55f1e762105d <unknown>
#6 0x55f1e7646c23 <unknown>
#7 0x55f1e7620e03 <unknown>
#8 0x55f1e75ed968 <unknown>
#9 0x55f1e75ee5e1 <unknown>
#10 0x55f1e7af8548 <unknown>
#11 0x55f1e7afc272 <unknown>
#12 0x55f1e7adf313 <unknown>
#13 0x55f1e7afcdc5 <unknown>
#14 0x55f1e7ac449f <unknown>
#15 0x55f1e7b21158 <unknown>
#16 0x55f1e7b21332 <unknown>
#17 0x55f1e7b33a53 <unknown>
#18 0x7fa61f29caa4 <unknown>
#19 0x7fa61f329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56174a9c394a <unknown>
#1 0x56174a4388a0 <unknown>
#2 0x56174a48a540 <unknown>
#3 0x56174a48a731 <unknown>
#4 0x56174a4d8824 <unknown>
#5 0x56174a4b005d <unknown>
#6 0x56174a4d5c23 <unknown>
#7 0x56174a4afe03 <unknown>
#8 0x56174a47c968 <unknown>
#9 0x56174a47d5e1 <unknown>
#10 0x56174a987548 <unknown>
#11 0x56174a98b272 <unknown>
#12 0x56174a96e313 <unknown>
#13 0x56174a98bdc5 <unknown>
#14 0x56174a95349f <unknown>
#15 0x56174a9b0158 <unknown>
#16 0x56174a9b0332 <unknown>
#17 0x56174a9c2a53 <unknown>
#18 0x7f3e9fc9caa4 <unknown>
#19 0x7f3e9fd29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557328ef494a <unknown>
#1 0x5573289698a0 <unknown>
#2 0x5573289bb540 <unknown>
#3 0x5573289bb731 <unknown>
#4 0x557328a09824 <unknown>
#5 0x5573289e105d <unknown>
#6 0x557328a06c23 <unknown>
#7 0x5573289e0e03 <unknown>
#8 0x5573289ad968 <unknown>
#9 0x5573289ae5e1 <unknown>
#10 0x557328eb8548 <unknown>
#11 0x557328ebc272 <unknown>
#12 0x557328e9f313 <unknown>
#13 0x557328ebcdc5 <unknown>
#14 0x557328e8449f <unknown>
#15 0x557328ee1158 <unknown>
#16 0x557328ee1332 <unknown>
#17 0x557328ef3a53 <unknown>
#18 0x7fbb5969caa4 <unknown>
#19 0x7fbb59729c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a0c67eb94a <unknown>
#1 0x55a0c62608a0 <unknown>
#2 0x55a0c62b2540 <unknown>
#3 0x55a0c62b2731 <unknown>
#4 0x55a0c6300824 <unknown>
#5 0x55a0c62d805d <unknown>
#6 0x55a0c62fdc23 <unknown>
#7 0x55a0c62d7e03 <unknown>
#8 0x55a0c62a4968 <unknown>
#9 0x55a0c62a55e1 <unknown>
#10 0x55a0c67af548 <unknown>
#11 0x55a0c67b3272 <unknown>
#12 0x55a0c6796313 <unknown>
#13 0x55a0c67b3dc5 <unknown>
#14 0x55a0c677b49f <unknown>
#15 0x55a0c67d8158 <unknown>
#16 0x55a0c67d8332 <unknown>
#17 0x55a0c67eaa53 <unknown>
#18 0x7f503d49caa4 <unknown>
#19 0x7f503d529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56066a17794a <unknown>
#1 0x560669bec8a0 <unknown>
#2 0x560669c3e540 <unknown>
#3 0x560669c3e731 <unknown>
#4 0x560669c8c824 <unknown>
#5 0x560669c6405d <unknown>
#6 0x560669c89c23 <unknown>
#7 0x560669c63e03 <unknown>
#8 0x560669c30968 <unknown>
#9 0x560669c315e1 <unknown>
#10 0x56066a13b548 <unknown>
#11 0x56066a13f272 <unknown>
#12 0x56066a122313 <unknown>
#13 0x56066a13fdc5 <unknown>
#14 0x56066a10749f <unknown>
#15 0x56066a164158 <unknown>
#16 0x56066a164332 <unknown>
#17 0x56066a176a53 <unknown>
#18 0x7f78ff89caa4 <unknown>
#19 0x7f78ff929c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5596911ca94a <unknown>
#1 0x559690c3f8a0 <unknown>
#2 0x559690c91540 <unknown>
#3 0x559690c91731 <unknown>
#4 0x559690cdf824 <unknown>
#5 0x559690cb705d <unknown>
#6 0x559690cdcc23 <unknown>
#7 0x559690cb6e03 <unknown>
#8 0x559690c83968 <unknown>
#9 0x559690c845e1 <unknown>
#10 0x55969118e548 <unknown>
#11 0x559691192272 <unknown>
#12 0x559691175313 <unknown>
#13 0x559691192dc5 <unknown>
#14 0x55969115a49f <unknown>
#15 0x5596911b7158 <unknown>
#16 0x5596911b7332 <unknown>
#17 0x5596911c9a53 <unknown>
#18 0x7fdfec49caa4 <unknown>
#19 0x7fdfec529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c31ca2094a <unknown>
#1 0x55c31c4958a0 <unknown>
#2 0x55c31c4e7540 <unknown>
#3 0x55c31c4e7731 <unknown>
#4 0x55c31c535824 <unknown>
#5 0x55c31c50d05d <unknown>
#6 0x55c31c532c23 <unknown>
#7 0x55c31c50ce03 <unknown>
#8 0x55c31c4d9968 <unknown>
#9 0x55c31c4da5e1 <unknown>
#10 0x55c31c9e4548 <unknown>
#11 0x55c31c9e8272 <unknown>
#12 0x55c31c9cb313 <unknown>
#13 0x55c31c9e8dc5 <unknown>
#14 0x55c31c9b049f <unknown>
#15 0x55c31ca0d158 <unknown>
#16 0x55c31ca0d332 <unknown>
#17 0x55c31ca1fa53 <unknown>
#18 0x7fc6f1c9caa4 <unknown>
#19 0x7fc6f1d29c3c <unknown>
================== 12 failed, 7 passed in 1532.88s (0:25:32) ===================
--------------------------------------------
Test Run Finished: 2025-09-16 04:10:03
Duration: 1535 seconds
Status: FAILURE
Exit Code: 1
============================================
