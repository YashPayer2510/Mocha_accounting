========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-23 03:45:36
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'Faker': '37.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: Faker-37.8.0, rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6d650e284be41a3f2cbb0215e330333b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6d650e284be41a3f2cbb0215e330333b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f08128900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f1edba5cba <unknown>
E       #1 0x55f1ed61a8e0 <unknown>
E       #2 0x55f1ed66c580 <unknown>
E       #3 0x55f1ed66c771 <unknown>
E       #4 0x55f1ed6ba864 <unknown>
E       #5 0x55f1ed69209d <unknown>
E       #6 0x55f1ed6b7c63 <unknown>
E       #7 0x55f1ed691e43 <unknown>
E       #8 0x55f1ed65e9a8 <unknown>
E       #9 0x55f1ed65f621 <unknown>
E       #10 0x55f1edb698b8 <unknown>
E       #11 0x55f1edb6d5e2 <unknown>
E       #12 0x55f1edb50683 <unknown>
E       #13 0x55f1edb6e135 <unknown>
E       #14 0x55f1edb3580f <unknown>
E       #15 0x55f1edb924c8 <unknown>
E       #16 0x55f1edb926a2 <unknown>
E       #17 0x55f1edba4dc3 <unknown>
E       #18 0x7f629689caa4 <unknown>
E       #19 0x7f6296929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 03:45:39,360 - INFO - Test data loaded successfully.
2025-09-23 03:45:39,361 - INFO - Starting test with Chrome browser
2025-09-23 03:45:39,361 - INFO - ====== WebDriver manager ======
2025-09-23 03:45:40,861 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:45:40,991 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:45:41,073 - INFO - There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
2025-09-23 03:45:41,073 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:45:41,307 - INFO - WebDriver version 140.0.7339.185 selected
2025-09-23 03:45:41,313 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-23 03:45:41,313 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-23 03:45:41,384 - INFO - Driver downloading response is 200
2025-09-23 03:45:41,495 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:45:41,700 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
2025-09-23 03:45:53,879 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.185 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-23 03:45:53,880 - INFO - Starting the test case for valid credentials
2025-09-23 03:45:54,164 - INFO - User enters the email-id
2025-09-23 03:45:55,771 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 03:47:57,470 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="4837e37770732b397dbaa5b9c0e27906")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4837e37770732b397dbaa5b9c0e27906")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f58a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55862d046cba <unknown>
E       #1 0x55862cabb8e0 <unknown>
E       #2 0x55862cb0d580 <unknown>
E       #3 0x55862cb0d771 <unknown>
E       #4 0x55862cb5b864 <unknown>
E       #5 0x55862cb3309d <unknown>
E       #6 0x55862cb58c63 <unknown>
E       #7 0x55862cb32e43 <unknown>
E       #8 0x55862caff9a8 <unknown>
E       #9 0x55862cb00621 <unknown>
E       #10 0x55862d00a8b8 <unknown>
E       #11 0x55862d00e5e2 <unknown>
E       #12 0x55862cff1683 <unknown>
E       #13 0x55862d00f135 <unknown>
E       #14 0x55862cfd680f <unknown>
E       #15 0x55862d0334c8 <unknown>
E       #16 0x55862d0336a2 <unknown>
E       #17 0x55862d045dc3 <unknown>
E       #18 0x7fae5e29caa4 <unknown>
E       #19 0x7fae5e329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 03:47:57,656 - INFO - Starting test with Chrome browser
2025-09-23 03:47:57,657 - INFO - ====== WebDriver manager ======
2025-09-23 03:47:57,726 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:47:57,812 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:47:57,934 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 03:47:59,615 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-23 03:47:59,615 - INFO - Starting the test case for valid credentials
2025-09-23 03:47:59,772 - INFO - User enters the email-id
2025-09-23 03:48:01,412 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 03:50:02,985 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="60dd645aab4fcb7a06832bf46d2ec8c8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="60dd645aab4fcb7a06832bf46d2ec8c8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f0b0023e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ed90f46cba <unknown>
E       #1 0x55ed909bb8e0 <unknown>
E       #2 0x55ed90a0d580 <unknown>
E       #3 0x55ed90a0d771 <unknown>
E       #4 0x55ed90a5b864 <unknown>
E       #5 0x55ed90a3309d <unknown>
E       #6 0x55ed90a58c63 <unknown>
E       #7 0x55ed90a32e43 <unknown>
E       #8 0x55ed909ff9a8 <unknown>
E       #9 0x55ed90a00621 <unknown>
E       #10 0x55ed90f0a8b8 <unknown>
E       #11 0x55ed90f0e5e2 <unknown>
E       #12 0x55ed90ef1683 <unknown>
E       #13 0x55ed90f0f135 <unknown>
E       #14 0x55ed90ed680f <unknown>
E       #15 0x55ed90f334c8 <unknown>
E       #16 0x55ed90f336a2 <unknown>
E       #17 0x55ed90f45dc3 <unknown>
E       #18 0x7f2ee989caa4 <unknown>
E       #19 0x7f2ee9929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 03:50:04,051 - INFO - Starting test with Chrome browser
2025-09-23 03:50:04,052 - INFO - ====== WebDriver manager ======
2025-09-23 03:50:04,120 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:50:04,214 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:50:04,299 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 03:50:06,543 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-23 03:50:06,544 - INFO - Starting the test case for valid credentials
2025-09-23 03:50:06,717 - INFO - User enters the email-id
2025-09-23 03:50:08,368 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 03:52:10,041 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7823f4b37800213dc48a0fcc20265c0d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7823f4b37800213dc48a0fcc20265c0d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f56c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55bc644facba <unknown>
E       #1 0x55bc63f6f8e0 <unknown>
E       #2 0x55bc63fc1580 <unknown>
E       #3 0x55bc63fc1771 <unknown>
E       #4 0x55bc6400f864 <unknown>
E       #5 0x55bc63fe709d <unknown>
E       #6 0x55bc6400cc63 <unknown>
E       #7 0x55bc63fe6e43 <unknown>
E       #8 0x55bc63fb39a8 <unknown>
E       #9 0x55bc63fb4621 <unknown>
E       #10 0x55bc644be8b8 <unknown>
E       #11 0x55bc644c25e2 <unknown>
E       #12 0x55bc644a5683 <unknown>
E       #13 0x55bc644c3135 <unknown>
E       #14 0x55bc6448a80f <unknown>
E       #15 0x55bc644e74c8 <unknown>
E       #16 0x55bc644e76a2 <unknown>
E       #17 0x55bc644f9dc3 <unknown>
E       #18 0x7fa457a9caa4 <unknown>
E       #19 0x7fa457b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 03:52:10,108 - INFO - Starting test with Chrome browser
2025-09-23 03:52:10,108 - INFO - ====== WebDriver manager ======
2025-09-23 03:52:10,176 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:52:10,260 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:52:10,345 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 03:52:11,983 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-23 03:52:11,983 - INFO - Starting the test case for valid credentials
2025-09-23 03:52:12,149 - INFO - User enters the email-id
2025-09-23 03:52:13,876 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 03:54:15,541 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a43bea936ef1c283355ebac6ebc0ebd7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a43bea936ef1c283355ebac6ebc0ebd7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f5f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55984ac63cba <unknown>
E       #1 0x55984a6d88e0 <unknown>
E       #2 0x55984a72a580 <unknown>
E       #3 0x55984a72a771 <unknown>
E       #4 0x55984a778864 <unknown>
E       #5 0x55984a75009d <unknown>
E       #6 0x55984a775c63 <unknown>
E       #7 0x55984a74fe43 <unknown>
E       #8 0x55984a71c9a8 <unknown>
E       #9 0x55984a71d621 <unknown>
E       #10 0x55984ac278b8 <unknown>
E       #11 0x55984ac2b5e2 <unknown>
E       #12 0x55984ac0e683 <unknown>
E       #13 0x55984ac2c135 <unknown>
E       #14 0x55984abf380f <unknown>
E       #15 0x55984ac504c8 <unknown>
E       #16 0x55984ac506a2 <unknown>
E       #17 0x55984ac62dc3 <unknown>
E       #18 0x7f4621c9caa4 <unknown>
E       #19 0x7f4621d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 03:54:15,608 - INFO - Starting test with Chrome browser
2025-09-23 03:54:15,609 - INFO - ====== WebDriver manager ======
2025-09-23 03:54:15,676 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:54:15,762 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:54:15,854 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 03:54:17,837 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 03:56:19,622 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9ce6dff29e79fa7c1b95a97d7e3094af")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9ce6dff29e79fa7c1b95a97d7e3094af")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f6020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55de1bf4fcba <unknown>
E       #1 0x55de1b9c48e0 <unknown>
E       #2 0x55de1ba16580 <unknown>
E       #3 0x55de1ba16771 <unknown>
E       #4 0x55de1ba64864 <unknown>
E       #5 0x55de1ba3c09d <unknown>
E       #6 0x55de1ba61c63 <unknown>
E       #7 0x55de1ba3be43 <unknown>
E       #8 0x55de1ba089a8 <unknown>
E       #9 0x55de1ba09621 <unknown>
E       #10 0x55de1bf138b8 <unknown>
E       #11 0x55de1bf175e2 <unknown>
E       #12 0x55de1befa683 <unknown>
E       #13 0x55de1bf18135 <unknown>
E       #14 0x55de1bedf80f <unknown>
E       #15 0x55de1bf3c4c8 <unknown>
E       #16 0x55de1bf3c6a2 <unknown>
E       #17 0x55de1bf4edc3 <unknown>
E       #18 0x7f36ba89caa4 <unknown>
E       #19 0x7f36ba929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 03:56:19,687 - INFO - Starting test with Chrome browser
2025-09-23 03:56:19,688 - INFO - ====== WebDriver manager ======
2025-09-23 03:56:19,756 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:56:19,839 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:56:19,922 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 03:56:21,618 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 03:58:23,387 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9441c85460879a761e4f759bdd26bb1e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9441c85460879a761e4f759bdd26bb1e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f5da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56020b337cba <unknown>
E       #1 0x56020adac8e0 <unknown>
E       #2 0x56020adfe580 <unknown>
E       #3 0x56020adfe771 <unknown>
E       #4 0x56020ae4c864 <unknown>
E       #5 0x56020ae2409d <unknown>
E       #6 0x56020ae49c63 <unknown>
E       #7 0x56020ae23e43 <unknown>
E       #8 0x56020adf09a8 <unknown>
E       #9 0x56020adf1621 <unknown>
E       #10 0x56020b2fb8b8 <unknown>
E       #11 0x56020b2ff5e2 <unknown>
E       #12 0x56020b2e2683 <unknown>
E       #13 0x56020b300135 <unknown>
E       #14 0x56020b2c780f <unknown>
E       #15 0x56020b3244c8 <unknown>
E       #16 0x56020b3246a2 <unknown>
E       #17 0x56020b336dc3 <unknown>
E       #18 0x7fc3cf89caa4 <unknown>
E       #19 0x7fc3cf929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 03:58:23,454 - INFO - Starting test with Chrome browser
2025-09-23 03:58:23,454 - INFO - ====== WebDriver manager ======
2025-09-23 03:58:23,521 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:58:23,605 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 03:58:23,690 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 03:58:25,302 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 04:00:27,125 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7182642c5ce1df4891c23dc1b06fcb5d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7182642c5ce1df4891c23dc1b06fcb5d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f6840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557129c0dcba <unknown>
E       #1 0x5571296828e0 <unknown>
E       #2 0x5571296d4580 <unknown>
E       #3 0x5571296d4771 <unknown>
E       #4 0x557129722864 <unknown>
E       #5 0x5571296fa09d <unknown>
E       #6 0x55712971fc63 <unknown>
E       #7 0x5571296f9e43 <unknown>
E       #8 0x5571296c69a8 <unknown>
E       #9 0x5571296c7621 <unknown>
E       #10 0x557129bd18b8 <unknown>
E       #11 0x557129bd55e2 <unknown>
E       #12 0x557129bb8683 <unknown>
E       #13 0x557129bd6135 <unknown>
E       #14 0x557129b9d80f <unknown>
E       #15 0x557129bfa4c8 <unknown>
E       #16 0x557129bfa6a2 <unknown>
E       #17 0x557129c0cdc3 <unknown>
E       #18 0x7f0d6f69caa4 <unknown>
E       #19 0x7f0d6f729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 04:00:27,191 - INFO - Starting test with Chrome browser
2025-09-23 04:00:27,191 - INFO - ====== WebDriver manager ======
2025-09-23 04:00:27,260 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:00:27,346 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:00:27,430 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 04:00:29,371 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 04:02:31,154 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3b8295e76615d67f90d0ac86ea4fa495")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3b8295e76615d67f90d0ac86ea4fa495")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f6b60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55cfc763ecba <unknown>
E       #1 0x55cfc70b38e0 <unknown>
E       #2 0x55cfc7105580 <unknown>
E       #3 0x55cfc7105771 <unknown>
E       #4 0x55cfc7153864 <unknown>
E       #5 0x55cfc712b09d <unknown>
E       #6 0x55cfc7150c63 <unknown>
E       #7 0x55cfc712ae43 <unknown>
E       #8 0x55cfc70f79a8 <unknown>
E       #9 0x55cfc70f8621 <unknown>
E       #10 0x55cfc76028b8 <unknown>
E       #11 0x55cfc76065e2 <unknown>
E       #12 0x55cfc75e9683 <unknown>
E       #13 0x55cfc7607135 <unknown>
E       #14 0x55cfc75ce80f <unknown>
E       #15 0x55cfc762b4c8 <unknown>
E       #16 0x55cfc762b6a2 <unknown>
E       #17 0x55cfc763ddc3 <unknown>
E       #18 0x7f31e109caa4 <unknown>
E       #19 0x7f31e1129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 04:02:31,219 - INFO - Starting test with Chrome browser
2025-09-23 04:02:31,219 - INFO - ====== WebDriver manager ======
2025-09-23 04:02:31,286 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:02:31,371 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:02:31,453 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 04:02:33,127 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 04:04:36,495 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="684338873994d28335504ea9c875cbf8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="684338873994d28335504ea9c875cbf8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f68e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56161613dcba <unknown>
E       #1 0x561615bb28e0 <unknown>
E       #2 0x561615c04580 <unknown>
E       #3 0x561615c04771 <unknown>
E       #4 0x561615c52864 <unknown>
E       #5 0x561615c2a09d <unknown>
E       #6 0x561615c4fc63 <unknown>
E       #7 0x561615c29e43 <unknown>
E       #8 0x561615bf69a8 <unknown>
E       #9 0x561615bf7621 <unknown>
E       #10 0x5616161018b8 <unknown>
E       #11 0x5616161055e2 <unknown>
E       #12 0x5616160e8683 <unknown>
E       #13 0x561616106135 <unknown>
E       #14 0x5616160cd80f <unknown>
E       #15 0x56161612a4c8 <unknown>
E       #16 0x56161612a6a2 <unknown>
E       #17 0x56161613cdc3 <unknown>
E       #18 0x7fb1a849caa4 <unknown>
E       #19 0x7fb1a8529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 04:04:36,564 - INFO - Starting test with Chrome browser
2025-09-23 04:04:36,564 - INFO - ====== WebDriver manager ======
2025-09-23 04:04:36,632 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:04:36,724 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:04:36,806 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 04:04:38,823 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 04:06:42,268 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d085095e76164aa842928ce610892303")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d085095e76164aa842928ce610892303")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f5da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5623156ebcba <unknown>
E       #1 0x5623151608e0 <unknown>
E       #2 0x5623151b2580 <unknown>
E       #3 0x5623151b2771 <unknown>
E       #4 0x562315200864 <unknown>
E       #5 0x5623151d809d <unknown>
E       #6 0x5623151fdc63 <unknown>
E       #7 0x5623151d7e43 <unknown>
E       #8 0x5623151a49a8 <unknown>
E       #9 0x5623151a5621 <unknown>
E       #10 0x5623156af8b8 <unknown>
E       #11 0x5623156b35e2 <unknown>
E       #12 0x562315696683 <unknown>
E       #13 0x5623156b4135 <unknown>
E       #14 0x56231567b80f <unknown>
E       #15 0x5623156d84c8 <unknown>
E       #16 0x5623156d86a2 <unknown>
E       #17 0x5623156eadc3 <unknown>
E       #18 0x7f284109caa4 <unknown>
E       #19 0x7f2841129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 04:06:42,334 - INFO - Starting test with Chrome browser
2025-09-23 04:06:42,334 - INFO - ====== WebDriver manager ======
2025-09-23 04:06:42,404 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:06:42,502 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:06:42,584 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 04:06:44,687 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 04:08:48,160 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6b532ac0beb6e8fbfe9728d9514c9a7d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6b532ac0beb6e8fbfe9728d9514c9a7d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5f094f5940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ac2670bcba <unknown>
E       #1 0x55ac261808e0 <unknown>
E       #2 0x55ac261d2580 <unknown>
E       #3 0x55ac261d2771 <unknown>
E       #4 0x55ac26220864 <unknown>
E       #5 0x55ac261f809d <unknown>
E       #6 0x55ac2621dc63 <unknown>
E       #7 0x55ac261f7e43 <unknown>
E       #8 0x55ac261c49a8 <unknown>
E       #9 0x55ac261c5621 <unknown>
E       #10 0x55ac266cf8b8 <unknown>
E       #11 0x55ac266d35e2 <unknown>
E       #12 0x55ac266b6683 <unknown>
E       #13 0x55ac266d4135 <unknown>
E       #14 0x55ac2669b80f <unknown>
E       #15 0x55ac266f84c8 <unknown>
E       #16 0x55ac266f86a2 <unknown>
E       #17 0x55ac2670adc3 <unknown>
E       #18 0x7f52e729caa4 <unknown>
E       #19 0x7f52e7329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-23 04:08:48,229 - INFO - Starting test with Chrome browser
2025-09-23 04:08:48,229 - INFO - ====== WebDriver manager ======
2025-09-23 04:08:48,298 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:08:48,382 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-23 04:08:48,505 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-23 04:08:50,098 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-23 04:10:53,569 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250923_034539/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f1edba5cba <unknown>
#1 0x55f1ed61a8e0 <unknown>
#2 0x55f1ed66c580 <unknown>
#3 0x55f1ed66c771 <unknown>
#4 0x55f1ed6ba864 <unknown>
#5 0x55f1ed69209d <unknown>
#6 0x55f1ed6b7c63 <unknown>
#7 0x55f1ed691e43 <unknown>
#8 0x55f1ed65e9a8 <unknown>
#9 0x55f1ed65f621 <unknown>
#10 0x55f1edb698b8 <unknown>
#11 0x55f1edb6d5e2 <unknown>
#12 0x55f1edb50683 <unknown>
#13 0x55f1edb6e135 <unknown>
#14 0x55f1edb3580f <unknown>
#15 0x55f1edb924c8 <unknown>
#16 0x55f1edb926a2 <unknown>
#17 0x55f1edba4dc3 <unknown>
#18 0x7f629689caa4 <unknown>
#19 0x7f6296929c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55862d046cba <unknown>
#1 0x55862cabb8e0 <unknown>
#2 0x55862cb0d580 <unknown>
#3 0x55862cb0d771 <unknown>
#4 0x55862cb5b864 <unknown>
#5 0x55862cb3309d <unknown>
#6 0x55862cb58c63 <unknown>
#7 0x55862cb32e43 <unknown>
#8 0x55862caff9a8 <unknown>
#9 0x55862cb00621 <unknown>
#10 0x55862d00a8b8 <unknown>
#11 0x55862d00e5e2 <unknown>
#12 0x55862cff1683 <unknown>
#13 0x55862d00f135 <unknown>
#14 0x55862cfd680f <unknown>
#15 0x55862d0334c8 <unknown>
#16 0x55862d0336a2 <unknown>
#17 0x55862d045dc3 <unknown>
#18 0x7fae5e29caa4 <unknown>
#19 0x7fae5e329c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ed90f46cba <unknown>
#1 0x55ed909bb8e0 <unknown>
#2 0x55ed90a0d580 <unknown>
#3 0x55ed90a0d771 <unknown>
#4 0x55ed90a5b864 <unknown>
#5 0x55ed90a3309d <unknown>
#6 0x55ed90a58c63 <unknown>
#7 0x55ed90a32e43 <unknown>
#8 0x55ed909ff9a8 <unknown>
#9 0x55ed90a00621 <unknown>
#10 0x55ed90f0a8b8 <unknown>
#11 0x55ed90f0e5e2 <unknown>
#12 0x55ed90ef1683 <unknown>
#13 0x55ed90f0f135 <unknown>
#14 0x55ed90ed680f <unknown>
#15 0x55ed90f334c8 <unknown>
#16 0x55ed90f336a2 <unknown>
#17 0x55ed90f45dc3 <unknown>
#18 0x7f2ee989caa4 <unknown>
#19 0x7f2ee9929c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55bc644facba <unknown>
#1 0x55bc63f6f8e0 <unknown>
#2 0x55bc63fc1580 <unknown>
#3 0x55bc63fc1771 <unknown>
#4 0x55bc6400f864 <unknown>
#5 0x55bc63fe709d <unknown>
#6 0x55bc6400cc63 <unknown>
#7 0x55bc63fe6e43 <unknown>
#8 0x55bc63fb39a8 <unknown>
#9 0x55bc63fb4621 <unknown>
#10 0x55bc644be8b8 <unknown>
#11 0x55bc644c25e2 <unknown>
#12 0x55bc644a5683 <unknown>
#13 0x55bc644c3135 <unknown>
#14 0x55bc6448a80f <unknown>
#15 0x55bc644e74c8 <unknown>
#16 0x55bc644e76a2 <unknown>
#17 0x55bc644f9dc3 <unknown>
#18 0x7fa457a9caa4 <unknown>
#19 0x7fa457b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55984ac63cba <unknown>
#1 0x55984a6d88e0 <unknown>
#2 0x55984a72a580 <unknown>
#3 0x55984a72a771 <unknown>
#4 0x55984a778864 <unknown>
#5 0x55984a75009d <unknown>
#6 0x55984a775c63 <unknown>
#7 0x55984a74fe43 <unknown>
#8 0x55984a71c9a8 <unknown>
#9 0x55984a71d621 <unknown>
#10 0x55984ac278b8 <unknown>
#11 0x55984ac2b5e2 <unknown>
#12 0x55984ac0e683 <unknown>
#13 0x55984ac2c135 <unknown>
#14 0x55984abf380f <unknown>
#15 0x55984ac504c8 <unknown>
#16 0x55984ac506a2 <unknown>
#17 0x55984ac62dc3 <unknown>
#18 0x7f4621c9caa4 <unknown>
#19 0x7f4621d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55de1bf4fcba <unknown>
#1 0x55de1b9c48e0 <unknown>
#2 0x55de1ba16580 <unknown>
#3 0x55de1ba16771 <unknown>
#4 0x55de1ba64864 <unknown>
#5 0x55de1ba3c09d <unknown>
#6 0x55de1ba61c63 <unknown>
#7 0x55de1ba3be43 <unknown>
#8 0x55de1ba089a8 <unknown>
#9 0x55de1ba09621 <unknown>
#10 0x55de1bf138b8 <unknown>
#11 0x55de1bf175e2 <unknown>
#12 0x55de1befa683 <unknown>
#13 0x55de1bf18135 <unknown>
#14 0x55de1bedf80f <unknown>
#15 0x55de1bf3c4c8 <unknown>
#16 0x55de1bf3c6a2 <unknown>
#17 0x55de1bf4edc3 <unknown>
#18 0x7f36ba89caa4 <unknown>
#19 0x7f36ba929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56020b337cba <unknown>
#1 0x56020adac8e0 <unknown>
#2 0x56020adfe580 <unknown>
#3 0x56020adfe771 <unknown>
#4 0x56020ae4c864 <unknown>
#5 0x56020ae2409d <unknown>
#6 0x56020ae49c63 <unknown>
#7 0x56020ae23e43 <unknown>
#8 0x56020adf09a8 <unknown>
#9 0x56020adf1621 <unknown>
#10 0x56020b2fb8b8 <unknown>
#11 0x56020b2ff5e2 <unknown>
#12 0x56020b2e2683 <unknown>
#13 0x56020b300135 <unknown>
#14 0x56020b2c780f <unknown>
#15 0x56020b3244c8 <unknown>
#16 0x56020b3246a2 <unknown>
#17 0x56020b336dc3 <unknown>
#18 0x7fc3cf89caa4 <unknown>
#19 0x7fc3cf929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557129c0dcba <unknown>
#1 0x5571296828e0 <unknown>
#2 0x5571296d4580 <unknown>
#3 0x5571296d4771 <unknown>
#4 0x557129722864 <unknown>
#5 0x5571296fa09d <unknown>
#6 0x55712971fc63 <unknown>
#7 0x5571296f9e43 <unknown>
#8 0x5571296c69a8 <unknown>
#9 0x5571296c7621 <unknown>
#10 0x557129bd18b8 <unknown>
#11 0x557129bd55e2 <unknown>
#12 0x557129bb8683 <unknown>
#13 0x557129bd6135 <unknown>
#14 0x557129b9d80f <unknown>
#15 0x557129bfa4c8 <unknown>
#16 0x557129bfa6a2 <unknown>
#17 0x557129c0cdc3 <unknown>
#18 0x7f0d6f69caa4 <unknown>
#19 0x7f0d6f729c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55cfc763ecba <unknown>
#1 0x55cfc70b38e0 <unknown>
#2 0x55cfc7105580 <unknown>
#3 0x55cfc7105771 <unknown>
#4 0x55cfc7153864 <unknown>
#5 0x55cfc712b09d <unknown>
#6 0x55cfc7150c63 <unknown>
#7 0x55cfc712ae43 <unknown>
#8 0x55cfc70f79a8 <unknown>
#9 0x55cfc70f8621 <unknown>
#10 0x55cfc76028b8 <unknown>
#11 0x55cfc76065e2 <unknown>
#12 0x55cfc75e9683 <unknown>
#13 0x55cfc7607135 <unknown>
#14 0x55cfc75ce80f <unknown>
#15 0x55cfc762b4c8 <unknown>
#16 0x55cfc762b6a2 <unknown>
#17 0x55cfc763ddc3 <unknown>
#18 0x7f31e109caa4 <unknown>
#19 0x7f31e1129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56161613dcba <unknown>
#1 0x561615bb28e0 <unknown>
#2 0x561615c04580 <unknown>
#3 0x561615c04771 <unknown>
#4 0x561615c52864 <unknown>
#5 0x561615c2a09d <unknown>
#6 0x561615c4fc63 <unknown>
#7 0x561615c29e43 <unknown>
#8 0x561615bf69a8 <unknown>
#9 0x561615bf7621 <unknown>
#10 0x5616161018b8 <unknown>
#11 0x5616161055e2 <unknown>
#12 0x5616160e8683 <unknown>
#13 0x561616106135 <unknown>
#14 0x5616160cd80f <unknown>
#15 0x56161612a4c8 <unknown>
#16 0x56161612a6a2 <unknown>
#17 0x56161613cdc3 <unknown>
#18 0x7fb1a849caa4 <unknown>
#19 0x7fb1a8529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5623156ebcba <unknown>
#1 0x5623151608e0 <unknown>
#2 0x5623151b2580 <unknown>
#3 0x5623151b2771 <unknown>
#4 0x562315200864 <unknown>
#5 0x5623151d809d <unknown>
#6 0x5623151fdc63 <unknown>
#7 0x5623151d7e43 <unknown>
#8 0x5623151a49a8 <unknown>
#9 0x5623151a5621 <unknown>
#10 0x5623156af8b8 <unknown>
#11 0x5623156b35e2 <unknown>
#12 0x562315696683 <unknown>
#13 0x5623156b4135 <unknown>
#14 0x56231567b80f <unknown>
#15 0x5623156d84c8 <unknown>
#16 0x5623156d86a2 <unknown>
#17 0x5623156eadc3 <unknown>
#18 0x7f284109caa4 <unknown>
#19 0x7f2841129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ac2670bcba <unknown>
#1 0x55ac261808e0 <unknown>
#2 0x55ac261d2580 <unknown>
#3 0x55ac261d2771 <unknown>
#4 0x55ac26220864 <unknown>
#5 0x55ac261f809d <unknown>
#6 0x55ac2621dc63 <unknown>
#7 0x55ac261f7e43 <unknown>
#8 0x55ac261c49a8 <unknown>
#9 0x55ac261c5621 <unknown>
#10 0x55ac266cf8b8 <unknown>
#11 0x55ac266d35e2 <unknown>
#12 0x55ac266b6683 <unknown>
#13 0x55ac266d4135 <unknown>
#14 0x55ac2669b80f <unknown>
#15 0x55ac266f84c8 <unknown>
#16 0x55ac266f86a2 <unknown>
#17 0x55ac2670adc3 <unknown>
#18 0x7f52e729caa4 <unknown>
#19 0x7f52e7329c3c <unknown>
================== 12 failed, 7 passed in 1532.37s (0:25:32) ===================
--------------------------------------------
Test Run Finished: 2025-09-23 04:11:11
Duration: 1535 seconds
Status: FAILURE
Exit Code: 1
============================================
