========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-24 03:46:11
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'Faker': '37.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: Faker-37.8.0, rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f1780c53fbeb76f053e0c02906daf6d9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f1780c53fbeb76f053e0c02906daf6d9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b646b0900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562676daefba <unknown>
E       #1 0x5626768336d0 <unknown>
E       #2 0x5626768852aa <unknown>
E       #3 0x562676885541 <unknown>
E       #4 0x5626768d36c4 <unknown>
E       #5 0x5626768aae5d <unknown>
E       #6 0x5626768d0b54 <unknown>
E       #7 0x5626768aac03 <unknown>
E       #8 0x5626768777a8 <unknown>
E       #9 0x562676878421 <unknown>
E       #10 0x562676d73b28 <unknown>
E       #11 0x562676d7787f <unknown>
E       #12 0x562676d5bc49 <unknown>
E       #13 0x562676d78405 <unknown>
E       #14 0x562676d414ff <unknown>
E       #15 0x562676d9c258 <unknown>
E       #16 0x562676d9c432 <unknown>
E       #17 0x562676dadfa3 <unknown>
E       #18 0x7fd32489caa4 <unknown>
E       #19 0x7fd324929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 03:46:14,544 - INFO - Test data loaded successfully.
2025-09-24 03:46:14,545 - INFO - Starting test with Chrome browser
2025-09-24 03:46:14,545 - INFO - ====== WebDriver manager ======
2025-09-24 03:46:16,736 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:46:16,777 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:46:16,808 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-09-24 03:46:16,808 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:46:16,906 - INFO - WebDriver version 140.0.7339.207 selected
2025-09-24 03:46:16,910 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-24 03:46:16,911 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-24 03:46:16,955 - INFO - Driver downloading response is 200
2025-09-24 03:46:17,009 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:46:17,155 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-09-24 03:46:33,825 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-24 03:46:33,826 - INFO - Starting the test case for valid credentials
2025-09-24 03:46:34,291 - INFO - User enters the email-id
2025-09-24 03:46:35,938 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 03:48:37,601 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="edac70bae7b333d6edddd25f598c3710")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="edac70bae7b333d6edddd25f598c3710")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b644458a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x556653316fba <unknown>
E       #1 0x556652d9b6d0 <unknown>
E       #2 0x556652ded2aa <unknown>
E       #3 0x556652ded541 <unknown>
E       #4 0x556652e3b6c4 <unknown>
E       #5 0x556652e12e5d <unknown>
E       #6 0x556652e38b54 <unknown>
E       #7 0x556652e12c03 <unknown>
E       #8 0x556652ddf7a8 <unknown>
E       #9 0x556652de0421 <unknown>
E       #10 0x5566532dbb28 <unknown>
E       #11 0x5566532df87f <unknown>
E       #12 0x5566532c3c49 <unknown>
E       #13 0x5566532e0405 <unknown>
E       #14 0x5566532a94ff <unknown>
E       #15 0x556653304258 <unknown>
E       #16 0x556653304432 <unknown>
E       #17 0x556653315fa3 <unknown>
E       #18 0x7f413109caa4 <unknown>
E       #19 0x7f4131129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 03:48:37,885 - INFO - Starting test with Chrome browser
2025-09-24 03:48:37,886 - INFO - ====== WebDriver manager ======
2025-09-24 03:48:37,950 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:48:37,985 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:48:38,065 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 03:48:39,511 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-24 03:48:39,511 - INFO - Starting the test case for valid credentials
2025-09-24 03:48:39,655 - INFO - User enters the email-id
2025-09-24 03:48:41,288 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 03:50:42,945 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8529f83af8f95e45410d985e6979b0f1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8529f83af8f95e45410d985e6979b0f1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b65f5a3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55cb8d027fba <unknown>
E       #1 0x55cb8caac6d0 <unknown>
E       #2 0x55cb8cafe2aa <unknown>
E       #3 0x55cb8cafe541 <unknown>
E       #4 0x55cb8cb4c6c4 <unknown>
E       #5 0x55cb8cb23e5d <unknown>
E       #6 0x55cb8cb49b54 <unknown>
E       #7 0x55cb8cb23c03 <unknown>
E       #8 0x55cb8caf07a8 <unknown>
E       #9 0x55cb8caf1421 <unknown>
E       #10 0x55cb8cfecb28 <unknown>
E       #11 0x55cb8cff087f <unknown>
E       #12 0x55cb8cfd4c49 <unknown>
E       #13 0x55cb8cff1405 <unknown>
E       #14 0x55cb8cfba4ff <unknown>
E       #15 0x55cb8d015258 <unknown>
E       #16 0x55cb8d015432 <unknown>
E       #17 0x55cb8d026fa3 <unknown>
E       #18 0x7f8c9d89caa4 <unknown>
E       #19 0x7f8c9d929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 03:50:43,010 - INFO - Starting test with Chrome browser
2025-09-24 03:50:43,010 - INFO - ====== WebDriver manager ======
2025-09-24 03:50:43,074 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:50:43,107 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:50:43,140 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 03:50:44,504 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-24 03:50:44,505 - INFO - Starting the test case for valid credentials
2025-09-24 03:50:44,649 - INFO - User enters the email-id
2025-09-24 03:50:46,327 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 03:52:48,036 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="888aafe15601974214456a6e74f60e5b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="888aafe15601974214456a6e74f60e5b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b644456c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55da6f543fba <unknown>
E       #1 0x55da6efc86d0 <unknown>
E       #2 0x55da6f01a2aa <unknown>
E       #3 0x55da6f01a541 <unknown>
E       #4 0x55da6f0686c4 <unknown>
E       #5 0x55da6f03fe5d <unknown>
E       #6 0x55da6f065b54 <unknown>
E       #7 0x55da6f03fc03 <unknown>
E       #8 0x55da6f00c7a8 <unknown>
E       #9 0x55da6f00d421 <unknown>
E       #10 0x55da6f508b28 <unknown>
E       #11 0x55da6f50c87f <unknown>
E       #12 0x55da6f4f0c49 <unknown>
E       #13 0x55da6f50d405 <unknown>
E       #14 0x55da6f4d64ff <unknown>
E       #15 0x55da6f531258 <unknown>
E       #16 0x55da6f531432 <unknown>
E       #17 0x55da6f542fa3 <unknown>
E       #18 0x7f27bf49caa4 <unknown>
E       #19 0x7f27bf529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 03:52:48,103 - INFO - Starting test with Chrome browser
2025-09-24 03:52:48,103 - INFO - ====== WebDriver manager ======
2025-09-24 03:52:48,168 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:52:48,202 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:52:48,234 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 03:52:49,650 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-24 03:52:49,650 - INFO - Starting the test case for valid credentials
2025-09-24 03:52:49,814 - INFO - User enters the email-id
2025-09-24 03:52:51,458 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 03:54:53,118 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6bb06584dcd7e81be53c74f348bcc84c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6bb06584dcd7e81be53c74f348bcc84c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b64445f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559047c77fba <unknown>
E       #1 0x5590476fc6d0 <unknown>
E       #2 0x55904774e2aa <unknown>
E       #3 0x55904774e541 <unknown>
E       #4 0x55904779c6c4 <unknown>
E       #5 0x559047773e5d <unknown>
E       #6 0x559047799b54 <unknown>
E       #7 0x559047773c03 <unknown>
E       #8 0x5590477407a8 <unknown>
E       #9 0x559047741421 <unknown>
E       #10 0x559047c3cb28 <unknown>
E       #11 0x559047c4087f <unknown>
E       #12 0x559047c24c49 <unknown>
E       #13 0x559047c41405 <unknown>
E       #14 0x559047c0a4ff <unknown>
E       #15 0x559047c65258 <unknown>
E       #16 0x559047c65432 <unknown>
E       #17 0x559047c76fa3 <unknown>
E       #18 0x7f587ca9caa4 <unknown>
E       #19 0x7f587cb29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 03:54:53,184 - INFO - Starting test with Chrome browser
2025-09-24 03:54:53,184 - INFO - ====== WebDriver manager ======
2025-09-24 03:54:53,248 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:54:53,288 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:54:53,320 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 03:54:54,793 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 03:56:56,599 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0b7779df3ec368bce7e56828ea6035b8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0b7779df3ec368bce7e56828ea6035b8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b64446020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55569b20cfba <unknown>
E       #1 0x55569ac916d0 <unknown>
E       #2 0x55569ace32aa <unknown>
E       #3 0x55569ace3541 <unknown>
E       #4 0x55569ad316c4 <unknown>
E       #5 0x55569ad08e5d <unknown>
E       #6 0x55569ad2eb54 <unknown>
E       #7 0x55569ad08c03 <unknown>
E       #8 0x55569acd57a8 <unknown>
E       #9 0x55569acd6421 <unknown>
E       #10 0x55569b1d1b28 <unknown>
E       #11 0x55569b1d587f <unknown>
E       #12 0x55569b1b9c49 <unknown>
E       #13 0x55569b1d6405 <unknown>
E       #14 0x55569b19f4ff <unknown>
E       #15 0x55569b1fa258 <unknown>
E       #16 0x55569b1fa432 <unknown>
E       #17 0x55569b20bfa3 <unknown>
E       #18 0x7fb646c9caa4 <unknown>
E       #19 0x7fb646d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 03:56:56,698 - INFO - Starting test with Chrome browser
2025-09-24 03:56:56,698 - INFO - ====== WebDriver manager ======
2025-09-24 03:56:56,762 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:56:56,803 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:56:56,834 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 03:56:58,204 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 03:59:00,000 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="aad8d626723e8eedada8f1b8ab70c201")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="aad8d626723e8eedada8f1b8ab70c201")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b64445da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5567552cdfba <unknown>
E       #1 0x556754d526d0 <unknown>
E       #2 0x556754da42aa <unknown>
E       #3 0x556754da4541 <unknown>
E       #4 0x556754df26c4 <unknown>
E       #5 0x556754dc9e5d <unknown>
E       #6 0x556754defb54 <unknown>
E       #7 0x556754dc9c03 <unknown>
E       #8 0x556754d967a8 <unknown>
E       #9 0x556754d97421 <unknown>
E       #10 0x556755292b28 <unknown>
E       #11 0x55675529687f <unknown>
E       #12 0x55675527ac49 <unknown>
E       #13 0x556755297405 <unknown>
E       #14 0x5567552604ff <unknown>
E       #15 0x5567552bb258 <unknown>
E       #16 0x5567552bb432 <unknown>
E       #17 0x5567552ccfa3 <unknown>
E       #18 0x7fd7dac9caa4 <unknown>
E       #19 0x7fd7dad29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 03:59:00,065 - INFO - Starting test with Chrome browser
2025-09-24 03:59:00,065 - INFO - ====== WebDriver manager ======
2025-09-24 03:59:00,130 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:59:00,181 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 03:59:00,213 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 03:59:01,593 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 04:01:03,339 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="48d3e9aa0a159eb8df0095760283798b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="48d3e9aa0a159eb8df0095760283798b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b64446840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a123d2bfba <unknown>
E       #1 0x55a1237b06d0 <unknown>
E       #2 0x55a1238022aa <unknown>
E       #3 0x55a123802541 <unknown>
E       #4 0x55a1238506c4 <unknown>
E       #5 0x55a123827e5d <unknown>
E       #6 0x55a12384db54 <unknown>
E       #7 0x55a123827c03 <unknown>
E       #8 0x55a1237f47a8 <unknown>
E       #9 0x55a1237f5421 <unknown>
E       #10 0x55a123cf0b28 <unknown>
E       #11 0x55a123cf487f <unknown>
E       #12 0x55a123cd8c49 <unknown>
E       #13 0x55a123cf5405 <unknown>
E       #14 0x55a123cbe4ff <unknown>
E       #15 0x55a123d19258 <unknown>
E       #16 0x55a123d19432 <unknown>
E       #17 0x55a123d2afa3 <unknown>
E       #18 0x7f6670c9caa4 <unknown>
E       #19 0x7f6670d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 04:01:03,404 - INFO - Starting test with Chrome browser
2025-09-24 04:01:03,404 - INFO - ====== WebDriver manager ======
2025-09-24 04:01:03,468 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:01:03,503 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:01:03,535 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 04:01:04,878 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 04:03:06,644 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f7742842441882b13cc06fba4709dd1a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f7742842441882b13cc06fba4709dd1a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b64446b60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5600f5093fba <unknown>
E       #1 0x5600f4b186d0 <unknown>
E       #2 0x5600f4b6a2aa <unknown>
E       #3 0x5600f4b6a541 <unknown>
E       #4 0x5600f4bb86c4 <unknown>
E       #5 0x5600f4b8fe5d <unknown>
E       #6 0x5600f4bb5b54 <unknown>
E       #7 0x5600f4b8fc03 <unknown>
E       #8 0x5600f4b5c7a8 <unknown>
E       #9 0x5600f4b5d421 <unknown>
E       #10 0x5600f5058b28 <unknown>
E       #11 0x5600f505c87f <unknown>
E       #12 0x5600f5040c49 <unknown>
E       #13 0x5600f505d405 <unknown>
E       #14 0x5600f50264ff <unknown>
E       #15 0x5600f5081258 <unknown>
E       #16 0x5600f5081432 <unknown>
E       #17 0x5600f5092fa3 <unknown>
E       #18 0x7f127609caa4 <unknown>
E       #19 0x7f1276129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 04:03:06,709 - INFO - Starting test with Chrome browser
2025-09-24 04:03:06,709 - INFO - ====== WebDriver manager ======
2025-09-24 04:03:06,774 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:03:06,809 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:03:06,841 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 04:03:08,162 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 04:05:11,534 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7e6e44c19cd9235336a40fc8e94cbae4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7e6e44c19cd9235336a40fc8e94cbae4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b644468e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c05f342fba <unknown>
E       #1 0x55c05edc76d0 <unknown>
E       #2 0x55c05ee192aa <unknown>
E       #3 0x55c05ee19541 <unknown>
E       #4 0x55c05ee676c4 <unknown>
E       #5 0x55c05ee3ee5d <unknown>
E       #6 0x55c05ee64b54 <unknown>
E       #7 0x55c05ee3ec03 <unknown>
E       #8 0x55c05ee0b7a8 <unknown>
E       #9 0x55c05ee0c421 <unknown>
E       #10 0x55c05f307b28 <unknown>
E       #11 0x55c05f30b87f <unknown>
E       #12 0x55c05f2efc49 <unknown>
E       #13 0x55c05f30c405 <unknown>
E       #14 0x55c05f2d54ff <unknown>
E       #15 0x55c05f330258 <unknown>
E       #16 0x55c05f330432 <unknown>
E       #17 0x55c05f341fa3 <unknown>
E       #18 0x7f44a289caa4 <unknown>
E       #19 0x7f44a2929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 04:05:11,599 - INFO - Starting test with Chrome browser
2025-09-24 04:05:11,599 - INFO - ====== WebDriver manager ======
2025-09-24 04:05:11,664 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:05:11,699 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:05:11,731 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 04:05:13,140 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 04:07:16,641 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5a535864fd8c858b1752e17157ec838d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5a535864fd8c858b1752e17157ec838d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b64445da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5646faa0efba <unknown>
E       #1 0x5646fa4936d0 <unknown>
E       #2 0x5646fa4e52aa <unknown>
E       #3 0x5646fa4e5541 <unknown>
E       #4 0x5646fa5336c4 <unknown>
E       #5 0x5646fa50ae5d <unknown>
E       #6 0x5646fa530b54 <unknown>
E       #7 0x5646fa50ac03 <unknown>
E       #8 0x5646fa4d77a8 <unknown>
E       #9 0x5646fa4d8421 <unknown>
E       #10 0x5646fa9d3b28 <unknown>
E       #11 0x5646fa9d787f <unknown>
E       #12 0x5646fa9bbc49 <unknown>
E       #13 0x5646fa9d8405 <unknown>
E       #14 0x5646fa9a14ff <unknown>
E       #15 0x5646fa9fc258 <unknown>
E       #16 0x5646fa9fc432 <unknown>
E       #17 0x5646faa0dfa3 <unknown>
E       #18 0x7f338b69caa4 <unknown>
E       #19 0x7f338b729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 04:07:16,706 - INFO - Starting test with Chrome browser
2025-09-24 04:07:16,706 - INFO - ====== WebDriver manager ======
2025-09-24 04:07:16,770 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:07:16,805 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:07:16,838 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 04:07:18,658 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 04:09:22,143 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="46ed5a10820553f9460d167034055e94")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="46ed5a10820553f9460d167034055e94")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f5b64445940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55805f391fba <unknown>
E       #1 0x55805ee166d0 <unknown>
E       #2 0x55805ee682aa <unknown>
E       #3 0x55805ee68541 <unknown>
E       #4 0x55805eeb66c4 <unknown>
E       #5 0x55805ee8de5d <unknown>
E       #6 0x55805eeb3b54 <unknown>
E       #7 0x55805ee8dc03 <unknown>
E       #8 0x55805ee5a7a8 <unknown>
E       #9 0x55805ee5b421 <unknown>
E       #10 0x55805f356b28 <unknown>
E       #11 0x55805f35a87f <unknown>
E       #12 0x55805f33ec49 <unknown>
E       #13 0x55805f35b405 <unknown>
E       #14 0x55805f3244ff <unknown>
E       #15 0x55805f37f258 <unknown>
E       #16 0x55805f37f432 <unknown>
E       #17 0x55805f390fa3 <unknown>
E       #18 0x7fe58809caa4 <unknown>
E       #19 0x7fe588129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-24 04:09:22,209 - INFO - Starting test with Chrome browser
2025-09-24 04:09:22,209 - INFO - ====== WebDriver manager ======
2025-09-24 04:09:22,276 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:09:22,311 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-24 04:09:22,345 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-24 04:09:23,791 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-24 04:11:27,337 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250924_034614/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562676daefba <unknown>
#1 0x5626768336d0 <unknown>
#2 0x5626768852aa <unknown>
#3 0x562676885541 <unknown>
#4 0x5626768d36c4 <unknown>
#5 0x5626768aae5d <unknown>
#6 0x5626768d0b54 <unknown>
#7 0x5626768aac03 <unknown>
#8 0x5626768777a8 <unknown>
#9 0x562676878421 <unknown>
#10 0x562676d73b28 <unknown>
#11 0x562676d7787f <unknown>
#12 0x562676d5bc49 <unknown>
#13 0x562676d78405 <unknown>
#14 0x562676d414ff <unknown>
#15 0x562676d9c258 <unknown>
#16 0x562676d9c432 <unknown>
#17 0x562676dadfa3 <unknown>
#18 0x7fd32489caa4 <unknown>
#19 0x7fd324929c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x556653316fba <unknown>
#1 0x556652d9b6d0 <unknown>
#2 0x556652ded2aa <unknown>
#3 0x556652ded541 <unknown>
#4 0x556652e3b6c4 <unknown>
#5 0x556652e12e5d <unknown>
#6 0x556652e38b54 <unknown>
#7 0x556652e12c03 <unknown>
#8 0x556652ddf7a8 <unknown>
#9 0x556652de0421 <unknown>
#10 0x5566532dbb28 <unknown>
#11 0x5566532df87f <unknown>
#12 0x5566532c3c49 <unknown>
#13 0x5566532e0405 <unknown>
#14 0x5566532a94ff <unknown>
#15 0x556653304258 <unknown>
#16 0x556653304432 <unknown>
#17 0x556653315fa3 <unknown>
#18 0x7f413109caa4 <unknown>
#19 0x7f4131129c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55cb8d027fba <unknown>
#1 0x55cb8caac6d0 <unknown>
#2 0x55cb8cafe2aa <unknown>
#3 0x55cb8cafe541 <unknown>
#4 0x55cb8cb4c6c4 <unknown>
#5 0x55cb8cb23e5d <unknown>
#6 0x55cb8cb49b54 <unknown>
#7 0x55cb8cb23c03 <unknown>
#8 0x55cb8caf07a8 <unknown>
#9 0x55cb8caf1421 <unknown>
#10 0x55cb8cfecb28 <unknown>
#11 0x55cb8cff087f <unknown>
#12 0x55cb8cfd4c49 <unknown>
#13 0x55cb8cff1405 <unknown>
#14 0x55cb8cfba4ff <unknown>
#15 0x55cb8d015258 <unknown>
#16 0x55cb8d015432 <unknown>
#17 0x55cb8d026fa3 <unknown>
#18 0x7f8c9d89caa4 <unknown>
#19 0x7f8c9d929c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55da6f543fba <unknown>
#1 0x55da6efc86d0 <unknown>
#2 0x55da6f01a2aa <unknown>
#3 0x55da6f01a541 <unknown>
#4 0x55da6f0686c4 <unknown>
#5 0x55da6f03fe5d <unknown>
#6 0x55da6f065b54 <unknown>
#7 0x55da6f03fc03 <unknown>
#8 0x55da6f00c7a8 <unknown>
#9 0x55da6f00d421 <unknown>
#10 0x55da6f508b28 <unknown>
#11 0x55da6f50c87f <unknown>
#12 0x55da6f4f0c49 <unknown>
#13 0x55da6f50d405 <unknown>
#14 0x55da6f4d64ff <unknown>
#15 0x55da6f531258 <unknown>
#16 0x55da6f531432 <unknown>
#17 0x55da6f542fa3 <unknown>
#18 0x7f27bf49caa4 <unknown>
#19 0x7f27bf529c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559047c77fba <unknown>
#1 0x5590476fc6d0 <unknown>
#2 0x55904774e2aa <unknown>
#3 0x55904774e541 <unknown>
#4 0x55904779c6c4 <unknown>
#5 0x559047773e5d <unknown>
#6 0x559047799b54 <unknown>
#7 0x559047773c03 <unknown>
#8 0x5590477407a8 <unknown>
#9 0x559047741421 <unknown>
#10 0x559047c3cb28 <unknown>
#11 0x559047c4087f <unknown>
#12 0x559047c24c49 <unknown>
#13 0x559047c41405 <unknown>
#14 0x559047c0a4ff <unknown>
#15 0x559047c65258 <unknown>
#16 0x559047c65432 <unknown>
#17 0x559047c76fa3 <unknown>
#18 0x7f587ca9caa4 <unknown>
#19 0x7f587cb29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55569b20cfba <unknown>
#1 0x55569ac916d0 <unknown>
#2 0x55569ace32aa <unknown>
#3 0x55569ace3541 <unknown>
#4 0x55569ad316c4 <unknown>
#5 0x55569ad08e5d <unknown>
#6 0x55569ad2eb54 <unknown>
#7 0x55569ad08c03 <unknown>
#8 0x55569acd57a8 <unknown>
#9 0x55569acd6421 <unknown>
#10 0x55569b1d1b28 <unknown>
#11 0x55569b1d587f <unknown>
#12 0x55569b1b9c49 <unknown>
#13 0x55569b1d6405 <unknown>
#14 0x55569b19f4ff <unknown>
#15 0x55569b1fa258 <unknown>
#16 0x55569b1fa432 <unknown>
#17 0x55569b20bfa3 <unknown>
#18 0x7fb646c9caa4 <unknown>
#19 0x7fb646d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5567552cdfba <unknown>
#1 0x556754d526d0 <unknown>
#2 0x556754da42aa <unknown>
#3 0x556754da4541 <unknown>
#4 0x556754df26c4 <unknown>
#5 0x556754dc9e5d <unknown>
#6 0x556754defb54 <unknown>
#7 0x556754dc9c03 <unknown>
#8 0x556754d967a8 <unknown>
#9 0x556754d97421 <unknown>
#10 0x556755292b28 <unknown>
#11 0x55675529687f <unknown>
#12 0x55675527ac49 <unknown>
#13 0x556755297405 <unknown>
#14 0x5567552604ff <unknown>
#15 0x5567552bb258 <unknown>
#16 0x5567552bb432 <unknown>
#17 0x5567552ccfa3 <unknown>
#18 0x7fd7dac9caa4 <unknown>
#19 0x7fd7dad29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a123d2bfba <unknown>
#1 0x55a1237b06d0 <unknown>
#2 0x55a1238022aa <unknown>
#3 0x55a123802541 <unknown>
#4 0x55a1238506c4 <unknown>
#5 0x55a123827e5d <unknown>
#6 0x55a12384db54 <unknown>
#7 0x55a123827c03 <unknown>
#8 0x55a1237f47a8 <unknown>
#9 0x55a1237f5421 <unknown>
#10 0x55a123cf0b28 <unknown>
#11 0x55a123cf487f <unknown>
#12 0x55a123cd8c49 <unknown>
#13 0x55a123cf5405 <unknown>
#14 0x55a123cbe4ff <unknown>
#15 0x55a123d19258 <unknown>
#16 0x55a123d19432 <unknown>
#17 0x55a123d2afa3 <unknown>
#18 0x7f6670c9caa4 <unknown>
#19 0x7f6670d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5600f5093fba <unknown>
#1 0x5600f4b186d0 <unknown>
#2 0x5600f4b6a2aa <unknown>
#3 0x5600f4b6a541 <unknown>
#4 0x5600f4bb86c4 <unknown>
#5 0x5600f4b8fe5d <unknown>
#6 0x5600f4bb5b54 <unknown>
#7 0x5600f4b8fc03 <unknown>
#8 0x5600f4b5c7a8 <unknown>
#9 0x5600f4b5d421 <unknown>
#10 0x5600f5058b28 <unknown>
#11 0x5600f505c87f <unknown>
#12 0x5600f5040c49 <unknown>
#13 0x5600f505d405 <unknown>
#14 0x5600f50264ff <unknown>
#15 0x5600f5081258 <unknown>
#16 0x5600f5081432 <unknown>
#17 0x5600f5092fa3 <unknown>
#18 0x7f127609caa4 <unknown>
#19 0x7f1276129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c05f342fba <unknown>
#1 0x55c05edc76d0 <unknown>
#2 0x55c05ee192aa <unknown>
#3 0x55c05ee19541 <unknown>
#4 0x55c05ee676c4 <unknown>
#5 0x55c05ee3ee5d <unknown>
#6 0x55c05ee64b54 <unknown>
#7 0x55c05ee3ec03 <unknown>
#8 0x55c05ee0b7a8 <unknown>
#9 0x55c05ee0c421 <unknown>
#10 0x55c05f307b28 <unknown>
#11 0x55c05f30b87f <unknown>
#12 0x55c05f2efc49 <unknown>
#13 0x55c05f30c405 <unknown>
#14 0x55c05f2d54ff <unknown>
#15 0x55c05f330258 <unknown>
#16 0x55c05f330432 <unknown>
#17 0x55c05f341fa3 <unknown>
#18 0x7f44a289caa4 <unknown>
#19 0x7f44a2929c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5646faa0efba <unknown>
#1 0x5646fa4936d0 <unknown>
#2 0x5646fa4e52aa <unknown>
#3 0x5646fa4e5541 <unknown>
#4 0x5646fa5336c4 <unknown>
#5 0x5646fa50ae5d <unknown>
#6 0x5646fa530b54 <unknown>
#7 0x5646fa50ac03 <unknown>
#8 0x5646fa4d77a8 <unknown>
#9 0x5646fa4d8421 <unknown>
#10 0x5646fa9d3b28 <unknown>
#11 0x5646fa9d787f <unknown>
#12 0x5646fa9bbc49 <unknown>
#13 0x5646fa9d8405 <unknown>
#14 0x5646fa9a14ff <unknown>
#15 0x5646fa9fc258 <unknown>
#16 0x5646fa9fc432 <unknown>
#17 0x5646faa0dfa3 <unknown>
#18 0x7f338b69caa4 <unknown>
#19 0x7f338b729c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55805f391fba <unknown>
#1 0x55805ee166d0 <unknown>
#2 0x55805ee682aa <unknown>
#3 0x55805ee68541 <unknown>
#4 0x55805eeb66c4 <unknown>
#5 0x55805ee8de5d <unknown>
#6 0x55805eeb3b54 <unknown>
#7 0x55805ee8dc03 <unknown>
#8 0x55805ee5a7a8 <unknown>
#9 0x55805ee5b421 <unknown>
#10 0x55805f356b28 <unknown>
#11 0x55805f35a87f <unknown>
#12 0x55805f33ec49 <unknown>
#13 0x55805f35b405 <unknown>
#14 0x55805f3244ff <unknown>
#15 0x55805f37f258 <unknown>
#16 0x55805f37f432 <unknown>
#17 0x55805f390fa3 <unknown>
#18 0x7fe58809caa4 <unknown>
#19 0x7fe588129c3c <unknown>
================== 12 failed, 7 passed in 1526.83s (0:25:26) ===================
--------------------------------------------
Test Run Finished: 2025-09-24 04:11:41
Duration: 1530 seconds
Status: FAILURE
Exit Code: 1
============================================
