========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-15 04:11:55
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.5/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.5', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'rerunfailures': '15.1', 'Faker': '37.4.0', 'xdist': '3.8.0', 'html': '4.1.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: rerunfailures-15.1, Faker-37.4.0, xdist-3.8.0, html-4.1.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b5d6cc8edd7842e13ec56ae85c66b0d4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf95985940>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x561d0ab28556 \\u003Cunknown>\\n#18 0x7f2c1069caa4 \\u003Cunknown>\\n#19 0x7f2c10729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x561d0ab2923a <unknown>
E       #1 0x561d0a5d3ab0 <unknown>
E       #2 0x561d0a5da748 <unknown>
E       #3 0x561d0a5dd2c7 <unknown>
E       #4 0x561d0a671fde <unknown>
E       #5 0x561d0a64b1a2 <unknown>
E       #6 0x561d0a670fee <unknown>
E       #7 0x561d0a64af73 <unknown>
E       #8 0x561d0a617aeb <unknown>
E       #9 0x561d0a618751 <unknown>
E       #10 0x561d0aaedb4b <unknown>
E       #11 0x561d0aaf1929 <unknown>
E       #12 0x561d0aad4929 <unknown>
E       #13 0x561d0aaf24e8 <unknown>
E       #14 0x561d0aab90df <unknown>
E       #15 0x561d0ab168e8 <unknown>
E       #16 0x561d0ab16ac6 <unknown>
E       #17 0x561d0ab28556 <unknown>
E       #18 0x7f2c1069caa4 <unknown>
E       #19 0x7f2c10729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:11:57,386 - INFO - Test data loaded successfully.
2025-07-15 04:11:57,387 - INFO - Starting test with Chrome browser
2025-07-15 04:11:57,387 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:00,468 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:00,524 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:00,535 - INFO - There is no [linux64] chromedriver "138.0.7204.94" for browser google-chrome "138.0.7204" in cache
2025-07-15 04:12:00,535 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:00,579 - INFO - WebDriver version 138.0.7204.94 selected
2025-07-15 04:12:00,583 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
2025-07-15 04:12:00,583 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
2025-07-15 04:12:00,604 - INFO - Driver downloading response is 200
2025-07-15 04:12:00,667 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:00,793 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94]
2025-07-15 04:12:08,148 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "138.0.7204.94" for browser google-chrome "138.0.7204" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 138.0.7204.94 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-15 04:12:08,149 - INFO - Starting the test case for valid credentials
2025-07-15 04:12:08,548 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:09,576 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="366d4967afca660caaefbc3674fb4d16")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf959b8f50>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x561e18264556 \\u003Cunknown>\\n#18 0x7f91bcc9caa4 \\u003Cunknown>\\n#19 0x7f91bcd29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x561e1826523a <unknown>
E       #1 0x561e17d0fab0 <unknown>
E       #2 0x561e17d16748 <unknown>
E       #3 0x561e17d192c7 <unknown>
E       #4 0x561e17dadfde <unknown>
E       #5 0x561e17d871a2 <unknown>
E       #6 0x561e17dacfee <unknown>
E       #7 0x561e17d86f73 <unknown>
E       #8 0x561e17d53aeb <unknown>
E       #9 0x561e17d54751 <unknown>
E       #10 0x561e18229b4b <unknown>
E       #11 0x561e1822d929 <unknown>
E       #12 0x561e18210929 <unknown>
E       #13 0x561e1822e4e8 <unknown>
E       #14 0x561e181f50df <unknown>
E       #15 0x561e182528e8 <unknown>
E       #16 0x561e18252ac6 <unknown>
E       #17 0x561e18264556 <unknown>
E       #18 0x7f91bcc9caa4 <unknown>
E       #19 0x7f91bcd29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:09,717 - INFO - Starting test with Chrome browser
2025-07-15 04:12:09,718 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:09,834 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:09,845 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:09,871 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:12,088 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-15 04:12:12,089 - INFO - Starting the test case for valid credentials
2025-07-15 04:12:12,341 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:13,280 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9007adf37dff3aa95843df2bb23dc9c2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf959e8690>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5609609b1556 \\u003Cunknown>\\n#18 0x7f4b4ca9caa4 \\u003Cunknown>\\n#19 0x7f4b4cb29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x5609609b223a <unknown>
E       #1 0x56096045cab0 <unknown>
E       #2 0x560960463748 <unknown>
E       #3 0x5609604662c7 <unknown>
E       #4 0x5609604fafde <unknown>
E       #5 0x5609604d41a2 <unknown>
E       #6 0x5609604f9fee <unknown>
E       #7 0x5609604d3f73 <unknown>
E       #8 0x5609604a0aeb <unknown>
E       #9 0x5609604a1751 <unknown>
E       #10 0x560960976b4b <unknown>
E       #11 0x56096097a929 <unknown>
E       #12 0x56096095d929 <unknown>
E       #13 0x56096097b4e8 <unknown>
E       #14 0x5609609420df <unknown>
E       #15 0x56096099f8e8 <unknown>
E       #16 0x56096099fac6 <unknown>
E       #17 0x5609609b1556 <unknown>
E       #18 0x7f4b4ca9caa4 <unknown>
E       #19 0x7f4b4cb29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:13,383 - INFO - Starting test with Chrome browser
2025-07-15 04:12:13,383 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:13,502 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:13,528 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:13,545 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:15,612 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-15 04:12:15,613 - INFO - Starting the test case for valid credentials
2025-07-15 04:12:15,859 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:16,770 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bbca265131a739581bb781aa810ea767")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf95a4c050>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x560de852f556 \\u003Cunknown>\\n#18 0x7fa0e3a9caa4 \\u003Cunknown>\\n#19 0x7fa0e3b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x560de853023a <unknown>
E       #1 0x560de7fdaab0 <unknown>
E       #2 0x560de7fe1748 <unknown>
E       #3 0x560de7fe42c7 <unknown>
E       #4 0x560de8078fde <unknown>
E       #5 0x560de80521a2 <unknown>
E       #6 0x560de8077fee <unknown>
E       #7 0x560de8051f73 <unknown>
E       #8 0x560de801eaeb <unknown>
E       #9 0x560de801f751 <unknown>
E       #10 0x560de84f4b4b <unknown>
E       #11 0x560de84f8929 <unknown>
E       #12 0x560de84db929 <unknown>
E       #13 0x560de84f94e8 <unknown>
E       #14 0x560de84c00df <unknown>
E       #15 0x560de851d8e8 <unknown>
E       #16 0x560de851dac6 <unknown>
E       #17 0x560de852f556 <unknown>
E       #18 0x7fa0e3a9caa4 <unknown>
E       #19 0x7fa0e3b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:16,869 - INFO - Starting test with Chrome browser
2025-07-15 04:12:16,870 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:16,987 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:16,998 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:17,014 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:19,157 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-15 04:12:19,157 - INFO - Starting the test case for valid credentials
2025-07-15 04:12:19,578 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:20,515 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b9e5273967dcee903cd41e515d41b857")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf95a4cd60>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5605579ff556 \\u003Cunknown>\\n#18 0x7efda2e9caa4 \\u003Cunknown>\\n#19 0x7efda2f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x560557a0023a <unknown>
E       #1 0x5605574aaab0 <unknown>
E       #2 0x5605574b1748 <unknown>
E       #3 0x5605574b42c7 <unknown>
E       #4 0x560557548fde <unknown>
E       #5 0x5605575221a2 <unknown>
E       #6 0x560557547fee <unknown>
E       #7 0x560557521f73 <unknown>
E       #8 0x5605574eeaeb <unknown>
E       #9 0x5605574ef751 <unknown>
E       #10 0x5605579c4b4b <unknown>
E       #11 0x5605579c8929 <unknown>
E       #12 0x5605579ab929 <unknown>
E       #13 0x5605579c94e8 <unknown>
E       #14 0x5605579900df <unknown>
E       #15 0x5605579ed8e8 <unknown>
E       #16 0x5605579edac6 <unknown>
E       #17 0x5605579ff556 <unknown>
E       #18 0x7efda2e9caa4 <unknown>
E       #19 0x7efda2f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:20,620 - INFO - Starting test with Chrome browser
2025-07-15 04:12:20,620 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:20,739 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:20,749 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:20,759 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:22,933 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:23,406 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="226a0cd4c4ba9dbe679fa20a2c4c63d7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf959ae450>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55a984914556 \\u003Cunknown>\\n#18 0x7fa0f529caa4 \\u003Cunknown>\\n#19 0x7fa0f5329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55a98491523a <unknown>
E       #1 0x55a9843bfab0 <unknown>
E       #2 0x55a9843c6748 <unknown>
E       #3 0x55a9843c92c7 <unknown>
E       #4 0x55a98445dfde <unknown>
E       #5 0x55a9844371a2 <unknown>
E       #6 0x55a98445cfee <unknown>
E       #7 0x55a984436f73 <unknown>
E       #8 0x55a984403aeb <unknown>
E       #9 0x55a984404751 <unknown>
E       #10 0x55a9848d9b4b <unknown>
E       #11 0x55a9848dd929 <unknown>
E       #12 0x55a9848c0929 <unknown>
E       #13 0x55a9848de4e8 <unknown>
E       #14 0x55a9848a50df <unknown>
E       #15 0x55a9849028e8 <unknown>
E       #16 0x55a984902ac6 <unknown>
E       #17 0x55a984914556 <unknown>
E       #18 0x7fa0f529caa4 <unknown>
E       #19 0x7fa0f5329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:23,507 - INFO - Starting test with Chrome browser
2025-07-15 04:12:23,507 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:23,625 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:23,636 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:23,646 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:25,747 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:26,219 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2e42a6e1709af0639a367e6e19fd80c2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf962a1370>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55e0eb134556 \\u003Cunknown>\\n#18 0x7f66a6c9caa4 \\u003Cunknown>\\n#19 0x7f66a6d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55e0eb13523a <unknown>
E       #1 0x55e0eabdfab0 <unknown>
E       #2 0x55e0eabe6748 <unknown>
E       #3 0x55e0eabe92c7 <unknown>
E       #4 0x55e0eac7dfde <unknown>
E       #5 0x55e0eac571a2 <unknown>
E       #6 0x55e0eac7cfee <unknown>
E       #7 0x55e0eac56f73 <unknown>
E       #8 0x55e0eac23aeb <unknown>
E       #9 0x55e0eac24751 <unknown>
E       #10 0x55e0eb0f9b4b <unknown>
E       #11 0x55e0eb0fd929 <unknown>
E       #12 0x55e0eb0e0929 <unknown>
E       #13 0x55e0eb0fe4e8 <unknown>
E       #14 0x55e0eb0c50df <unknown>
E       #15 0x55e0eb1228e8 <unknown>
E       #16 0x55e0eb122ac6 <unknown>
E       #17 0x55e0eb134556 <unknown>
E       #18 0x7f66a6c9caa4 <unknown>
E       #19 0x7f66a6d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:26,323 - INFO - Starting test with Chrome browser
2025-07-15 04:12:26,324 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:26,442 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:26,461 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:26,474 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:28,661 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:29,133 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3918b5388bf6cfee0b2b4a2819be3e70")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf962a2250>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x557e7cc42556 \\u003Cunknown>\\n#18 0x7fb03c29caa4 \\u003Cunknown>\\n#19 0x7fb03c329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x557e7cc4323a <unknown>
E       #1 0x557e7c6edab0 <unknown>
E       #2 0x557e7c6f4748 <unknown>
E       #3 0x557e7c6f72c7 <unknown>
E       #4 0x557e7c78bfde <unknown>
E       #5 0x557e7c7651a2 <unknown>
E       #6 0x557e7c78afee <unknown>
E       #7 0x557e7c764f73 <unknown>
E       #8 0x557e7c731aeb <unknown>
E       #9 0x557e7c732751 <unknown>
E       #10 0x557e7cc07b4b <unknown>
E       #11 0x557e7cc0b929 <unknown>
E       #12 0x557e7cbee929 <unknown>
E       #13 0x557e7cc0c4e8 <unknown>
E       #14 0x557e7cbd30df <unknown>
E       #15 0x557e7cc308e8 <unknown>
E       #16 0x557e7cc30ac6 <unknown>
E       #17 0x557e7cc42556 <unknown>
E       #18 0x7fb03c29caa4 <unknown>
E       #19 0x7fb03c329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:29,218 - INFO - Starting test with Chrome browser
2025-07-15 04:12:29,218 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:29,338 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:29,348 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:29,359 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:31,560 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:32,007 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="84c1daf97341f76cfd502d532e698f00")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
>       login_page.enter_username(username)

tests/test_login.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:28: in enter_username
    self.actions.wait_for_element(self.login_username)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf95a29450>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55bdd11d9556 \\u003Cunknown>\\n#18 0x7f04e8a9caa4 \\u003Cunknown>\\n#19 0x7f04e8b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55bdd11da23a <unknown>
E       #1 0x55bdd0c84ab0 <unknown>
E       #2 0x55bdd0c8b748 <unknown>
E       #3 0x55bdd0c8e2c7 <unknown>
E       #4 0x55bdd0d22fde <unknown>
E       #5 0x55bdd0cfc1a2 <unknown>
E       #6 0x55bdd0d21fee <unknown>
E       #7 0x55bdd0cfbf73 <unknown>
E       #8 0x55bdd0cc8aeb <unknown>
E       #9 0x55bdd0cc9751 <unknown>
E       #10 0x55bdd119eb4b <unknown>
E       #11 0x55bdd11a2929 <unknown>
E       #12 0x55bdd1185929 <unknown>
E       #13 0x55bdd11a34e8 <unknown>
E       #14 0x55bdd116a0df <unknown>
E       #15 0x55bdd11c78e8 <unknown>
E       #16 0x55bdd11c7ac6 <unknown>
E       #17 0x55bdd11d9556 <unknown>
E       #18 0x7f04e8a9caa4 <unknown>
E       #19 0x7f04e8b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:32,109 - INFO - Starting test with Chrome browser
2025-07-15 04:12:32,110 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:32,228 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:32,238 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:32,250 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:34,647 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:34,745 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c2da38f6384b1f8cb2318a67d37d434a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf95a2a250>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x565216c61556 \\u003Cunknown>\\n#18 0x7f959d09caa4 \\u003Cunknown>\\n#19 0x7f959d129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x565216c6223a <unknown>
E       #1 0x56521670cab0 <unknown>
E       #2 0x565216713748 <unknown>
E       #3 0x5652167162c7 <unknown>
E       #4 0x5652167aafde <unknown>
E       #5 0x5652167841a2 <unknown>
E       #6 0x5652167a9fee <unknown>
E       #7 0x565216783f73 <unknown>
E       #8 0x565216750aeb <unknown>
E       #9 0x565216751751 <unknown>
E       #10 0x565216c26b4b <unknown>
E       #11 0x565216c2a929 <unknown>
E       #12 0x565216c0d929 <unknown>
E       #13 0x565216c2b4e8 <unknown>
E       #14 0x565216bf20df <unknown>
E       #15 0x565216c4f8e8 <unknown>
E       #16 0x565216c4fac6 <unknown>
E       #17 0x565216c61556 <unknown>
E       #18 0x7f959d09caa4 <unknown>
E       #19 0x7f959d129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:34,833 - INFO - Starting test with Chrome browser
2025-07-15 04:12:34,833 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:34,955 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:34,966 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:34,982 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:37,156 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:38,364 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7e653d5c3e5d498c54849a9cfb624d5c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf978c05f0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x561bff136556 \\u003Cunknown>\\n#18 0x7f9ab529caa4 \\u003Cunknown>\\n#19 0x7f9ab5329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x561bff13723a <unknown>
E       #1 0x561bfebe1ab0 <unknown>
E       #2 0x561bfebe8748 <unknown>
E       #3 0x561bfebeb2c7 <unknown>
E       #4 0x561bfec7ffde <unknown>
E       #5 0x561bfec591a2 <unknown>
E       #6 0x561bfec7efee <unknown>
E       #7 0x561bfec58f73 <unknown>
E       #8 0x561bfec25aeb <unknown>
E       #9 0x561bfec26751 <unknown>
E       #10 0x561bff0fbb4b <unknown>
E       #11 0x561bff0ff929 <unknown>
E       #12 0x561bff0e2929 <unknown>
E       #13 0x561bff1004e8 <unknown>
E       #14 0x561bff0c70df <unknown>
E       #15 0x561bff1248e8 <unknown>
E       #16 0x561bff124ac6 <unknown>
E       #17 0x561bff136556 <unknown>
E       #18 0x7f9ab529caa4 <unknown>
E       #19 0x7f9ab5329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:38,468 - INFO - Starting test with Chrome browser
2025-07-15 04:12:38,468 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:38,588 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:38,599 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:38,609 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:40,707 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:41,938 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2dfb09514220993878d69cfa9680ae37")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf959b3f20>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55f9756eb556 \\u003Cunknown>\\n#18 0x7f474049caa4 \\u003Cunknown>\\n#19 0x7f4740529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55f9756ec23a <unknown>
E       #1 0x55f975196ab0 <unknown>
E       #2 0x55f97519d748 <unknown>
E       #3 0x55f9751a02c7 <unknown>
E       #4 0x55f975234fde <unknown>
E       #5 0x55f97520e1a2 <unknown>
E       #6 0x55f975233fee <unknown>
E       #7 0x55f97520df73 <unknown>
E       #8 0x55f9751daaeb <unknown>
E       #9 0x55f9751db751 <unknown>
E       #10 0x55f9756b0b4b <unknown>
E       #11 0x55f9756b4929 <unknown>
E       #12 0x55f975697929 <unknown>
E       #13 0x55f9756b54e8 <unknown>
E       #14 0x55f97567c0df <unknown>
E       #15 0x55f9756d98e8 <unknown>
E       #16 0x55f9756d9ac6 <unknown>
E       #17 0x55f9756eb556 <unknown>
E       #18 0x7f474049caa4 <unknown>
E       #19 0x7f4740529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:42,041 - INFO - Starting test with Chrome browser
2025-07-15 04:12:42,041 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:42,159 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:42,172 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:42,185 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:44,334 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:45,541 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d36ea5043d580427cc89687f8bd7c39e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
>       login_page.disabled_click_login_button()

tests/test_login.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf95a02eb0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x563fabff5556 \\u003Cunknown>\\n#18 0x7ff42f29caa4 \\u003Cunknown>\\n#19 0x7ff42f329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x563fabff623a <unknown>
E       #1 0x563fabaa0ab0 <unknown>
E       #2 0x563fabaa7748 <unknown>
E       #3 0x563fabaaa2c7 <unknown>
E       #4 0x563fabb3efde <unknown>
E       #5 0x563fabb181a2 <unknown>
E       #6 0x563fabb3dfee <unknown>
E       #7 0x563fabb17f73 <unknown>
E       #8 0x563fabae4aeb <unknown>
E       #9 0x563fabae5751 <unknown>
E       #10 0x563fabfbab4b <unknown>
E       #11 0x563fabfbe929 <unknown>
E       #12 0x563fabfa1929 <unknown>
E       #13 0x563fabfbf4e8 <unknown>
E       #14 0x563fabf860df <unknown>
E       #15 0x563fabfe38e8 <unknown>
E       #16 0x563fabfe3ac6 <unknown>
E       #17 0x563fabff5556 <unknown>
E       #18 0x7ff42f29caa4 <unknown>
E       #19 0x7ff42f329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:45,640 - INFO - Starting test with Chrome browser
2025-07-15 04:12:45,641 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:45,759 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:45,784 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:45,795 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:47,913 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:48,315 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ffea11e0f75e47179496325680be3f5f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
>       login_page.click_password()

tests/test_login.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:40: in click_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf95a03770>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x564250552556 \\u003Cunknown>\\n#18 0x7fa33a29caa4 \\u003Cunknown>\\n#19 0x7fa33a329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x56425055323a <unknown>
E       #1 0x56424fffdab0 <unknown>
E       #2 0x564250004748 <unknown>
E       #3 0x5642500072c7 <unknown>
E       #4 0x56425009bfde <unknown>
E       #5 0x5642500751a2 <unknown>
E       #6 0x56425009afee <unknown>
E       #7 0x564250074f73 <unknown>
E       #8 0x564250041aeb <unknown>
E       #9 0x564250042751 <unknown>
E       #10 0x564250517b4b <unknown>
E       #11 0x56425051b929 <unknown>
E       #12 0x5642504fe929 <unknown>
E       #13 0x56425051c4e8 <unknown>
E       #14 0x5642504e30df <unknown>
E       #15 0x5642505408e8 <unknown>
E       #16 0x564250540ac6 <unknown>
E       #17 0x564250552556 <unknown>
E       #18 0x7fa33a29caa4 <unknown>
E       #19 0x7fa33a329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:48,416 - INFO - Starting test with Chrome browser
2025-07-15 04:12:48,416 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:48,533 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:48,546 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:48,557 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:50,742 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:52,093 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="88d38ba617c6945c9bd54b39f1e98c66")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf974468f0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x557672cf5556 \\u003Cunknown>\\n#18 0x7f7644c9caa4 \\u003Cunknown>\\n#19 0x7f7644d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x557672cf623a <unknown>
E       #1 0x5576727a0ab0 <unknown>
E       #2 0x5576727a7748 <unknown>
E       #3 0x5576727aa2c7 <unknown>
E       #4 0x55767283efde <unknown>
E       #5 0x5576728181a2 <unknown>
E       #6 0x55767283dfee <unknown>
E       #7 0x557672817f73 <unknown>
E       #8 0x5576727e4aeb <unknown>
E       #9 0x5576727e5751 <unknown>
E       #10 0x557672cbab4b <unknown>
E       #11 0x557672cbe929 <unknown>
E       #12 0x557672ca1929 <unknown>
E       #13 0x557672cbf4e8 <unknown>
E       #14 0x557672c860df <unknown>
E       #15 0x557672ce38e8 <unknown>
E       #16 0x557672ce3ac6 <unknown>
E       #17 0x557672cf5556 <unknown>
E       #18 0x7f7644c9caa4 <unknown>
E       #19 0x7f7644d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:52,176 - INFO - Starting test with Chrome browser
2025-07-15 04:12:52,177 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:52,295 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:52,313 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:52,324 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:54,529 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:55,004 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b780257d99aa46482c49b86bee347c73")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf9743ac90>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55fc1a791556 \\u003Cunknown>\\n#18 0x7f0de7e9caa4 \\u003Cunknown>\\n#19 0x7f0de7f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55fc1a79223a <unknown>
E       #1 0x55fc1a23cab0 <unknown>
E       #2 0x55fc1a243748 <unknown>
E       #3 0x55fc1a2462c7 <unknown>
E       #4 0x55fc1a2dafde <unknown>
E       #5 0x55fc1a2b41a2 <unknown>
E       #6 0x55fc1a2d9fee <unknown>
E       #7 0x55fc1a2b3f73 <unknown>
E       #8 0x55fc1a280aeb <unknown>
E       #9 0x55fc1a281751 <unknown>
E       #10 0x55fc1a756b4b <unknown>
E       #11 0x55fc1a75a929 <unknown>
E       #12 0x55fc1a73d929 <unknown>
E       #13 0x55fc1a75b4e8 <unknown>
E       #14 0x55fc1a7220df <unknown>
E       #15 0x55fc1a77f8e8 <unknown>
E       #16 0x55fc1a77fac6 <unknown>
E       #17 0x55fc1a791556 <unknown>
E       #18 0x7f0de7e9caa4 <unknown>
E       #19 0x7f0de7f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:55,087 - INFO - Starting test with Chrome browser
2025-07-15 04:12:55,088 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:55,199 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:55,209 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:55,229 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:57,246 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:12:57,673 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bd762b9ebb66dad1c54a75f413ee224e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf978e04d0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55c705bcc556 \\u003Cunknown>\\n#18 0x7fb01a69caa4 \\u003Cunknown>\\n#19 0x7fb01a729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55c705bcd23a <unknown>
E       #1 0x55c705677ab0 <unknown>
E       #2 0x55c70567e748 <unknown>
E       #3 0x55c7056812c7 <unknown>
E       #4 0x55c705715fde <unknown>
E       #5 0x55c7056ef1a2 <unknown>
E       #6 0x55c705714fee <unknown>
E       #7 0x55c7056eef73 <unknown>
E       #8 0x55c7056bbaeb <unknown>
E       #9 0x55c7056bc751 <unknown>
E       #10 0x55c705b91b4b <unknown>
E       #11 0x55c705b95929 <unknown>
E       #12 0x55c705b78929 <unknown>
E       #13 0x55c705b964e8 <unknown>
E       #14 0x55c705b5d0df <unknown>
E       #15 0x55c705bba8e8 <unknown>
E       #16 0x55c705bbaac6 <unknown>
E       #17 0x55c705bcc556 <unknown>
E       #18 0x7fb01a69caa4 <unknown>
E       #19 0x7fb01a729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:12:57,757 - INFO - Starting test with Chrome browser
2025-07-15 04:12:57,757 - INFO - ====== WebDriver manager ======
2025-07-15 04:12:57,867 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:57,880 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:12:57,928 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:12:59,979 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:13:00,419 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2a5e1088ac83bc45129d32b90e36e28e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf9623c890>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x557e08f0e556 \\u003Cunknown>\\n#18 0x7f077129caa4 \\u003Cunknown>\\n#19 0x7f0771329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x557e08f0f23a <unknown>
E       #1 0x557e089b9ab0 <unknown>
E       #2 0x557e089c0748 <unknown>
E       #3 0x557e089c32c7 <unknown>
E       #4 0x557e08a57fde <unknown>
E       #5 0x557e08a311a2 <unknown>
E       #6 0x557e08a56fee <unknown>
E       #7 0x557e08a30f73 <unknown>
E       #8 0x557e089fdaeb <unknown>
E       #9 0x557e089fe751 <unknown>
E       #10 0x557e08ed3b4b <unknown>
E       #11 0x557e08ed7929 <unknown>
E       #12 0x557e08eba929 <unknown>
E       #13 0x557e08ed84e8 <unknown>
E       #14 0x557e08e9f0df <unknown>
E       #15 0x557e08efc8e8 <unknown>
E       #16 0x557e08efcac6 <unknown>
E       #17 0x557e08f0e556 <unknown>
E       #18 0x7f077129caa4 <unknown>
E       #19 0x7f0771329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:13:00,504 - INFO - Starting test with Chrome browser
2025-07-15 04:13:00,504 - INFO - ====== WebDriver manager ======
2025-07-15 04:13:00,615 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:13:00,641 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:13:00,651 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:13:02,704 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:13:03,100 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="04ecd36b6e1b91ce8d8cfa449f15f63e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:49: in disabled_click_login_button
    self.actions.click(self.disabled_login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcf9623d860>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x560143f8c556 \\u003Cunknown>\\n#18 0x7f317969caa4 \\u003Cunknown>\\n#19 0x7f3179729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x560143f8d23a <unknown>
E       #1 0x560143a37ab0 <unknown>
E       #2 0x560143a3e748 <unknown>
E       #3 0x560143a412c7 <unknown>
E       #4 0x560143ad5fde <unknown>
E       #5 0x560143aaf1a2 <unknown>
E       #6 0x560143ad4fee <unknown>
E       #7 0x560143aaef73 <unknown>
E       #8 0x560143a7baeb <unknown>
E       #9 0x560143a7c751 <unknown>
E       #10 0x560143f51b4b <unknown>
E       #11 0x560143f55929 <unknown>
E       #12 0x560143f38929 <unknown>
E       #13 0x560143f564e8 <unknown>
E       #14 0x560143f1d0df <unknown>
E       #15 0x560143f7a8e8 <unknown>
E       #16 0x560143f7aac6 <unknown>
E       #17 0x560143f8c556 <unknown>
E       #18 0x7f317969caa4 <unknown>
E       #19 0x7f3179729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-15 04:13:03,183 - INFO - Starting test with Chrome browser
2025-07-15 04:13:03,183 - INFO - ====== WebDriver manager ======
2025-07-15 04:13:03,293 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:13:03,303 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-15 04:13:03,312 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-15 04:13:05,407 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-15 04:13:05,870 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250715_041157/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x561d0ab2923a <unknown>
#1 0x561d0a5d3ab0 <unknown>
#2 0x561d0a5da748 <unknown>
#3 0x561d0a5dd2c7 <unknown>
#4 0x561d0a671fde <unknown>
#5 0x561d0a64b1a2 <unknown>
#6 0x561d0a670fee <unknown>
#7 0x561d0a64af73 <unknown>
#8 0x561d0a617aeb <unknown>
#9 0x561d0a618751 <unknown>
#10 0x561d0aaedb4b <unknown>
#11 0x561d0aaf1929 <unknown>
#12 0x561d0aad4929 <unknown>
#13 0x561d0aaf24e8 <unknown>
#14 0x561d0aab90df <unknown>
#15 0x561d0ab168e8 <unknown>
#16 0x561d0ab16ac6 <unknown>
#17 0x561d0ab28556 <unknown>
#18 0x7f2c1069caa4 <unknown>
#19 0x7f2c10729c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x561e1826523a <unknown>
#1 0x561e17d0fab0 <unknown>
#2 0x561e17d16748 <unknown>
#3 0x561e17d192c7 <unknown>
#4 0x561e17dadfde <unknown>
#5 0x561e17d871a2 <unknown>
#6 0x561e17dacfee <unknown>
#7 0x561e17d86f73 <unknown>
#8 0x561e17d53aeb <unknown>
#9 0x561e17d54751 <unknown>
#10 0x561e18229b4b <unknown>
#11 0x561e1822d929 <unknown>
#12 0x561e18210929 <unknown>
#13 0x561e1822e4e8 <unknown>
#14 0x561e181f50df <unknown>
#15 0x561e182528e8 <unknown>
#16 0x561e18252ac6 <unknown>
#17 0x561e18264556 <unknown>
#18 0x7f91bcc9caa4 <unknown>
#19 0x7f91bcd29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x5609609b223a <unknown>
#1 0x56096045cab0 <unknown>
#2 0x560960463748 <unknown>
#3 0x5609604662c7 <unknown>
#4 0x5609604fafde <unknown>
#5 0x5609604d41a2 <unknown>
#6 0x5609604f9fee <unknown>
#7 0x5609604d3f73 <unknown>
#8 0x5609604a0aeb <unknown>
#9 0x5609604a1751 <unknown>
#10 0x560960976b4b <unknown>
#11 0x56096097a929 <unknown>
#12 0x56096095d929 <unknown>
#13 0x56096097b4e8 <unknown>
#14 0x5609609420df <unknown>
#15 0x56096099f8e8 <unknown>
#16 0x56096099fac6 <unknown>
#17 0x5609609b1556 <unknown>
#18 0x7f4b4ca9caa4 <unknown>
#19 0x7f4b4cb29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x560de853023a <unknown>
#1 0x560de7fdaab0 <unknown>
#2 0x560de7fe1748 <unknown>
#3 0x560de7fe42c7 <unknown>
#4 0x560de8078fde <unknown>
#5 0x560de80521a2 <unknown>
#6 0x560de8077fee <unknown>
#7 0x560de8051f73 <unknown>
#8 0x560de801eaeb <unknown>
#9 0x560de801f751 <unknown>
#10 0x560de84f4b4b <unknown>
#11 0x560de84f8929 <unknown>
#12 0x560de84db929 <unknown>
#13 0x560de84f94e8 <unknown>
#14 0x560de84c00df <unknown>
#15 0x560de851d8e8 <unknown>
#16 0x560de851dac6 <unknown>
#17 0x560de852f556 <unknown>
#18 0x7fa0e3a9caa4 <unknown>
#19 0x7fa0e3b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x560557a0023a <unknown>
#1 0x5605574aaab0 <unknown>
#2 0x5605574b1748 <unknown>
#3 0x5605574b42c7 <unknown>
#4 0x560557548fde <unknown>
#5 0x5605575221a2 <unknown>
#6 0x560557547fee <unknown>
#7 0x560557521f73 <unknown>
#8 0x5605574eeaeb <unknown>
#9 0x5605574ef751 <unknown>
#10 0x5605579c4b4b <unknown>
#11 0x5605579c8929 <unknown>
#12 0x5605579ab929 <unknown>
#13 0x5605579c94e8 <unknown>
#14 0x5605579900df <unknown>
#15 0x5605579ed8e8 <unknown>
#16 0x5605579edac6 <unknown>
#17 0x5605579ff556 <unknown>
#18 0x7efda2e9caa4 <unknown>
#19 0x7efda2f29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55a98491523a <unknown>
#1 0x55a9843bfab0 <unknown>
#2 0x55a9843c6748 <unknown>
#3 0x55a9843c92c7 <unknown>
#4 0x55a98445dfde <unknown>
#5 0x55a9844371a2 <unknown>
#6 0x55a98445cfee <unknown>
#7 0x55a984436f73 <unknown>
#8 0x55a984403aeb <unknown>
#9 0x55a984404751 <unknown>
#10 0x55a9848d9b4b <unknown>
#11 0x55a9848dd929 <unknown>
#12 0x55a9848c0929 <unknown>
#13 0x55a9848de4e8 <unknown>
#14 0x55a9848a50df <unknown>
#15 0x55a9849028e8 <unknown>
#16 0x55a984902ac6 <unknown>
#17 0x55a984914556 <unknown>
#18 0x7fa0f529caa4 <unknown>
#19 0x7fa0f5329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55e0eb13523a <unknown>
#1 0x55e0eabdfab0 <unknown>
#2 0x55e0eabe6748 <unknown>
#3 0x55e0eabe92c7 <unknown>
#4 0x55e0eac7dfde <unknown>
#5 0x55e0eac571a2 <unknown>
#6 0x55e0eac7cfee <unknown>
#7 0x55e0eac56f73 <unknown>
#8 0x55e0eac23aeb <unknown>
#9 0x55e0eac24751 <unknown>
#10 0x55e0eb0f9b4b <unknown>
#11 0x55e0eb0fd929 <unknown>
#12 0x55e0eb0e0929 <unknown>
#13 0x55e0eb0fe4e8 <unknown>
#14 0x55e0eb0c50df <unknown>
#15 0x55e0eb1228e8 <unknown>
#16 0x55e0eb122ac6 <unknown>
#17 0x55e0eb134556 <unknown>
#18 0x7f66a6c9caa4 <unknown>
#19 0x7f66a6d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x557e7cc4323a <unknown>
#1 0x557e7c6edab0 <unknown>
#2 0x557e7c6f4748 <unknown>
#3 0x557e7c6f72c7 <unknown>
#4 0x557e7c78bfde <unknown>
#5 0x557e7c7651a2 <unknown>
#6 0x557e7c78afee <unknown>
#7 0x557e7c764f73 <unknown>
#8 0x557e7c731aeb <unknown>
#9 0x557e7c732751 <unknown>
#10 0x557e7cc07b4b <unknown>
#11 0x557e7cc0b929 <unknown>
#12 0x557e7cbee929 <unknown>
#13 0x557e7cc0c4e8 <unknown>
#14 0x557e7cbd30df <unknown>
#15 0x557e7cc308e8 <unknown>
#16 0x557e7cc30ac6 <unknown>
#17 0x557e7cc42556 <unknown>
#18 0x7fb03c29caa4 <unknown>
#19 0x7fb03c329c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55bdd11da23a <unknown>
#1 0x55bdd0c84ab0 <unknown>
#2 0x55bdd0c8b748 <unknown>
#3 0x55bdd0c8e2c7 <unknown>
#4 0x55bdd0d22fde <unknown>
#5 0x55bdd0cfc1a2 <unknown>
#6 0x55bdd0d21fee <unknown>
#7 0x55bdd0cfbf73 <unknown>
#8 0x55bdd0cc8aeb <unknown>
#9 0x55bdd0cc9751 <unknown>
#10 0x55bdd119eb4b <unknown>
#11 0x55bdd11a2929 <unknown>
#12 0x55bdd1185929 <unknown>
#13 0x55bdd11a34e8 <unknown>
#14 0x55bdd116a0df <unknown>
#15 0x55bdd11c78e8 <unknown>
#16 0x55bdd11c7ac6 <unknown>
#17 0x55bdd11d9556 <unknown>
#18 0x7f04e8a9caa4 <unknown>
#19 0x7f04e8b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x565216c6223a <unknown>
#1 0x56521670cab0 <unknown>
#2 0x565216713748 <unknown>
#3 0x5652167162c7 <unknown>
#4 0x5652167aafde <unknown>
#5 0x5652167841a2 <unknown>
#6 0x5652167a9fee <unknown>
#7 0x565216783f73 <unknown>
#8 0x565216750aeb <unknown>
#9 0x565216751751 <unknown>
#10 0x565216c26b4b <unknown>
#11 0x565216c2a929 <unknown>
#12 0x565216c0d929 <unknown>
#13 0x565216c2b4e8 <unknown>
#14 0x565216bf20df <unknown>
#15 0x565216c4f8e8 <unknown>
#16 0x565216c4fac6 <unknown>
#17 0x565216c61556 <unknown>
#18 0x7f959d09caa4 <unknown>
#19 0x7f959d129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x561bff13723a <unknown>
#1 0x561bfebe1ab0 <unknown>
#2 0x561bfebe8748 <unknown>
#3 0x561bfebeb2c7 <unknown>
#4 0x561bfec7ffde <unknown>
#5 0x561bfec591a2 <unknown>
#6 0x561bfec7efee <unknown>
#7 0x561bfec58f73 <unknown>
#8 0x561bfec25aeb <unknown>
#9 0x561bfec26751 <unknown>
#10 0x561bff0fbb4b <unknown>
#11 0x561bff0ff929 <unknown>
#12 0x561bff0e2929 <unknown>
#13 0x561bff1004e8 <unknown>
#14 0x561bff0c70df <unknown>
#15 0x561bff1248e8 <unknown>
#16 0x561bff124ac6 <unknown>
#17 0x561bff136556 <unknown>
#18 0x7f9ab529caa4 <unknown>
#19 0x7f9ab5329c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55f9756ec23a <unknown>
#1 0x55f975196ab0 <unknown>
#2 0x55f97519d748 <unknown>
#3 0x55f9751a02c7 <unknown>
#4 0x55f975234fde <unknown>
#5 0x55f97520e1a2 <unknown>
#6 0x55f975233fee <unknown>
#7 0x55f97520df73 <unknown>
#8 0x55f9751daaeb <unknown>
#9 0x55f9751db751 <unknown>
#10 0x55f9756b0b4b <unknown>
#11 0x55f9756b4929 <unknown>
#12 0x55f975697929 <unknown>
#13 0x55f9756b54e8 <unknown>
#14 0x55f97567c0df <unknown>
#15 0x55f9756d98e8 <unknown>
#16 0x55f9756d9ac6 <unknown>
#17 0x55f9756eb556 <unknown>
#18 0x7f474049caa4 <unknown>
#19 0x7f4740529c3c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x563fabff623a <unknown>
#1 0x563fabaa0ab0 <unknown>
#2 0x563fabaa7748 <unknown>
#3 0x563fabaaa2c7 <unknown>
#4 0x563fabb3efde <unknown>
#5 0x563fabb181a2 <unknown>
#6 0x563fabb3dfee <unknown>
#7 0x563fabb17f73 <unknown>
#8 0x563fabae4aeb <unknown>
#9 0x563fabae5751 <unknown>
#10 0x563fabfbab4b <unknown>
#11 0x563fabfbe929 <unknown>
#12 0x563fabfa1929 <unknown>
#13 0x563fabfbf4e8 <unknown>
#14 0x563fabf860df <unknown>
#15 0x563fabfe38e8 <unknown>
#16 0x563fabfe3ac6 <unknown>
#17 0x563fabff5556 <unknown>
#18 0x7ff42f29caa4 <unknown>
#19 0x7ff42f329c3c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x56425055323a <unknown>
#1 0x56424fffdab0 <unknown>
#2 0x564250004748 <unknown>
#3 0x5642500072c7 <unknown>
#4 0x56425009bfde <unknown>
#5 0x5642500751a2 <unknown>
#6 0x56425009afee <unknown>
#7 0x564250074f73 <unknown>
#8 0x564250041aeb <unknown>
#9 0x564250042751 <unknown>
#10 0x564250517b4b <unknown>
#11 0x56425051b929 <unknown>
#12 0x5642504fe929 <unknown>
#13 0x56425051c4e8 <unknown>
#14 0x5642504e30df <unknown>
#15 0x5642505408e8 <unknown>
#16 0x564250540ac6 <unknown>
#17 0x564250552556 <unknown>
#18 0x7fa33a29caa4 <unknown>
#19 0x7fa33a329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x557672cf623a <unknown>
#1 0x5576727a0ab0 <unknown>
#2 0x5576727a7748 <unknown>
#3 0x5576727aa2c7 <unknown>
#4 0x55767283efde <unknown>
#5 0x5576728181a2 <unknown>
#6 0x55767283dfee <unknown>
#7 0x557672817f73 <unknown>
#8 0x5576727e4aeb <unknown>
#9 0x5576727e5751 <unknown>
#10 0x557672cbab4b <unknown>
#11 0x557672cbe929 <unknown>
#12 0x557672ca1929 <unknown>
#13 0x557672cbf4e8 <unknown>
#14 0x557672c860df <unknown>
#15 0x557672ce38e8 <unknown>
#16 0x557672ce3ac6 <unknown>
#17 0x557672cf5556 <unknown>
#18 0x7f7644c9caa4 <unknown>
#19 0x7f7644d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55fc1a79223a <unknown>
#1 0x55fc1a23cab0 <unknown>
#2 0x55fc1a243748 <unknown>
#3 0x55fc1a2462c7 <unknown>
#4 0x55fc1a2dafde <unknown>
#5 0x55fc1a2b41a2 <unknown>
#6 0x55fc1a2d9fee <unknown>
#7 0x55fc1a2b3f73 <unknown>
#8 0x55fc1a280aeb <unknown>
#9 0x55fc1a281751 <unknown>
#10 0x55fc1a756b4b <unknown>
#11 0x55fc1a75a929 <unknown>
#12 0x55fc1a73d929 <unknown>
#13 0x55fc1a75b4e8 <unknown>
#14 0x55fc1a7220df <unknown>
#15 0x55fc1a77f8e8 <unknown>
#16 0x55fc1a77fac6 <unknown>
#17 0x55fc1a791556 <unknown>
#18 0x7f0de7e9caa4 <unknown>
#19 0x7f0de7f29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55c705bcd23a <unknown>
#1 0x55c705677ab0 <unknown>
#2 0x55c70567e748 <unknown>
#3 0x55c7056812c7 <unknown>
#4 0x55c705715fde <unknown>
#5 0x55c7056ef1a2 <unknown>
#6 0x55c705714fee <unknown>
#7 0x55c7056eef73 <unknown>
#8 0x55c7056bbaeb <unknown>
#9 0x55c7056bc751 <unknown>
#10 0x55c705b91b4b <unknown>
#11 0x55c705b95929 <unknown>
#12 0x55c705b78929 <unknown>
#13 0x55c705b964e8 <unknown>
#14 0x55c705b5d0df <unknown>
#15 0x55c705bba8e8 <unknown>
#16 0x55c705bbaac6 <unknown>
#17 0x55c705bcc556 <unknown>
#18 0x7fb01a69caa4 <unknown>
#19 0x7fb01a729c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x557e08f0f23a <unknown>
#1 0x557e089b9ab0 <unknown>
#2 0x557e089c0748 <unknown>
#3 0x557e089c32c7 <unknown>
#4 0x557e08a57fde <unknown>
#5 0x557e08a311a2 <unknown>
#6 0x557e08a56fee <unknown>
#7 0x557e08a30f73 <unknown>
#8 0x557e089fdaeb <unknown>
#9 0x557e089fe751 <unknown>
#10 0x557e08ed3b4b <unknown>
#11 0x557e08ed7929 <unknown>
#12 0x557e08eba929 <unknown>
#13 0x557e08ed84e8 <unknown>
#14 0x557e08e9f0df <unknown>
#15 0x557e08efc8e8 <unknown>
#16 0x557e08efcac6 <unknown>
#17 0x557e08f0e556 <unknown>
#18 0x7f077129caa4 <unknown>
#19 0x7f0771329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x560143f8d23a <unknown>
#1 0x560143a37ab0 <unknown>
#2 0x560143a3e748 <unknown>
#3 0x560143a412c7 <unknown>
#4 0x560143ad5fde <unknown>
#5 0x560143aaf1a2 <unknown>
#6 0x560143ad4fee <unknown>
#7 0x560143aaef73 <unknown>
#8 0x560143a7baeb <unknown>
#9 0x560143a7c751 <unknown>
#10 0x560143f51b4b <unknown>
#11 0x560143f55929 <unknown>
#12 0x560143f38929 <unknown>
#13 0x560143f564e8 <unknown>
#14 0x560143f1d0df <unknown>
#15 0x560143f7a8e8 <unknown>
#16 0x560143f7aac6 <unknown>
#17 0x560143f8c556 <unknown>
#18 0x7f317969caa4 <unknown>
#19 0x7f3179729c3c <unknown>
======================== 19 failed in 68.68s (0:01:08) =========================
--------------------------------------------
Test Run Finished: 2025-07-15 04:13:06
Duration: 71 seconds
Status: FAILURE
Exit Code: 1
============================================
