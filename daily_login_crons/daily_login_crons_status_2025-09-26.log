========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-26 03:45:51
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3bc9a46d280c20e513e45adce80576ea")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3bc9a46d280c20e513e45adce80576ea")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6383d20900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55bd2ca88fba <unknown>
E       #1 0x55bd2c50d6d0 <unknown>
E       #2 0x55bd2c55f2aa <unknown>
E       #3 0x55bd2c55f541 <unknown>
E       #4 0x55bd2c5ad6c4 <unknown>
E       #5 0x55bd2c584e5d <unknown>
E       #6 0x55bd2c5aab54 <unknown>
E       #7 0x55bd2c584c03 <unknown>
E       #8 0x55bd2c5517a8 <unknown>
E       #9 0x55bd2c552421 <unknown>
E       #10 0x55bd2ca4db28 <unknown>
E       #11 0x55bd2ca5187f <unknown>
E       #12 0x55bd2ca35c49 <unknown>
E       #13 0x55bd2ca52405 <unknown>
E       #14 0x55bd2ca1b4ff <unknown>
E       #15 0x55bd2ca76258 <unknown>
E       #16 0x55bd2ca76432 <unknown>
E       #17 0x55bd2ca87fa3 <unknown>
E       #18 0x7f02b2e9caa4 <unknown>
E       #19 0x7f02b2f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 03:45:54,322 - INFO - Test data loaded successfully.
2025-09-26 03:45:54,322 - INFO - Starting test with Chrome browser
2025-09-26 03:45:54,322 - INFO - ====== WebDriver manager ======
2025-09-26 03:45:54,436 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:45:54,530 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:45:54,628 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-09-26 03:45:54,629 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:45:54,844 - INFO - WebDriver version 140.0.7339.207 selected
2025-09-26 03:45:54,847 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-26 03:45:54,848 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-26 03:45:54,917 - INFO - Driver downloading response is 200
2025-09-26 03:45:55,021 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:45:55,220 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-09-26 03:45:58,171 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-26 03:45:58,171 - INFO - Starting the test case for valid credentials
2025-09-26 03:45:58,377 - INFO - User enters the email-id
2025-09-26 03:46:00,042 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 03:48:01,758 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c2357c4abecb43f6057c6bc884a077eb")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c2357c4abecb43f6057c6bc884a077eb")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f63836298a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559e2a04cfba <unknown>
E       #1 0x559e29ad16d0 <unknown>
E       #2 0x559e29b232aa <unknown>
E       #3 0x559e29b23541 <unknown>
E       #4 0x559e29b716c4 <unknown>
E       #5 0x559e29b48e5d <unknown>
E       #6 0x559e29b6eb54 <unknown>
E       #7 0x559e29b48c03 <unknown>
E       #8 0x559e29b157a8 <unknown>
E       #9 0x559e29b16421 <unknown>
E       #10 0x559e2a011b28 <unknown>
E       #11 0x559e2a01587f <unknown>
E       #12 0x559e29ff9c49 <unknown>
E       #13 0x559e2a016405 <unknown>
E       #14 0x559e29fdf4ff <unknown>
E       #15 0x559e2a03a258 <unknown>
E       #16 0x559e2a03a432 <unknown>
E       #17 0x559e2a04bfa3 <unknown>
E       #18 0x7fb2bf29caa4 <unknown>
E       #19 0x7fb2bf329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 03:48:01,877 - INFO - Starting test with Chrome browser
2025-09-26 03:48:01,877 - INFO - ====== WebDriver manager ======
2025-09-26 03:48:01,928 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:48:02,014 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:48:02,126 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 03:48:03,796 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-26 03:48:03,797 - INFO - Starting the test case for valid credentials
2025-09-26 03:48:03,934 - INFO - User enters the email-id
2025-09-26 03:48:05,547 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 03:50:07,196 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7a4b5af2fdc3ddfb857799fd3e42db04")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7a4b5af2fdc3ddfb857799fd3e42db04")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f638458e3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562faf6eefba <unknown>
E       #1 0x562faf1736d0 <unknown>
E       #2 0x562faf1c52aa <unknown>
E       #3 0x562faf1c5541 <unknown>
E       #4 0x562faf2136c4 <unknown>
E       #5 0x562faf1eae5d <unknown>
E       #6 0x562faf210b54 <unknown>
E       #7 0x562faf1eac03 <unknown>
E       #8 0x562faf1b77a8 <unknown>
E       #9 0x562faf1b8421 <unknown>
E       #10 0x562faf6b3b28 <unknown>
E       #11 0x562faf6b787f <unknown>
E       #12 0x562faf69bc49 <unknown>
E       #13 0x562faf6b8405 <unknown>
E       #14 0x562faf6814ff <unknown>
E       #15 0x562faf6dc258 <unknown>
E       #16 0x562faf6dc432 <unknown>
E       #17 0x562faf6edfa3 <unknown>
E       #18 0x7f48d069caa4 <unknown>
E       #19 0x7f48d0729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 03:50:07,252 - INFO - Starting test with Chrome browser
2025-09-26 03:50:07,253 - INFO - ====== WebDriver manager ======
2025-09-26 03:50:07,305 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:50:07,388 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:50:07,472 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 03:50:10,875 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-26 03:50:10,875 - INFO - Starting the test case for valid credentials
2025-09-26 03:50:11,039 - INFO - User enters the email-id
2025-09-26 03:50:12,666 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 03:52:14,263 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="971196a85168e792c60673b2f280e84c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="971196a85168e792c60673b2f280e84c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f63836296c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5635f7953fba <unknown>
E       #1 0x5635f73d86d0 <unknown>
E       #2 0x5635f742a2aa <unknown>
E       #3 0x5635f742a541 <unknown>
E       #4 0x5635f74786c4 <unknown>
E       #5 0x5635f744fe5d <unknown>
E       #6 0x5635f7475b54 <unknown>
E       #7 0x5635f744fc03 <unknown>
E       #8 0x5635f741c7a8 <unknown>
E       #9 0x5635f741d421 <unknown>
E       #10 0x5635f7918b28 <unknown>
E       #11 0x5635f791c87f <unknown>
E       #12 0x5635f7900c49 <unknown>
E       #13 0x5635f791d405 <unknown>
E       #14 0x5635f78e64ff <unknown>
E       #15 0x5635f7941258 <unknown>
E       #16 0x5635f7941432 <unknown>
E       #17 0x5635f7952fa3 <unknown>
E       #18 0x7f891ec9caa4 <unknown>
E       #19 0x7f891ed29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 03:52:14,319 - INFO - Starting test with Chrome browser
2025-09-26 03:52:14,320 - INFO - ====== WebDriver manager ======
2025-09-26 03:52:14,371 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:52:14,455 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:52:14,597 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 03:52:16,464 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-26 03:52:16,464 - INFO - Starting the test case for valid credentials
2025-09-26 03:52:16,618 - INFO - User enters the email-id
2025-09-26 03:52:18,252 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 03:54:19,890 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a19a48f12e462833eec2ff36b8bcd9cd")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a19a48f12e462833eec2ff36b8bcd9cd")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6383629f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b726d6dfba <unknown>
E       #1 0x55b7267f26d0 <unknown>
E       #2 0x55b7268442aa <unknown>
E       #3 0x55b726844541 <unknown>
E       #4 0x55b7268926c4 <unknown>
E       #5 0x55b726869e5d <unknown>
E       #6 0x55b72688fb54 <unknown>
E       #7 0x55b726869c03 <unknown>
E       #8 0x55b7268367a8 <unknown>
E       #9 0x55b726837421 <unknown>
E       #10 0x55b726d32b28 <unknown>
E       #11 0x55b726d3687f <unknown>
E       #12 0x55b726d1ac49 <unknown>
E       #13 0x55b726d37405 <unknown>
E       #14 0x55b726d004ff <unknown>
E       #15 0x55b726d5b258 <unknown>
E       #16 0x55b726d5b432 <unknown>
E       #17 0x55b726d6cfa3 <unknown>
E       #18 0x7f5a9209caa4 <unknown>
E       #19 0x7f5a92129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 03:54:19,947 - INFO - Starting test with Chrome browser
2025-09-26 03:54:19,947 - INFO - ====== WebDriver manager ======
2025-09-26 03:54:19,998 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:54:20,102 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:54:20,193 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 03:54:21,961 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 03:56:23,705 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f0958550d54109b382ff04a9d50e6c6d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f0958550d54109b382ff04a9d50e6c6d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f638362a020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55acef6d5fba <unknown>
E       #1 0x55acef15a6d0 <unknown>
E       #2 0x55acef1ac2aa <unknown>
E       #3 0x55acef1ac541 <unknown>
E       #4 0x55acef1fa6c4 <unknown>
E       #5 0x55acef1d1e5d <unknown>
E       #6 0x55acef1f7b54 <unknown>
E       #7 0x55acef1d1c03 <unknown>
E       #8 0x55acef19e7a8 <unknown>
E       #9 0x55acef19f421 <unknown>
E       #10 0x55acef69ab28 <unknown>
E       #11 0x55acef69e87f <unknown>
E       #12 0x55acef682c49 <unknown>
E       #13 0x55acef69f405 <unknown>
E       #14 0x55acef6684ff <unknown>
E       #15 0x55acef6c3258 <unknown>
E       #16 0x55acef6c3432 <unknown>
E       #17 0x55acef6d4fa3 <unknown>
E       #18 0x7f347d09caa4 <unknown>
E       #19 0x7f347d129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 03:56:23,761 - INFO - Starting test with Chrome browser
2025-09-26 03:56:23,761 - INFO - ====== WebDriver manager ======
2025-09-26 03:56:23,813 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:56:23,939 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:56:24,023 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 03:56:25,567 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 03:58:27,282 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6d0d9c23d1a001c906d8190ec4e01455")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6d0d9c23d1a001c906d8190ec4e01455")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6383629da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5614e536efba <unknown>
E       #1 0x5614e4df36d0 <unknown>
E       #2 0x5614e4e452aa <unknown>
E       #3 0x5614e4e45541 <unknown>
E       #4 0x5614e4e936c4 <unknown>
E       #5 0x5614e4e6ae5d <unknown>
E       #6 0x5614e4e90b54 <unknown>
E       #7 0x5614e4e6ac03 <unknown>
E       #8 0x5614e4e377a8 <unknown>
E       #9 0x5614e4e38421 <unknown>
E       #10 0x5614e5333b28 <unknown>
E       #11 0x5614e533787f <unknown>
E       #12 0x5614e531bc49 <unknown>
E       #13 0x5614e5338405 <unknown>
E       #14 0x5614e53014ff <unknown>
E       #15 0x5614e535c258 <unknown>
E       #16 0x5614e535c432 <unknown>
E       #17 0x5614e536dfa3 <unknown>
E       #18 0x7ff6a169caa4 <unknown>
E       #19 0x7ff6a1729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 03:58:27,338 - INFO - Starting test with Chrome browser
2025-09-26 03:58:27,338 - INFO - ====== WebDriver manager ======
2025-09-26 03:58:27,390 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:58:27,473 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 03:58:27,555 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 03:58:29,086 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 04:00:30,772 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d94187bd3455986514cffcb022d1a8a5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d94187bd3455986514cffcb022d1a8a5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f638362a840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5561f5d1afba <unknown>
E       #1 0x5561f579f6d0 <unknown>
E       #2 0x5561f57f12aa <unknown>
E       #3 0x5561f57f1541 <unknown>
E       #4 0x5561f583f6c4 <unknown>
E       #5 0x5561f5816e5d <unknown>
E       #6 0x5561f583cb54 <unknown>
E       #7 0x5561f5816c03 <unknown>
E       #8 0x5561f57e37a8 <unknown>
E       #9 0x5561f57e4421 <unknown>
E       #10 0x5561f5cdfb28 <unknown>
E       #11 0x5561f5ce387f <unknown>
E       #12 0x5561f5cc7c49 <unknown>
E       #13 0x5561f5ce4405 <unknown>
E       #14 0x5561f5cad4ff <unknown>
E       #15 0x5561f5d08258 <unknown>
E       #16 0x5561f5d08432 <unknown>
E       #17 0x5561f5d19fa3 <unknown>
E       #18 0x7fc70249caa4 <unknown>
E       #19 0x7fc702529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 04:00:30,821 - INFO - Starting test with Chrome browser
2025-09-26 04:00:30,821 - INFO - ====== WebDriver manager ======
2025-09-26 04:00:30,873 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:00:30,955 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:00:31,041 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 04:00:32,580 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 04:02:34,320 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="db8b2bf8ebfb49fdc255bdf8c5710326")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="db8b2bf8ebfb49fdc255bdf8c5710326")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f638362ab60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55bbd6939fba <unknown>
E       #1 0x55bbd63be6d0 <unknown>
E       #2 0x55bbd64102aa <unknown>
E       #3 0x55bbd6410541 <unknown>
E       #4 0x55bbd645e6c4 <unknown>
E       #5 0x55bbd6435e5d <unknown>
E       #6 0x55bbd645bb54 <unknown>
E       #7 0x55bbd6435c03 <unknown>
E       #8 0x55bbd64027a8 <unknown>
E       #9 0x55bbd6403421 <unknown>
E       #10 0x55bbd68feb28 <unknown>
E       #11 0x55bbd690287f <unknown>
E       #12 0x55bbd68e6c49 <unknown>
E       #13 0x55bbd6903405 <unknown>
E       #14 0x55bbd68cc4ff <unknown>
E       #15 0x55bbd6927258 <unknown>
E       #16 0x55bbd6927432 <unknown>
E       #17 0x55bbd6938fa3 <unknown>
E       #18 0x7f26f709caa4 <unknown>
E       #19 0x7f26f7129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 04:02:34,376 - INFO - Starting test with Chrome browser
2025-09-26 04:02:34,376 - INFO - ====== WebDriver manager ======
2025-09-26 04:02:34,428 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:02:34,516 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:02:34,598 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 04:02:36,096 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 04:04:39,583 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="28d15deecb0b1be01123976e784927b2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="28d15deecb0b1be01123976e784927b2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f638362a8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55aceb7affba <unknown>
E       #1 0x55aceb2346d0 <unknown>
E       #2 0x55aceb2862aa <unknown>
E       #3 0x55aceb286541 <unknown>
E       #4 0x55aceb2d46c4 <unknown>
E       #5 0x55aceb2abe5d <unknown>
E       #6 0x55aceb2d1b54 <unknown>
E       #7 0x55aceb2abc03 <unknown>
E       #8 0x55aceb2787a8 <unknown>
E       #9 0x55aceb279421 <unknown>
E       #10 0x55aceb774b28 <unknown>
E       #11 0x55aceb77887f <unknown>
E       #12 0x55aceb75cc49 <unknown>
E       #13 0x55aceb779405 <unknown>
E       #14 0x55aceb7424ff <unknown>
E       #15 0x55aceb79d258 <unknown>
E       #16 0x55aceb79d432 <unknown>
E       #17 0x55aceb7aefa3 <unknown>
E       #18 0x7efce169caa4 <unknown>
E       #19 0x7efce1729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 04:04:39,640 - INFO - Starting test with Chrome browser
2025-09-26 04:04:39,640 - INFO - ====== WebDriver manager ======
2025-09-26 04:04:39,696 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:04:39,780 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:04:39,893 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 04:04:41,383 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 04:06:44,809 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ba095ff607d0497425f416387bef8ee6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ba095ff607d0497425f416387bef8ee6")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6383629da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55de3c675fba <unknown>
E       #1 0x55de3c0fa6d0 <unknown>
E       #2 0x55de3c14c2aa <unknown>
E       #3 0x55de3c14c541 <unknown>
E       #4 0x55de3c19a6c4 <unknown>
E       #5 0x55de3c171e5d <unknown>
E       #6 0x55de3c197b54 <unknown>
E       #7 0x55de3c171c03 <unknown>
E       #8 0x55de3c13e7a8 <unknown>
E       #9 0x55de3c13f421 <unknown>
E       #10 0x55de3c63ab28 <unknown>
E       #11 0x55de3c63e87f <unknown>
E       #12 0x55de3c622c49 <unknown>
E       #13 0x55de3c63f405 <unknown>
E       #14 0x55de3c6084ff <unknown>
E       #15 0x55de3c663258 <unknown>
E       #16 0x55de3c663432 <unknown>
E       #17 0x55de3c674fa3 <unknown>
E       #18 0x7f6ff3a9caa4 <unknown>
E       #19 0x7f6ff3b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 04:06:44,864 - INFO - Starting test with Chrome browser
2025-09-26 04:06:44,865 - INFO - ====== WebDriver manager ======
2025-09-26 04:06:44,918 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:06:45,009 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:06:45,092 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 04:06:47,204 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 04:08:50,635 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="04aac6546011197b7d62913f4482bf5b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="04aac6546011197b7d62913f4482bf5b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6383629940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559a918fffba <unknown>
E       #1 0x559a913846d0 <unknown>
E       #2 0x559a913d62aa <unknown>
E       #3 0x559a913d6541 <unknown>
E       #4 0x559a914246c4 <unknown>
E       #5 0x559a913fbe5d <unknown>
E       #6 0x559a91421b54 <unknown>
E       #7 0x559a913fbc03 <unknown>
E       #8 0x559a913c87a8 <unknown>
E       #9 0x559a913c9421 <unknown>
E       #10 0x559a918c4b28 <unknown>
E       #11 0x559a918c887f <unknown>
E       #12 0x559a918acc49 <unknown>
E       #13 0x559a918c9405 <unknown>
E       #14 0x559a918924ff <unknown>
E       #15 0x559a918ed258 <unknown>
E       #16 0x559a918ed432 <unknown>
E       #17 0x559a918fefa3 <unknown>
E       #18 0x7f5579e9caa4 <unknown>
E       #19 0x7f5579f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-26 04:08:50,691 - INFO - Starting test with Chrome browser
2025-09-26 04:08:50,691 - INFO - ====== WebDriver manager ======
2025-09-26 04:08:50,742 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:08:50,831 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-26 04:08:50,913 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-26 04:08:52,669 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-26 04:10:56,089 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250926_034554/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55bd2ca88fba <unknown>
#1 0x55bd2c50d6d0 <unknown>
#2 0x55bd2c55f2aa <unknown>
#3 0x55bd2c55f541 <unknown>
#4 0x55bd2c5ad6c4 <unknown>
#5 0x55bd2c584e5d <unknown>
#6 0x55bd2c5aab54 <unknown>
#7 0x55bd2c584c03 <unknown>
#8 0x55bd2c5517a8 <unknown>
#9 0x55bd2c552421 <unknown>
#10 0x55bd2ca4db28 <unknown>
#11 0x55bd2ca5187f <unknown>
#12 0x55bd2ca35c49 <unknown>
#13 0x55bd2ca52405 <unknown>
#14 0x55bd2ca1b4ff <unknown>
#15 0x55bd2ca76258 <unknown>
#16 0x55bd2ca76432 <unknown>
#17 0x55bd2ca87fa3 <unknown>
#18 0x7f02b2e9caa4 <unknown>
#19 0x7f02b2f29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559e2a04cfba <unknown>
#1 0x559e29ad16d0 <unknown>
#2 0x559e29b232aa <unknown>
#3 0x559e29b23541 <unknown>
#4 0x559e29b716c4 <unknown>
#5 0x559e29b48e5d <unknown>
#6 0x559e29b6eb54 <unknown>
#7 0x559e29b48c03 <unknown>
#8 0x559e29b157a8 <unknown>
#9 0x559e29b16421 <unknown>
#10 0x559e2a011b28 <unknown>
#11 0x559e2a01587f <unknown>
#12 0x559e29ff9c49 <unknown>
#13 0x559e2a016405 <unknown>
#14 0x559e29fdf4ff <unknown>
#15 0x559e2a03a258 <unknown>
#16 0x559e2a03a432 <unknown>
#17 0x559e2a04bfa3 <unknown>
#18 0x7fb2bf29caa4 <unknown>
#19 0x7fb2bf329c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562faf6eefba <unknown>
#1 0x562faf1736d0 <unknown>
#2 0x562faf1c52aa <unknown>
#3 0x562faf1c5541 <unknown>
#4 0x562faf2136c4 <unknown>
#5 0x562faf1eae5d <unknown>
#6 0x562faf210b54 <unknown>
#7 0x562faf1eac03 <unknown>
#8 0x562faf1b77a8 <unknown>
#9 0x562faf1b8421 <unknown>
#10 0x562faf6b3b28 <unknown>
#11 0x562faf6b787f <unknown>
#12 0x562faf69bc49 <unknown>
#13 0x562faf6b8405 <unknown>
#14 0x562faf6814ff <unknown>
#15 0x562faf6dc258 <unknown>
#16 0x562faf6dc432 <unknown>
#17 0x562faf6edfa3 <unknown>
#18 0x7f48d069caa4 <unknown>
#19 0x7f48d0729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5635f7953fba <unknown>
#1 0x5635f73d86d0 <unknown>
#2 0x5635f742a2aa <unknown>
#3 0x5635f742a541 <unknown>
#4 0x5635f74786c4 <unknown>
#5 0x5635f744fe5d <unknown>
#6 0x5635f7475b54 <unknown>
#7 0x5635f744fc03 <unknown>
#8 0x5635f741c7a8 <unknown>
#9 0x5635f741d421 <unknown>
#10 0x5635f7918b28 <unknown>
#11 0x5635f791c87f <unknown>
#12 0x5635f7900c49 <unknown>
#13 0x5635f791d405 <unknown>
#14 0x5635f78e64ff <unknown>
#15 0x5635f7941258 <unknown>
#16 0x5635f7941432 <unknown>
#17 0x5635f7952fa3 <unknown>
#18 0x7f891ec9caa4 <unknown>
#19 0x7f891ed29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b726d6dfba <unknown>
#1 0x55b7267f26d0 <unknown>
#2 0x55b7268442aa <unknown>
#3 0x55b726844541 <unknown>
#4 0x55b7268926c4 <unknown>
#5 0x55b726869e5d <unknown>
#6 0x55b72688fb54 <unknown>
#7 0x55b726869c03 <unknown>
#8 0x55b7268367a8 <unknown>
#9 0x55b726837421 <unknown>
#10 0x55b726d32b28 <unknown>
#11 0x55b726d3687f <unknown>
#12 0x55b726d1ac49 <unknown>
#13 0x55b726d37405 <unknown>
#14 0x55b726d004ff <unknown>
#15 0x55b726d5b258 <unknown>
#16 0x55b726d5b432 <unknown>
#17 0x55b726d6cfa3 <unknown>
#18 0x7f5a9209caa4 <unknown>
#19 0x7f5a92129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55acef6d5fba <unknown>
#1 0x55acef15a6d0 <unknown>
#2 0x55acef1ac2aa <unknown>
#3 0x55acef1ac541 <unknown>
#4 0x55acef1fa6c4 <unknown>
#5 0x55acef1d1e5d <unknown>
#6 0x55acef1f7b54 <unknown>
#7 0x55acef1d1c03 <unknown>
#8 0x55acef19e7a8 <unknown>
#9 0x55acef19f421 <unknown>
#10 0x55acef69ab28 <unknown>
#11 0x55acef69e87f <unknown>
#12 0x55acef682c49 <unknown>
#13 0x55acef69f405 <unknown>
#14 0x55acef6684ff <unknown>
#15 0x55acef6c3258 <unknown>
#16 0x55acef6c3432 <unknown>
#17 0x55acef6d4fa3 <unknown>
#18 0x7f347d09caa4 <unknown>
#19 0x7f347d129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5614e536efba <unknown>
#1 0x5614e4df36d0 <unknown>
#2 0x5614e4e452aa <unknown>
#3 0x5614e4e45541 <unknown>
#4 0x5614e4e936c4 <unknown>
#5 0x5614e4e6ae5d <unknown>
#6 0x5614e4e90b54 <unknown>
#7 0x5614e4e6ac03 <unknown>
#8 0x5614e4e377a8 <unknown>
#9 0x5614e4e38421 <unknown>
#10 0x5614e5333b28 <unknown>
#11 0x5614e533787f <unknown>
#12 0x5614e531bc49 <unknown>
#13 0x5614e5338405 <unknown>
#14 0x5614e53014ff <unknown>
#15 0x5614e535c258 <unknown>
#16 0x5614e535c432 <unknown>
#17 0x5614e536dfa3 <unknown>
#18 0x7ff6a169caa4 <unknown>
#19 0x7ff6a1729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5561f5d1afba <unknown>
#1 0x5561f579f6d0 <unknown>
#2 0x5561f57f12aa <unknown>
#3 0x5561f57f1541 <unknown>
#4 0x5561f583f6c4 <unknown>
#5 0x5561f5816e5d <unknown>
#6 0x5561f583cb54 <unknown>
#7 0x5561f5816c03 <unknown>
#8 0x5561f57e37a8 <unknown>
#9 0x5561f57e4421 <unknown>
#10 0x5561f5cdfb28 <unknown>
#11 0x5561f5ce387f <unknown>
#12 0x5561f5cc7c49 <unknown>
#13 0x5561f5ce4405 <unknown>
#14 0x5561f5cad4ff <unknown>
#15 0x5561f5d08258 <unknown>
#16 0x5561f5d08432 <unknown>
#17 0x5561f5d19fa3 <unknown>
#18 0x7fc70249caa4 <unknown>
#19 0x7fc702529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55bbd6939fba <unknown>
#1 0x55bbd63be6d0 <unknown>
#2 0x55bbd64102aa <unknown>
#3 0x55bbd6410541 <unknown>
#4 0x55bbd645e6c4 <unknown>
#5 0x55bbd6435e5d <unknown>
#6 0x55bbd645bb54 <unknown>
#7 0x55bbd6435c03 <unknown>
#8 0x55bbd64027a8 <unknown>
#9 0x55bbd6403421 <unknown>
#10 0x55bbd68feb28 <unknown>
#11 0x55bbd690287f <unknown>
#12 0x55bbd68e6c49 <unknown>
#13 0x55bbd6903405 <unknown>
#14 0x55bbd68cc4ff <unknown>
#15 0x55bbd6927258 <unknown>
#16 0x55bbd6927432 <unknown>
#17 0x55bbd6938fa3 <unknown>
#18 0x7f26f709caa4 <unknown>
#19 0x7f26f7129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55aceb7affba <unknown>
#1 0x55aceb2346d0 <unknown>
#2 0x55aceb2862aa <unknown>
#3 0x55aceb286541 <unknown>
#4 0x55aceb2d46c4 <unknown>
#5 0x55aceb2abe5d <unknown>
#6 0x55aceb2d1b54 <unknown>
#7 0x55aceb2abc03 <unknown>
#8 0x55aceb2787a8 <unknown>
#9 0x55aceb279421 <unknown>
#10 0x55aceb774b28 <unknown>
#11 0x55aceb77887f <unknown>
#12 0x55aceb75cc49 <unknown>
#13 0x55aceb779405 <unknown>
#14 0x55aceb7424ff <unknown>
#15 0x55aceb79d258 <unknown>
#16 0x55aceb79d432 <unknown>
#17 0x55aceb7aefa3 <unknown>
#18 0x7efce169caa4 <unknown>
#19 0x7efce1729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55de3c675fba <unknown>
#1 0x55de3c0fa6d0 <unknown>
#2 0x55de3c14c2aa <unknown>
#3 0x55de3c14c541 <unknown>
#4 0x55de3c19a6c4 <unknown>
#5 0x55de3c171e5d <unknown>
#6 0x55de3c197b54 <unknown>
#7 0x55de3c171c03 <unknown>
#8 0x55de3c13e7a8 <unknown>
#9 0x55de3c13f421 <unknown>
#10 0x55de3c63ab28 <unknown>
#11 0x55de3c63e87f <unknown>
#12 0x55de3c622c49 <unknown>
#13 0x55de3c63f405 <unknown>
#14 0x55de3c6084ff <unknown>
#15 0x55de3c663258 <unknown>
#16 0x55de3c663432 <unknown>
#17 0x55de3c674fa3 <unknown>
#18 0x7f6ff3a9caa4 <unknown>
#19 0x7f6ff3b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559a918fffba <unknown>
#1 0x559a913846d0 <unknown>
#2 0x559a913d62aa <unknown>
#3 0x559a913d6541 <unknown>
#4 0x559a914246c4 <unknown>
#5 0x559a913fbe5d <unknown>
#6 0x559a91421b54 <unknown>
#7 0x559a913fbc03 <unknown>
#8 0x559a913c87a8 <unknown>
#9 0x559a913c9421 <unknown>
#10 0x559a918c4b28 <unknown>
#11 0x559a918c887f <unknown>
#12 0x559a918acc49 <unknown>
#13 0x559a918c9405 <unknown>
#14 0x559a918924ff <unknown>
#15 0x559a918ed258 <unknown>
#16 0x559a918ed432 <unknown>
#17 0x559a918fefa3 <unknown>
#18 0x7f5579e9caa4 <unknown>
#19 0x7f5579f29c6c <unknown>
================== 12 failed, 7 passed in 1517.52s (0:25:17) ===================
--------------------------------------------
Test Run Finished: 2025-09-26 04:11:11
Duration: 1520 seconds
Status: FAILURE
Exit Code: 1
============================================
