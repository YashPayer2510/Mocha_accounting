========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-11 04:10:13
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.5/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.5', 'Platform': 'Linux-6.11.0-1015-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'metadata': '3.1.1', 'rerunfailures': '15.1', 'html': '4.1.1', 'Faker': '37.4.0', 'xdist': '3.8.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: metadata-3.1.1, rerunfailures-15.1, html-4.1.1, Faker-37.4.0, xdist-3.8.0
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e9645572d16669d551c9115c75f2f60b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c951940>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55c0add32556 \\u003Cunknown>\\n#18 0x7ff0eae9caa4 \\u003Cunknown>\\n#19 0x7ff0eaf29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x55c0add3323a <unknown>
E       #1 0x55c0ad7ddab0 <unknown>
E       #2 0x55c0ad7e4748 <unknown>
E       #3 0x55c0ad7e72c7 <unknown>
E       #4 0x55c0ad87bfde <unknown>
E       #5 0x55c0ad8551a2 <unknown>
E       #6 0x55c0ad87afee <unknown>
E       #7 0x55c0ad854f73 <unknown>
E       #8 0x55c0ad821aeb <unknown>
E       #9 0x55c0ad822751 <unknown>
E       #10 0x55c0adcf7b4b <unknown>
E       #11 0x55c0adcfb929 <unknown>
E       #12 0x55c0adcde929 <unknown>
E       #13 0x55c0adcfc4e8 <unknown>
E       #14 0x55c0adcc30df <unknown>
E       #15 0x55c0add208e8 <unknown>
E       #16 0x55c0add20ac6 <unknown>
E       #17 0x55c0add32556 <unknown>
E       #18 0x7ff0eae9caa4 <unknown>
E       #19 0x7ff0eaf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:16,011 - INFO - Test data loaded successfully.
2025-07-11 04:10:16,011 - INFO - Starting test with Chrome browser
2025-07-11 04:10:16,012 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:20,245 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:20,275 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:20,287 - INFO - There is no [linux64] chromedriver "138.0.7204.94" for browser google-chrome "138.0.7204" in cache
2025-07-11 04:10:20,287 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:20,329 - INFO - WebDriver version 138.0.7204.94 selected
2025-07-11 04:10:20,333 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
2025-07-11 04:10:20,333 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
2025-07-11 04:10:20,380 - INFO - Driver downloading response is 200
2025-07-11 04:10:20,424 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:20,547 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94]
2025-07-11 04:10:26,532 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "138.0.7204.94" for browser google-chrome "138.0.7204" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 138.0.7204.94 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.94/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-11 04:10:26,534 - INFO - Starting the test case for valid credentials
2025-07-11 04:10:28,060 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:29,282 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ac39dcc4ce15f7861c5ebabf525d26bf")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c95cf50>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x556fb8b9d556 \\u003Cunknown>\\n#18 0x7f9e7449caa4 \\u003Cunknown>\\n#19 0x7f9e74529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x556fb8b9e23a <unknown>
E       #1 0x556fb8648ab0 <unknown>
E       #2 0x556fb864f748 <unknown>
E       #3 0x556fb86522c7 <unknown>
E       #4 0x556fb86e6fde <unknown>
E       #5 0x556fb86c01a2 <unknown>
E       #6 0x556fb86e5fee <unknown>
E       #7 0x556fb86bff73 <unknown>
E       #8 0x556fb868caeb <unknown>
E       #9 0x556fb868d751 <unknown>
E       #10 0x556fb8b62b4b <unknown>
E       #11 0x556fb8b66929 <unknown>
E       #12 0x556fb8b49929 <unknown>
E       #13 0x556fb8b674e8 <unknown>
E       #14 0x556fb8b2e0df <unknown>
E       #15 0x556fb8b8b8e8 <unknown>
E       #16 0x556fb8b8bac6 <unknown>
E       #17 0x556fb8b9d556 <unknown>
E       #18 0x7f9e7449caa4 <unknown>
E       #19 0x7f9e74529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:29,420 - INFO - Starting test with Chrome browser
2025-07-11 04:10:29,420 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:29,529 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:29,548 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:29,574 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:31,474 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-11 04:10:31,474 - INFO - Starting the test case for valid credentials
2025-07-11 04:10:31,700 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:32,342 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0f06b8ebd73eaf7edd41991f0cd9ba54")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c904690>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5599c0043556 \\u003Cunknown>\\n#18 0x7fa6dc49caa4 \\u003Cunknown>\\n#19 0x7fa6dc529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x5599c004423a <unknown>
E       #1 0x5599bfaeeab0 <unknown>
E       #2 0x5599bfaf5748 <unknown>
E       #3 0x5599bfaf82c7 <unknown>
E       #4 0x5599bfb8cfde <unknown>
E       #5 0x5599bfb661a2 <unknown>
E       #6 0x5599bfb8bfee <unknown>
E       #7 0x5599bfb65f73 <unknown>
E       #8 0x5599bfb32aeb <unknown>
E       #9 0x5599bfb33751 <unknown>
E       #10 0x5599c0008b4b <unknown>
E       #11 0x5599c000c929 <unknown>
E       #12 0x5599bffef929 <unknown>
E       #13 0x5599c000d4e8 <unknown>
E       #14 0x5599bffd40df <unknown>
E       #15 0x5599c00318e8 <unknown>
E       #16 0x5599c0031ac6 <unknown>
E       #17 0x5599c0043556 <unknown>
E       #18 0x7fa6dc49caa4 <unknown>
E       #19 0x7fa6dc529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:32,425 - INFO - Starting test with Chrome browser
2025-07-11 04:10:32,426 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:32,534 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:32,545 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:32,555 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:34,416 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-11 04:10:34,416 - INFO - Starting the test case for valid credentials
2025-07-11 04:10:34,638 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:35,279 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="20ee0226eea05da2959172e6772729ff")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c91c050>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5569ae6fa556 \\u003Cunknown>\\n#18 0x7f8bda49caa4 \\u003Cunknown>\\n#19 0x7f8bda529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x5569ae6fb23a <unknown>
E       #1 0x5569ae1a5ab0 <unknown>
E       #2 0x5569ae1ac748 <unknown>
E       #3 0x5569ae1af2c7 <unknown>
E       #4 0x5569ae243fde <unknown>
E       #5 0x5569ae21d1a2 <unknown>
E       #6 0x5569ae242fee <unknown>
E       #7 0x5569ae21cf73 <unknown>
E       #8 0x5569ae1e9aeb <unknown>
E       #9 0x5569ae1ea751 <unknown>
E       #10 0x5569ae6bfb4b <unknown>
E       #11 0x5569ae6c3929 <unknown>
E       #12 0x5569ae6a6929 <unknown>
E       #13 0x5569ae6c44e8 <unknown>
E       #14 0x5569ae68b0df <unknown>
E       #15 0x5569ae6e88e8 <unknown>
E       #16 0x5569ae6e8ac6 <unknown>
E       #17 0x5569ae6fa556 <unknown>
E       #18 0x7f8bda49caa4 <unknown>
E       #19 0x7f8bda529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:35,362 - INFO - Starting test with Chrome browser
2025-07-11 04:10:35,362 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:35,471 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:35,482 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:35,493 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:37,367 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-11 04:10:37,368 - INFO - Starting the test case for valid credentials
2025-07-11 04:10:37,640 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:38,299 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ce32563bb4a7653345626a15c965a8d1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c91cd60>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55a7cdfc7556 \\u003Cunknown>\\n#18 0x7ff57f69caa4 \\u003Cunknown>\\n#19 0x7ff57f729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x55a7cdfc823a <unknown>
E       #1 0x55a7cda72ab0 <unknown>
E       #2 0x55a7cda79748 <unknown>
E       #3 0x55a7cda7c2c7 <unknown>
E       #4 0x55a7cdb10fde <unknown>
E       #5 0x55a7cdaea1a2 <unknown>
E       #6 0x55a7cdb0ffee <unknown>
E       #7 0x55a7cdae9f73 <unknown>
E       #8 0x55a7cdab6aeb <unknown>
E       #9 0x55a7cdab7751 <unknown>
E       #10 0x55a7cdf8cb4b <unknown>
E       #11 0x55a7cdf90929 <unknown>
E       #12 0x55a7cdf73929 <unknown>
E       #13 0x55a7cdf914e8 <unknown>
E       #14 0x55a7cdf580df <unknown>
E       #15 0x55a7cdfb58e8 <unknown>
E       #16 0x55a7cdfb5ac6 <unknown>
E       #17 0x55a7cdfc7556 <unknown>
E       #18 0x7ff57f69caa4 <unknown>
E       #19 0x7ff57f729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:38,383 - INFO - Starting test with Chrome browser
2025-07-11 04:10:38,383 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:38,492 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:38,502 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:38,512 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:40,549 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:40,957 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="48b9c78de3f5ba7bd7d82c9aa0c05762")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c96e450>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55c7879d6556 \\u003Cunknown>\\n#18 0x7f6dba09caa4 \\u003Cunknown>\\n#19 0x7f6dba129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x55c7879d723a <unknown>
E       #1 0x55c787481ab0 <unknown>
E       #2 0x55c787488748 <unknown>
E       #3 0x55c78748b2c7 <unknown>
E       #4 0x55c78751ffde <unknown>
E       #5 0x55c7874f91a2 <unknown>
E       #6 0x55c78751efee <unknown>
E       #7 0x55c7874f8f73 <unknown>
E       #8 0x55c7874c5aeb <unknown>
E       #9 0x55c7874c6751 <unknown>
E       #10 0x55c78799bb4b <unknown>
E       #11 0x55c78799f929 <unknown>
E       #12 0x55c787982929 <unknown>
E       #13 0x55c7879a04e8 <unknown>
E       #14 0x55c7879670df <unknown>
E       #15 0x55c7879c48e8 <unknown>
E       #16 0x55c7879c4ac6 <unknown>
E       #17 0x55c7879d6556 <unknown>
E       #18 0x7f6dba09caa4 <unknown>
E       #19 0x7f6dba129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:41,059 - INFO - Starting test with Chrome browser
2025-07-11 04:10:41,059 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:41,167 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:41,179 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:41,192 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:43,048 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:43,496 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5adc6a8834753b9579e30a17de704dae")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4ba45370>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x560578231556 \\u003Cunknown>\\n#18 0x7f6eef89caa4 \\u003Cunknown>\\n#19 0x7f6eef929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x56057823223a <unknown>
E       #1 0x560577cdcab0 <unknown>
E       #2 0x560577ce3748 <unknown>
E       #3 0x560577ce62c7 <unknown>
E       #4 0x560577d7afde <unknown>
E       #5 0x560577d541a2 <unknown>
E       #6 0x560577d79fee <unknown>
E       #7 0x560577d53f73 <unknown>
E       #8 0x560577d20aeb <unknown>
E       #9 0x560577d21751 <unknown>
E       #10 0x5605781f6b4b <unknown>
E       #11 0x5605781fa929 <unknown>
E       #12 0x5605781dd929 <unknown>
E       #13 0x5605781fb4e8 <unknown>
E       #14 0x5605781c20df <unknown>
E       #15 0x56057821f8e8 <unknown>
E       #16 0x56057821fac6 <unknown>
E       #17 0x560578231556 <unknown>
E       #18 0x7f6eef89caa4 <unknown>
E       #19 0x7f6eef929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:43,583 - INFO - Starting test with Chrome browser
2025-07-11 04:10:43,583 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:43,691 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:43,703 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:43,715 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:45,782 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:46,225 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="67eca3de3acb4e902587b5a760d10d45")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4ba46250>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55ac6de64556 \\u003Cunknown>\\n#18 0x7faeec69caa4 \\u003Cunknown>\\n#19 0x7faeec729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x55ac6de6523a <unknown>
E       #1 0x55ac6d90fab0 <unknown>
E       #2 0x55ac6d916748 <unknown>
E       #3 0x55ac6d9192c7 <unknown>
E       #4 0x55ac6d9adfde <unknown>
E       #5 0x55ac6d9871a2 <unknown>
E       #6 0x55ac6d9acfee <unknown>
E       #7 0x55ac6d986f73 <unknown>
E       #8 0x55ac6d953aeb <unknown>
E       #9 0x55ac6d954751 <unknown>
E       #10 0x55ac6de29b4b <unknown>
E       #11 0x55ac6de2d929 <unknown>
E       #12 0x55ac6de10929 <unknown>
E       #13 0x55ac6de2e4e8 <unknown>
E       #14 0x55ac6ddf50df <unknown>
E       #15 0x55ac6de528e8 <unknown>
E       #16 0x55ac6de52ac6 <unknown>
E       #17 0x55ac6de64556 <unknown>
E       #18 0x7faeec69caa4 <unknown>
E       #19 0x7faeec729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:46,308 - INFO - Starting test with Chrome browser
2025-07-11 04:10:46,308 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:46,418 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:46,430 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:46,446 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:48,316 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:49,099 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d46dc293006f05b2d24ee895f855dd7f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c93d450>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5563208d6556 \\u003Cunknown>\\n#18 0x7f3378a9caa4 \\u003Cunknown>\\n#19 0x7f3378b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x5563208d723a <unknown>
E       #1 0x556320381ab0 <unknown>
E       #2 0x556320388748 <unknown>
E       #3 0x55632038b2c7 <unknown>
E       #4 0x55632041ffde <unknown>
E       #5 0x5563203f91a2 <unknown>
E       #6 0x55632041efee <unknown>
E       #7 0x5563203f8f73 <unknown>
E       #8 0x5563203c5aeb <unknown>
E       #9 0x5563203c6751 <unknown>
E       #10 0x55632089bb4b <unknown>
E       #11 0x55632089f929 <unknown>
E       #12 0x556320882929 <unknown>
E       #13 0x5563208a04e8 <unknown>
E       #14 0x5563208670df <unknown>
E       #15 0x5563208c48e8 <unknown>
E       #16 0x5563208c4ac6 <unknown>
E       #17 0x5563208d6556 <unknown>
E       #18 0x7f3378a9caa4 <unknown>
E       #19 0x7f3378b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:49,184 - INFO - Starting test with Chrome browser
2025-07-11 04:10:49,184 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:49,293 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:49,305 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:49,318 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:50,019 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:51,688 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8f4d06b788d7913310081980fec9c8e4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c93e250>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5580e5ac3556 \\u003Cunknown>\\n#18 0x7fb40f09caa4 \\u003Cunknown>\\n#19 0x7fb40f129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x5580e5ac423a <unknown>
E       #1 0x5580e556eab0 <unknown>
E       #2 0x5580e5575748 <unknown>
E       #3 0x5580e55782c7 <unknown>
E       #4 0x5580e560cfde <unknown>
E       #5 0x5580e55e61a2 <unknown>
E       #6 0x5580e560bfee <unknown>
E       #7 0x5580e55e5f73 <unknown>
E       #8 0x5580e55b2aeb <unknown>
E       #9 0x5580e55b3751 <unknown>
E       #10 0x5580e5a88b4b <unknown>
E       #11 0x5580e5a8c929 <unknown>
E       #12 0x5580e5a6f929 <unknown>
E       #13 0x5580e5a8d4e8 <unknown>
E       #14 0x5580e5a540df <unknown>
E       #15 0x5580e5ab18e8 <unknown>
E       #16 0x5580e5ab1ac6 <unknown>
E       #17 0x5580e5ac3556 <unknown>
E       #18 0x7fb40f09caa4 <unknown>
E       #19 0x7fb40f129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:51,794 - INFO - Starting test with Chrome browser
2025-07-11 04:10:51,794 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:51,901 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:51,912 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:51,923 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:53,959 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:54,901 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3cd694eecbf431c6f7371927b624c085")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4b9506e0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x556334c2f556 \\u003Cunknown>\\n#18 0x7f113229caa4 \\u003Cunknown>\\n#19 0x7f1132329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x556334c3023a <unknown>
E       #1 0x5563346daab0 <unknown>
E       #2 0x5563346e1748 <unknown>
E       #3 0x5563346e42c7 <unknown>
E       #4 0x556334778fde <unknown>
E       #5 0x5563347521a2 <unknown>
E       #6 0x556334777fee <unknown>
E       #7 0x556334751f73 <unknown>
E       #8 0x55633471eaeb <unknown>
E       #9 0x55633471f751 <unknown>
E       #10 0x556334bf4b4b <unknown>
E       #11 0x556334bf8929 <unknown>
E       #12 0x556334bdb929 <unknown>
E       #13 0x556334bf94e8 <unknown>
E       #14 0x556334bc00df <unknown>
E       #15 0x556334c1d8e8 <unknown>
E       #16 0x556334c1dac6 <unknown>
E       #17 0x556334c2f556 <unknown>
E       #18 0x7f113229caa4 <unknown>
E       #19 0x7f1132329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:55,002 - INFO - Starting test with Chrome browser
2025-07-11 04:10:55,002 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:55,111 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:55,122 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:55,132 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:10:57,000 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:10:57,920 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="eb6ff6cff9f3a50ba83ced3d01118db8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c963d40>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55dbd8add556 \\u003Cunknown>\\n#18 0x7efca409caa4 \\u003Cunknown>\\n#19 0x7efca4129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x55dbd8ade23a <unknown>
E       #1 0x55dbd8588ab0 <unknown>
E       #2 0x55dbd858f748 <unknown>
E       #3 0x55dbd85922c7 <unknown>
E       #4 0x55dbd8626fde <unknown>
E       #5 0x55dbd86001a2 <unknown>
E       #6 0x55dbd8625fee <unknown>
E       #7 0x55dbd85fff73 <unknown>
E       #8 0x55dbd85ccaeb <unknown>
E       #9 0x55dbd85cd751 <unknown>
E       #10 0x55dbd8aa2b4b <unknown>
E       #11 0x55dbd8aa6929 <unknown>
E       #12 0x55dbd8a89929 <unknown>
E       #13 0x55dbd8aa74e8 <unknown>
E       #14 0x55dbd8a6e0df <unknown>
E       #15 0x55dbd8acb8e8 <unknown>
E       #16 0x55dbd8acbac6 <unknown>
E       #17 0x55dbd8add556 <unknown>
E       #18 0x7efca409caa4 <unknown>
E       #19 0x7efca4129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:10:58,022 - INFO - Starting test with Chrome browser
2025-07-11 04:10:58,022 - INFO - ====== WebDriver manager ======
2025-07-11 04:10:58,132 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:58,146 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:10:58,156 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:11:00,107 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:11:01,019 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fa1a78e71d23000c3874db4f63495a57")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
>       login_page.disabled_click_login_button()

tests/test_login.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c942eb0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x558a118a9556 \\u003Cunknown>\\n#18 0x7f6df009caa4 \\u003Cunknown>\\n#19 0x7f6df0129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x558a118aa23a <unknown>
E       #1 0x558a11354ab0 <unknown>
E       #2 0x558a1135b748 <unknown>
E       #3 0x558a1135e2c7 <unknown>
E       #4 0x558a113f2fde <unknown>
E       #5 0x558a113cc1a2 <unknown>
E       #6 0x558a113f1fee <unknown>
E       #7 0x558a113cbf73 <unknown>
E       #8 0x558a11398aeb <unknown>
E       #9 0x558a11399751 <unknown>
E       #10 0x558a1186eb4b <unknown>
E       #11 0x558a11872929 <unknown>
E       #12 0x558a11855929 <unknown>
E       #13 0x558a118734e8 <unknown>
E       #14 0x558a1183a0df <unknown>
E       #15 0x558a118978e8 <unknown>
E       #16 0x558a11897ac6 <unknown>
E       #17 0x558a118a9556 <unknown>
E       #18 0x7f6df009caa4 <unknown>
E       #19 0x7f6df0129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:11:01,102 - INFO - Starting test with Chrome browser
2025-07-11 04:11:01,102 - INFO - ====== WebDriver manager ======
2025-07-11 04:11:01,212 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:01,223 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:01,233 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:11:03,200 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:11:03,556 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0b239a971376215b376a437e2a61b158")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
>       login_page.click_password()

tests/test_login.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:40: in click_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c943770>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5619bba2b556 \\u003Cunknown>\\n#18 0x7f80ad09caa4 \\u003Cunknown>\\n#19 0x7f80ad129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x5619bba2c23a <unknown>
E       #1 0x5619bb4d6ab0 <unknown>
E       #2 0x5619bb4dd748 <unknown>
E       #3 0x5619bb4e02c7 <unknown>
E       #4 0x5619bb574fde <unknown>
E       #5 0x5619bb54e1a2 <unknown>
E       #6 0x5619bb573fee <unknown>
E       #7 0x5619bb54df73 <unknown>
E       #8 0x5619bb51aaeb <unknown>
E       #9 0x5619bb51b751 <unknown>
E       #10 0x5619bb9f0b4b <unknown>
E       #11 0x5619bb9f4929 <unknown>
E       #12 0x5619bb9d7929 <unknown>
E       #13 0x5619bb9f54e8 <unknown>
E       #14 0x5619bb9bc0df <unknown>
E       #15 0x5619bba198e8 <unknown>
E       #16 0x5619bba19ac6 <unknown>
E       #17 0x5619bba2b556 <unknown>
E       #18 0x7f80ad09caa4 <unknown>
E       #19 0x7f80ad129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:11:03,655 - INFO - Starting test with Chrome browser
2025-07-11 04:11:03,655 - INFO - ====== WebDriver manager ======
2025-07-11 04:11:03,764 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:03,776 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:03,787 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:11:05,779 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:11:06,711 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d40335d52c72a12b030e71acd4350b49")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4d4aad00>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x56465d140556 \\u003Cunknown>\\n#18 0x7f8d9449caa4 \\u003Cunknown>\\n#19 0x7f8d94529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x56465d14123a <unknown>
E       #1 0x56465cbebab0 <unknown>
E       #2 0x56465cbf2748 <unknown>
E       #3 0x56465cbf52c7 <unknown>
E       #4 0x56465cc89fde <unknown>
E       #5 0x56465cc631a2 <unknown>
E       #6 0x56465cc88fee <unknown>
E       #7 0x56465cc62f73 <unknown>
E       #8 0x56465cc2faeb <unknown>
E       #9 0x56465cc30751 <unknown>
E       #10 0x56465d105b4b <unknown>
E       #11 0x56465d109929 <unknown>
E       #12 0x56465d0ec929 <unknown>
E       #13 0x56465d10a4e8 <unknown>
E       #14 0x56465d0d10df <unknown>
E       #15 0x56465d12e8e8 <unknown>
E       #16 0x56465d12eac6 <unknown>
E       #17 0x56465d140556 <unknown>
E       #18 0x7f8d9449caa4 <unknown>
E       #19 0x7f8d94529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:11:06,794 - INFO - Starting test with Chrome browser
2025-07-11 04:11:06,794 - INFO - ====== WebDriver manager ======
2025-07-11 04:11:06,902 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:06,913 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:06,923 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:11:08,891 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:11:09,313 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2fa63fb7b0bb85b29e12aefa64612870")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c9a2810>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x561463e3d556 \\u003Cunknown>\\n#18 0x7fdf94c9caa4 \\u003Cunknown>\\n#19 0x7fdf94d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x561463e3e23a <unknown>
E       #1 0x5614638e8ab0 <unknown>
E       #2 0x5614638ef748 <unknown>
E       #3 0x5614638f22c7 <unknown>
E       #4 0x561463986fde <unknown>
E       #5 0x5614639601a2 <unknown>
E       #6 0x561463985fee <unknown>
E       #7 0x56146395ff73 <unknown>
E       #8 0x56146392caeb <unknown>
E       #9 0x56146392d751 <unknown>
E       #10 0x561463e02b4b <unknown>
E       #11 0x561463e06929 <unknown>
E       #12 0x561463de9929 <unknown>
E       #13 0x561463e074e8 <unknown>
E       #14 0x561463dce0df <unknown>
E       #15 0x561463e2b8e8 <unknown>
E       #16 0x561463e2bac6 <unknown>
E       #17 0x561463e3d556 <unknown>
E       #18 0x7fdf94c9caa4 <unknown>
E       #19 0x7fdf94d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:11:09,398 - INFO - Starting test with Chrome browser
2025-07-11 04:11:09,398 - INFO - ====== WebDriver manager ======
2025-07-11 04:11:09,506 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:09,519 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:09,529 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:11:11,426 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:11:11,849 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="48ed7b3d867672154edc296efce5924d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4b9bc410>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5570a9437556 \\u003Cunknown>\\n#18 0x7faa1f29caa4 \\u003Cunknown>\\n#19 0x7faa1f329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x5570a943823a <unknown>
E       #1 0x5570a8ee2ab0 <unknown>
E       #2 0x5570a8ee9748 <unknown>
E       #3 0x5570a8eec2c7 <unknown>
E       #4 0x5570a8f80fde <unknown>
E       #5 0x5570a8f5a1a2 <unknown>
E       #6 0x5570a8f7ffee <unknown>
E       #7 0x5570a8f59f73 <unknown>
E       #8 0x5570a8f26aeb <unknown>
E       #9 0x5570a8f27751 <unknown>
E       #10 0x5570a93fcb4b <unknown>
E       #11 0x5570a9400929 <unknown>
E       #12 0x5570a93e3929 <unknown>
E       #13 0x5570a94014e8 <unknown>
E       #14 0x5570a93c80df <unknown>
E       #15 0x5570a94258e8 <unknown>
E       #16 0x5570a9425ac6 <unknown>
E       #17 0x5570a9437556 <unknown>
E       #18 0x7faa1f29caa4 <unknown>
E       #19 0x7faa1f329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:11:11,949 - INFO - Starting test with Chrome browser
2025-07-11 04:11:11,949 - INFO - ====== WebDriver manager ======
2025-07-11 04:11:12,056 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:12,068 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:12,078 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:11:14,031 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:11:14,473 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8d854cddad98e92f7ad9dbe4b9367149")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
>       login_page.enter_username(username)

tests/test_login.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:28: in enter_username
    self.actions.wait_for_element(self.login_username)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c5e0e10>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5573d4ac9556 \\u003Cunknown>\\n#18 0x7fe64a29caa4 \\u003Cunknown>\\n#19 0x7fe64a329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x5573d4aca23a <unknown>
E       #1 0x5573d4574ab0 <unknown>
E       #2 0x5573d457b748 <unknown>
E       #3 0x5573d457e2c7 <unknown>
E       #4 0x5573d4612fde <unknown>
E       #5 0x5573d45ec1a2 <unknown>
E       #6 0x5573d4611fee <unknown>
E       #7 0x5573d45ebf73 <unknown>
E       #8 0x5573d45b8aeb <unknown>
E       #9 0x5573d45b9751 <unknown>
E       #10 0x5573d4a8eb4b <unknown>
E       #11 0x5573d4a92929 <unknown>
E       #12 0x5573d4a75929 <unknown>
E       #13 0x5573d4a934e8 <unknown>
E       #14 0x5573d4a5a0df <unknown>
E       #15 0x5573d4ab78e8 <unknown>
E       #16 0x5573d4ab7ac6 <unknown>
E       #17 0x5573d4ac9556 <unknown>
E       #18 0x7fe64a29caa4 <unknown>
E       #19 0x7fe64a329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:11:14,556 - INFO - Starting test with Chrome browser
2025-07-11 04:11:14,557 - INFO - ====== WebDriver manager ======
2025-07-11 04:11:14,667 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:14,679 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:14,690 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:11:16,908 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:11:17,100 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e957f2828cf388c231f24d9470542071")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5e4c5e0aa0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x556d0ec14556 \\u003Cunknown>\\n#18 0x7fad90e9caa4 \\u003Cunknown>\\n#19 0x7fad90f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.49)
E       Stacktrace:
E       #0 0x556d0ec1523a <unknown>
E       #1 0x556d0e6bfab0 <unknown>
E       #2 0x556d0e6c6748 <unknown>
E       #3 0x556d0e6c92c7 <unknown>
E       #4 0x556d0e75dfde <unknown>
E       #5 0x556d0e7371a2 <unknown>
E       #6 0x556d0e75cfee <unknown>
E       #7 0x556d0e736f73 <unknown>
E       #8 0x556d0e703aeb <unknown>
E       #9 0x556d0e704751 <unknown>
E       #10 0x556d0ebd9b4b <unknown>
E       #11 0x556d0ebdd929 <unknown>
E       #12 0x556d0ebc0929 <unknown>
E       #13 0x556d0ebde4e8 <unknown>
E       #14 0x556d0eba50df <unknown>
E       #15 0x556d0ec028e8 <unknown>
E       #16 0x556d0ec02ac6 <unknown>
E       #17 0x556d0ec14556 <unknown>
E       #18 0x7fad90e9caa4 <unknown>
E       #19 0x7fad90f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-11 04:11:17,200 - INFO - Starting test with Chrome browser
2025-07-11 04:11:17,200 - INFO - ====== WebDriver manager ======
2025-07-11 04:11:17,307 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:17,319 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-11 04:11:17,329 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
2025-07-11 04:11:17,705 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.94/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-11 04:11:19,731 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250711_041015/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x55c0add3323a <unknown>
#1 0x55c0ad7ddab0 <unknown>
#2 0x55c0ad7e4748 <unknown>
#3 0x55c0ad7e72c7 <unknown>
#4 0x55c0ad87bfde <unknown>
#5 0x55c0ad8551a2 <unknown>
#6 0x55c0ad87afee <unknown>
#7 0x55c0ad854f73 <unknown>
#8 0x55c0ad821aeb <unknown>
#9 0x55c0ad822751 <unknown>
#10 0x55c0adcf7b4b <unknown>
#11 0x55c0adcfb929 <unknown>
#12 0x55c0adcde929 <unknown>
#13 0x55c0adcfc4e8 <unknown>
#14 0x55c0adcc30df <unknown>
#15 0x55c0add208e8 <unknown>
#16 0x55c0add20ac6 <unknown>
#17 0x55c0add32556 <unknown>
#18 0x7ff0eae9caa4 <unknown>
#19 0x7ff0eaf29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x556fb8b9e23a <unknown>
#1 0x556fb8648ab0 <unknown>
#2 0x556fb864f748 <unknown>
#3 0x556fb86522c7 <unknown>
#4 0x556fb86e6fde <unknown>
#5 0x556fb86c01a2 <unknown>
#6 0x556fb86e5fee <unknown>
#7 0x556fb86bff73 <unknown>
#8 0x556fb868caeb <unknown>
#9 0x556fb868d751 <unknown>
#10 0x556fb8b62b4b <unknown>
#11 0x556fb8b66929 <unknown>
#12 0x556fb8b49929 <unknown>
#13 0x556fb8b674e8 <unknown>
#14 0x556fb8b2e0df <unknown>
#15 0x556fb8b8b8e8 <unknown>
#16 0x556fb8b8bac6 <unknown>
#17 0x556fb8b9d556 <unknown>
#18 0x7f9e7449caa4 <unknown>
#19 0x7f9e74529c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x5599c004423a <unknown>
#1 0x5599bfaeeab0 <unknown>
#2 0x5599bfaf5748 <unknown>
#3 0x5599bfaf82c7 <unknown>
#4 0x5599bfb8cfde <unknown>
#5 0x5599bfb661a2 <unknown>
#6 0x5599bfb8bfee <unknown>
#7 0x5599bfb65f73 <unknown>
#8 0x5599bfb32aeb <unknown>
#9 0x5599bfb33751 <unknown>
#10 0x5599c0008b4b <unknown>
#11 0x5599c000c929 <unknown>
#12 0x5599bffef929 <unknown>
#13 0x5599c000d4e8 <unknown>
#14 0x5599bffd40df <unknown>
#15 0x5599c00318e8 <unknown>
#16 0x5599c0031ac6 <unknown>
#17 0x5599c0043556 <unknown>
#18 0x7fa6dc49caa4 <unknown>
#19 0x7fa6dc529c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x5569ae6fb23a <unknown>
#1 0x5569ae1a5ab0 <unknown>
#2 0x5569ae1ac748 <unknown>
#3 0x5569ae1af2c7 <unknown>
#4 0x5569ae243fde <unknown>
#5 0x5569ae21d1a2 <unknown>
#6 0x5569ae242fee <unknown>
#7 0x5569ae21cf73 <unknown>
#8 0x5569ae1e9aeb <unknown>
#9 0x5569ae1ea751 <unknown>
#10 0x5569ae6bfb4b <unknown>
#11 0x5569ae6c3929 <unknown>
#12 0x5569ae6a6929 <unknown>
#13 0x5569ae6c44e8 <unknown>
#14 0x5569ae68b0df <unknown>
#15 0x5569ae6e88e8 <unknown>
#16 0x5569ae6e8ac6 <unknown>
#17 0x5569ae6fa556 <unknown>
#18 0x7f8bda49caa4 <unknown>
#19 0x7f8bda529c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x55a7cdfc823a <unknown>
#1 0x55a7cda72ab0 <unknown>
#2 0x55a7cda79748 <unknown>
#3 0x55a7cda7c2c7 <unknown>
#4 0x55a7cdb10fde <unknown>
#5 0x55a7cdaea1a2 <unknown>
#6 0x55a7cdb0ffee <unknown>
#7 0x55a7cdae9f73 <unknown>
#8 0x55a7cdab6aeb <unknown>
#9 0x55a7cdab7751 <unknown>
#10 0x55a7cdf8cb4b <unknown>
#11 0x55a7cdf90929 <unknown>
#12 0x55a7cdf73929 <unknown>
#13 0x55a7cdf914e8 <unknown>
#14 0x55a7cdf580df <unknown>
#15 0x55a7cdfb58e8 <unknown>
#16 0x55a7cdfb5ac6 <unknown>
#17 0x55a7cdfc7556 <unknown>
#18 0x7ff57f69caa4 <unknown>
#19 0x7ff57f729c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x55c7879d723a <unknown>
#1 0x55c787481ab0 <unknown>
#2 0x55c787488748 <unknown>
#3 0x55c78748b2c7 <unknown>
#4 0x55c78751ffde <unknown>
#5 0x55c7874f91a2 <unknown>
#6 0x55c78751efee <unknown>
#7 0x55c7874f8f73 <unknown>
#8 0x55c7874c5aeb <unknown>
#9 0x55c7874c6751 <unknown>
#10 0x55c78799bb4b <unknown>
#11 0x55c78799f929 <unknown>
#12 0x55c787982929 <unknown>
#13 0x55c7879a04e8 <unknown>
#14 0x55c7879670df <unknown>
#15 0x55c7879c48e8 <unknown>
#16 0x55c7879c4ac6 <unknown>
#17 0x55c7879d6556 <unknown>
#18 0x7f6dba09caa4 <unknown>
#19 0x7f6dba129c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x56057823223a <unknown>
#1 0x560577cdcab0 <unknown>
#2 0x560577ce3748 <unknown>
#3 0x560577ce62c7 <unknown>
#4 0x560577d7afde <unknown>
#5 0x560577d541a2 <unknown>
#6 0x560577d79fee <unknown>
#7 0x560577d53f73 <unknown>
#8 0x560577d20aeb <unknown>
#9 0x560577d21751 <unknown>
#10 0x5605781f6b4b <unknown>
#11 0x5605781fa929 <unknown>
#12 0x5605781dd929 <unknown>
#13 0x5605781fb4e8 <unknown>
#14 0x5605781c20df <unknown>
#15 0x56057821f8e8 <unknown>
#16 0x56057821fac6 <unknown>
#17 0x560578231556 <unknown>
#18 0x7f6eef89caa4 <unknown>
#19 0x7f6eef929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x55ac6de6523a <unknown>
#1 0x55ac6d90fab0 <unknown>
#2 0x55ac6d916748 <unknown>
#3 0x55ac6d9192c7 <unknown>
#4 0x55ac6d9adfde <unknown>
#5 0x55ac6d9871a2 <unknown>
#6 0x55ac6d9acfee <unknown>
#7 0x55ac6d986f73 <unknown>
#8 0x55ac6d953aeb <unknown>
#9 0x55ac6d954751 <unknown>
#10 0x55ac6de29b4b <unknown>
#11 0x55ac6de2d929 <unknown>
#12 0x55ac6de10929 <unknown>
#13 0x55ac6de2e4e8 <unknown>
#14 0x55ac6ddf50df <unknown>
#15 0x55ac6de528e8 <unknown>
#16 0x55ac6de52ac6 <unknown>
#17 0x55ac6de64556 <unknown>
#18 0x7faeec69caa4 <unknown>
#19 0x7faeec729c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x5563208d723a <unknown>
#1 0x556320381ab0 <unknown>
#2 0x556320388748 <unknown>
#3 0x55632038b2c7 <unknown>
#4 0x55632041ffde <unknown>
#5 0x5563203f91a2 <unknown>
#6 0x55632041efee <unknown>
#7 0x5563203f8f73 <unknown>
#8 0x5563203c5aeb <unknown>
#9 0x5563203c6751 <unknown>
#10 0x55632089bb4b <unknown>
#11 0x55632089f929 <unknown>
#12 0x556320882929 <unknown>
#13 0x5563208a04e8 <unknown>
#14 0x5563208670df <unknown>
#15 0x5563208c48e8 <unknown>
#16 0x5563208c4ac6 <unknown>
#17 0x5563208d6556 <unknown>
#18 0x7f3378a9caa4 <unknown>
#19 0x7f3378b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x5580e5ac423a <unknown>
#1 0x5580e556eab0 <unknown>
#2 0x5580e5575748 <unknown>
#3 0x5580e55782c7 <unknown>
#4 0x5580e560cfde <unknown>
#5 0x5580e55e61a2 <unknown>
#6 0x5580e560bfee <unknown>
#7 0x5580e55e5f73 <unknown>
#8 0x5580e55b2aeb <unknown>
#9 0x5580e55b3751 <unknown>
#10 0x5580e5a88b4b <unknown>
#11 0x5580e5a8c929 <unknown>
#12 0x5580e5a6f929 <unknown>
#13 0x5580e5a8d4e8 <unknown>
#14 0x5580e5a540df <unknown>
#15 0x5580e5ab18e8 <unknown>
#16 0x5580e5ab1ac6 <unknown>
#17 0x5580e5ac3556 <unknown>
#18 0x7fb40f09caa4 <unknown>
#19 0x7fb40f129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x556334c3023a <unknown>
#1 0x5563346daab0 <unknown>
#2 0x5563346e1748 <unknown>
#3 0x5563346e42c7 <unknown>
#4 0x556334778fde <unknown>
#5 0x5563347521a2 <unknown>
#6 0x556334777fee <unknown>
#7 0x556334751f73 <unknown>
#8 0x55633471eaeb <unknown>
#9 0x55633471f751 <unknown>
#10 0x556334bf4b4b <unknown>
#11 0x556334bf8929 <unknown>
#12 0x556334bdb929 <unknown>
#13 0x556334bf94e8 <unknown>
#14 0x556334bc00df <unknown>
#15 0x556334c1d8e8 <unknown>
#16 0x556334c1dac6 <unknown>
#17 0x556334c2f556 <unknown>
#18 0x7f113229caa4 <unknown>
#19 0x7f1132329c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x55dbd8ade23a <unknown>
#1 0x55dbd8588ab0 <unknown>
#2 0x55dbd858f748 <unknown>
#3 0x55dbd85922c7 <unknown>
#4 0x55dbd8626fde <unknown>
#5 0x55dbd86001a2 <unknown>
#6 0x55dbd8625fee <unknown>
#7 0x55dbd85fff73 <unknown>
#8 0x55dbd85ccaeb <unknown>
#9 0x55dbd85cd751 <unknown>
#10 0x55dbd8aa2b4b <unknown>
#11 0x55dbd8aa6929 <unknown>
#12 0x55dbd8a89929 <unknown>
#13 0x55dbd8aa74e8 <unknown>
#14 0x55dbd8a6e0df <unknown>
#15 0x55dbd8acb8e8 <unknown>
#16 0x55dbd8acbac6 <unknown>
#17 0x55dbd8add556 <unknown>
#18 0x7efca409caa4 <unknown>
#19 0x7efca4129c3c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x558a118aa23a <unknown>
#1 0x558a11354ab0 <unknown>
#2 0x558a1135b748 <unknown>
#3 0x558a1135e2c7 <unknown>
#4 0x558a113f2fde <unknown>
#5 0x558a113cc1a2 <unknown>
#6 0x558a113f1fee <unknown>
#7 0x558a113cbf73 <unknown>
#8 0x558a11398aeb <unknown>
#9 0x558a11399751 <unknown>
#10 0x558a1186eb4b <unknown>
#11 0x558a11872929 <unknown>
#12 0x558a11855929 <unknown>
#13 0x558a118734e8 <unknown>
#14 0x558a1183a0df <unknown>
#15 0x558a118978e8 <unknown>
#16 0x558a11897ac6 <unknown>
#17 0x558a118a9556 <unknown>
#18 0x7f6df009caa4 <unknown>
#19 0x7f6df0129c3c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x5619bba2c23a <unknown>
#1 0x5619bb4d6ab0 <unknown>
#2 0x5619bb4dd748 <unknown>
#3 0x5619bb4e02c7 <unknown>
#4 0x5619bb574fde <unknown>
#5 0x5619bb54e1a2 <unknown>
#6 0x5619bb573fee <unknown>
#7 0x5619bb54df73 <unknown>
#8 0x5619bb51aaeb <unknown>
#9 0x5619bb51b751 <unknown>
#10 0x5619bb9f0b4b <unknown>
#11 0x5619bb9f4929 <unknown>
#12 0x5619bb9d7929 <unknown>
#13 0x5619bb9f54e8 <unknown>
#14 0x5619bb9bc0df <unknown>
#15 0x5619bba198e8 <unknown>
#16 0x5619bba19ac6 <unknown>
#17 0x5619bba2b556 <unknown>
#18 0x7f80ad09caa4 <unknown>
#19 0x7f80ad129c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x56465d14123a <unknown>
#1 0x56465cbebab0 <unknown>
#2 0x56465cbf2748 <unknown>
#3 0x56465cbf52c7 <unknown>
#4 0x56465cc89fde <unknown>
#5 0x56465cc631a2 <unknown>
#6 0x56465cc88fee <unknown>
#7 0x56465cc62f73 <unknown>
#8 0x56465cc2faeb <unknown>
#9 0x56465cc30751 <unknown>
#10 0x56465d105b4b <unknown>
#11 0x56465d109929 <unknown>
#12 0x56465d0ec929 <unknown>
#13 0x56465d10a4e8 <unknown>
#14 0x56465d0d10df <unknown>
#15 0x56465d12e8e8 <unknown>
#16 0x56465d12eac6 <unknown>
#17 0x56465d140556 <unknown>
#18 0x7f8d9449caa4 <unknown>
#19 0x7f8d94529c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x561463e3e23a <unknown>
#1 0x5614638e8ab0 <unknown>
#2 0x5614638ef748 <unknown>
#3 0x5614638f22c7 <unknown>
#4 0x561463986fde <unknown>
#5 0x5614639601a2 <unknown>
#6 0x561463985fee <unknown>
#7 0x56146395ff73 <unknown>
#8 0x56146392caeb <unknown>
#9 0x56146392d751 <unknown>
#10 0x561463e02b4b <unknown>
#11 0x561463e06929 <unknown>
#12 0x561463de9929 <unknown>
#13 0x561463e074e8 <unknown>
#14 0x561463dce0df <unknown>
#15 0x561463e2b8e8 <unknown>
#16 0x561463e2bac6 <unknown>
#17 0x561463e3d556 <unknown>
#18 0x7fdf94c9caa4 <unknown>
#19 0x7fdf94d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x5570a943823a <unknown>
#1 0x5570a8ee2ab0 <unknown>
#2 0x5570a8ee9748 <unknown>
#3 0x5570a8eec2c7 <unknown>
#4 0x5570a8f80fde <unknown>
#5 0x5570a8f5a1a2 <unknown>
#6 0x5570a8f7ffee <unknown>
#7 0x5570a8f59f73 <unknown>
#8 0x5570a8f26aeb <unknown>
#9 0x5570a8f27751 <unknown>
#10 0x5570a93fcb4b <unknown>
#11 0x5570a9400929 <unknown>
#12 0x5570a93e3929 <unknown>
#13 0x5570a94014e8 <unknown>
#14 0x5570a93c80df <unknown>
#15 0x5570a94258e8 <unknown>
#16 0x5570a9425ac6 <unknown>
#17 0x5570a9437556 <unknown>
#18 0x7faa1f29caa4 <unknown>
#19 0x7faa1f329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x5573d4aca23a <unknown>
#1 0x5573d4574ab0 <unknown>
#2 0x5573d457b748 <unknown>
#3 0x5573d457e2c7 <unknown>
#4 0x5573d4612fde <unknown>
#5 0x5573d45ec1a2 <unknown>
#6 0x5573d4611fee <unknown>
#7 0x5573d45ebf73 <unknown>
#8 0x5573d45b8aeb <unknown>
#9 0x5573d45b9751 <unknown>
#10 0x5573d4a8eb4b <unknown>
#11 0x5573d4a92929 <unknown>
#12 0x5573d4a75929 <unknown>
#13 0x5573d4a934e8 <unknown>
#14 0x5573d4a5a0df <unknown>
#15 0x5573d4ab78e8 <unknown>
#16 0x5573d4ab7ac6 <unknown>
#17 0x5573d4ac9556 <unknown>
#18 0x7fe64a29caa4 <unknown>
#19 0x7fe64a329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.49)
Stacktrace:
#0 0x556d0ec1523a <unknown>
#1 0x556d0e6bfab0 <unknown>
#2 0x556d0e6c6748 <unknown>
#3 0x556d0e6c92c7 <unknown>
#4 0x556d0e75dfde <unknown>
#5 0x556d0e7371a2 <unknown>
#6 0x556d0e75cfee <unknown>
#7 0x556d0e736f73 <unknown>
#8 0x556d0e703aeb <unknown>
#9 0x556d0e704751 <unknown>
#10 0x556d0ebd9b4b <unknown>
#11 0x556d0ebdd929 <unknown>
#12 0x556d0ebc0929 <unknown>
#13 0x556d0ebde4e8 <unknown>
#14 0x556d0eba50df <unknown>
#15 0x556d0ec028e8 <unknown>
#16 0x556d0ec02ac6 <unknown>
#17 0x556d0ec14556 <unknown>
#18 0x7fad90e9caa4 <unknown>
#19 0x7fad90f29c3c <unknown>
======================== 19 failed in 63.90s (0:01:03) =========================
--------------------------------------------
Test Run Finished: 2025-07-11 04:11:19
Duration: 66 seconds
Status: FAILURE
Exit Code: 1
============================================
