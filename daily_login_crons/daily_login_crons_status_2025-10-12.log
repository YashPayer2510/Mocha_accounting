========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-12 03:46:32
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'rerunfailures': '16.1', 'Faker': '37.11.0', 'xdist': '3.8.0', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, rerunfailures-16.1, Faker-37.11.0, xdist-3.8.0, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="334f6764603475f25d6ba40a9ee3e398")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="334f6764603475f25d6ba40a9ee3e398")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcdb100900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b470f1cfba <unknown>
E       #1 0x55b4709a16d0 <unknown>
E       #2 0x55b4709f32aa <unknown>
E       #3 0x55b4709f3541 <unknown>
E       #4 0x55b470a416c4 <unknown>
E       #5 0x55b470a18e5d <unknown>
E       #6 0x55b470a3eb54 <unknown>
E       #7 0x55b470a18c03 <unknown>
E       #8 0x55b4709e57a8 <unknown>
E       #9 0x55b4709e6421 <unknown>
E       #10 0x55b470ee1b28 <unknown>
E       #11 0x55b470ee587f <unknown>
E       #12 0x55b470ec9c49 <unknown>
E       #13 0x55b470ee6405 <unknown>
E       #14 0x55b470eaf4ff <unknown>
E       #15 0x55b470f0a258 <unknown>
E       #16 0x55b470f0a432 <unknown>
E       #17 0x55b470f1bfa3 <unknown>
E       #18 0x7fd56869caa4 <unknown>
E       #19 0x7fd568729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 03:46:35,151 - INFO - Test data loaded successfully.
2025-10-12 03:46:35,151 - INFO - Starting test with Chrome browser
2025-10-12 03:46:35,151 - INFO - ====== WebDriver manager ======
2025-10-12 03:46:36,400 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:46:36,465 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:46:36,513 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-12 03:46:36,513 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:46:36,638 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-12 03:46:36,642 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-12 03:46:36,643 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-12 03:46:36,690 - INFO - Driver downloading response is 200
2025-10-12 03:46:36,778 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:46:36,940 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-12 03:46:44,921 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-12 03:46:44,922 - INFO - Starting the test case for valid credentials
2025-10-12 03:46:45,157 - INFO - User enters the email-id
2025-10-12 03:46:46,829 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 03:48:48,501 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9ef616b9501da758a4f37ec63caeee64")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9ef616b9501da758a4f37ec63caeee64")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a5940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55947ad64fba <unknown>
E       #1 0x55947a7e96d0 <unknown>
E       #2 0x55947a83b2aa <unknown>
E       #3 0x55947a83b541 <unknown>
E       #4 0x55947a8896c4 <unknown>
E       #5 0x55947a860e5d <unknown>
E       #6 0x55947a886b54 <unknown>
E       #7 0x55947a860c03 <unknown>
E       #8 0x55947a82d7a8 <unknown>
E       #9 0x55947a82e421 <unknown>
E       #10 0x55947ad29b28 <unknown>
E       #11 0x55947ad2d87f <unknown>
E       #12 0x55947ad11c49 <unknown>
E       #13 0x55947ad2e405 <unknown>
E       #14 0x55947acf74ff <unknown>
E       #15 0x55947ad52258 <unknown>
E       #16 0x55947ad52432 <unknown>
E       #17 0x55947ad63fa3 <unknown>
E       #18 0x7fb70d29caa4 <unknown>
E       #19 0x7fb70d329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 03:48:48,620 - INFO - Starting test with Chrome browser
2025-10-12 03:48:48,621 - INFO - ====== WebDriver manager ======
2025-10-12 03:48:48,686 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:48:48,731 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:48:48,829 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 03:48:49,584 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-12 03:48:49,585 - INFO - Starting the test case for valid credentials
2025-10-12 03:48:50,010 - INFO - User enters the email-id
2025-10-12 03:48:51,748 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 03:50:53,409 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d1d9375d6df83dba046b560b456b2f49")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d1d9375d6df83dba046b560b456b2f49")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcdb8edf80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5644814cefba <unknown>
E       #1 0x564480f536d0 <unknown>
E       #2 0x564480fa52aa <unknown>
E       #3 0x564480fa5541 <unknown>
E       #4 0x564480ff36c4 <unknown>
E       #5 0x564480fcae5d <unknown>
E       #6 0x564480ff0b54 <unknown>
E       #7 0x564480fcac03 <unknown>
E       #8 0x564480f977a8 <unknown>
E       #9 0x564480f98421 <unknown>
E       #10 0x564481493b28 <unknown>
E       #11 0x56448149787f <unknown>
E       #12 0x56448147bc49 <unknown>
E       #13 0x564481498405 <unknown>
E       #14 0x5644814614ff <unknown>
E       #15 0x5644814bc258 <unknown>
E       #16 0x5644814bc432 <unknown>
E       #17 0x5644814cdfa3 <unknown>
E       #18 0x7f6264a9caa4 <unknown>
E       #19 0x7f6264b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 03:50:53,468 - INFO - Starting test with Chrome browser
2025-10-12 03:50:53,469 - INFO - ====== WebDriver manager ======
2025-10-12 03:50:53,535 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:50:53,589 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:50:53,635 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 03:50:54,930 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-12 03:50:54,930 - INFO - Starting the test case for valid credentials
2025-10-12 03:50:55,072 - INFO - User enters the email-id
2025-10-12 03:50:56,864 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 03:52:58,527 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="144bf789839b0d95edc35c8da0f9275c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="144bf789839b0d95edc35c8da0f9275c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a59e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d116e04fba <unknown>
E       #1 0x55d1168896d0 <unknown>
E       #2 0x55d1168db2aa <unknown>
E       #3 0x55d1168db541 <unknown>
E       #4 0x55d1169296c4 <unknown>
E       #5 0x55d116900e5d <unknown>
E       #6 0x55d116926b54 <unknown>
E       #7 0x55d116900c03 <unknown>
E       #8 0x55d1168cd7a8 <unknown>
E       #9 0x55d1168ce421 <unknown>
E       #10 0x55d116dc9b28 <unknown>
E       #11 0x55d116dcd87f <unknown>
E       #12 0x55d116db1c49 <unknown>
E       #13 0x55d116dce405 <unknown>
E       #14 0x55d116d974ff <unknown>
E       #15 0x55d116df2258 <unknown>
E       #16 0x55d116df2432 <unknown>
E       #17 0x55d116e03fa3 <unknown>
E       #18 0x7f50d449caa4 <unknown>
E       #19 0x7f50d4529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 03:52:58,593 - INFO - Starting test with Chrome browser
2025-10-12 03:52:58,594 - INFO - ====== WebDriver manager ======
2025-10-12 03:52:58,659 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:52:58,705 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:52:58,750 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 03:53:00,234 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-12 03:53:00,234 - INFO - Starting the test case for valid credentials
2025-10-12 03:53:00,387 - INFO - User enters the email-id
2025-10-12 03:53:02,065 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 03:55:03,747 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5c9b886b070072572568b39a848360f7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5c9b886b070072572568b39a848360f7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a6020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5569c625bfba <unknown>
E       #1 0x5569c5ce06d0 <unknown>
E       #2 0x5569c5d322aa <unknown>
E       #3 0x5569c5d32541 <unknown>
E       #4 0x5569c5d806c4 <unknown>
E       #5 0x5569c5d57e5d <unknown>
E       #6 0x5569c5d7db54 <unknown>
E       #7 0x5569c5d57c03 <unknown>
E       #8 0x5569c5d247a8 <unknown>
E       #9 0x5569c5d25421 <unknown>
E       #10 0x5569c6220b28 <unknown>
E       #11 0x5569c622487f <unknown>
E       #12 0x5569c6208c49 <unknown>
E       #13 0x5569c6225405 <unknown>
E       #14 0x5569c61ee4ff <unknown>
E       #15 0x5569c6249258 <unknown>
E       #16 0x5569c6249432 <unknown>
E       #17 0x5569c625afa3 <unknown>
E       #18 0x7ff8ac29caa4 <unknown>
E       #19 0x7ff8ac329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 03:55:03,811 - INFO - Starting test with Chrome browser
2025-10-12 03:55:03,812 - INFO - ====== WebDriver manager ======
2025-10-12 03:55:03,876 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:55:03,924 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:55:03,968 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 03:55:05,305 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 03:57:07,069 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5d7453f06f35b307cda5dc5806ea6da4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5d7453f06f35b307cda5dc5806ea6da4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a60c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557da92e6fba <unknown>
E       #1 0x557da8d6b6d0 <unknown>
E       #2 0x557da8dbd2aa <unknown>
E       #3 0x557da8dbd541 <unknown>
E       #4 0x557da8e0b6c4 <unknown>
E       #5 0x557da8de2e5d <unknown>
E       #6 0x557da8e08b54 <unknown>
E       #7 0x557da8de2c03 <unknown>
E       #8 0x557da8daf7a8 <unknown>
E       #9 0x557da8db0421 <unknown>
E       #10 0x557da92abb28 <unknown>
E       #11 0x557da92af87f <unknown>
E       #12 0x557da9293c49 <unknown>
E       #13 0x557da92b0405 <unknown>
E       #14 0x557da92794ff <unknown>
E       #15 0x557da92d4258 <unknown>
E       #16 0x557da92d4432 <unknown>
E       #17 0x557da92e5fa3 <unknown>
E       #18 0x7feef209caa4 <unknown>
E       #19 0x7feef2129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 03:57:07,133 - INFO - Starting test with Chrome browser
2025-10-12 03:57:07,134 - INFO - ====== WebDriver manager ======
2025-10-12 03:57:07,198 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:57:07,245 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:57:07,289 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 03:57:08,746 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 03:59:10,554 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="33a87e27de88e51fb6083d734f35844b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="33a87e27de88e51fb6083d734f35844b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a5da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5614bf930fba <unknown>
E       #1 0x5614bf3b56d0 <unknown>
E       #2 0x5614bf4072aa <unknown>
E       #3 0x5614bf407541 <unknown>
E       #4 0x5614bf4556c4 <unknown>
E       #5 0x5614bf42ce5d <unknown>
E       #6 0x5614bf452b54 <unknown>
E       #7 0x5614bf42cc03 <unknown>
E       #8 0x5614bf3f97a8 <unknown>
E       #9 0x5614bf3fa421 <unknown>
E       #10 0x5614bf8f5b28 <unknown>
E       #11 0x5614bf8f987f <unknown>
E       #12 0x5614bf8ddc49 <unknown>
E       #13 0x5614bf8fa405 <unknown>
E       #14 0x5614bf8c34ff <unknown>
E       #15 0x5614bf91e258 <unknown>
E       #16 0x5614bf91e432 <unknown>
E       #17 0x5614bf92ffa3 <unknown>
E       #18 0x7f2b6b89caa4 <unknown>
E       #19 0x7f2b6b929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 03:59:10,636 - INFO - Starting test with Chrome browser
2025-10-12 03:59:10,636 - INFO - ====== WebDriver manager ======
2025-10-12 03:59:10,701 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:59:10,748 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 03:59:10,793 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 03:59:11,532 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:01:13,594 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="268de7562af52a345a1b834bb61e4c3c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="268de7562af52a345a1b834bb61e4c3c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a68e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56137aa98fba <unknown>
E       #1 0x56137a51d6d0 <unknown>
E       #2 0x56137a56f2aa <unknown>
E       #3 0x56137a56f541 <unknown>
E       #4 0x56137a5bd6c4 <unknown>
E       #5 0x56137a594e5d <unknown>
E       #6 0x56137a5bab54 <unknown>
E       #7 0x56137a594c03 <unknown>
E       #8 0x56137a5617a8 <unknown>
E       #9 0x56137a562421 <unknown>
E       #10 0x56137aa5db28 <unknown>
E       #11 0x56137aa6187f <unknown>
E       #12 0x56137aa45c49 <unknown>
E       #13 0x56137aa62405 <unknown>
E       #14 0x56137aa2b4ff <unknown>
E       #15 0x56137aa86258 <unknown>
E       #16 0x56137aa86432 <unknown>
E       #17 0x56137aa97fa3 <unknown>
E       #18 0x7fedd409caa4 <unknown>
E       #19 0x7fedd4129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:01:14,653 - INFO - Starting test with Chrome browser
2025-10-12 04:01:14,653 - INFO - ====== WebDriver manager ======
2025-10-12 04:01:14,718 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:01:14,767 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:01:14,813 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:01:16,562 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:03:18,313 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e45aac67f0ed8f4e4f730533335613ae")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e45aac67f0ed8f4e4f730533335613ae")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a5da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ed3bb61fba <unknown>
E       #1 0x55ed3b5e66d0 <unknown>
E       #2 0x55ed3b6382aa <unknown>
E       #3 0x55ed3b638541 <unknown>
E       #4 0x55ed3b6866c4 <unknown>
E       #5 0x55ed3b65de5d <unknown>
E       #6 0x55ed3b683b54 <unknown>
E       #7 0x55ed3b65dc03 <unknown>
E       #8 0x55ed3b62a7a8 <unknown>
E       #9 0x55ed3b62b421 <unknown>
E       #10 0x55ed3bb26b28 <unknown>
E       #11 0x55ed3bb2a87f <unknown>
E       #12 0x55ed3bb0ec49 <unknown>
E       #13 0x55ed3bb2b405 <unknown>
E       #14 0x55ed3baf44ff <unknown>
E       #15 0x55ed3bb4f258 <unknown>
E       #16 0x55ed3bb4f432 <unknown>
E       #17 0x55ed3bb60fa3 <unknown>
E       #18 0x7fb13609caa4 <unknown>
E       #19 0x7fb136129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:03:18,378 - INFO - Starting test with Chrome browser
2025-10-12 04:03:18,378 - INFO - ====== WebDriver manager ======
2025-10-12 04:03:18,443 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:03:18,491 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:03:18,541 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:03:19,922 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:05:23,370 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="70a62a35631a45ac4d195a19809065e1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="70a62a35631a45ac4d195a19809065e1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a65c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x555be92a8fba <unknown>
E       #1 0x555be8d2d6d0 <unknown>
E       #2 0x555be8d7f2aa <unknown>
E       #3 0x555be8d7f541 <unknown>
E       #4 0x555be8dcd6c4 <unknown>
E       #5 0x555be8da4e5d <unknown>
E       #6 0x555be8dcab54 <unknown>
E       #7 0x555be8da4c03 <unknown>
E       #8 0x555be8d717a8 <unknown>
E       #9 0x555be8d72421 <unknown>
E       #10 0x555be926db28 <unknown>
E       #11 0x555be927187f <unknown>
E       #12 0x555be9255c49 <unknown>
E       #13 0x555be9272405 <unknown>
E       #14 0x555be923b4ff <unknown>
E       #15 0x555be9296258 <unknown>
E       #16 0x555be9296432 <unknown>
E       #17 0x555be92a7fa3 <unknown>
E       #18 0x7f9f7169caa4 <unknown>
E       #19 0x7f9f71729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:05:23,429 - INFO - Starting test with Chrome browser
2025-10-12 04:05:23,429 - INFO - ====== WebDriver manager ======
2025-10-12 04:05:23,494 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:05:23,541 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:05:23,586 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:05:25,144 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:07:28,671 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="918340379b277c7469f722d73024494d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="918340379b277c7469f722d73024494d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a5c60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b4c406afba <unknown>
E       #1 0x55b4c3aef6d0 <unknown>
E       #2 0x55b4c3b412aa <unknown>
E       #3 0x55b4c3b41541 <unknown>
E       #4 0x55b4c3b8f6c4 <unknown>
E       #5 0x55b4c3b66e5d <unknown>
E       #6 0x55b4c3b8cb54 <unknown>
E       #7 0x55b4c3b66c03 <unknown>
E       #8 0x55b4c3b337a8 <unknown>
E       #9 0x55b4c3b34421 <unknown>
E       #10 0x55b4c402fb28 <unknown>
E       #11 0x55b4c403387f <unknown>
E       #12 0x55b4c4017c49 <unknown>
E       #13 0x55b4c4034405 <unknown>
E       #14 0x55b4c3ffd4ff <unknown>
E       #15 0x55b4c4058258 <unknown>
E       #16 0x55b4c4058432 <unknown>
E       #17 0x55b4c4069fa3 <unknown>
E       #18 0x7f66e6c9caa4 <unknown>
E       #19 0x7f66e6d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:07:28,735 - INFO - Starting test with Chrome browser
2025-10-12 04:07:28,736 - INFO - ====== WebDriver manager ======
2025-10-12 04:07:28,799 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:07:28,847 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:07:28,893 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:07:30,295 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:09:33,815 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8a7abf15905a728d3bd0f82f22854fa0")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8a7abf15905a728d3bd0f82f22854fa0")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a5760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5608cce27fba <unknown>
E       #1 0x5608cc8ac6d0 <unknown>
E       #2 0x5608cc8fe2aa <unknown>
E       #3 0x5608cc8fe541 <unknown>
E       #4 0x5608cc94c6c4 <unknown>
E       #5 0x5608cc923e5d <unknown>
E       #6 0x5608cc949b54 <unknown>
E       #7 0x5608cc923c03 <unknown>
E       #8 0x5608cc8f07a8 <unknown>
E       #9 0x5608cc8f1421 <unknown>
E       #10 0x5608ccdecb28 <unknown>
E       #11 0x5608ccdf087f <unknown>
E       #12 0x5608ccdd4c49 <unknown>
E       #13 0x5608ccdf1405 <unknown>
E       #14 0x5608ccdba4ff <unknown>
E       #15 0x5608cce15258 <unknown>
E       #16 0x5608cce15432 <unknown>
E       #17 0x5608cce26fa3 <unknown>
E       #18 0x7f8bb1a9caa4 <unknown>
E       #19 0x7f8bb1b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:09:33,880 - INFO - Starting test with Chrome browser
2025-10-12 04:09:33,881 - INFO - ====== WebDriver manager ======
2025-10-12 04:09:33,944 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:09:33,990 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:09:34,037 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:09:34,802 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:11:38,592 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="4113157b6f187fd6210f042f7382e82e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
        login_page.disabled_click_login_button()
>       login_page.username_blank_validation(login_test_data)

tests/test_login.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:72: in username_blank_validation
    self.actions.wait_for_element(self.username_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4113157b6f187fd6210f042f7382e82e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a6de0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5623c0caffba <unknown>
E       #1 0x5623c07346d0 <unknown>
E       #2 0x5623c07862aa <unknown>
E       #3 0x5623c0786541 <unknown>
E       #4 0x5623c07d46c4 <unknown>
E       #5 0x5623c07abe5d <unknown>
E       #6 0x5623c07d1b54 <unknown>
E       #7 0x5623c07abc03 <unknown>
E       #8 0x5623c07787a8 <unknown>
E       #9 0x5623c0779421 <unknown>
E       #10 0x5623c0c74b28 <unknown>
E       #11 0x5623c0c7887f <unknown>
E       #12 0x5623c0c5cc49 <unknown>
E       #13 0x5623c0c79405 <unknown>
E       #14 0x5623c0c424ff <unknown>
E       #15 0x5623c0c9d258 <unknown>
E       #16 0x5623c0c9d432 <unknown>
E       #17 0x5623c0caefa3 <unknown>
E       #18 0x7f081e29caa4 <unknown>
E       #19 0x7f081e329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:11:38,658 - INFO - Starting test with Chrome browser
2025-10-12 04:11:38,658 - INFO - ====== WebDriver manager ======
2025-10-12 04:11:38,723 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:11:38,777 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:11:38,839 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:11:40,097 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:13:41,970 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2a963aadeef0299885772002b0c2e88a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
        login_page.click_password()
        login_page.disabled_click_login_button()
>       login_page.password_blank_validation(login_test_data)

tests/test_login.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:78: in password_blank_validation
    self.actions.wait_for_element(self.password_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2a963aadeef0299885772002b0c2e88a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a74c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56276d877fba <unknown>
E       #1 0x56276d2fc6d0 <unknown>
E       #2 0x56276d34e2aa <unknown>
E       #3 0x56276d34e541 <unknown>
E       #4 0x56276d39c6c4 <unknown>
E       #5 0x56276d373e5d <unknown>
E       #6 0x56276d399b54 <unknown>
E       #7 0x56276d373c03 <unknown>
E       #8 0x56276d3407a8 <unknown>
E       #9 0x56276d341421 <unknown>
E       #10 0x56276d83cb28 <unknown>
E       #11 0x56276d84087f <unknown>
E       #12 0x56276d824c49 <unknown>
E       #13 0x56276d841405 <unknown>
E       #14 0x56276d80a4ff <unknown>
E       #15 0x56276d865258 <unknown>
E       #16 0x56276d865432 <unknown>
E       #17 0x56276d876fa3 <unknown>
E       #18 0x7f4703a9caa4 <unknown>
E       #19 0x7f4703b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:13:42,028 - INFO - Starting test with Chrome browser
2025-10-12 04:13:42,028 - INFO - ====== WebDriver manager ======
2025-10-12 04:13:42,092 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:13:42,141 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:13:42,189 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:13:43,610 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:15:47,178 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a0c7153a31d7e54571d30119787d02be")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a0c7153a31d7e54571d30119787d02be")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a6480>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56254b30efba <unknown>
E       #1 0x56254ad936d0 <unknown>
E       #2 0x56254ade52aa <unknown>
E       #3 0x56254ade5541 <unknown>
E       #4 0x56254ae336c4 <unknown>
E       #5 0x56254ae0ae5d <unknown>
E       #6 0x56254ae30b54 <unknown>
E       #7 0x56254ae0ac03 <unknown>
E       #8 0x56254add77a8 <unknown>
E       #9 0x56254add8421 <unknown>
E       #10 0x56254b2d3b28 <unknown>
E       #11 0x56254b2d787f <unknown>
E       #12 0x56254b2bbc49 <unknown>
E       #13 0x56254b2d8405 <unknown>
E       #14 0x56254b2a14ff <unknown>
E       #15 0x56254b2fc258 <unknown>
E       #16 0x56254b2fc432 <unknown>
E       #17 0x56254b30dfa3 <unknown>
E       #18 0x7f0c7e49caa4 <unknown>
E       #19 0x7f0c7e529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:15:47,236 - INFO - Starting test with Chrome browser
2025-10-12 04:15:47,236 - INFO - ====== WebDriver manager ======
2025-10-12 04:15:47,300 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:15:47,348 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:15:47,395 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:15:48,857 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:17:50,706 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="81d88c921a9cfeba2fd72b60b179a9b9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="81d88c921a9cfeba2fd72b60b179a9b9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a6ca0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55822bfcbfba <unknown>
E       #1 0x55822ba506d0 <unknown>
E       #2 0x55822baa22aa <unknown>
E       #3 0x55822baa2541 <unknown>
E       #4 0x55822baf06c4 <unknown>
E       #5 0x55822bac7e5d <unknown>
E       #6 0x55822baedb54 <unknown>
E       #7 0x55822bac7c03 <unknown>
E       #8 0x55822ba947a8 <unknown>
E       #9 0x55822ba95421 <unknown>
E       #10 0x55822bf90b28 <unknown>
E       #11 0x55822bf9487f <unknown>
E       #12 0x55822bf78c49 <unknown>
E       #13 0x55822bf95405 <unknown>
E       #14 0x55822bf5e4ff <unknown>
E       #15 0x55822bfb9258 <unknown>
E       #16 0x55822bfb9432 <unknown>
E       #17 0x55822bfcafa3 <unknown>
E       #18 0x7f5e97e9caa4 <unknown>
E       #19 0x7f5e97f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:17:50,765 - INFO - Starting test with Chrome browser
2025-10-12 04:17:50,765 - INFO - ====== WebDriver manager ======
2025-10-12 04:17:50,830 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:17:50,879 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:17:50,926 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:17:52,585 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:19:54,402 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="61e63c64a57fb765993960f44f8a51bd")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="61e63c64a57fb765993960f44f8a51bd")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a72e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564dce070fba <unknown>
E       #1 0x564dcdaf56d0 <unknown>
E       #2 0x564dcdb472aa <unknown>
E       #3 0x564dcdb47541 <unknown>
E       #4 0x564dcdb956c4 <unknown>
E       #5 0x564dcdb6ce5d <unknown>
E       #6 0x564dcdb92b54 <unknown>
E       #7 0x564dcdb6cc03 <unknown>
E       #8 0x564dcdb397a8 <unknown>
E       #9 0x564dcdb3a421 <unknown>
E       #10 0x564dce035b28 <unknown>
E       #11 0x564dce03987f <unknown>
E       #12 0x564dce01dc49 <unknown>
E       #13 0x564dce03a405 <unknown>
E       #14 0x564dce0034ff <unknown>
E       #15 0x564dce05e258 <unknown>
E       #16 0x564dce05e432 <unknown>
E       #17 0x564dce06ffa3 <unknown>
E       #18 0x7f0bdfe9caa4 <unknown>
E       #19 0x7f0bdff29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:19:54,467 - INFO - Starting test with Chrome browser
2025-10-12 04:19:54,467 - INFO - ====== WebDriver manager ======
2025-10-12 04:19:54,530 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:19:54,578 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:19:54,644 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:19:56,493 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:21:58,354 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c9ecb768350396e4567346de6086b077")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c9ecb768350396e4567346de6086b077")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a7600>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558c9f863fba <unknown>
E       #1 0x558c9f2e86d0 <unknown>
E       #2 0x558c9f33a2aa <unknown>
E       #3 0x558c9f33a541 <unknown>
E       #4 0x558c9f3886c4 <unknown>
E       #5 0x558c9f35fe5d <unknown>
E       #6 0x558c9f385b54 <unknown>
E       #7 0x558c9f35fc03 <unknown>
E       #8 0x558c9f32c7a8 <unknown>
E       #9 0x558c9f32d421 <unknown>
E       #10 0x558c9f828b28 <unknown>
E       #11 0x558c9f82c87f <unknown>
E       #12 0x558c9f810c49 <unknown>
E       #13 0x558c9f82d405 <unknown>
E       #14 0x558c9f7f64ff <unknown>
E       #15 0x558c9f851258 <unknown>
E       #16 0x558c9f851432 <unknown>
E       #17 0x558c9f862fa3 <unknown>
E       #18 0x7f1db5c9caa4 <unknown>
E       #19 0x7f1db5d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:21:58,413 - INFO - Starting test with Chrome browser
2025-10-12 04:21:58,413 - INFO - ====== WebDriver manager ======
2025-10-12 04:21:58,477 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:21:58,537 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:21:58,583 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:22:00,037 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:24:01,931 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d8d63e19ddf5c28f4fca99fb7010ca5e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d8d63e19ddf5c28f4fca99fb7010ca5e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fdcda8a7880>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5646df495fba <unknown>
E       #1 0x5646def1a6d0 <unknown>
E       #2 0x5646def6c2aa <unknown>
E       #3 0x5646def6c541 <unknown>
E       #4 0x5646defba6c4 <unknown>
E       #5 0x5646def91e5d <unknown>
E       #6 0x5646defb7b54 <unknown>
E       #7 0x5646def91c03 <unknown>
E       #8 0x5646def5e7a8 <unknown>
E       #9 0x5646def5f421 <unknown>
E       #10 0x5646df45ab28 <unknown>
E       #11 0x5646df45e87f <unknown>
E       #12 0x5646df442c49 <unknown>
E       #13 0x5646df45f405 <unknown>
E       #14 0x5646df4284ff <unknown>
E       #15 0x5646df483258 <unknown>
E       #16 0x5646df483432 <unknown>
E       #17 0x5646df494fa3 <unknown>
E       #18 0x7fb29269caa4 <unknown>
E       #19 0x7fb292729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-12 04:24:01,998 - INFO - Starting test with Chrome browser
2025-10-12 04:24:01,998 - INFO - ====== WebDriver manager ======
2025-10-12 04:24:02,062 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:24:02,108 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-12 04:24:02,153 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-12 04:24:03,627 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-12 04:26:05,502 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251012_034634/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b470f1cfba <unknown>
#1 0x55b4709a16d0 <unknown>
#2 0x55b4709f32aa <unknown>
#3 0x55b4709f3541 <unknown>
#4 0x55b470a416c4 <unknown>
#5 0x55b470a18e5d <unknown>
#6 0x55b470a3eb54 <unknown>
#7 0x55b470a18c03 <unknown>
#8 0x55b4709e57a8 <unknown>
#9 0x55b4709e6421 <unknown>
#10 0x55b470ee1b28 <unknown>
#11 0x55b470ee587f <unknown>
#12 0x55b470ec9c49 <unknown>
#13 0x55b470ee6405 <unknown>
#14 0x55b470eaf4ff <unknown>
#15 0x55b470f0a258 <unknown>
#16 0x55b470f0a432 <unknown>
#17 0x55b470f1bfa3 <unknown>
#18 0x7fd56869caa4 <unknown>
#19 0x7fd568729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55947ad64fba <unknown>
#1 0x55947a7e96d0 <unknown>
#2 0x55947a83b2aa <unknown>
#3 0x55947a83b541 <unknown>
#4 0x55947a8896c4 <unknown>
#5 0x55947a860e5d <unknown>
#6 0x55947a886b54 <unknown>
#7 0x55947a860c03 <unknown>
#8 0x55947a82d7a8 <unknown>
#9 0x55947a82e421 <unknown>
#10 0x55947ad29b28 <unknown>
#11 0x55947ad2d87f <unknown>
#12 0x55947ad11c49 <unknown>
#13 0x55947ad2e405 <unknown>
#14 0x55947acf74ff <unknown>
#15 0x55947ad52258 <unknown>
#16 0x55947ad52432 <unknown>
#17 0x55947ad63fa3 <unknown>
#18 0x7fb70d29caa4 <unknown>
#19 0x7fb70d329c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5644814cefba <unknown>
#1 0x564480f536d0 <unknown>
#2 0x564480fa52aa <unknown>
#3 0x564480fa5541 <unknown>
#4 0x564480ff36c4 <unknown>
#5 0x564480fcae5d <unknown>
#6 0x564480ff0b54 <unknown>
#7 0x564480fcac03 <unknown>
#8 0x564480f977a8 <unknown>
#9 0x564480f98421 <unknown>
#10 0x564481493b28 <unknown>
#11 0x56448149787f <unknown>
#12 0x56448147bc49 <unknown>
#13 0x564481498405 <unknown>
#14 0x5644814614ff <unknown>
#15 0x5644814bc258 <unknown>
#16 0x5644814bc432 <unknown>
#17 0x5644814cdfa3 <unknown>
#18 0x7f6264a9caa4 <unknown>
#19 0x7f6264b29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d116e04fba <unknown>
#1 0x55d1168896d0 <unknown>
#2 0x55d1168db2aa <unknown>
#3 0x55d1168db541 <unknown>
#4 0x55d1169296c4 <unknown>
#5 0x55d116900e5d <unknown>
#6 0x55d116926b54 <unknown>
#7 0x55d116900c03 <unknown>
#8 0x55d1168cd7a8 <unknown>
#9 0x55d1168ce421 <unknown>
#10 0x55d116dc9b28 <unknown>
#11 0x55d116dcd87f <unknown>
#12 0x55d116db1c49 <unknown>
#13 0x55d116dce405 <unknown>
#14 0x55d116d974ff <unknown>
#15 0x55d116df2258 <unknown>
#16 0x55d116df2432 <unknown>
#17 0x55d116e03fa3 <unknown>
#18 0x7f50d449caa4 <unknown>
#19 0x7f50d4529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5569c625bfba <unknown>
#1 0x5569c5ce06d0 <unknown>
#2 0x5569c5d322aa <unknown>
#3 0x5569c5d32541 <unknown>
#4 0x5569c5d806c4 <unknown>
#5 0x5569c5d57e5d <unknown>
#6 0x5569c5d7db54 <unknown>
#7 0x5569c5d57c03 <unknown>
#8 0x5569c5d247a8 <unknown>
#9 0x5569c5d25421 <unknown>
#10 0x5569c6220b28 <unknown>
#11 0x5569c622487f <unknown>
#12 0x5569c6208c49 <unknown>
#13 0x5569c6225405 <unknown>
#14 0x5569c61ee4ff <unknown>
#15 0x5569c6249258 <unknown>
#16 0x5569c6249432 <unknown>
#17 0x5569c625afa3 <unknown>
#18 0x7ff8ac29caa4 <unknown>
#19 0x7ff8ac329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557da92e6fba <unknown>
#1 0x557da8d6b6d0 <unknown>
#2 0x557da8dbd2aa <unknown>
#3 0x557da8dbd541 <unknown>
#4 0x557da8e0b6c4 <unknown>
#5 0x557da8de2e5d <unknown>
#6 0x557da8e08b54 <unknown>
#7 0x557da8de2c03 <unknown>
#8 0x557da8daf7a8 <unknown>
#9 0x557da8db0421 <unknown>
#10 0x557da92abb28 <unknown>
#11 0x557da92af87f <unknown>
#12 0x557da9293c49 <unknown>
#13 0x557da92b0405 <unknown>
#14 0x557da92794ff <unknown>
#15 0x557da92d4258 <unknown>
#16 0x557da92d4432 <unknown>
#17 0x557da92e5fa3 <unknown>
#18 0x7feef209caa4 <unknown>
#19 0x7feef2129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5614bf930fba <unknown>
#1 0x5614bf3b56d0 <unknown>
#2 0x5614bf4072aa <unknown>
#3 0x5614bf407541 <unknown>
#4 0x5614bf4556c4 <unknown>
#5 0x5614bf42ce5d <unknown>
#6 0x5614bf452b54 <unknown>
#7 0x5614bf42cc03 <unknown>
#8 0x5614bf3f97a8 <unknown>
#9 0x5614bf3fa421 <unknown>
#10 0x5614bf8f5b28 <unknown>
#11 0x5614bf8f987f <unknown>
#12 0x5614bf8ddc49 <unknown>
#13 0x5614bf8fa405 <unknown>
#14 0x5614bf8c34ff <unknown>
#15 0x5614bf91e258 <unknown>
#16 0x5614bf91e432 <unknown>
#17 0x5614bf92ffa3 <unknown>
#18 0x7f2b6b89caa4 <unknown>
#19 0x7f2b6b929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56137aa98fba <unknown>
#1 0x56137a51d6d0 <unknown>
#2 0x56137a56f2aa <unknown>
#3 0x56137a56f541 <unknown>
#4 0x56137a5bd6c4 <unknown>
#5 0x56137a594e5d <unknown>
#6 0x56137a5bab54 <unknown>
#7 0x56137a594c03 <unknown>
#8 0x56137a5617a8 <unknown>
#9 0x56137a562421 <unknown>
#10 0x56137aa5db28 <unknown>
#11 0x56137aa6187f <unknown>
#12 0x56137aa45c49 <unknown>
#13 0x56137aa62405 <unknown>
#14 0x56137aa2b4ff <unknown>
#15 0x56137aa86258 <unknown>
#16 0x56137aa86432 <unknown>
#17 0x56137aa97fa3 <unknown>
#18 0x7fedd409caa4 <unknown>
#19 0x7fedd4129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ed3bb61fba <unknown>
#1 0x55ed3b5e66d0 <unknown>
#2 0x55ed3b6382aa <unknown>
#3 0x55ed3b638541 <unknown>
#4 0x55ed3b6866c4 <unknown>
#5 0x55ed3b65de5d <unknown>
#6 0x55ed3b683b54 <unknown>
#7 0x55ed3b65dc03 <unknown>
#8 0x55ed3b62a7a8 <unknown>
#9 0x55ed3b62b421 <unknown>
#10 0x55ed3bb26b28 <unknown>
#11 0x55ed3bb2a87f <unknown>
#12 0x55ed3bb0ec49 <unknown>
#13 0x55ed3bb2b405 <unknown>
#14 0x55ed3baf44ff <unknown>
#15 0x55ed3bb4f258 <unknown>
#16 0x55ed3bb4f432 <unknown>
#17 0x55ed3bb60fa3 <unknown>
#18 0x7fb13609caa4 <unknown>
#19 0x7fb136129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x555be92a8fba <unknown>
#1 0x555be8d2d6d0 <unknown>
#2 0x555be8d7f2aa <unknown>
#3 0x555be8d7f541 <unknown>
#4 0x555be8dcd6c4 <unknown>
#5 0x555be8da4e5d <unknown>
#6 0x555be8dcab54 <unknown>
#7 0x555be8da4c03 <unknown>
#8 0x555be8d717a8 <unknown>
#9 0x555be8d72421 <unknown>
#10 0x555be926db28 <unknown>
#11 0x555be927187f <unknown>
#12 0x555be9255c49 <unknown>
#13 0x555be9272405 <unknown>
#14 0x555be923b4ff <unknown>
#15 0x555be9296258 <unknown>
#16 0x555be9296432 <unknown>
#17 0x555be92a7fa3 <unknown>
#18 0x7f9f7169caa4 <unknown>
#19 0x7f9f71729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b4c406afba <unknown>
#1 0x55b4c3aef6d0 <unknown>
#2 0x55b4c3b412aa <unknown>
#3 0x55b4c3b41541 <unknown>
#4 0x55b4c3b8f6c4 <unknown>
#5 0x55b4c3b66e5d <unknown>
#6 0x55b4c3b8cb54 <unknown>
#7 0x55b4c3b66c03 <unknown>
#8 0x55b4c3b337a8 <unknown>
#9 0x55b4c3b34421 <unknown>
#10 0x55b4c402fb28 <unknown>
#11 0x55b4c403387f <unknown>
#12 0x55b4c4017c49 <unknown>
#13 0x55b4c4034405 <unknown>
#14 0x55b4c3ffd4ff <unknown>
#15 0x55b4c4058258 <unknown>
#16 0x55b4c4058432 <unknown>
#17 0x55b4c4069fa3 <unknown>
#18 0x7f66e6c9caa4 <unknown>
#19 0x7f66e6d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5608cce27fba <unknown>
#1 0x5608cc8ac6d0 <unknown>
#2 0x5608cc8fe2aa <unknown>
#3 0x5608cc8fe541 <unknown>
#4 0x5608cc94c6c4 <unknown>
#5 0x5608cc923e5d <unknown>
#6 0x5608cc949b54 <unknown>
#7 0x5608cc923c03 <unknown>
#8 0x5608cc8f07a8 <unknown>
#9 0x5608cc8f1421 <unknown>
#10 0x5608ccdecb28 <unknown>
#11 0x5608ccdf087f <unknown>
#12 0x5608ccdd4c49 <unknown>
#13 0x5608ccdf1405 <unknown>
#14 0x5608ccdba4ff <unknown>
#15 0x5608cce15258 <unknown>
#16 0x5608cce15432 <unknown>
#17 0x5608cce26fa3 <unknown>
#18 0x7f8bb1a9caa4 <unknown>
#19 0x7f8bb1b29c6c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5623c0caffba <unknown>
#1 0x5623c07346d0 <unknown>
#2 0x5623c07862aa <unknown>
#3 0x5623c0786541 <unknown>
#4 0x5623c07d46c4 <unknown>
#5 0x5623c07abe5d <unknown>
#6 0x5623c07d1b54 <unknown>
#7 0x5623c07abc03 <unknown>
#8 0x5623c07787a8 <unknown>
#9 0x5623c0779421 <unknown>
#10 0x5623c0c74b28 <unknown>
#11 0x5623c0c7887f <unknown>
#12 0x5623c0c5cc49 <unknown>
#13 0x5623c0c79405 <unknown>
#14 0x5623c0c424ff <unknown>
#15 0x5623c0c9d258 <unknown>
#16 0x5623c0c9d432 <unknown>
#17 0x5623c0caefa3 <unknown>
#18 0x7f081e29caa4 <unknown>
#19 0x7f081e329c6c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56276d877fba <unknown>
#1 0x56276d2fc6d0 <unknown>
#2 0x56276d34e2aa <unknown>
#3 0x56276d34e541 <unknown>
#4 0x56276d39c6c4 <unknown>
#5 0x56276d373e5d <unknown>
#6 0x56276d399b54 <unknown>
#7 0x56276d373c03 <unknown>
#8 0x56276d3407a8 <unknown>
#9 0x56276d341421 <unknown>
#10 0x56276d83cb28 <unknown>
#11 0x56276d84087f <unknown>
#12 0x56276d824c49 <unknown>
#13 0x56276d841405 <unknown>
#14 0x56276d80a4ff <unknown>
#15 0x56276d865258 <unknown>
#16 0x56276d865432 <unknown>
#17 0x56276d876fa3 <unknown>
#18 0x7f4703a9caa4 <unknown>
#19 0x7f4703b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56254b30efba <unknown>
#1 0x56254ad936d0 <unknown>
#2 0x56254ade52aa <unknown>
#3 0x56254ade5541 <unknown>
#4 0x56254ae336c4 <unknown>
#5 0x56254ae0ae5d <unknown>
#6 0x56254ae30b54 <unknown>
#7 0x56254ae0ac03 <unknown>
#8 0x56254add77a8 <unknown>
#9 0x56254add8421 <unknown>
#10 0x56254b2d3b28 <unknown>
#11 0x56254b2d787f <unknown>
#12 0x56254b2bbc49 <unknown>
#13 0x56254b2d8405 <unknown>
#14 0x56254b2a14ff <unknown>
#15 0x56254b2fc258 <unknown>
#16 0x56254b2fc432 <unknown>
#17 0x56254b30dfa3 <unknown>
#18 0x7f0c7e49caa4 <unknown>
#19 0x7f0c7e529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55822bfcbfba <unknown>
#1 0x55822ba506d0 <unknown>
#2 0x55822baa22aa <unknown>
#3 0x55822baa2541 <unknown>
#4 0x55822baf06c4 <unknown>
#5 0x55822bac7e5d <unknown>
#6 0x55822baedb54 <unknown>
#7 0x55822bac7c03 <unknown>
#8 0x55822ba947a8 <unknown>
#9 0x55822ba95421 <unknown>
#10 0x55822bf90b28 <unknown>
#11 0x55822bf9487f <unknown>
#12 0x55822bf78c49 <unknown>
#13 0x55822bf95405 <unknown>
#14 0x55822bf5e4ff <unknown>
#15 0x55822bfb9258 <unknown>
#16 0x55822bfb9432 <unknown>
#17 0x55822bfcafa3 <unknown>
#18 0x7f5e97e9caa4 <unknown>
#19 0x7f5e97f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564dce070fba <unknown>
#1 0x564dcdaf56d0 <unknown>
#2 0x564dcdb472aa <unknown>
#3 0x564dcdb47541 <unknown>
#4 0x564dcdb956c4 <unknown>
#5 0x564dcdb6ce5d <unknown>
#6 0x564dcdb92b54 <unknown>
#7 0x564dcdb6cc03 <unknown>
#8 0x564dcdb397a8 <unknown>
#9 0x564dcdb3a421 <unknown>
#10 0x564dce035b28 <unknown>
#11 0x564dce03987f <unknown>
#12 0x564dce01dc49 <unknown>
#13 0x564dce03a405 <unknown>
#14 0x564dce0034ff <unknown>
#15 0x564dce05e258 <unknown>
#16 0x564dce05e432 <unknown>
#17 0x564dce06ffa3 <unknown>
#18 0x7f0bdfe9caa4 <unknown>
#19 0x7f0bdff29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558c9f863fba <unknown>
#1 0x558c9f2e86d0 <unknown>
#2 0x558c9f33a2aa <unknown>
#3 0x558c9f33a541 <unknown>
#4 0x558c9f3886c4 <unknown>
#5 0x558c9f35fe5d <unknown>
#6 0x558c9f385b54 <unknown>
#7 0x558c9f35fc03 <unknown>
#8 0x558c9f32c7a8 <unknown>
#9 0x558c9f32d421 <unknown>
#10 0x558c9f828b28 <unknown>
#11 0x558c9f82c87f <unknown>
#12 0x558c9f810c49 <unknown>
#13 0x558c9f82d405 <unknown>
#14 0x558c9f7f64ff <unknown>
#15 0x558c9f851258 <unknown>
#16 0x558c9f851432 <unknown>
#17 0x558c9f862fa3 <unknown>
#18 0x7f1db5c9caa4 <unknown>
#19 0x7f1db5d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5646df495fba <unknown>
#1 0x5646def1a6d0 <unknown>
#2 0x5646def6c2aa <unknown>
#3 0x5646def6c541 <unknown>
#4 0x5646defba6c4 <unknown>
#5 0x5646def91e5d <unknown>
#6 0x5646defb7b54 <unknown>
#7 0x5646def91c03 <unknown>
#8 0x5646def5e7a8 <unknown>
#9 0x5646def5f421 <unknown>
#10 0x5646df45ab28 <unknown>
#11 0x5646df45e87f <unknown>
#12 0x5646df442c49 <unknown>
#13 0x5646df45f405 <unknown>
#14 0x5646df4284ff <unknown>
#15 0x5646df483258 <unknown>
#16 0x5646df483432 <unknown>
#17 0x5646df494fa3 <unknown>
#18 0x7fb29269caa4 <unknown>
#19 0x7fb292729c6c <unknown>
======================= 19 failed in 2370.51s (0:39:30) ========================
--------------------------------------------
Test Run Finished: 2025-10-12 04:26:05
Duration: 2373 seconds
Status: FAILURE
Exit Code: 1
============================================
