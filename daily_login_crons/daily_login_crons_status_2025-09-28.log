========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-28 03:49:41
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a0ae9e735310d053f89092c18755f609")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a0ae9e735310d053f89092c18755f609")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eb9dc900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55cce7f7afba <unknown>
E       #1 0x55cce79ff6d0 <unknown>
E       #2 0x55cce7a512aa <unknown>
E       #3 0x55cce7a51541 <unknown>
E       #4 0x55cce7a9f6c4 <unknown>
E       #5 0x55cce7a76e5d <unknown>
E       #6 0x55cce7a9cb54 <unknown>
E       #7 0x55cce7a76c03 <unknown>
E       #8 0x55cce7a437a8 <unknown>
E       #9 0x55cce7a44421 <unknown>
E       #10 0x55cce7f3fb28 <unknown>
E       #11 0x55cce7f4387f <unknown>
E       #12 0x55cce7f27c49 <unknown>
E       #13 0x55cce7f44405 <unknown>
E       #14 0x55cce7f0d4ff <unknown>
E       #15 0x55cce7f68258 <unknown>
E       #16 0x55cce7f68432 <unknown>
E       #17 0x55cce7f79fa3 <unknown>
E       #18 0x7f7a9469caa4 <unknown>
E       #19 0x7f7a94729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 03:49:43,851 - INFO - Test data loaded successfully.
2025-09-28 03:49:43,851 - INFO - Starting test with Chrome browser
2025-09-28 03:49:43,852 - INFO - ====== WebDriver manager ======
2025-09-28 03:49:45,542 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:49:45,599 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:49:45,633 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-09-28 03:49:45,633 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:49:45,732 - INFO - WebDriver version 140.0.7339.207 selected
2025-09-28 03:49:45,737 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-28 03:49:45,737 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-09-28 03:49:45,794 - INFO - Driver downloading response is 200
2025-09-28 03:49:45,845 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:49:45,989 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-09-28 03:49:55,317 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-28 03:49:55,317 - INFO - Starting the test case for valid credentials
2025-09-28 03:49:55,609 - INFO - User enters the email-id
2025-09-28 03:49:57,310 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 03:51:59,023 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5f3239047eaadabbc262a3755544f7b4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5f3239047eaadabbc262a3755544f7b4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe18a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559722598fba <unknown>
E       #1 0x55972201d6d0 <unknown>
E       #2 0x55972206f2aa <unknown>
E       #3 0x55972206f541 <unknown>
E       #4 0x5597220bd6c4 <unknown>
E       #5 0x559722094e5d <unknown>
E       #6 0x5597220bab54 <unknown>
E       #7 0x559722094c03 <unknown>
E       #8 0x5597220617a8 <unknown>
E       #9 0x559722062421 <unknown>
E       #10 0x55972255db28 <unknown>
E       #11 0x55972256187f <unknown>
E       #12 0x559722545c49 <unknown>
E       #13 0x559722562405 <unknown>
E       #14 0x55972252b4ff <unknown>
E       #15 0x559722586258 <unknown>
E       #16 0x559722586432 <unknown>
E       #17 0x559722597fa3 <unknown>
E       #18 0x7eff0269caa4 <unknown>
E       #19 0x7eff02729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 03:51:59,159 - INFO - Starting test with Chrome browser
2025-09-28 03:51:59,159 - INFO - ====== WebDriver manager ======
2025-09-28 03:51:59,223 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:51:59,257 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:51:59,311 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 03:52:00,738 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-28 03:52:00,738 - INFO - Starting the test case for valid credentials
2025-09-28 03:52:00,879 - INFO - User enters the email-id
2025-09-28 03:52:02,556 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 03:54:04,223 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a38942fdccabf2d978fce21a12a437c8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a38942fdccabf2d978fce21a12a437c8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4ec0ce3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564279d0afba <unknown>
E       #1 0x56427978f6d0 <unknown>
E       #2 0x5642797e12aa <unknown>
E       #3 0x5642797e1541 <unknown>
E       #4 0x56427982f6c4 <unknown>
E       #5 0x564279806e5d <unknown>
E       #6 0x56427982cb54 <unknown>
E       #7 0x564279806c03 <unknown>
E       #8 0x5642797d37a8 <unknown>
E       #9 0x5642797d4421 <unknown>
E       #10 0x564279ccfb28 <unknown>
E       #11 0x564279cd387f <unknown>
E       #12 0x564279cb7c49 <unknown>
E       #13 0x564279cd4405 <unknown>
E       #14 0x564279c9d4ff <unknown>
E       #15 0x564279cf8258 <unknown>
E       #16 0x564279cf8432 <unknown>
E       #17 0x564279d09fa3 <unknown>
E       #18 0x7f6436c9caa4 <unknown>
E       #19 0x7f6436d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 03:54:04,282 - INFO - Starting test with Chrome browser
2025-09-28 03:54:04,283 - INFO - ====== WebDriver manager ======
2025-09-28 03:54:04,346 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:54:04,381 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:54:04,413 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 03:54:05,723 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-28 03:54:05,724 - INFO - Starting the test case for valid credentials
2025-09-28 03:54:05,865 - INFO - User enters the email-id
2025-09-28 03:54:07,530 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 03:56:09,192 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="84d5c7075b9c9910ed59f57f30bca69a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="84d5c7075b9c9910ed59f57f30bca69a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe16c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5574ae94afba <unknown>
E       #1 0x5574ae3cf6d0 <unknown>
E       #2 0x5574ae4212aa <unknown>
E       #3 0x5574ae421541 <unknown>
E       #4 0x5574ae46f6c4 <unknown>
E       #5 0x5574ae446e5d <unknown>
E       #6 0x5574ae46cb54 <unknown>
E       #7 0x5574ae446c03 <unknown>
E       #8 0x5574ae4137a8 <unknown>
E       #9 0x5574ae414421 <unknown>
E       #10 0x5574ae90fb28 <unknown>
E       #11 0x5574ae91387f <unknown>
E       #12 0x5574ae8f7c49 <unknown>
E       #13 0x5574ae914405 <unknown>
E       #14 0x5574ae8dd4ff <unknown>
E       #15 0x5574ae938258 <unknown>
E       #16 0x5574ae938432 <unknown>
E       #17 0x5574ae949fa3 <unknown>
E       #18 0x7fe3df69caa4 <unknown>
E       #19 0x7fe3df729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 03:56:09,254 - INFO - Starting test with Chrome browser
2025-09-28 03:56:09,254 - INFO - ====== WebDriver manager ======
2025-09-28 03:56:09,318 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:56:09,351 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:56:09,386 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 03:56:10,690 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-28 03:56:10,690 - INFO - Starting the test case for valid credentials
2025-09-28 03:56:10,848 - INFO - User enters the email-id
2025-09-28 03:56:12,501 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 03:58:14,187 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c1a920c9953606326468630d8a1844e4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c1a920c9953606326468630d8a1844e4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe1f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564b1992dfba <unknown>
E       #1 0x564b193b26d0 <unknown>
E       #2 0x564b194042aa <unknown>
E       #3 0x564b19404541 <unknown>
E       #4 0x564b194526c4 <unknown>
E       #5 0x564b19429e5d <unknown>
E       #6 0x564b1944fb54 <unknown>
E       #7 0x564b19429c03 <unknown>
E       #8 0x564b193f67a8 <unknown>
E       #9 0x564b193f7421 <unknown>
E       #10 0x564b198f2b28 <unknown>
E       #11 0x564b198f687f <unknown>
E       #12 0x564b198dac49 <unknown>
E       #13 0x564b198f7405 <unknown>
E       #14 0x564b198c04ff <unknown>
E       #15 0x564b1991b258 <unknown>
E       #16 0x564b1991b432 <unknown>
E       #17 0x564b1992cfa3 <unknown>
E       #18 0x7f216469caa4 <unknown>
E       #19 0x7f2164729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 03:58:14,247 - INFO - Starting test with Chrome browser
2025-09-28 03:58:14,247 - INFO - ====== WebDriver manager ======
2025-09-28 03:58:14,311 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:58:14,347 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 03:58:14,381 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 03:58:15,673 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 04:00:17,494 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6a11d7d267cd065e7f1858ee2b39cfff")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6a11d7d267cd065e7f1858ee2b39cfff")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe2020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5594a688bfba <unknown>
E       #1 0x5594a63106d0 <unknown>
E       #2 0x5594a63622aa <unknown>
E       #3 0x5594a6362541 <unknown>
E       #4 0x5594a63b06c4 <unknown>
E       #5 0x5594a6387e5d <unknown>
E       #6 0x5594a63adb54 <unknown>
E       #7 0x5594a6387c03 <unknown>
E       #8 0x5594a63547a8 <unknown>
E       #9 0x5594a6355421 <unknown>
E       #10 0x5594a6850b28 <unknown>
E       #11 0x5594a685487f <unknown>
E       #12 0x5594a6838c49 <unknown>
E       #13 0x5594a6855405 <unknown>
E       #14 0x5594a681e4ff <unknown>
E       #15 0x5594a6879258 <unknown>
E       #16 0x5594a6879432 <unknown>
E       #17 0x5594a688afa3 <unknown>
E       #18 0x7f4e05c9caa4 <unknown>
E       #19 0x7f4e05d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 04:00:17,575 - INFO - Starting test with Chrome browser
2025-09-28 04:00:17,575 - INFO - ====== WebDriver manager ======
2025-09-28 04:00:17,639 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:00:17,676 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:00:17,708 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 04:00:19,107 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 04:02:20,857 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="243255938bcdfdf59c2183dfb0d96352")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="243255938bcdfdf59c2183dfb0d96352")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe1da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5616956a3fba <unknown>
E       #1 0x5616951286d0 <unknown>
E       #2 0x56169517a2aa <unknown>
E       #3 0x56169517a541 <unknown>
E       #4 0x5616951c86c4 <unknown>
E       #5 0x56169519fe5d <unknown>
E       #6 0x5616951c5b54 <unknown>
E       #7 0x56169519fc03 <unknown>
E       #8 0x56169516c7a8 <unknown>
E       #9 0x56169516d421 <unknown>
E       #10 0x561695668b28 <unknown>
E       #11 0x56169566c87f <unknown>
E       #12 0x561695650c49 <unknown>
E       #13 0x56169566d405 <unknown>
E       #14 0x5616956364ff <unknown>
E       #15 0x561695691258 <unknown>
E       #16 0x561695691432 <unknown>
E       #17 0x5616956a2fa3 <unknown>
E       #18 0x7f0ebde9caa4 <unknown>
E       #19 0x7f0ebdf29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 04:02:20,914 - INFO - Starting test with Chrome browser
2025-09-28 04:02:20,915 - INFO - ====== WebDriver manager ======
2025-09-28 04:02:20,979 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:02:21,013 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:02:21,053 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 04:02:21,907 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 04:04:24,020 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="1f752d26961ee5a54365297d6decdfe0")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="1f752d26961ee5a54365297d6decdfe0")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe2840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557861f38fba <unknown>
E       #1 0x5578619bd6d0 <unknown>
E       #2 0x557861a0f2aa <unknown>
E       #3 0x557861a0f541 <unknown>
E       #4 0x557861a5d6c4 <unknown>
E       #5 0x557861a34e5d <unknown>
E       #6 0x557861a5ab54 <unknown>
E       #7 0x557861a34c03 <unknown>
E       #8 0x557861a017a8 <unknown>
E       #9 0x557861a02421 <unknown>
E       #10 0x557861efdb28 <unknown>
E       #11 0x557861f0187f <unknown>
E       #12 0x557861ee5c49 <unknown>
E       #13 0x557861f02405 <unknown>
E       #14 0x557861ecb4ff <unknown>
E       #15 0x557861f26258 <unknown>
E       #16 0x557861f26432 <unknown>
E       #17 0x557861f37fa3 <unknown>
E       #18 0x7ff65849caa4 <unknown>
E       #19 0x7ff658529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 04:04:24,086 - INFO - Starting test with Chrome browser
2025-09-28 04:04:24,086 - INFO - ====== WebDriver manager ======
2025-09-28 04:04:24,150 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:04:24,185 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:04:24,216 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 04:04:25,541 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 04:06:27,271 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8565e9668680ea1e92719d1109f430bf")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8565e9668680ea1e92719d1109f430bf")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe2b60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560ed4c5afba <unknown>
E       #1 0x560ed46df6d0 <unknown>
E       #2 0x560ed47312aa <unknown>
E       #3 0x560ed4731541 <unknown>
E       #4 0x560ed477f6c4 <unknown>
E       #5 0x560ed4756e5d <unknown>
E       #6 0x560ed477cb54 <unknown>
E       #7 0x560ed4756c03 <unknown>
E       #8 0x560ed47237a8 <unknown>
E       #9 0x560ed4724421 <unknown>
E       #10 0x560ed4c1fb28 <unknown>
E       #11 0x560ed4c2387f <unknown>
E       #12 0x560ed4c07c49 <unknown>
E       #13 0x560ed4c24405 <unknown>
E       #14 0x560ed4bed4ff <unknown>
E       #15 0x560ed4c48258 <unknown>
E       #16 0x560ed4c48432 <unknown>
E       #17 0x560ed4c59fa3 <unknown>
E       #18 0x7f4b82c9caa4 <unknown>
E       #19 0x7f4b82d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 04:06:27,337 - INFO - Starting test with Chrome browser
2025-09-28 04:06:27,337 - INFO - ====== WebDriver manager ======
2025-09-28 04:06:27,400 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:06:27,434 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:06:27,465 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 04:06:28,895 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 04:08:32,372 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e68823a3e60acb211835561959d813e7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e68823a3e60acb211835561959d813e7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe28e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56217f31bfba <unknown>
E       #1 0x56217eda06d0 <unknown>
E       #2 0x56217edf22aa <unknown>
E       #3 0x56217edf2541 <unknown>
E       #4 0x56217ee406c4 <unknown>
E       #5 0x56217ee17e5d <unknown>
E       #6 0x56217ee3db54 <unknown>
E       #7 0x56217ee17c03 <unknown>
E       #8 0x56217ede47a8 <unknown>
E       #9 0x56217ede5421 <unknown>
E       #10 0x56217f2e0b28 <unknown>
E       #11 0x56217f2e487f <unknown>
E       #12 0x56217f2c8c49 <unknown>
E       #13 0x56217f2e5405 <unknown>
E       #14 0x56217f2ae4ff <unknown>
E       #15 0x56217f309258 <unknown>
E       #16 0x56217f309432 <unknown>
E       #17 0x56217f31afa3 <unknown>
E       #18 0x7f590709caa4 <unknown>
E       #19 0x7f5907129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 04:08:32,437 - INFO - Starting test with Chrome browser
2025-09-28 04:08:32,437 - INFO - ====== WebDriver manager ======
2025-09-28 04:08:32,501 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:08:32,535 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:08:32,566 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 04:08:33,448 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 04:10:37,255 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5bd0d0d785a520f6af9dd0b84e78e06b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5bd0d0d785a520f6af9dd0b84e78e06b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe1da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558567c75fba <unknown>
E       #1 0x5585676fa6d0 <unknown>
E       #2 0x55856774c2aa <unknown>
E       #3 0x55856774c541 <unknown>
E       #4 0x55856779a6c4 <unknown>
E       #5 0x558567771e5d <unknown>
E       #6 0x558567797b54 <unknown>
E       #7 0x558567771c03 <unknown>
E       #8 0x55856773e7a8 <unknown>
E       #9 0x55856773f421 <unknown>
E       #10 0x558567c3ab28 <unknown>
E       #11 0x558567c3e87f <unknown>
E       #12 0x558567c22c49 <unknown>
E       #13 0x558567c3f405 <unknown>
E       #14 0x558567c084ff <unknown>
E       #15 0x558567c63258 <unknown>
E       #16 0x558567c63432 <unknown>
E       #17 0x558567c74fa3 <unknown>
E       #18 0x7f03ad89caa4 <unknown>
E       #19 0x7f03ad929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 04:10:38,314 - INFO - Starting test with Chrome browser
2025-09-28 04:10:38,314 - INFO - ====== WebDriver manager ======
2025-09-28 04:10:38,378 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:10:38,422 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:10:38,458 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 04:10:40,177 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 04:12:43,671 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="9abeea8bbf07609a4d15e458c5305d17")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="9abeea8bbf07609a4d15e458c5305d17")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fd4eafe1940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5649d8773fba <unknown>
E       #1 0x5649d81f86d0 <unknown>
E       #2 0x5649d824a2aa <unknown>
E       #3 0x5649d824a541 <unknown>
E       #4 0x5649d82986c4 <unknown>
E       #5 0x5649d826fe5d <unknown>
E       #6 0x5649d8295b54 <unknown>
E       #7 0x5649d826fc03 <unknown>
E       #8 0x5649d823c7a8 <unknown>
E       #9 0x5649d823d421 <unknown>
E       #10 0x5649d8738b28 <unknown>
E       #11 0x5649d873c87f <unknown>
E       #12 0x5649d8720c49 <unknown>
E       #13 0x5649d873d405 <unknown>
E       #14 0x5649d87064ff <unknown>
E       #15 0x5649d8761258 <unknown>
E       #16 0x5649d8761432 <unknown>
E       #17 0x5649d8772fa3 <unknown>
E       #18 0x7faeae49caa4 <unknown>
E       #19 0x7faeae529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-28 04:12:43,730 - INFO - Starting test with Chrome browser
2025-09-28 04:12:43,730 - INFO - ====== WebDriver manager ======
2025-09-28 04:12:43,794 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:12:43,826 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-28 04:12:43,861 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-09-28 04:12:45,069 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-28 04:14:48,627 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250928_034943/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55cce7f7afba <unknown>
#1 0x55cce79ff6d0 <unknown>
#2 0x55cce7a512aa <unknown>
#3 0x55cce7a51541 <unknown>
#4 0x55cce7a9f6c4 <unknown>
#5 0x55cce7a76e5d <unknown>
#6 0x55cce7a9cb54 <unknown>
#7 0x55cce7a76c03 <unknown>
#8 0x55cce7a437a8 <unknown>
#9 0x55cce7a44421 <unknown>
#10 0x55cce7f3fb28 <unknown>
#11 0x55cce7f4387f <unknown>
#12 0x55cce7f27c49 <unknown>
#13 0x55cce7f44405 <unknown>
#14 0x55cce7f0d4ff <unknown>
#15 0x55cce7f68258 <unknown>
#16 0x55cce7f68432 <unknown>
#17 0x55cce7f79fa3 <unknown>
#18 0x7f7a9469caa4 <unknown>
#19 0x7f7a94729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559722598fba <unknown>
#1 0x55972201d6d0 <unknown>
#2 0x55972206f2aa <unknown>
#3 0x55972206f541 <unknown>
#4 0x5597220bd6c4 <unknown>
#5 0x559722094e5d <unknown>
#6 0x5597220bab54 <unknown>
#7 0x559722094c03 <unknown>
#8 0x5597220617a8 <unknown>
#9 0x559722062421 <unknown>
#10 0x55972255db28 <unknown>
#11 0x55972256187f <unknown>
#12 0x559722545c49 <unknown>
#13 0x559722562405 <unknown>
#14 0x55972252b4ff <unknown>
#15 0x559722586258 <unknown>
#16 0x559722586432 <unknown>
#17 0x559722597fa3 <unknown>
#18 0x7eff0269caa4 <unknown>
#19 0x7eff02729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564279d0afba <unknown>
#1 0x56427978f6d0 <unknown>
#2 0x5642797e12aa <unknown>
#3 0x5642797e1541 <unknown>
#4 0x56427982f6c4 <unknown>
#5 0x564279806e5d <unknown>
#6 0x56427982cb54 <unknown>
#7 0x564279806c03 <unknown>
#8 0x5642797d37a8 <unknown>
#9 0x5642797d4421 <unknown>
#10 0x564279ccfb28 <unknown>
#11 0x564279cd387f <unknown>
#12 0x564279cb7c49 <unknown>
#13 0x564279cd4405 <unknown>
#14 0x564279c9d4ff <unknown>
#15 0x564279cf8258 <unknown>
#16 0x564279cf8432 <unknown>
#17 0x564279d09fa3 <unknown>
#18 0x7f6436c9caa4 <unknown>
#19 0x7f6436d29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5574ae94afba <unknown>
#1 0x5574ae3cf6d0 <unknown>
#2 0x5574ae4212aa <unknown>
#3 0x5574ae421541 <unknown>
#4 0x5574ae46f6c4 <unknown>
#5 0x5574ae446e5d <unknown>
#6 0x5574ae46cb54 <unknown>
#7 0x5574ae446c03 <unknown>
#8 0x5574ae4137a8 <unknown>
#9 0x5574ae414421 <unknown>
#10 0x5574ae90fb28 <unknown>
#11 0x5574ae91387f <unknown>
#12 0x5574ae8f7c49 <unknown>
#13 0x5574ae914405 <unknown>
#14 0x5574ae8dd4ff <unknown>
#15 0x5574ae938258 <unknown>
#16 0x5574ae938432 <unknown>
#17 0x5574ae949fa3 <unknown>
#18 0x7fe3df69caa4 <unknown>
#19 0x7fe3df729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564b1992dfba <unknown>
#1 0x564b193b26d0 <unknown>
#2 0x564b194042aa <unknown>
#3 0x564b19404541 <unknown>
#4 0x564b194526c4 <unknown>
#5 0x564b19429e5d <unknown>
#6 0x564b1944fb54 <unknown>
#7 0x564b19429c03 <unknown>
#8 0x564b193f67a8 <unknown>
#9 0x564b193f7421 <unknown>
#10 0x564b198f2b28 <unknown>
#11 0x564b198f687f <unknown>
#12 0x564b198dac49 <unknown>
#13 0x564b198f7405 <unknown>
#14 0x564b198c04ff <unknown>
#15 0x564b1991b258 <unknown>
#16 0x564b1991b432 <unknown>
#17 0x564b1992cfa3 <unknown>
#18 0x7f216469caa4 <unknown>
#19 0x7f2164729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5594a688bfba <unknown>
#1 0x5594a63106d0 <unknown>
#2 0x5594a63622aa <unknown>
#3 0x5594a6362541 <unknown>
#4 0x5594a63b06c4 <unknown>
#5 0x5594a6387e5d <unknown>
#6 0x5594a63adb54 <unknown>
#7 0x5594a6387c03 <unknown>
#8 0x5594a63547a8 <unknown>
#9 0x5594a6355421 <unknown>
#10 0x5594a6850b28 <unknown>
#11 0x5594a685487f <unknown>
#12 0x5594a6838c49 <unknown>
#13 0x5594a6855405 <unknown>
#14 0x5594a681e4ff <unknown>
#15 0x5594a6879258 <unknown>
#16 0x5594a6879432 <unknown>
#17 0x5594a688afa3 <unknown>
#18 0x7f4e05c9caa4 <unknown>
#19 0x7f4e05d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5616956a3fba <unknown>
#1 0x5616951286d0 <unknown>
#2 0x56169517a2aa <unknown>
#3 0x56169517a541 <unknown>
#4 0x5616951c86c4 <unknown>
#5 0x56169519fe5d <unknown>
#6 0x5616951c5b54 <unknown>
#7 0x56169519fc03 <unknown>
#8 0x56169516c7a8 <unknown>
#9 0x56169516d421 <unknown>
#10 0x561695668b28 <unknown>
#11 0x56169566c87f <unknown>
#12 0x561695650c49 <unknown>
#13 0x56169566d405 <unknown>
#14 0x5616956364ff <unknown>
#15 0x561695691258 <unknown>
#16 0x561695691432 <unknown>
#17 0x5616956a2fa3 <unknown>
#18 0x7f0ebde9caa4 <unknown>
#19 0x7f0ebdf29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557861f38fba <unknown>
#1 0x5578619bd6d0 <unknown>
#2 0x557861a0f2aa <unknown>
#3 0x557861a0f541 <unknown>
#4 0x557861a5d6c4 <unknown>
#5 0x557861a34e5d <unknown>
#6 0x557861a5ab54 <unknown>
#7 0x557861a34c03 <unknown>
#8 0x557861a017a8 <unknown>
#9 0x557861a02421 <unknown>
#10 0x557861efdb28 <unknown>
#11 0x557861f0187f <unknown>
#12 0x557861ee5c49 <unknown>
#13 0x557861f02405 <unknown>
#14 0x557861ecb4ff <unknown>
#15 0x557861f26258 <unknown>
#16 0x557861f26432 <unknown>
#17 0x557861f37fa3 <unknown>
#18 0x7ff65849caa4 <unknown>
#19 0x7ff658529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560ed4c5afba <unknown>
#1 0x560ed46df6d0 <unknown>
#2 0x560ed47312aa <unknown>
#3 0x560ed4731541 <unknown>
#4 0x560ed477f6c4 <unknown>
#5 0x560ed4756e5d <unknown>
#6 0x560ed477cb54 <unknown>
#7 0x560ed4756c03 <unknown>
#8 0x560ed47237a8 <unknown>
#9 0x560ed4724421 <unknown>
#10 0x560ed4c1fb28 <unknown>
#11 0x560ed4c2387f <unknown>
#12 0x560ed4c07c49 <unknown>
#13 0x560ed4c24405 <unknown>
#14 0x560ed4bed4ff <unknown>
#15 0x560ed4c48258 <unknown>
#16 0x560ed4c48432 <unknown>
#17 0x560ed4c59fa3 <unknown>
#18 0x7f4b82c9caa4 <unknown>
#19 0x7f4b82d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56217f31bfba <unknown>
#1 0x56217eda06d0 <unknown>
#2 0x56217edf22aa <unknown>
#3 0x56217edf2541 <unknown>
#4 0x56217ee406c4 <unknown>
#5 0x56217ee17e5d <unknown>
#6 0x56217ee3db54 <unknown>
#7 0x56217ee17c03 <unknown>
#8 0x56217ede47a8 <unknown>
#9 0x56217ede5421 <unknown>
#10 0x56217f2e0b28 <unknown>
#11 0x56217f2e487f <unknown>
#12 0x56217f2c8c49 <unknown>
#13 0x56217f2e5405 <unknown>
#14 0x56217f2ae4ff <unknown>
#15 0x56217f309258 <unknown>
#16 0x56217f309432 <unknown>
#17 0x56217f31afa3 <unknown>
#18 0x7f590709caa4 <unknown>
#19 0x7f5907129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558567c75fba <unknown>
#1 0x5585676fa6d0 <unknown>
#2 0x55856774c2aa <unknown>
#3 0x55856774c541 <unknown>
#4 0x55856779a6c4 <unknown>
#5 0x558567771e5d <unknown>
#6 0x558567797b54 <unknown>
#7 0x558567771c03 <unknown>
#8 0x55856773e7a8 <unknown>
#9 0x55856773f421 <unknown>
#10 0x558567c3ab28 <unknown>
#11 0x558567c3e87f <unknown>
#12 0x558567c22c49 <unknown>
#13 0x558567c3f405 <unknown>
#14 0x558567c084ff <unknown>
#15 0x558567c63258 <unknown>
#16 0x558567c63432 <unknown>
#17 0x558567c74fa3 <unknown>
#18 0x7f03ad89caa4 <unknown>
#19 0x7f03ad929c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5649d8773fba <unknown>
#1 0x5649d81f86d0 <unknown>
#2 0x5649d824a2aa <unknown>
#3 0x5649d824a541 <unknown>
#4 0x5649d82986c4 <unknown>
#5 0x5649d826fe5d <unknown>
#6 0x5649d8295b54 <unknown>
#7 0x5649d826fc03 <unknown>
#8 0x5649d823c7a8 <unknown>
#9 0x5649d823d421 <unknown>
#10 0x5649d8738b28 <unknown>
#11 0x5649d873c87f <unknown>
#12 0x5649d8720c49 <unknown>
#13 0x5649d873d405 <unknown>
#14 0x5649d87064ff <unknown>
#15 0x5649d8761258 <unknown>
#16 0x5649d8761432 <unknown>
#17 0x5649d8772fa3 <unknown>
#18 0x7faeae49caa4 <unknown>
#19 0x7faeae529c6c <unknown>
================== 12 failed, 7 passed in 1518.61s (0:25:18) ===================
--------------------------------------------
Test Run Finished: 2025-09-28 04:15:02
Duration: 1521 seconds
Status: FAILURE
Exit Code: 1
============================================
