========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-12 03:42:29
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1', 'Faker': '37.6.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1, Faker-37.6.0
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8ab39d98132e136e408a84eeb26c449b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8ab39d98132e136e408a84eeb26c449b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c86a20>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559189fe894a <unknown>
E       #1 0x559189a5d8a0 <unknown>
E       #2 0x559189aaf540 <unknown>
E       #3 0x559189aaf731 <unknown>
E       #4 0x559189afd824 <unknown>
E       #5 0x559189ad505d <unknown>
E       #6 0x559189afac23 <unknown>
E       #7 0x559189ad4e03 <unknown>
E       #8 0x559189aa1968 <unknown>
E       #9 0x559189aa25e1 <unknown>
E       #10 0x559189fac548 <unknown>
E       #11 0x559189fb0272 <unknown>
E       #12 0x559189f93313 <unknown>
E       #13 0x559189fb0dc5 <unknown>
E       #14 0x559189f7849f <unknown>
E       #15 0x559189fd5158 <unknown>
E       #16 0x559189fd5332 <unknown>
E       #17 0x559189fe7a53 <unknown>
E       #18 0x7f413989caa4 <unknown>
E       #19 0x7f4139929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 03:42:33,397 - INFO - Test data loaded successfully.
2025-09-12 03:42:33,397 - INFO - Starting test with Chrome browser
2025-09-12 03:42:33,397 - INFO - ====== WebDriver manager ======
2025-09-12 03:42:34,755 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:42:34,819 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:42:34,864 - INFO - There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
2025-09-12 03:42:34,864 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:42:34,992 - INFO - WebDriver version 140.0.7339.82 selected
2025-09-12 03:42:34,997 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-12 03:42:34,998 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-12 03:42:35,046 - INFO - Driver downloading response is 200
2025-09-12 03:42:35,120 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:42:35,281 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
2025-09-12 03:42:42,397 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.82 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-12 03:42:42,399 - INFO - Starting the test case for valid credentials
2025-09-12 03:42:43,017 - INFO - User enters the email-id
2025-09-12 03:42:44,895 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 03:44:46,602 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="17040581b371bc8175bc50a99e10ddf2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="17040581b371bc8175bc50a99e10ddf2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3d800>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ae2dd5d94a <unknown>
E       #1 0x55ae2d7d28a0 <unknown>
E       #2 0x55ae2d824540 <unknown>
E       #3 0x55ae2d824731 <unknown>
E       #4 0x55ae2d872824 <unknown>
E       #5 0x55ae2d84a05d <unknown>
E       #6 0x55ae2d86fc23 <unknown>
E       #7 0x55ae2d849e03 <unknown>
E       #8 0x55ae2d816968 <unknown>
E       #9 0x55ae2d8175e1 <unknown>
E       #10 0x55ae2dd21548 <unknown>
E       #11 0x55ae2dd25272 <unknown>
E       #12 0x55ae2dd08313 <unknown>
E       #13 0x55ae2dd25dc5 <unknown>
E       #14 0x55ae2dced49f <unknown>
E       #15 0x55ae2dd4a158 <unknown>
E       #16 0x55ae2dd4a332 <unknown>
E       #17 0x55ae2dd5ca53 <unknown>
E       #18 0x7f4fa649caa4 <unknown>
E       #19 0x7f4fa6529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 03:44:46,790 - INFO - Starting test with Chrome browser
2025-09-12 03:44:46,790 - INFO - ====== WebDriver manager ======
2025-09-12 03:44:46,858 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:44:46,904 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:44:46,977 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 03:44:49,660 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-12 03:44:49,661 - INFO - Starting the test case for valid credentials
2025-09-12 03:44:49,807 - INFO - User enters the email-id
2025-09-12 03:44:51,674 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 03:46:53,300 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="19528df9d93cfb38b8a6209250a4fc77")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="19528df9d93cfb38b8a6209250a4fc77")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff2ac63e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55cb6607094a <unknown>
E       #1 0x55cb65ae58a0 <unknown>
E       #2 0x55cb65b37540 <unknown>
E       #3 0x55cb65b37731 <unknown>
E       #4 0x55cb65b85824 <unknown>
E       #5 0x55cb65b5d05d <unknown>
E       #6 0x55cb65b82c23 <unknown>
E       #7 0x55cb65b5ce03 <unknown>
E       #8 0x55cb65b29968 <unknown>
E       #9 0x55cb65b2a5e1 <unknown>
E       #10 0x55cb66034548 <unknown>
E       #11 0x55cb66038272 <unknown>
E       #12 0x55cb6601b313 <unknown>
E       #13 0x55cb66038dc5 <unknown>
E       #14 0x55cb6600049f <unknown>
E       #15 0x55cb6605d158 <unknown>
E       #16 0x55cb6605d332 <unknown>
E       #17 0x55cb6606fa53 <unknown>
E       #18 0x7f9bad49caa4 <unknown>
E       #19 0x7f9bad529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 03:46:53,365 - INFO - Starting test with Chrome browser
2025-09-12 03:46:53,365 - INFO - ====== WebDriver manager ======
2025-09-12 03:46:53,434 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:46:53,481 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:46:53,526 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 03:46:56,353 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-12 03:46:56,353 - INFO - Starting the test case for valid credentials
2025-09-12 03:46:56,520 - INFO - User enters the email-id
2025-09-12 03:46:58,381 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 03:49:00,059 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="eb56ae60f76d2e509d3a91860d7245af")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="eb56ae60f76d2e509d3a91860d7245af")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3d620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x556f4efc894a <unknown>
E       #1 0x556f4ea3d8a0 <unknown>
E       #2 0x556f4ea8f540 <unknown>
E       #3 0x556f4ea8f731 <unknown>
E       #4 0x556f4eadd824 <unknown>
E       #5 0x556f4eab505d <unknown>
E       #6 0x556f4eadac23 <unknown>
E       #7 0x556f4eab4e03 <unknown>
E       #8 0x556f4ea81968 <unknown>
E       #9 0x556f4ea825e1 <unknown>
E       #10 0x556f4ef8c548 <unknown>
E       #11 0x556f4ef90272 <unknown>
E       #12 0x556f4ef73313 <unknown>
E       #13 0x556f4ef90dc5 <unknown>
E       #14 0x556f4ef5849f <unknown>
E       #15 0x556f4efb5158 <unknown>
E       #16 0x556f4efb5332 <unknown>
E       #17 0x556f4efc7a53 <unknown>
E       #18 0x7f53fe49caa4 <unknown>
E       #19 0x7f53fe529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 03:49:00,139 - INFO - Starting test with Chrome browser
2025-09-12 03:49:00,140 - INFO - ====== WebDriver manager ======
2025-09-12 03:49:00,205 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:49:00,251 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:49:00,295 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 03:49:02,582 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-12 03:49:02,583 - INFO - Starting the test case for valid credentials
2025-09-12 03:49:02,743 - INFO - User enters the email-id
2025-09-12 03:49:04,727 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 03:51:06,446 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bbc06d167bb2d7a8e212fea615df41dc")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="bbc06d167bb2d7a8e212fea615df41dc")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3dee0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5582621fb94a <unknown>
E       #1 0x558261c708a0 <unknown>
E       #2 0x558261cc2540 <unknown>
E       #3 0x558261cc2731 <unknown>
E       #4 0x558261d10824 <unknown>
E       #5 0x558261ce805d <unknown>
E       #6 0x558261d0dc23 <unknown>
E       #7 0x558261ce7e03 <unknown>
E       #8 0x558261cb4968 <unknown>
E       #9 0x558261cb55e1 <unknown>
E       #10 0x5582621bf548 <unknown>
E       #11 0x5582621c3272 <unknown>
E       #12 0x5582621a6313 <unknown>
E       #13 0x5582621c3dc5 <unknown>
E       #14 0x55826218b49f <unknown>
E       #15 0x5582621e8158 <unknown>
E       #16 0x5582621e8332 <unknown>
E       #17 0x5582621faa53 <unknown>
E       #18 0x7eff3aa9caa4 <unknown>
E       #19 0x7eff3ab29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 03:51:06,512 - INFO - Starting test with Chrome browser
2025-09-12 03:51:06,512 - INFO - ====== WebDriver manager ======
2025-09-12 03:51:06,579 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:51:06,625 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:51:06,670 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 03:51:08,502 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 03:53:10,306 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fb6488e101f9108d5136093150519609")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="fb6488e101f9108d5136093150519609")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3df80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559d7be0194a <unknown>
E       #1 0x559d7b8768a0 <unknown>
E       #2 0x559d7b8c8540 <unknown>
E       #3 0x559d7b8c8731 <unknown>
E       #4 0x559d7b916824 <unknown>
E       #5 0x559d7b8ee05d <unknown>
E       #6 0x559d7b913c23 <unknown>
E       #7 0x559d7b8ede03 <unknown>
E       #8 0x559d7b8ba968 <unknown>
E       #9 0x559d7b8bb5e1 <unknown>
E       #10 0x559d7bdc5548 <unknown>
E       #11 0x559d7bdc9272 <unknown>
E       #12 0x559d7bdac313 <unknown>
E       #13 0x559d7bdc9dc5 <unknown>
E       #14 0x559d7bd9149f <unknown>
E       #15 0x559d7bdee158 <unknown>
E       #16 0x559d7bdee332 <unknown>
E       #17 0x559d7be00a53 <unknown>
E       #18 0x7f1071c9caa4 <unknown>
E       #19 0x7f1071d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 03:53:10,372 - INFO - Starting test with Chrome browser
2025-09-12 03:53:10,372 - INFO - ====== WebDriver manager ======
2025-09-12 03:53:10,438 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:53:10,485 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:53:10,531 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 03:53:13,275 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 03:55:15,090 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="11b086e12e7f282625ce0713477ecc42")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="11b086e12e7f282625ce0713477ecc42")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3dd00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5571ceab294a <unknown>
E       #1 0x5571ce5278a0 <unknown>
E       #2 0x5571ce579540 <unknown>
E       #3 0x5571ce579731 <unknown>
E       #4 0x5571ce5c7824 <unknown>
E       #5 0x5571ce59f05d <unknown>
E       #6 0x5571ce5c4c23 <unknown>
E       #7 0x5571ce59ee03 <unknown>
E       #8 0x5571ce56b968 <unknown>
E       #9 0x5571ce56c5e1 <unknown>
E       #10 0x5571cea76548 <unknown>
E       #11 0x5571cea7a272 <unknown>
E       #12 0x5571cea5d313 <unknown>
E       #13 0x5571cea7adc5 <unknown>
E       #14 0x5571cea4249f <unknown>
E       #15 0x5571cea9f158 <unknown>
E       #16 0x5571cea9f332 <unknown>
E       #17 0x5571ceab1a53 <unknown>
E       #18 0x7f6ba5a9caa4 <unknown>
E       #19 0x7f6ba5b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 03:55:15,156 - INFO - Starting test with Chrome browser
2025-09-12 03:55:15,156 - INFO - ====== WebDriver manager ======
2025-09-12 03:55:15,221 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:55:15,267 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:55:15,313 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 03:55:17,503 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 03:57:19,268 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a72150870706187439eb0a74654249b9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a72150870706187439eb0a74654249b9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3e7a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55881424e94a <unknown>
E       #1 0x558813cc38a0 <unknown>
E       #2 0x558813d15540 <unknown>
E       #3 0x558813d15731 <unknown>
E       #4 0x558813d63824 <unknown>
E       #5 0x558813d3b05d <unknown>
E       #6 0x558813d60c23 <unknown>
E       #7 0x558813d3ae03 <unknown>
E       #8 0x558813d07968 <unknown>
E       #9 0x558813d085e1 <unknown>
E       #10 0x558814212548 <unknown>
E       #11 0x558814216272 <unknown>
E       #12 0x5588141f9313 <unknown>
E       #13 0x558814216dc5 <unknown>
E       #14 0x5588141de49f <unknown>
E       #15 0x55881423b158 <unknown>
E       #16 0x55881423b332 <unknown>
E       #17 0x55881424da53 <unknown>
E       #18 0x7f79e669caa4 <unknown>
E       #19 0x7f79e6729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 03:57:19,334 - INFO - Starting test with Chrome browser
2025-09-12 03:57:19,334 - INFO - ====== WebDriver manager ======
2025-09-12 03:57:19,400 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:57:19,446 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:57:19,490 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 03:57:21,653 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 03:59:23,426 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ab26701448eda290fea6de37ed2220f1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ab26701448eda290fea6de37ed2220f1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3eac0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56423f3cb94a <unknown>
E       #1 0x56423ee408a0 <unknown>
E       #2 0x56423ee92540 <unknown>
E       #3 0x56423ee92731 <unknown>
E       #4 0x56423eee0824 <unknown>
E       #5 0x56423eeb805d <unknown>
E       #6 0x56423eeddc23 <unknown>
E       #7 0x56423eeb7e03 <unknown>
E       #8 0x56423ee84968 <unknown>
E       #9 0x56423ee855e1 <unknown>
E       #10 0x56423f38f548 <unknown>
E       #11 0x56423f393272 <unknown>
E       #12 0x56423f376313 <unknown>
E       #13 0x56423f393dc5 <unknown>
E       #14 0x56423f35b49f <unknown>
E       #15 0x56423f3b8158 <unknown>
E       #16 0x56423f3b8332 <unknown>
E       #17 0x56423f3caa53 <unknown>
E       #18 0x7fb645e9caa4 <unknown>
E       #19 0x7fb645f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 03:59:23,492 - INFO - Starting test with Chrome browser
2025-09-12 03:59:23,492 - INFO - ====== WebDriver manager ======
2025-09-12 03:59:23,559 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:59:23,605 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 03:59:23,650 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 03:59:26,236 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 04:01:29,983 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="83f646c0dfd05020e179b342f7f7e5ff")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="83f646c0dfd05020e179b342f7f7e5ff")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3e840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f2124f394a <unknown>
E       #1 0x55f211f688a0 <unknown>
E       #2 0x55f211fba540 <unknown>
E       #3 0x55f211fba731 <unknown>
E       #4 0x55f212008824 <unknown>
E       #5 0x55f211fe005d <unknown>
E       #6 0x55f212005c23 <unknown>
E       #7 0x55f211fdfe03 <unknown>
E       #8 0x55f211fac968 <unknown>
E       #9 0x55f211fad5e1 <unknown>
E       #10 0x55f2124b7548 <unknown>
E       #11 0x55f2124bb272 <unknown>
E       #12 0x55f21249e313 <unknown>
E       #13 0x55f2124bbdc5 <unknown>
E       #14 0x55f21248349f <unknown>
E       #15 0x55f2124e0158 <unknown>
E       #16 0x55f2124e0332 <unknown>
E       #17 0x55f2124f2a53 <unknown>
E       #18 0x7fe30b49caa4 <unknown>
E       #19 0x7fe30b529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 04:01:30,049 - INFO - Starting test with Chrome browser
2025-09-12 04:01:30,049 - INFO - ====== WebDriver manager ======
2025-09-12 04:01:30,118 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 04:01:30,174 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 04:01:30,219 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 04:01:32,310 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 04:03:36,000 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a49852402b70c2ff9cb6273479704010")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a49852402b70c2ff9cb6273479704010")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3e2a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557a53a8294a <unknown>
E       #1 0x557a534f78a0 <unknown>
E       #2 0x557a53549540 <unknown>
E       #3 0x557a53549731 <unknown>
E       #4 0x557a53597824 <unknown>
E       #5 0x557a5356f05d <unknown>
E       #6 0x557a53594c23 <unknown>
E       #7 0x557a5356ee03 <unknown>
E       #8 0x557a5353b968 <unknown>
E       #9 0x557a5353c5e1 <unknown>
E       #10 0x557a53a46548 <unknown>
E       #11 0x557a53a4a272 <unknown>
E       #12 0x557a53a2d313 <unknown>
E       #13 0x557a53a4adc5 <unknown>
E       #14 0x557a53a1249f <unknown>
E       #15 0x557a53a6f158 <unknown>
E       #16 0x557a53a6f332 <unknown>
E       #17 0x557a53a81a53 <unknown>
E       #18 0x7f8d37a9caa4 <unknown>
E       #19 0x7f8d37b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 04:03:36,065 - INFO - Starting test with Chrome browser
2025-09-12 04:03:36,065 - INFO - ====== WebDriver manager ======
2025-09-12 04:03:36,132 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 04:03:36,187 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 04:03:36,232 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 04:03:38,466 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 04:05:42,204 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="702b82b26ca47517df2b9cf837f0362b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="702b82b26ca47517df2b9cf837f0362b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6ff1c3d620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a32974d94a <unknown>
E       #1 0x55a3291c28a0 <unknown>
E       #2 0x55a329214540 <unknown>
E       #3 0x55a329214731 <unknown>
E       #4 0x55a329262824 <unknown>
E       #5 0x55a32923a05d <unknown>
E       #6 0x55a32925fc23 <unknown>
E       #7 0x55a329239e03 <unknown>
E       #8 0x55a329206968 <unknown>
E       #9 0x55a3292075e1 <unknown>
E       #10 0x55a329711548 <unknown>
E       #11 0x55a329715272 <unknown>
E       #12 0x55a3296f8313 <unknown>
E       #13 0x55a329715dc5 <unknown>
E       #14 0x55a3296dd49f <unknown>
E       #15 0x55a32973a158 <unknown>
E       #16 0x55a32973a332 <unknown>
E       #17 0x55a32974ca53 <unknown>
E       #18 0x7f810609caa4 <unknown>
E       #19 0x7f8106129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-12 04:05:42,269 - INFO - Starting test with Chrome browser
2025-09-12 04:05:42,269 - INFO - ====== WebDriver manager ======
2025-09-12 04:05:42,337 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 04:05:42,384 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-12 04:05:42,430 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-12 04:05:44,721 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-12 04:07:48,532 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250912_034233/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559189fe894a <unknown>
#1 0x559189a5d8a0 <unknown>
#2 0x559189aaf540 <unknown>
#3 0x559189aaf731 <unknown>
#4 0x559189afd824 <unknown>
#5 0x559189ad505d <unknown>
#6 0x559189afac23 <unknown>
#7 0x559189ad4e03 <unknown>
#8 0x559189aa1968 <unknown>
#9 0x559189aa25e1 <unknown>
#10 0x559189fac548 <unknown>
#11 0x559189fb0272 <unknown>
#12 0x559189f93313 <unknown>
#13 0x559189fb0dc5 <unknown>
#14 0x559189f7849f <unknown>
#15 0x559189fd5158 <unknown>
#16 0x559189fd5332 <unknown>
#17 0x559189fe7a53 <unknown>
#18 0x7f413989caa4 <unknown>
#19 0x7f4139929c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ae2dd5d94a <unknown>
#1 0x55ae2d7d28a0 <unknown>
#2 0x55ae2d824540 <unknown>
#3 0x55ae2d824731 <unknown>
#4 0x55ae2d872824 <unknown>
#5 0x55ae2d84a05d <unknown>
#6 0x55ae2d86fc23 <unknown>
#7 0x55ae2d849e03 <unknown>
#8 0x55ae2d816968 <unknown>
#9 0x55ae2d8175e1 <unknown>
#10 0x55ae2dd21548 <unknown>
#11 0x55ae2dd25272 <unknown>
#12 0x55ae2dd08313 <unknown>
#13 0x55ae2dd25dc5 <unknown>
#14 0x55ae2dced49f <unknown>
#15 0x55ae2dd4a158 <unknown>
#16 0x55ae2dd4a332 <unknown>
#17 0x55ae2dd5ca53 <unknown>
#18 0x7f4fa649caa4 <unknown>
#19 0x7f4fa6529c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55cb6607094a <unknown>
#1 0x55cb65ae58a0 <unknown>
#2 0x55cb65b37540 <unknown>
#3 0x55cb65b37731 <unknown>
#4 0x55cb65b85824 <unknown>
#5 0x55cb65b5d05d <unknown>
#6 0x55cb65b82c23 <unknown>
#7 0x55cb65b5ce03 <unknown>
#8 0x55cb65b29968 <unknown>
#9 0x55cb65b2a5e1 <unknown>
#10 0x55cb66034548 <unknown>
#11 0x55cb66038272 <unknown>
#12 0x55cb6601b313 <unknown>
#13 0x55cb66038dc5 <unknown>
#14 0x55cb6600049f <unknown>
#15 0x55cb6605d158 <unknown>
#16 0x55cb6605d332 <unknown>
#17 0x55cb6606fa53 <unknown>
#18 0x7f9bad49caa4 <unknown>
#19 0x7f9bad529c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x556f4efc894a <unknown>
#1 0x556f4ea3d8a0 <unknown>
#2 0x556f4ea8f540 <unknown>
#3 0x556f4ea8f731 <unknown>
#4 0x556f4eadd824 <unknown>
#5 0x556f4eab505d <unknown>
#6 0x556f4eadac23 <unknown>
#7 0x556f4eab4e03 <unknown>
#8 0x556f4ea81968 <unknown>
#9 0x556f4ea825e1 <unknown>
#10 0x556f4ef8c548 <unknown>
#11 0x556f4ef90272 <unknown>
#12 0x556f4ef73313 <unknown>
#13 0x556f4ef90dc5 <unknown>
#14 0x556f4ef5849f <unknown>
#15 0x556f4efb5158 <unknown>
#16 0x556f4efb5332 <unknown>
#17 0x556f4efc7a53 <unknown>
#18 0x7f53fe49caa4 <unknown>
#19 0x7f53fe529c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5582621fb94a <unknown>
#1 0x558261c708a0 <unknown>
#2 0x558261cc2540 <unknown>
#3 0x558261cc2731 <unknown>
#4 0x558261d10824 <unknown>
#5 0x558261ce805d <unknown>
#6 0x558261d0dc23 <unknown>
#7 0x558261ce7e03 <unknown>
#8 0x558261cb4968 <unknown>
#9 0x558261cb55e1 <unknown>
#10 0x5582621bf548 <unknown>
#11 0x5582621c3272 <unknown>
#12 0x5582621a6313 <unknown>
#13 0x5582621c3dc5 <unknown>
#14 0x55826218b49f <unknown>
#15 0x5582621e8158 <unknown>
#16 0x5582621e8332 <unknown>
#17 0x5582621faa53 <unknown>
#18 0x7eff3aa9caa4 <unknown>
#19 0x7eff3ab29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559d7be0194a <unknown>
#1 0x559d7b8768a0 <unknown>
#2 0x559d7b8c8540 <unknown>
#3 0x559d7b8c8731 <unknown>
#4 0x559d7b916824 <unknown>
#5 0x559d7b8ee05d <unknown>
#6 0x559d7b913c23 <unknown>
#7 0x559d7b8ede03 <unknown>
#8 0x559d7b8ba968 <unknown>
#9 0x559d7b8bb5e1 <unknown>
#10 0x559d7bdc5548 <unknown>
#11 0x559d7bdc9272 <unknown>
#12 0x559d7bdac313 <unknown>
#13 0x559d7bdc9dc5 <unknown>
#14 0x559d7bd9149f <unknown>
#15 0x559d7bdee158 <unknown>
#16 0x559d7bdee332 <unknown>
#17 0x559d7be00a53 <unknown>
#18 0x7f1071c9caa4 <unknown>
#19 0x7f1071d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5571ceab294a <unknown>
#1 0x5571ce5278a0 <unknown>
#2 0x5571ce579540 <unknown>
#3 0x5571ce579731 <unknown>
#4 0x5571ce5c7824 <unknown>
#5 0x5571ce59f05d <unknown>
#6 0x5571ce5c4c23 <unknown>
#7 0x5571ce59ee03 <unknown>
#8 0x5571ce56b968 <unknown>
#9 0x5571ce56c5e1 <unknown>
#10 0x5571cea76548 <unknown>
#11 0x5571cea7a272 <unknown>
#12 0x5571cea5d313 <unknown>
#13 0x5571cea7adc5 <unknown>
#14 0x5571cea4249f <unknown>
#15 0x5571cea9f158 <unknown>
#16 0x5571cea9f332 <unknown>
#17 0x5571ceab1a53 <unknown>
#18 0x7f6ba5a9caa4 <unknown>
#19 0x7f6ba5b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55881424e94a <unknown>
#1 0x558813cc38a0 <unknown>
#2 0x558813d15540 <unknown>
#3 0x558813d15731 <unknown>
#4 0x558813d63824 <unknown>
#5 0x558813d3b05d <unknown>
#6 0x558813d60c23 <unknown>
#7 0x558813d3ae03 <unknown>
#8 0x558813d07968 <unknown>
#9 0x558813d085e1 <unknown>
#10 0x558814212548 <unknown>
#11 0x558814216272 <unknown>
#12 0x5588141f9313 <unknown>
#13 0x558814216dc5 <unknown>
#14 0x5588141de49f <unknown>
#15 0x55881423b158 <unknown>
#16 0x55881423b332 <unknown>
#17 0x55881424da53 <unknown>
#18 0x7f79e669caa4 <unknown>
#19 0x7f79e6729c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56423f3cb94a <unknown>
#1 0x56423ee408a0 <unknown>
#2 0x56423ee92540 <unknown>
#3 0x56423ee92731 <unknown>
#4 0x56423eee0824 <unknown>
#5 0x56423eeb805d <unknown>
#6 0x56423eeddc23 <unknown>
#7 0x56423eeb7e03 <unknown>
#8 0x56423ee84968 <unknown>
#9 0x56423ee855e1 <unknown>
#10 0x56423f38f548 <unknown>
#11 0x56423f393272 <unknown>
#12 0x56423f376313 <unknown>
#13 0x56423f393dc5 <unknown>
#14 0x56423f35b49f <unknown>
#15 0x56423f3b8158 <unknown>
#16 0x56423f3b8332 <unknown>
#17 0x56423f3caa53 <unknown>
#18 0x7fb645e9caa4 <unknown>
#19 0x7fb645f29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f2124f394a <unknown>
#1 0x55f211f688a0 <unknown>
#2 0x55f211fba540 <unknown>
#3 0x55f211fba731 <unknown>
#4 0x55f212008824 <unknown>
#5 0x55f211fe005d <unknown>
#6 0x55f212005c23 <unknown>
#7 0x55f211fdfe03 <unknown>
#8 0x55f211fac968 <unknown>
#9 0x55f211fad5e1 <unknown>
#10 0x55f2124b7548 <unknown>
#11 0x55f2124bb272 <unknown>
#12 0x55f21249e313 <unknown>
#13 0x55f2124bbdc5 <unknown>
#14 0x55f21248349f <unknown>
#15 0x55f2124e0158 <unknown>
#16 0x55f2124e0332 <unknown>
#17 0x55f2124f2a53 <unknown>
#18 0x7fe30b49caa4 <unknown>
#19 0x7fe30b529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557a53a8294a <unknown>
#1 0x557a534f78a0 <unknown>
#2 0x557a53549540 <unknown>
#3 0x557a53549731 <unknown>
#4 0x557a53597824 <unknown>
#5 0x557a5356f05d <unknown>
#6 0x557a53594c23 <unknown>
#7 0x557a5356ee03 <unknown>
#8 0x557a5353b968 <unknown>
#9 0x557a5353c5e1 <unknown>
#10 0x557a53a46548 <unknown>
#11 0x557a53a4a272 <unknown>
#12 0x557a53a2d313 <unknown>
#13 0x557a53a4adc5 <unknown>
#14 0x557a53a1249f <unknown>
#15 0x557a53a6f158 <unknown>
#16 0x557a53a6f332 <unknown>
#17 0x557a53a81a53 <unknown>
#18 0x7f8d37a9caa4 <unknown>
#19 0x7f8d37b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a32974d94a <unknown>
#1 0x55a3291c28a0 <unknown>
#2 0x55a329214540 <unknown>
#3 0x55a329214731 <unknown>
#4 0x55a329262824 <unknown>
#5 0x55a32923a05d <unknown>
#6 0x55a32925fc23 <unknown>
#7 0x55a329239e03 <unknown>
#8 0x55a329206968 <unknown>
#9 0x55a3292075e1 <unknown>
#10 0x55a329711548 <unknown>
#11 0x55a329715272 <unknown>
#12 0x55a3296f8313 <unknown>
#13 0x55a329715dc5 <unknown>
#14 0x55a3296dd49f <unknown>
#15 0x55a32973a158 <unknown>
#16 0x55a32973a332 <unknown>
#17 0x55a32974ca53 <unknown>
#18 0x7f810609caa4 <unknown>
#19 0x7f8106129c3c <unknown>
================== 12 failed, 7 passed in 1536.78s (0:25:36) ===================
--------------------------------------------
Test Run Finished: 2025-09-12 04:08:10
Duration: 1541 seconds
Status: FAILURE
Exit Code: 1
============================================
