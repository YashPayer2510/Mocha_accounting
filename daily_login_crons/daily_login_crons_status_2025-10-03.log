========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-03 03:44:07
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6026f15a6d6f5a8dd3477f22a41e4a8a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6026f15a6d6f5a8dd3477f22a41e4a8a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a54530900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x555fecb56fba <unknown>
E       #1 0x555fec5db6d0 <unknown>
E       #2 0x555fec62d2aa <unknown>
E       #3 0x555fec62d541 <unknown>
E       #4 0x555fec67b6c4 <unknown>
E       #5 0x555fec652e5d <unknown>
E       #6 0x555fec678b54 <unknown>
E       #7 0x555fec652c03 <unknown>
E       #8 0x555fec61f7a8 <unknown>
E       #9 0x555fec620421 <unknown>
E       #10 0x555fecb1bb28 <unknown>
E       #11 0x555fecb1f87f <unknown>
E       #12 0x555fecb03c49 <unknown>
E       #13 0x555fecb20405 <unknown>
E       #14 0x555fecae94ff <unknown>
E       #15 0x555fecb44258 <unknown>
E       #16 0x555fecb44432 <unknown>
E       #17 0x555fecb55fa3 <unknown>
E       #18 0x7fcc3f89caa4 <unknown>
E       #19 0x7fcc3f929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 03:44:11,082 - INFO - Test data loaded successfully.
2025-10-03 03:44:11,082 - INFO - Starting test with Chrome browser
2025-10-03 03:44:11,082 - INFO - ====== WebDriver manager ======
2025-10-03 03:44:16,524 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:44:16,562 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:44:16,596 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-03 03:44:16,596 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:44:16,696 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-03 03:44:16,700 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-03 03:44:16,700 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-03 03:44:16,755 - INFO - Driver downloading response is 200
2025-10-03 03:44:16,818 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:44:16,964 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-03 03:44:40,699 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-03 03:44:40,699 - INFO - Starting the test case for valid credentials
2025-10-03 03:44:41,162 - INFO - User enters the email-id
2025-10-03 03:44:42,785 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 03:46:44,483 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="80b1258a36a32ce6faba76035e3999f5")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="80b1258a36a32ce6faba76035e3999f5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d718a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558ffcaf6fba <unknown>
E       #1 0x558ffc57b6d0 <unknown>
E       #2 0x558ffc5cd2aa <unknown>
E       #3 0x558ffc5cd541 <unknown>
E       #4 0x558ffc61b6c4 <unknown>
E       #5 0x558ffc5f2e5d <unknown>
E       #6 0x558ffc618b54 <unknown>
E       #7 0x558ffc5f2c03 <unknown>
E       #8 0x558ffc5bf7a8 <unknown>
E       #9 0x558ffc5c0421 <unknown>
E       #10 0x558ffcabbb28 <unknown>
E       #11 0x558ffcabf87f <unknown>
E       #12 0x558ffcaa3c49 <unknown>
E       #13 0x558ffcac0405 <unknown>
E       #14 0x558ffca894ff <unknown>
E       #15 0x558ffcae4258 <unknown>
E       #16 0x558ffcae4432 <unknown>
E       #17 0x558ffcaf5fa3 <unknown>
E       #18 0x7ff6ee49caa4 <unknown>
E       #19 0x7ff6ee529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 03:46:44,767 - INFO - Starting test with Chrome browser
2025-10-03 03:46:44,768 - INFO - ====== WebDriver manager ======
2025-10-03 03:46:44,831 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:46:44,864 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:46:44,938 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 03:46:46,466 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-03 03:46:46,466 - INFO - Starting the test case for valid credentials
2025-10-03 03:46:46,614 - INFO - User enters the email-id
2025-10-03 03:46:48,350 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 03:48:50,047 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0f5503f97287f2555663d98b486e19b2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0f5503f97287f2555663d98b486e19b2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a559d23e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55bcbb208fba <unknown>
E       #1 0x55bcbac8d6d0 <unknown>
E       #2 0x55bcbacdf2aa <unknown>
E       #3 0x55bcbacdf541 <unknown>
E       #4 0x55bcbad2d6c4 <unknown>
E       #5 0x55bcbad04e5d <unknown>
E       #6 0x55bcbad2ab54 <unknown>
E       #7 0x55bcbad04c03 <unknown>
E       #8 0x55bcbacd17a8 <unknown>
E       #9 0x55bcbacd2421 <unknown>
E       #10 0x55bcbb1cdb28 <unknown>
E       #11 0x55bcbb1d187f <unknown>
E       #12 0x55bcbb1b5c49 <unknown>
E       #13 0x55bcbb1d2405 <unknown>
E       #14 0x55bcbb19b4ff <unknown>
E       #15 0x55bcbb1f6258 <unknown>
E       #16 0x55bcbb1f6432 <unknown>
E       #17 0x55bcbb207fa3 <unknown>
E       #18 0x7f6cedc9caa4 <unknown>
E       #19 0x7f6cedd29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 03:48:50,112 - INFO - Starting test with Chrome browser
2025-10-03 03:48:50,112 - INFO - ====== WebDriver manager ======
2025-10-03 03:48:50,177 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:48:50,210 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:48:50,243 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 03:48:52,554 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-03 03:48:52,555 - INFO - Starting the test case for valid credentials
2025-10-03 03:48:52,733 - INFO - User enters the email-id
2025-10-03 03:48:54,455 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 03:50:56,066 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6c7d649a625e9fb5965c234a2310b593")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6c7d649a625e9fb5965c234a2310b593")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d716c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d50cc65fba <unknown>
E       #1 0x55d50c6ea6d0 <unknown>
E       #2 0x55d50c73c2aa <unknown>
E       #3 0x55d50c73c541 <unknown>
E       #4 0x55d50c78a6c4 <unknown>
E       #5 0x55d50c761e5d <unknown>
E       #6 0x55d50c787b54 <unknown>
E       #7 0x55d50c761c03 <unknown>
E       #8 0x55d50c72e7a8 <unknown>
E       #9 0x55d50c72f421 <unknown>
E       #10 0x55d50cc2ab28 <unknown>
E       #11 0x55d50cc2e87f <unknown>
E       #12 0x55d50cc12c49 <unknown>
E       #13 0x55d50cc2f405 <unknown>
E       #14 0x55d50cbf84ff <unknown>
E       #15 0x55d50cc53258 <unknown>
E       #16 0x55d50cc53432 <unknown>
E       #17 0x55d50cc64fa3 <unknown>
E       #18 0x7f550609caa4 <unknown>
E       #19 0x7f5506129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 03:50:56,133 - INFO - Starting test with Chrome browser
2025-10-03 03:50:56,133 - INFO - ====== WebDriver manager ======
2025-10-03 03:50:56,199 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:50:56,233 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:50:56,266 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 03:50:57,606 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-03 03:50:57,606 - INFO - Starting the test case for valid credentials
2025-10-03 03:50:57,767 - INFO - User enters the email-id
2025-10-03 03:50:59,584 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 03:53:01,242 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d004d2c7665a9edd6f550d59d1aa0dd6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d004d2c7665a9edd6f550d59d1aa0dd6")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d71f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559fde6d2fba <unknown>
E       #1 0x559fde1576d0 <unknown>
E       #2 0x559fde1a92aa <unknown>
E       #3 0x559fde1a9541 <unknown>
E       #4 0x559fde1f76c4 <unknown>
E       #5 0x559fde1cee5d <unknown>
E       #6 0x559fde1f4b54 <unknown>
E       #7 0x559fde1cec03 <unknown>
E       #8 0x559fde19b7a8 <unknown>
E       #9 0x559fde19c421 <unknown>
E       #10 0x559fde697b28 <unknown>
E       #11 0x559fde69b87f <unknown>
E       #12 0x559fde67fc49 <unknown>
E       #13 0x559fde69c405 <unknown>
E       #14 0x559fde6654ff <unknown>
E       #15 0x559fde6c0258 <unknown>
E       #16 0x559fde6c0432 <unknown>
E       #17 0x559fde6d1fa3 <unknown>
E       #18 0x7f560089caa4 <unknown>
E       #19 0x7f5600929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 03:53:01,307 - INFO - Starting test with Chrome browser
2025-10-03 03:53:01,307 - INFO - ====== WebDriver manager ======
2025-10-03 03:53:01,373 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:53:01,408 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:53:01,440 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 03:53:02,862 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 03:55:04,615 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="eb3503a3c60a5cd23316adad54227ef8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="eb3503a3c60a5cd23316adad54227ef8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d72020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x558e9e177fba <unknown>
E       #1 0x558e9dbfc6d0 <unknown>
E       #2 0x558e9dc4e2aa <unknown>
E       #3 0x558e9dc4e541 <unknown>
E       #4 0x558e9dc9c6c4 <unknown>
E       #5 0x558e9dc73e5d <unknown>
E       #6 0x558e9dc99b54 <unknown>
E       #7 0x558e9dc73c03 <unknown>
E       #8 0x558e9dc407a8 <unknown>
E       #9 0x558e9dc41421 <unknown>
E       #10 0x558e9e13cb28 <unknown>
E       #11 0x558e9e14087f <unknown>
E       #12 0x558e9e124c49 <unknown>
E       #13 0x558e9e141405 <unknown>
E       #14 0x558e9e10a4ff <unknown>
E       #15 0x558e9e165258 <unknown>
E       #16 0x558e9e165432 <unknown>
E       #17 0x558e9e176fa3 <unknown>
E       #18 0x7f754049caa4 <unknown>
E       #19 0x7f7540529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 03:55:04,679 - INFO - Starting test with Chrome browser
2025-10-03 03:55:04,680 - INFO - ====== WebDriver manager ======
2025-10-03 03:55:04,743 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:55:04,779 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:55:04,811 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 03:55:06,133 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 03:57:07,876 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="614a6e4b0245b619846efc51b2c90cf7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="614a6e4b0245b619846efc51b2c90cf7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d71da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562d92910fba <unknown>
E       #1 0x562d923956d0 <unknown>
E       #2 0x562d923e72aa <unknown>
E       #3 0x562d923e7541 <unknown>
E       #4 0x562d924356c4 <unknown>
E       #5 0x562d9240ce5d <unknown>
E       #6 0x562d92432b54 <unknown>
E       #7 0x562d9240cc03 <unknown>
E       #8 0x562d923d97a8 <unknown>
E       #9 0x562d923da421 <unknown>
E       #10 0x562d928d5b28 <unknown>
E       #11 0x562d928d987f <unknown>
E       #12 0x562d928bdc49 <unknown>
E       #13 0x562d928da405 <unknown>
E       #14 0x562d928a34ff <unknown>
E       #15 0x562d928fe258 <unknown>
E       #16 0x562d928fe432 <unknown>
E       #17 0x562d9290ffa3 <unknown>
E       #18 0x7fb78209caa4 <unknown>
E       #19 0x7fb782129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 03:57:07,940 - INFO - Starting test with Chrome browser
2025-10-03 03:57:07,941 - INFO - ====== WebDriver manager ======
2025-10-03 03:57:08,005 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:57:08,040 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:57:08,071 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 03:57:09,376 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 03:59:11,085 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3cc136302c0e48709d6ada7240c18db3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3cc136302c0e48709d6ada7240c18db3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d72840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5568fa418fba <unknown>
E       #1 0x5568f9e9d6d0 <unknown>
E       #2 0x5568f9eef2aa <unknown>
E       #3 0x5568f9eef541 <unknown>
E       #4 0x5568f9f3d6c4 <unknown>
E       #5 0x5568f9f14e5d <unknown>
E       #6 0x5568f9f3ab54 <unknown>
E       #7 0x5568f9f14c03 <unknown>
E       #8 0x5568f9ee17a8 <unknown>
E       #9 0x5568f9ee2421 <unknown>
E       #10 0x5568fa3ddb28 <unknown>
E       #11 0x5568fa3e187f <unknown>
E       #12 0x5568fa3c5c49 <unknown>
E       #13 0x5568fa3e2405 <unknown>
E       #14 0x5568fa3ab4ff <unknown>
E       #15 0x5568fa406258 <unknown>
E       #16 0x5568fa406432 <unknown>
E       #17 0x5568fa417fa3 <unknown>
E       #18 0x7f15dc49caa4 <unknown>
E       #19 0x7f15dc529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 03:59:11,144 - INFO - Starting test with Chrome browser
2025-10-03 03:59:11,144 - INFO - ====== WebDriver manager ======
2025-10-03 03:59:11,209 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:59:11,243 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 03:59:11,278 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 03:59:12,710 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 04:01:14,508 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="96332bce8433ca36979dae32cd48dcf3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="96332bce8433ca36979dae32cd48dcf3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d72b60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564c7a05cfba <unknown>
E       #1 0x564c79ae16d0 <unknown>
E       #2 0x564c79b332aa <unknown>
E       #3 0x564c79b33541 <unknown>
E       #4 0x564c79b816c4 <unknown>
E       #5 0x564c79b58e5d <unknown>
E       #6 0x564c79b7eb54 <unknown>
E       #7 0x564c79b58c03 <unknown>
E       #8 0x564c79b257a8 <unknown>
E       #9 0x564c79b26421 <unknown>
E       #10 0x564c7a021b28 <unknown>
E       #11 0x564c7a02587f <unknown>
E       #12 0x564c7a009c49 <unknown>
E       #13 0x564c7a026405 <unknown>
E       #14 0x564c79fef4ff <unknown>
E       #15 0x564c7a04a258 <unknown>
E       #16 0x564c7a04a432 <unknown>
E       #17 0x564c7a05bfa3 <unknown>
E       #18 0x7f2762a9caa4 <unknown>
E       #19 0x7f2762b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 04:01:14,574 - INFO - Starting test with Chrome browser
2025-10-03 04:01:14,575 - INFO - ====== WebDriver manager ======
2025-10-03 04:01:14,638 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 04:01:14,671 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 04:01:14,703 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 04:01:18,386 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 04:03:21,953 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ad32004935312e390ca03f3db59e25d2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ad32004935312e390ca03f3db59e25d2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d728e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5556c4babfba <unknown>
E       #1 0x5556c46306d0 <unknown>
E       #2 0x5556c46822aa <unknown>
E       #3 0x5556c4682541 <unknown>
E       #4 0x5556c46d06c4 <unknown>
E       #5 0x5556c46a7e5d <unknown>
E       #6 0x5556c46cdb54 <unknown>
E       #7 0x5556c46a7c03 <unknown>
E       #8 0x5556c46747a8 <unknown>
E       #9 0x5556c4675421 <unknown>
E       #10 0x5556c4b70b28 <unknown>
E       #11 0x5556c4b7487f <unknown>
E       #12 0x5556c4b58c49 <unknown>
E       #13 0x5556c4b75405 <unknown>
E       #14 0x5556c4b3e4ff <unknown>
E       #15 0x5556c4b99258 <unknown>
E       #16 0x5556c4b99432 <unknown>
E       #17 0x5556c4baafa3 <unknown>
E       #18 0x7f9e9c29caa4 <unknown>
E       #19 0x7f9e9c329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 04:03:22,020 - INFO - Starting test with Chrome browser
2025-10-03 04:03:22,020 - INFO - ====== WebDriver manager ======
2025-10-03 04:03:22,084 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 04:03:22,118 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 04:03:22,152 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 04:03:23,479 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 04:05:26,975 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="42a4f782d6a09b5552206424fcd7746d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="42a4f782d6a09b5552206424fcd7746d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d71da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5591be696fba <unknown>
E       #1 0x5591be11b6d0 <unknown>
E       #2 0x5591be16d2aa <unknown>
E       #3 0x5591be16d541 <unknown>
E       #4 0x5591be1bb6c4 <unknown>
E       #5 0x5591be192e5d <unknown>
E       #6 0x5591be1b8b54 <unknown>
E       #7 0x5591be192c03 <unknown>
E       #8 0x5591be15f7a8 <unknown>
E       #9 0x5591be160421 <unknown>
E       #10 0x5591be65bb28 <unknown>
E       #11 0x5591be65f87f <unknown>
E       #12 0x5591be643c49 <unknown>
E       #13 0x5591be660405 <unknown>
E       #14 0x5591be6294ff <unknown>
E       #15 0x5591be684258 <unknown>
E       #16 0x5591be684432 <unknown>
E       #17 0x5591be695fa3 <unknown>
E       #18 0x7f6ce129caa4 <unknown>
E       #19 0x7f6ce1329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 04:05:27,041 - INFO - Starting test with Chrome browser
2025-10-03 04:05:27,041 - INFO - ====== WebDriver manager ======
2025-10-03 04:05:27,108 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 04:05:27,143 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 04:05:27,182 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 04:05:28,723 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 04:07:32,269 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7be9fb6cae058718b41a178698a5331f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7be9fb6cae058718b41a178698a5331f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f3a53d71940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55762f382fba <unknown>
E       #1 0x55762ee076d0 <unknown>
E       #2 0x55762ee592aa <unknown>
E       #3 0x55762ee59541 <unknown>
E       #4 0x55762eea76c4 <unknown>
E       #5 0x55762ee7ee5d <unknown>
E       #6 0x55762eea4b54 <unknown>
E       #7 0x55762ee7ec03 <unknown>
E       #8 0x55762ee4b7a8 <unknown>
E       #9 0x55762ee4c421 <unknown>
E       #10 0x55762f347b28 <unknown>
E       #11 0x55762f34b87f <unknown>
E       #12 0x55762f32fc49 <unknown>
E       #13 0x55762f34c405 <unknown>
E       #14 0x55762f3154ff <unknown>
E       #15 0x55762f370258 <unknown>
E       #16 0x55762f370432 <unknown>
E       #17 0x55762f381fa3 <unknown>
E       #18 0x7fc0cd29caa4 <unknown>
E       #19 0x7fc0cd329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-03 04:07:32,334 - INFO - Starting test with Chrome browser
2025-10-03 04:07:32,334 - INFO - ====== WebDriver manager ======
2025-10-03 04:07:32,399 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 04:07:32,434 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-03 04:07:32,471 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-03 04:07:33,815 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-03 04:09:37,327 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251003_034410/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x555fecb56fba <unknown>
#1 0x555fec5db6d0 <unknown>
#2 0x555fec62d2aa <unknown>
#3 0x555fec62d541 <unknown>
#4 0x555fec67b6c4 <unknown>
#5 0x555fec652e5d <unknown>
#6 0x555fec678b54 <unknown>
#7 0x555fec652c03 <unknown>
#8 0x555fec61f7a8 <unknown>
#9 0x555fec620421 <unknown>
#10 0x555fecb1bb28 <unknown>
#11 0x555fecb1f87f <unknown>
#12 0x555fecb03c49 <unknown>
#13 0x555fecb20405 <unknown>
#14 0x555fecae94ff <unknown>
#15 0x555fecb44258 <unknown>
#16 0x555fecb44432 <unknown>
#17 0x555fecb55fa3 <unknown>
#18 0x7fcc3f89caa4 <unknown>
#19 0x7fcc3f929c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558ffcaf6fba <unknown>
#1 0x558ffc57b6d0 <unknown>
#2 0x558ffc5cd2aa <unknown>
#3 0x558ffc5cd541 <unknown>
#4 0x558ffc61b6c4 <unknown>
#5 0x558ffc5f2e5d <unknown>
#6 0x558ffc618b54 <unknown>
#7 0x558ffc5f2c03 <unknown>
#8 0x558ffc5bf7a8 <unknown>
#9 0x558ffc5c0421 <unknown>
#10 0x558ffcabbb28 <unknown>
#11 0x558ffcabf87f <unknown>
#12 0x558ffcaa3c49 <unknown>
#13 0x558ffcac0405 <unknown>
#14 0x558ffca894ff <unknown>
#15 0x558ffcae4258 <unknown>
#16 0x558ffcae4432 <unknown>
#17 0x558ffcaf5fa3 <unknown>
#18 0x7ff6ee49caa4 <unknown>
#19 0x7ff6ee529c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55bcbb208fba <unknown>
#1 0x55bcbac8d6d0 <unknown>
#2 0x55bcbacdf2aa <unknown>
#3 0x55bcbacdf541 <unknown>
#4 0x55bcbad2d6c4 <unknown>
#5 0x55bcbad04e5d <unknown>
#6 0x55bcbad2ab54 <unknown>
#7 0x55bcbad04c03 <unknown>
#8 0x55bcbacd17a8 <unknown>
#9 0x55bcbacd2421 <unknown>
#10 0x55bcbb1cdb28 <unknown>
#11 0x55bcbb1d187f <unknown>
#12 0x55bcbb1b5c49 <unknown>
#13 0x55bcbb1d2405 <unknown>
#14 0x55bcbb19b4ff <unknown>
#15 0x55bcbb1f6258 <unknown>
#16 0x55bcbb1f6432 <unknown>
#17 0x55bcbb207fa3 <unknown>
#18 0x7f6cedc9caa4 <unknown>
#19 0x7f6cedd29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d50cc65fba <unknown>
#1 0x55d50c6ea6d0 <unknown>
#2 0x55d50c73c2aa <unknown>
#3 0x55d50c73c541 <unknown>
#4 0x55d50c78a6c4 <unknown>
#5 0x55d50c761e5d <unknown>
#6 0x55d50c787b54 <unknown>
#7 0x55d50c761c03 <unknown>
#8 0x55d50c72e7a8 <unknown>
#9 0x55d50c72f421 <unknown>
#10 0x55d50cc2ab28 <unknown>
#11 0x55d50cc2e87f <unknown>
#12 0x55d50cc12c49 <unknown>
#13 0x55d50cc2f405 <unknown>
#14 0x55d50cbf84ff <unknown>
#15 0x55d50cc53258 <unknown>
#16 0x55d50cc53432 <unknown>
#17 0x55d50cc64fa3 <unknown>
#18 0x7f550609caa4 <unknown>
#19 0x7f5506129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559fde6d2fba <unknown>
#1 0x559fde1576d0 <unknown>
#2 0x559fde1a92aa <unknown>
#3 0x559fde1a9541 <unknown>
#4 0x559fde1f76c4 <unknown>
#5 0x559fde1cee5d <unknown>
#6 0x559fde1f4b54 <unknown>
#7 0x559fde1cec03 <unknown>
#8 0x559fde19b7a8 <unknown>
#9 0x559fde19c421 <unknown>
#10 0x559fde697b28 <unknown>
#11 0x559fde69b87f <unknown>
#12 0x559fde67fc49 <unknown>
#13 0x559fde69c405 <unknown>
#14 0x559fde6654ff <unknown>
#15 0x559fde6c0258 <unknown>
#16 0x559fde6c0432 <unknown>
#17 0x559fde6d1fa3 <unknown>
#18 0x7f560089caa4 <unknown>
#19 0x7f5600929c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x558e9e177fba <unknown>
#1 0x558e9dbfc6d0 <unknown>
#2 0x558e9dc4e2aa <unknown>
#3 0x558e9dc4e541 <unknown>
#4 0x558e9dc9c6c4 <unknown>
#5 0x558e9dc73e5d <unknown>
#6 0x558e9dc99b54 <unknown>
#7 0x558e9dc73c03 <unknown>
#8 0x558e9dc407a8 <unknown>
#9 0x558e9dc41421 <unknown>
#10 0x558e9e13cb28 <unknown>
#11 0x558e9e14087f <unknown>
#12 0x558e9e124c49 <unknown>
#13 0x558e9e141405 <unknown>
#14 0x558e9e10a4ff <unknown>
#15 0x558e9e165258 <unknown>
#16 0x558e9e165432 <unknown>
#17 0x558e9e176fa3 <unknown>
#18 0x7f754049caa4 <unknown>
#19 0x7f7540529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562d92910fba <unknown>
#1 0x562d923956d0 <unknown>
#2 0x562d923e72aa <unknown>
#3 0x562d923e7541 <unknown>
#4 0x562d924356c4 <unknown>
#5 0x562d9240ce5d <unknown>
#6 0x562d92432b54 <unknown>
#7 0x562d9240cc03 <unknown>
#8 0x562d923d97a8 <unknown>
#9 0x562d923da421 <unknown>
#10 0x562d928d5b28 <unknown>
#11 0x562d928d987f <unknown>
#12 0x562d928bdc49 <unknown>
#13 0x562d928da405 <unknown>
#14 0x562d928a34ff <unknown>
#15 0x562d928fe258 <unknown>
#16 0x562d928fe432 <unknown>
#17 0x562d9290ffa3 <unknown>
#18 0x7fb78209caa4 <unknown>
#19 0x7fb782129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5568fa418fba <unknown>
#1 0x5568f9e9d6d0 <unknown>
#2 0x5568f9eef2aa <unknown>
#3 0x5568f9eef541 <unknown>
#4 0x5568f9f3d6c4 <unknown>
#5 0x5568f9f14e5d <unknown>
#6 0x5568f9f3ab54 <unknown>
#7 0x5568f9f14c03 <unknown>
#8 0x5568f9ee17a8 <unknown>
#9 0x5568f9ee2421 <unknown>
#10 0x5568fa3ddb28 <unknown>
#11 0x5568fa3e187f <unknown>
#12 0x5568fa3c5c49 <unknown>
#13 0x5568fa3e2405 <unknown>
#14 0x5568fa3ab4ff <unknown>
#15 0x5568fa406258 <unknown>
#16 0x5568fa406432 <unknown>
#17 0x5568fa417fa3 <unknown>
#18 0x7f15dc49caa4 <unknown>
#19 0x7f15dc529c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564c7a05cfba <unknown>
#1 0x564c79ae16d0 <unknown>
#2 0x564c79b332aa <unknown>
#3 0x564c79b33541 <unknown>
#4 0x564c79b816c4 <unknown>
#5 0x564c79b58e5d <unknown>
#6 0x564c79b7eb54 <unknown>
#7 0x564c79b58c03 <unknown>
#8 0x564c79b257a8 <unknown>
#9 0x564c79b26421 <unknown>
#10 0x564c7a021b28 <unknown>
#11 0x564c7a02587f <unknown>
#12 0x564c7a009c49 <unknown>
#13 0x564c7a026405 <unknown>
#14 0x564c79fef4ff <unknown>
#15 0x564c7a04a258 <unknown>
#16 0x564c7a04a432 <unknown>
#17 0x564c7a05bfa3 <unknown>
#18 0x7f2762a9caa4 <unknown>
#19 0x7f2762b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5556c4babfba <unknown>
#1 0x5556c46306d0 <unknown>
#2 0x5556c46822aa <unknown>
#3 0x5556c4682541 <unknown>
#4 0x5556c46d06c4 <unknown>
#5 0x5556c46a7e5d <unknown>
#6 0x5556c46cdb54 <unknown>
#7 0x5556c46a7c03 <unknown>
#8 0x5556c46747a8 <unknown>
#9 0x5556c4675421 <unknown>
#10 0x5556c4b70b28 <unknown>
#11 0x5556c4b7487f <unknown>
#12 0x5556c4b58c49 <unknown>
#13 0x5556c4b75405 <unknown>
#14 0x5556c4b3e4ff <unknown>
#15 0x5556c4b99258 <unknown>
#16 0x5556c4b99432 <unknown>
#17 0x5556c4baafa3 <unknown>
#18 0x7f9e9c29caa4 <unknown>
#19 0x7f9e9c329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5591be696fba <unknown>
#1 0x5591be11b6d0 <unknown>
#2 0x5591be16d2aa <unknown>
#3 0x5591be16d541 <unknown>
#4 0x5591be1bb6c4 <unknown>
#5 0x5591be192e5d <unknown>
#6 0x5591be1b8b54 <unknown>
#7 0x5591be192c03 <unknown>
#8 0x5591be15f7a8 <unknown>
#9 0x5591be160421 <unknown>
#10 0x5591be65bb28 <unknown>
#11 0x5591be65f87f <unknown>
#12 0x5591be643c49 <unknown>
#13 0x5591be660405 <unknown>
#14 0x5591be6294ff <unknown>
#15 0x5591be684258 <unknown>
#16 0x5591be684432 <unknown>
#17 0x5591be695fa3 <unknown>
#18 0x7f6ce129caa4 <unknown>
#19 0x7f6ce1329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55762f382fba <unknown>
#1 0x55762ee076d0 <unknown>
#2 0x55762ee592aa <unknown>
#3 0x55762ee59541 <unknown>
#4 0x55762eea76c4 <unknown>
#5 0x55762ee7ee5d <unknown>
#6 0x55762eea4b54 <unknown>
#7 0x55762ee7ec03 <unknown>
#8 0x55762ee4b7a8 <unknown>
#9 0x55762ee4c421 <unknown>
#10 0x55762f347b28 <unknown>
#11 0x55762f34b87f <unknown>
#12 0x55762f32fc49 <unknown>
#13 0x55762f34c405 <unknown>
#14 0x55762f3154ff <unknown>
#15 0x55762f370258 <unknown>
#16 0x55762f370432 <unknown>
#17 0x55762f381fa3 <unknown>
#18 0x7fc0cd29caa4 <unknown>
#19 0x7fc0cd329c6c <unknown>
================== 12 failed, 7 passed in 1541.11s (0:25:41) ===================
--------------------------------------------
Test Run Finished: 2025-10-03 04:09:52
Duration: 1545 seconds
Status: FAILURE
Exit Code: 1
============================================
