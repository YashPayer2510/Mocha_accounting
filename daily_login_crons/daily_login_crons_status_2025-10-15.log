========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-15 03:49:09
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'rerunfailures': '16.1', 'Faker': '37.11.0', 'xdist': '3.8.0', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, rerunfailures-16.1, Faker-37.11.0, xdist-3.8.0, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c0661518d775ffbe4b4aba802be56b75")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c0661518d775ffbe4b4aba802be56b75")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9ac64900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x555fa2c96fba <unknown>
E       #1 0x555fa271b6d0 <unknown>
E       #2 0x555fa276d2aa <unknown>
E       #3 0x555fa276d541 <unknown>
E       #4 0x555fa27bb6c4 <unknown>
E       #5 0x555fa2792e5d <unknown>
E       #6 0x555fa27b8b54 <unknown>
E       #7 0x555fa2792c03 <unknown>
E       #8 0x555fa275f7a8 <unknown>
E       #9 0x555fa2760421 <unknown>
E       #10 0x555fa2c5bb28 <unknown>
E       #11 0x555fa2c5f87f <unknown>
E       #12 0x555fa2c43c49 <unknown>
E       #13 0x555fa2c60405 <unknown>
E       #14 0x555fa2c294ff <unknown>
E       #15 0x555fa2c84258 <unknown>
E       #16 0x555fa2c84432 <unknown>
E       #17 0x555fa2c95fa3 <unknown>
E       #18 0x7f660489caa4 <unknown>
E       #19 0x7f6604929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 03:49:12,387 - INFO - Test data loaded successfully.
2025-10-15 03:49:12,388 - INFO - Starting test with Chrome browser
2025-10-15 03:49:12,388 - INFO - ====== WebDriver manager ======
2025-10-15 03:49:13,691 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:49:13,746 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:49:13,779 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-15 03:49:13,779 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:49:13,879 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-15 03:49:13,883 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-15 03:49:13,884 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-15 03:49:13,947 - INFO - Driver downloading response is 200
2025-10-15 03:49:13,996 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:49:14,141 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-15 03:49:22,865 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-15 03:49:22,866 - INFO - Starting the test case for valid credentials
2025-10-15 03:49:23,149 - INFO - User enters the email-id
2025-10-15 03:49:24,913 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 03:51:26,554 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8928b69d95bc86cbc996ed2d94f7822b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8928b69d95bc86cbc996ed2d94f7822b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b059940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55adf8087fba <unknown>
E       #1 0x55adf7b0c6d0 <unknown>
E       #2 0x55adf7b5e2aa <unknown>
E       #3 0x55adf7b5e541 <unknown>
E       #4 0x55adf7bac6c4 <unknown>
E       #5 0x55adf7b83e5d <unknown>
E       #6 0x55adf7ba9b54 <unknown>
E       #7 0x55adf7b83c03 <unknown>
E       #8 0x55adf7b507a8 <unknown>
E       #9 0x55adf7b51421 <unknown>
E       #10 0x55adf804cb28 <unknown>
E       #11 0x55adf805087f <unknown>
E       #12 0x55adf8034c49 <unknown>
E       #13 0x55adf8051405 <unknown>
E       #14 0x55adf801a4ff <unknown>
E       #15 0x55adf8075258 <unknown>
E       #16 0x55adf8075432 <unknown>
E       #17 0x55adf8086fa3 <unknown>
E       #18 0x7f07f529caa4 <unknown>
E       #19 0x7f07f5329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 03:51:26,708 - INFO - Starting test with Chrome browser
2025-10-15 03:51:26,709 - INFO - ====== WebDriver manager ======
2025-10-15 03:51:26,776 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:51:26,809 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:51:26,861 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 03:51:28,241 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-15 03:51:28,242 - INFO - Starting the test case for valid credentials
2025-10-15 03:51:28,380 - INFO - User enters the email-id
2025-10-15 03:51:30,054 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 03:53:31,676 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a1c462ec379f3124f78a194fd6118b89")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a1c462ec379f3124f78a194fd6118b89")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b109f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x556c8b0bafba <unknown>
E       #1 0x556c8ab3f6d0 <unknown>
E       #2 0x556c8ab912aa <unknown>
E       #3 0x556c8ab91541 <unknown>
E       #4 0x556c8abdf6c4 <unknown>
E       #5 0x556c8abb6e5d <unknown>
E       #6 0x556c8abdcb54 <unknown>
E       #7 0x556c8abb6c03 <unknown>
E       #8 0x556c8ab837a8 <unknown>
E       #9 0x556c8ab84421 <unknown>
E       #10 0x556c8b07fb28 <unknown>
E       #11 0x556c8b08387f <unknown>
E       #12 0x556c8b067c49 <unknown>
E       #13 0x556c8b084405 <unknown>
E       #14 0x556c8b04d4ff <unknown>
E       #15 0x556c8b0a8258 <unknown>
E       #16 0x556c8b0a8432 <unknown>
E       #17 0x556c8b0b9fa3 <unknown>
E       #18 0x7f48f909caa4 <unknown>
E       #19 0x7f48f9129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 03:53:31,741 - INFO - Starting test with Chrome browser
2025-10-15 03:53:31,742 - INFO - ====== WebDriver manager ======
2025-10-15 03:53:31,812 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:53:31,852 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:53:31,891 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 03:53:33,314 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-15 03:53:33,315 - INFO - Starting the test case for valid credentials
2025-10-15 03:53:33,466 - INFO - User enters the email-id
2025-10-15 03:53:35,183 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 03:55:36,863 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a0689784490020b576843790d9000dbb")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a0689784490020b576843790d9000dbb")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b0599e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562296654fba <unknown>
E       #1 0x5622960d96d0 <unknown>
E       #2 0x56229612b2aa <unknown>
E       #3 0x56229612b541 <unknown>
E       #4 0x5622961796c4 <unknown>
E       #5 0x562296150e5d <unknown>
E       #6 0x562296176b54 <unknown>
E       #7 0x562296150c03 <unknown>
E       #8 0x56229611d7a8 <unknown>
E       #9 0x56229611e421 <unknown>
E       #10 0x562296619b28 <unknown>
E       #11 0x56229661d87f <unknown>
E       #12 0x562296601c49 <unknown>
E       #13 0x56229661e405 <unknown>
E       #14 0x5622965e74ff <unknown>
E       #15 0x562296642258 <unknown>
E       #16 0x562296642432 <unknown>
E       #17 0x562296653fa3 <unknown>
E       #18 0x7fceb369caa4 <unknown>
E       #19 0x7fceb3729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 03:55:36,947 - INFO - Starting test with Chrome browser
2025-10-15 03:55:36,947 - INFO - ====== WebDriver manager ======
2025-10-15 03:55:37,017 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:55:37,051 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:55:37,084 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 03:55:38,516 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-15 03:55:38,517 - INFO - Starting the test case for valid credentials
2025-10-15 03:55:38,679 - INFO - User enters the email-id
2025-10-15 03:55:40,400 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 03:57:42,066 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d9ff9f15d43bef1b904a38ac16c47fe8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d9ff9f15d43bef1b904a38ac16c47fe8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05a020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ef46ff9fba <unknown>
E       #1 0x55ef46a7e6d0 <unknown>
E       #2 0x55ef46ad02aa <unknown>
E       #3 0x55ef46ad0541 <unknown>
E       #4 0x55ef46b1e6c4 <unknown>
E       #5 0x55ef46af5e5d <unknown>
E       #6 0x55ef46b1bb54 <unknown>
E       #7 0x55ef46af5c03 <unknown>
E       #8 0x55ef46ac27a8 <unknown>
E       #9 0x55ef46ac3421 <unknown>
E       #10 0x55ef46fbeb28 <unknown>
E       #11 0x55ef46fc287f <unknown>
E       #12 0x55ef46fa6c49 <unknown>
E       #13 0x55ef46fc3405 <unknown>
E       #14 0x55ef46f8c4ff <unknown>
E       #15 0x55ef46fe7258 <unknown>
E       #16 0x55ef46fe7432 <unknown>
E       #17 0x55ef46ff8fa3 <unknown>
E       #18 0x7f976f29caa4 <unknown>
E       #19 0x7f976f329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 03:57:43,132 - INFO - Starting test with Chrome browser
2025-10-15 03:57:43,132 - INFO - ====== WebDriver manager ======
2025-10-15 03:57:43,198 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:57:43,232 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:57:43,265 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 03:57:47,529 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 03:59:49,265 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e9cffa57336b8436e75a9f16689f974e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e9cffa57336b8436e75a9f16689f974e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05a0c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55cd3f73afba <unknown>
E       #1 0x55cd3f1bf6d0 <unknown>
E       #2 0x55cd3f2112aa <unknown>
E       #3 0x55cd3f211541 <unknown>
E       #4 0x55cd3f25f6c4 <unknown>
E       #5 0x55cd3f236e5d <unknown>
E       #6 0x55cd3f25cb54 <unknown>
E       #7 0x55cd3f236c03 <unknown>
E       #8 0x55cd3f2037a8 <unknown>
E       #9 0x55cd3f204421 <unknown>
E       #10 0x55cd3f6ffb28 <unknown>
E       #11 0x55cd3f70387f <unknown>
E       #12 0x55cd3f6e7c49 <unknown>
E       #13 0x55cd3f704405 <unknown>
E       #14 0x55cd3f6cd4ff <unknown>
E       #15 0x55cd3f728258 <unknown>
E       #16 0x55cd3f728432 <unknown>
E       #17 0x55cd3f739fa3 <unknown>
E       #18 0x7f3ce8a9caa4 <unknown>
E       #19 0x7f3ce8b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 03:59:49,334 - INFO - Starting test with Chrome browser
2025-10-15 03:59:49,335 - INFO - ====== WebDriver manager ======
2025-10-15 03:59:49,402 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:59:49,437 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 03:59:49,469 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 03:59:51,016 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:01:52,795 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ffd7c78d2a9f032d52d4639cfb1f359b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ffd7c78d2a9f032d52d4639cfb1f359b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b059da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ca7abc5fba <unknown>
E       #1 0x55ca7a64a6d0 <unknown>
E       #2 0x55ca7a69c2aa <unknown>
E       #3 0x55ca7a69c541 <unknown>
E       #4 0x55ca7a6ea6c4 <unknown>
E       #5 0x55ca7a6c1e5d <unknown>
E       #6 0x55ca7a6e7b54 <unknown>
E       #7 0x55ca7a6c1c03 <unknown>
E       #8 0x55ca7a68e7a8 <unknown>
E       #9 0x55ca7a68f421 <unknown>
E       #10 0x55ca7ab8ab28 <unknown>
E       #11 0x55ca7ab8e87f <unknown>
E       #12 0x55ca7ab72c49 <unknown>
E       #13 0x55ca7ab8f405 <unknown>
E       #14 0x55ca7ab584ff <unknown>
E       #15 0x55ca7abb3258 <unknown>
E       #16 0x55ca7abb3432 <unknown>
E       #17 0x55ca7abc4fa3 <unknown>
E       #18 0x7ff284c9caa4 <unknown>
E       #19 0x7ff284d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:01:52,862 - INFO - Starting test with Chrome browser
2025-10-15 04:01:52,862 - INFO - ====== WebDriver manager ======
2025-10-15 04:01:52,930 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:01:52,965 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:01:52,997 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:02:02,603 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:04:04,373 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="1be1b8d249b5625bb18938e9cd599bcb")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="1be1b8d249b5625bb18938e9cd599bcb")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05a8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55fd322bbfba <unknown>
E       #1 0x55fd31d406d0 <unknown>
E       #2 0x55fd31d922aa <unknown>
E       #3 0x55fd31d92541 <unknown>
E       #4 0x55fd31de06c4 <unknown>
E       #5 0x55fd31db7e5d <unknown>
E       #6 0x55fd31dddb54 <unknown>
E       #7 0x55fd31db7c03 <unknown>
E       #8 0x55fd31d847a8 <unknown>
E       #9 0x55fd31d85421 <unknown>
E       #10 0x55fd32280b28 <unknown>
E       #11 0x55fd3228487f <unknown>
E       #12 0x55fd32268c49 <unknown>
E       #13 0x55fd32285405 <unknown>
E       #14 0x55fd3224e4ff <unknown>
E       #15 0x55fd322a9258 <unknown>
E       #16 0x55fd322a9432 <unknown>
E       #17 0x55fd322bafa3 <unknown>
E       #18 0x7f4498c9caa4 <unknown>
E       #19 0x7f4498d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:04:04,440 - INFO - Starting test with Chrome browser
2025-10-15 04:04:04,440 - INFO - ====== WebDriver manager ======
2025-10-15 04:04:04,510 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:04:04,547 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:04:04,583 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:04:05,907 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:06:07,670 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="68af836e05c2ea9265e34d54c75b1bd9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="68af836e05c2ea9265e34d54c75b1bd9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b059da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557108b42fba <unknown>
E       #1 0x5571085c76d0 <unknown>
E       #2 0x5571086192aa <unknown>
E       #3 0x557108619541 <unknown>
E       #4 0x5571086676c4 <unknown>
E       #5 0x55710863ee5d <unknown>
E       #6 0x557108664b54 <unknown>
E       #7 0x55710863ec03 <unknown>
E       #8 0x55710860b7a8 <unknown>
E       #9 0x55710860c421 <unknown>
E       #10 0x557108b07b28 <unknown>
E       #11 0x557108b0b87f <unknown>
E       #12 0x557108aefc49 <unknown>
E       #13 0x557108b0c405 <unknown>
E       #14 0x557108ad54ff <unknown>
E       #15 0x557108b30258 <unknown>
E       #16 0x557108b30432 <unknown>
E       #17 0x557108b41fa3 <unknown>
E       #18 0x7fe2aa29caa4 <unknown>
E       #19 0x7fe2aa329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:06:07,739 - INFO - Starting test with Chrome browser
2025-10-15 04:06:07,739 - INFO - ====== WebDriver manager ======
2025-10-15 04:06:07,805 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:06:07,839 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:06:07,873 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:06:09,239 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:08:12,714 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5435bdb889a22f35596f16be4f16892c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5435bdb889a22f35596f16be4f16892c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05a5c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562b91afefba <unknown>
E       #1 0x562b915836d0 <unknown>
E       #2 0x562b915d52aa <unknown>
E       #3 0x562b915d5541 <unknown>
E       #4 0x562b916236c4 <unknown>
E       #5 0x562b915fae5d <unknown>
E       #6 0x562b91620b54 <unknown>
E       #7 0x562b915fac03 <unknown>
E       #8 0x562b915c77a8 <unknown>
E       #9 0x562b915c8421 <unknown>
E       #10 0x562b91ac3b28 <unknown>
E       #11 0x562b91ac787f <unknown>
E       #12 0x562b91aabc49 <unknown>
E       #13 0x562b91ac8405 <unknown>
E       #14 0x562b91a914ff <unknown>
E       #15 0x562b91aec258 <unknown>
E       #16 0x562b91aec432 <unknown>
E       #17 0x562b91afdfa3 <unknown>
E       #18 0x7f9887c9caa4 <unknown>
E       #19 0x7f9887d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:08:12,782 - INFO - Starting test with Chrome browser
2025-10-15 04:08:12,783 - INFO - ====== WebDriver manager ======
2025-10-15 04:08:12,849 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:08:12,883 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:08:12,915 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:08:14,349 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:10:17,821 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e00857871954503a359e27238a33f7cc")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e00857871954503a359e27238a33f7cc")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b059c60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5592fe6a2fba <unknown>
E       #1 0x5592fe1276d0 <unknown>
E       #2 0x5592fe1792aa <unknown>
E       #3 0x5592fe179541 <unknown>
E       #4 0x5592fe1c76c4 <unknown>
E       #5 0x5592fe19ee5d <unknown>
E       #6 0x5592fe1c4b54 <unknown>
E       #7 0x5592fe19ec03 <unknown>
E       #8 0x5592fe16b7a8 <unknown>
E       #9 0x5592fe16c421 <unknown>
E       #10 0x5592fe667b28 <unknown>
E       #11 0x5592fe66b87f <unknown>
E       #12 0x5592fe64fc49 <unknown>
E       #13 0x5592fe66c405 <unknown>
E       #14 0x5592fe6354ff <unknown>
E       #15 0x5592fe690258 <unknown>
E       #16 0x5592fe690432 <unknown>
E       #17 0x5592fe6a1fa3 <unknown>
E       #18 0x7f6bd069caa4 <unknown>
E       #19 0x7f6bd0729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:10:17,987 - INFO - Starting test with Chrome browser
2025-10-15 04:10:17,987 - INFO - ====== WebDriver manager ======
2025-10-15 04:10:18,053 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:10:18,087 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:10:18,121 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:10:20,167 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:12:23,590 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="681988679434dde54859684669c3232c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="681988679434dde54859684669c3232c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b059760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559acab78fba <unknown>
E       #1 0x559aca5fd6d0 <unknown>
E       #2 0x559aca64f2aa <unknown>
E       #3 0x559aca64f541 <unknown>
E       #4 0x559aca69d6c4 <unknown>
E       #5 0x559aca674e5d <unknown>
E       #6 0x559aca69ab54 <unknown>
E       #7 0x559aca674c03 <unknown>
E       #8 0x559aca6417a8 <unknown>
E       #9 0x559aca642421 <unknown>
E       #10 0x559acab3db28 <unknown>
E       #11 0x559acab4187f <unknown>
E       #12 0x559acab25c49 <unknown>
E       #13 0x559acab42405 <unknown>
E       #14 0x559acab0b4ff <unknown>
E       #15 0x559acab66258 <unknown>
E       #16 0x559acab66432 <unknown>
E       #17 0x559acab77fa3 <unknown>
E       #18 0x7f1d8389caa4 <unknown>
E       #19 0x7f1d83929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:12:24,649 - INFO - Starting test with Chrome browser
2025-10-15 04:12:24,650 - INFO - ====== WebDriver manager ======
2025-10-15 04:12:24,720 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:12:24,756 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:12:24,791 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:12:26,325 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:14:29,883 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a7936c68fee13d9abda2af03134bb0b1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
        login_page.disabled_click_login_button()
>       login_page.username_blank_validation(login_test_data)

tests/test_login.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:72: in username_blank_validation
    self.actions.wait_for_element(self.username_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a7936c68fee13d9abda2af03134bb0b1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05ade0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d851a0afba <unknown>
E       #1 0x55d85148f6d0 <unknown>
E       #2 0x55d8514e12aa <unknown>
E       #3 0x55d8514e1541 <unknown>
E       #4 0x55d85152f6c4 <unknown>
E       #5 0x55d851506e5d <unknown>
E       #6 0x55d85152cb54 <unknown>
E       #7 0x55d851506c03 <unknown>
E       #8 0x55d8514d37a8 <unknown>
E       #9 0x55d8514d4421 <unknown>
E       #10 0x55d8519cfb28 <unknown>
E       #11 0x55d8519d387f <unknown>
E       #12 0x55d8519b7c49 <unknown>
E       #13 0x55d8519d4405 <unknown>
E       #14 0x55d85199d4ff <unknown>
E       #15 0x55d8519f8258 <unknown>
E       #16 0x55d8519f8432 <unknown>
E       #17 0x55d851a09fa3 <unknown>
E       #18 0x7fbf1829caa4 <unknown>
E       #19 0x7fbf18329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:14:29,952 - INFO - Starting test with Chrome browser
2025-10-15 04:14:29,953 - INFO - ====== WebDriver manager ======
2025-10-15 04:14:30,026 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:14:30,063 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:14:30,099 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:14:31,454 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:16:33,253 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="16c0fa62d53430fb9926f477f74ee398")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
        login_page.click_password()
        login_page.disabled_click_login_button()
>       login_page.password_blank_validation(login_test_data)

tests/test_login.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:78: in password_blank_validation
    self.actions.wait_for_element(self.password_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="16c0fa62d53430fb9926f477f74ee398")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05b4c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55867079afba <unknown>
E       #1 0x55867021f6d0 <unknown>
E       #2 0x5586702712aa <unknown>
E       #3 0x558670271541 <unknown>
E       #4 0x5586702bf6c4 <unknown>
E       #5 0x558670296e5d <unknown>
E       #6 0x5586702bcb54 <unknown>
E       #7 0x558670296c03 <unknown>
E       #8 0x5586702637a8 <unknown>
E       #9 0x558670264421 <unknown>
E       #10 0x55867075fb28 <unknown>
E       #11 0x55867076387f <unknown>
E       #12 0x558670747c49 <unknown>
E       #13 0x558670764405 <unknown>
E       #14 0x55867072d4ff <unknown>
E       #15 0x558670788258 <unknown>
E       #16 0x558670788432 <unknown>
E       #17 0x558670799fa3 <unknown>
E       #18 0x7f873769caa4 <unknown>
E       #19 0x7f8737729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:16:33,321 - INFO - Starting test with Chrome browser
2025-10-15 04:16:33,321 - INFO - ====== WebDriver manager ======
2025-10-15 04:16:33,388 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:16:33,425 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:16:33,459 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:16:34,336 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:18:38,242 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="aae4c4facbcffa06ae64b550516283b8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="aae4c4facbcffa06ae64b550516283b8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05a480>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55d980975fba <unknown>
E       #1 0x55d9803fa6d0 <unknown>
E       #2 0x55d98044c2aa <unknown>
E       #3 0x55d98044c541 <unknown>
E       #4 0x55d98049a6c4 <unknown>
E       #5 0x55d980471e5d <unknown>
E       #6 0x55d980497b54 <unknown>
E       #7 0x55d980471c03 <unknown>
E       #8 0x55d98043e7a8 <unknown>
E       #9 0x55d98043f421 <unknown>
E       #10 0x55d98093ab28 <unknown>
E       #11 0x55d98093e87f <unknown>
E       #12 0x55d980922c49 <unknown>
E       #13 0x55d98093f405 <unknown>
E       #14 0x55d9809084ff <unknown>
E       #15 0x55d980963258 <unknown>
E       #16 0x55d980963432 <unknown>
E       #17 0x55d980974fa3 <unknown>
E       #18 0x7f680bc9caa4 <unknown>
E       #19 0x7f680bd29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:18:38,327 - INFO - Starting test with Chrome browser
2025-10-15 04:18:38,327 - INFO - ====== WebDriver manager ======
2025-10-15 04:18:38,397 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:18:38,432 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:18:38,465 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:18:39,768 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:20:41,577 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="84122686a361f2068353d9383ba16a6e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="84122686a361f2068353d9383ba16a6e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05aca0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559a4ea9afba <unknown>
E       #1 0x559a4e51f6d0 <unknown>
E       #2 0x559a4e5712aa <unknown>
E       #3 0x559a4e571541 <unknown>
E       #4 0x559a4e5bf6c4 <unknown>
E       #5 0x559a4e596e5d <unknown>
E       #6 0x559a4e5bcb54 <unknown>
E       #7 0x559a4e596c03 <unknown>
E       #8 0x559a4e5637a8 <unknown>
E       #9 0x559a4e564421 <unknown>
E       #10 0x559a4ea5fb28 <unknown>
E       #11 0x559a4ea6387f <unknown>
E       #12 0x559a4ea47c49 <unknown>
E       #13 0x559a4ea64405 <unknown>
E       #14 0x559a4ea2d4ff <unknown>
E       #15 0x559a4ea88258 <unknown>
E       #16 0x559a4ea88432 <unknown>
E       #17 0x559a4ea99fa3 <unknown>
E       #18 0x7f379ca9caa4 <unknown>
E       #19 0x7f379cb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:20:41,643 - INFO - Starting test with Chrome browser
2025-10-15 04:20:41,643 - INFO - ====== WebDriver manager ======
2025-10-15 04:20:41,710 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:20:41,771 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:20:41,806 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:20:43,167 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:22:44,979 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="155b2bc81172070bc45fe1469993be1e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="155b2bc81172070bc45fe1469993be1e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05b2e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5588db0f1fba <unknown>
E       #1 0x5588dab766d0 <unknown>
E       #2 0x5588dabc82aa <unknown>
E       #3 0x5588dabc8541 <unknown>
E       #4 0x5588dac166c4 <unknown>
E       #5 0x5588dabede5d <unknown>
E       #6 0x5588dac13b54 <unknown>
E       #7 0x5588dabedc03 <unknown>
E       #8 0x5588dabba7a8 <unknown>
E       #9 0x5588dabbb421 <unknown>
E       #10 0x5588db0b6b28 <unknown>
E       #11 0x5588db0ba87f <unknown>
E       #12 0x5588db09ec49 <unknown>
E       #13 0x5588db0bb405 <unknown>
E       #14 0x5588db0844ff <unknown>
E       #15 0x5588db0df258 <unknown>
E       #16 0x5588db0df432 <unknown>
E       #17 0x5588db0f0fa3 <unknown>
E       #18 0x7fe09f69caa4 <unknown>
E       #19 0x7fe09f729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:22:45,046 - INFO - Starting test with Chrome browser
2025-10-15 04:22:45,047 - INFO - ====== WebDriver manager ======
2025-10-15 04:22:45,119 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:22:45,154 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:22:45,188 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:22:46,553 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:24:48,424 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d7dbf7aecf75f28e96b86b6c90f4e969")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d7dbf7aecf75f28e96b86b6c90f4e969")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05b600>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5572773fffba <unknown>
E       #1 0x557276e846d0 <unknown>
E       #2 0x557276ed62aa <unknown>
E       #3 0x557276ed6541 <unknown>
E       #4 0x557276f246c4 <unknown>
E       #5 0x557276efbe5d <unknown>
E       #6 0x557276f21b54 <unknown>
E       #7 0x557276efbc03 <unknown>
E       #8 0x557276ec87a8 <unknown>
E       #9 0x557276ec9421 <unknown>
E       #10 0x5572773c4b28 <unknown>
E       #11 0x5572773c887f <unknown>
E       #12 0x5572773acc49 <unknown>
E       #13 0x5572773c9405 <unknown>
E       #14 0x5572773924ff <unknown>
E       #15 0x5572773ed258 <unknown>
E       #16 0x5572773ed432 <unknown>
E       #17 0x5572773fefa3 <unknown>
E       #18 0x7face129caa4 <unknown>
E       #19 0x7face1329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:24:48,492 - INFO - Starting test with Chrome browser
2025-10-15 04:24:48,492 - INFO - ====== WebDriver manager ======
2025-10-15 04:24:48,561 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:24:48,597 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:24:48,631 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:24:49,991 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:26:51,867 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="edaa6bf58af80dcec62afd18705b4e71")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="edaa6bf58af80dcec62afd18705b4e71")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f2c9b05b880>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5599ccc3afba <unknown>
E       #1 0x5599cc6bf6d0 <unknown>
E       #2 0x5599cc7112aa <unknown>
E       #3 0x5599cc711541 <unknown>
E       #4 0x5599cc75f6c4 <unknown>
E       #5 0x5599cc736e5d <unknown>
E       #6 0x5599cc75cb54 <unknown>
E       #7 0x5599cc736c03 <unknown>
E       #8 0x5599cc7037a8 <unknown>
E       #9 0x5599cc704421 <unknown>
E       #10 0x5599ccbffb28 <unknown>
E       #11 0x5599ccc0387f <unknown>
E       #12 0x5599ccbe7c49 <unknown>
E       #13 0x5599ccc04405 <unknown>
E       #14 0x5599ccbcd4ff <unknown>
E       #15 0x5599ccc28258 <unknown>
E       #16 0x5599ccc28432 <unknown>
E       #17 0x5599ccc39fa3 <unknown>
E       #18 0x7ff7cd09caa4 <unknown>
E       #19 0x7ff7cd129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-15 04:26:52,926 - INFO - Starting test with Chrome browser
2025-10-15 04:26:52,927 - INFO - ====== WebDriver manager ======
2025-10-15 04:26:52,998 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:26:53,035 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-15 04:26:53,069 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-15 04:26:54,471 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-15 04:28:56,358 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251015_034912/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x555fa2c96fba <unknown>
#1 0x555fa271b6d0 <unknown>
#2 0x555fa276d2aa <unknown>
#3 0x555fa276d541 <unknown>
#4 0x555fa27bb6c4 <unknown>
#5 0x555fa2792e5d <unknown>
#6 0x555fa27b8b54 <unknown>
#7 0x555fa2792c03 <unknown>
#8 0x555fa275f7a8 <unknown>
#9 0x555fa2760421 <unknown>
#10 0x555fa2c5bb28 <unknown>
#11 0x555fa2c5f87f <unknown>
#12 0x555fa2c43c49 <unknown>
#13 0x555fa2c60405 <unknown>
#14 0x555fa2c294ff <unknown>
#15 0x555fa2c84258 <unknown>
#16 0x555fa2c84432 <unknown>
#17 0x555fa2c95fa3 <unknown>
#18 0x7f660489caa4 <unknown>
#19 0x7f6604929c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55adf8087fba <unknown>
#1 0x55adf7b0c6d0 <unknown>
#2 0x55adf7b5e2aa <unknown>
#3 0x55adf7b5e541 <unknown>
#4 0x55adf7bac6c4 <unknown>
#5 0x55adf7b83e5d <unknown>
#6 0x55adf7ba9b54 <unknown>
#7 0x55adf7b83c03 <unknown>
#8 0x55adf7b507a8 <unknown>
#9 0x55adf7b51421 <unknown>
#10 0x55adf804cb28 <unknown>
#11 0x55adf805087f <unknown>
#12 0x55adf8034c49 <unknown>
#13 0x55adf8051405 <unknown>
#14 0x55adf801a4ff <unknown>
#15 0x55adf8075258 <unknown>
#16 0x55adf8075432 <unknown>
#17 0x55adf8086fa3 <unknown>
#18 0x7f07f529caa4 <unknown>
#19 0x7f07f5329c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x556c8b0bafba <unknown>
#1 0x556c8ab3f6d0 <unknown>
#2 0x556c8ab912aa <unknown>
#3 0x556c8ab91541 <unknown>
#4 0x556c8abdf6c4 <unknown>
#5 0x556c8abb6e5d <unknown>
#6 0x556c8abdcb54 <unknown>
#7 0x556c8abb6c03 <unknown>
#8 0x556c8ab837a8 <unknown>
#9 0x556c8ab84421 <unknown>
#10 0x556c8b07fb28 <unknown>
#11 0x556c8b08387f <unknown>
#12 0x556c8b067c49 <unknown>
#13 0x556c8b084405 <unknown>
#14 0x556c8b04d4ff <unknown>
#15 0x556c8b0a8258 <unknown>
#16 0x556c8b0a8432 <unknown>
#17 0x556c8b0b9fa3 <unknown>
#18 0x7f48f909caa4 <unknown>
#19 0x7f48f9129c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562296654fba <unknown>
#1 0x5622960d96d0 <unknown>
#2 0x56229612b2aa <unknown>
#3 0x56229612b541 <unknown>
#4 0x5622961796c4 <unknown>
#5 0x562296150e5d <unknown>
#6 0x562296176b54 <unknown>
#7 0x562296150c03 <unknown>
#8 0x56229611d7a8 <unknown>
#9 0x56229611e421 <unknown>
#10 0x562296619b28 <unknown>
#11 0x56229661d87f <unknown>
#12 0x562296601c49 <unknown>
#13 0x56229661e405 <unknown>
#14 0x5622965e74ff <unknown>
#15 0x562296642258 <unknown>
#16 0x562296642432 <unknown>
#17 0x562296653fa3 <unknown>
#18 0x7fceb369caa4 <unknown>
#19 0x7fceb3729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ef46ff9fba <unknown>
#1 0x55ef46a7e6d0 <unknown>
#2 0x55ef46ad02aa <unknown>
#3 0x55ef46ad0541 <unknown>
#4 0x55ef46b1e6c4 <unknown>
#5 0x55ef46af5e5d <unknown>
#6 0x55ef46b1bb54 <unknown>
#7 0x55ef46af5c03 <unknown>
#8 0x55ef46ac27a8 <unknown>
#9 0x55ef46ac3421 <unknown>
#10 0x55ef46fbeb28 <unknown>
#11 0x55ef46fc287f <unknown>
#12 0x55ef46fa6c49 <unknown>
#13 0x55ef46fc3405 <unknown>
#14 0x55ef46f8c4ff <unknown>
#15 0x55ef46fe7258 <unknown>
#16 0x55ef46fe7432 <unknown>
#17 0x55ef46ff8fa3 <unknown>
#18 0x7f976f29caa4 <unknown>
#19 0x7f976f329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55cd3f73afba <unknown>
#1 0x55cd3f1bf6d0 <unknown>
#2 0x55cd3f2112aa <unknown>
#3 0x55cd3f211541 <unknown>
#4 0x55cd3f25f6c4 <unknown>
#5 0x55cd3f236e5d <unknown>
#6 0x55cd3f25cb54 <unknown>
#7 0x55cd3f236c03 <unknown>
#8 0x55cd3f2037a8 <unknown>
#9 0x55cd3f204421 <unknown>
#10 0x55cd3f6ffb28 <unknown>
#11 0x55cd3f70387f <unknown>
#12 0x55cd3f6e7c49 <unknown>
#13 0x55cd3f704405 <unknown>
#14 0x55cd3f6cd4ff <unknown>
#15 0x55cd3f728258 <unknown>
#16 0x55cd3f728432 <unknown>
#17 0x55cd3f739fa3 <unknown>
#18 0x7f3ce8a9caa4 <unknown>
#19 0x7f3ce8b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ca7abc5fba <unknown>
#1 0x55ca7a64a6d0 <unknown>
#2 0x55ca7a69c2aa <unknown>
#3 0x55ca7a69c541 <unknown>
#4 0x55ca7a6ea6c4 <unknown>
#5 0x55ca7a6c1e5d <unknown>
#6 0x55ca7a6e7b54 <unknown>
#7 0x55ca7a6c1c03 <unknown>
#8 0x55ca7a68e7a8 <unknown>
#9 0x55ca7a68f421 <unknown>
#10 0x55ca7ab8ab28 <unknown>
#11 0x55ca7ab8e87f <unknown>
#12 0x55ca7ab72c49 <unknown>
#13 0x55ca7ab8f405 <unknown>
#14 0x55ca7ab584ff <unknown>
#15 0x55ca7abb3258 <unknown>
#16 0x55ca7abb3432 <unknown>
#17 0x55ca7abc4fa3 <unknown>
#18 0x7ff284c9caa4 <unknown>
#19 0x7ff284d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55fd322bbfba <unknown>
#1 0x55fd31d406d0 <unknown>
#2 0x55fd31d922aa <unknown>
#3 0x55fd31d92541 <unknown>
#4 0x55fd31de06c4 <unknown>
#5 0x55fd31db7e5d <unknown>
#6 0x55fd31dddb54 <unknown>
#7 0x55fd31db7c03 <unknown>
#8 0x55fd31d847a8 <unknown>
#9 0x55fd31d85421 <unknown>
#10 0x55fd32280b28 <unknown>
#11 0x55fd3228487f <unknown>
#12 0x55fd32268c49 <unknown>
#13 0x55fd32285405 <unknown>
#14 0x55fd3224e4ff <unknown>
#15 0x55fd322a9258 <unknown>
#16 0x55fd322a9432 <unknown>
#17 0x55fd322bafa3 <unknown>
#18 0x7f4498c9caa4 <unknown>
#19 0x7f4498d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557108b42fba <unknown>
#1 0x5571085c76d0 <unknown>
#2 0x5571086192aa <unknown>
#3 0x557108619541 <unknown>
#4 0x5571086676c4 <unknown>
#5 0x55710863ee5d <unknown>
#6 0x557108664b54 <unknown>
#7 0x55710863ec03 <unknown>
#8 0x55710860b7a8 <unknown>
#9 0x55710860c421 <unknown>
#10 0x557108b07b28 <unknown>
#11 0x557108b0b87f <unknown>
#12 0x557108aefc49 <unknown>
#13 0x557108b0c405 <unknown>
#14 0x557108ad54ff <unknown>
#15 0x557108b30258 <unknown>
#16 0x557108b30432 <unknown>
#17 0x557108b41fa3 <unknown>
#18 0x7fe2aa29caa4 <unknown>
#19 0x7fe2aa329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562b91afefba <unknown>
#1 0x562b915836d0 <unknown>
#2 0x562b915d52aa <unknown>
#3 0x562b915d5541 <unknown>
#4 0x562b916236c4 <unknown>
#5 0x562b915fae5d <unknown>
#6 0x562b91620b54 <unknown>
#7 0x562b915fac03 <unknown>
#8 0x562b915c77a8 <unknown>
#9 0x562b915c8421 <unknown>
#10 0x562b91ac3b28 <unknown>
#11 0x562b91ac787f <unknown>
#12 0x562b91aabc49 <unknown>
#13 0x562b91ac8405 <unknown>
#14 0x562b91a914ff <unknown>
#15 0x562b91aec258 <unknown>
#16 0x562b91aec432 <unknown>
#17 0x562b91afdfa3 <unknown>
#18 0x7f9887c9caa4 <unknown>
#19 0x7f9887d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5592fe6a2fba <unknown>
#1 0x5592fe1276d0 <unknown>
#2 0x5592fe1792aa <unknown>
#3 0x5592fe179541 <unknown>
#4 0x5592fe1c76c4 <unknown>
#5 0x5592fe19ee5d <unknown>
#6 0x5592fe1c4b54 <unknown>
#7 0x5592fe19ec03 <unknown>
#8 0x5592fe16b7a8 <unknown>
#9 0x5592fe16c421 <unknown>
#10 0x5592fe667b28 <unknown>
#11 0x5592fe66b87f <unknown>
#12 0x5592fe64fc49 <unknown>
#13 0x5592fe66c405 <unknown>
#14 0x5592fe6354ff <unknown>
#15 0x5592fe690258 <unknown>
#16 0x5592fe690432 <unknown>
#17 0x5592fe6a1fa3 <unknown>
#18 0x7f6bd069caa4 <unknown>
#19 0x7f6bd0729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559acab78fba <unknown>
#1 0x559aca5fd6d0 <unknown>
#2 0x559aca64f2aa <unknown>
#3 0x559aca64f541 <unknown>
#4 0x559aca69d6c4 <unknown>
#5 0x559aca674e5d <unknown>
#6 0x559aca69ab54 <unknown>
#7 0x559aca674c03 <unknown>
#8 0x559aca6417a8 <unknown>
#9 0x559aca642421 <unknown>
#10 0x559acab3db28 <unknown>
#11 0x559acab4187f <unknown>
#12 0x559acab25c49 <unknown>
#13 0x559acab42405 <unknown>
#14 0x559acab0b4ff <unknown>
#15 0x559acab66258 <unknown>
#16 0x559acab66432 <unknown>
#17 0x559acab77fa3 <unknown>
#18 0x7f1d8389caa4 <unknown>
#19 0x7f1d83929c6c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d851a0afba <unknown>
#1 0x55d85148f6d0 <unknown>
#2 0x55d8514e12aa <unknown>
#3 0x55d8514e1541 <unknown>
#4 0x55d85152f6c4 <unknown>
#5 0x55d851506e5d <unknown>
#6 0x55d85152cb54 <unknown>
#7 0x55d851506c03 <unknown>
#8 0x55d8514d37a8 <unknown>
#9 0x55d8514d4421 <unknown>
#10 0x55d8519cfb28 <unknown>
#11 0x55d8519d387f <unknown>
#12 0x55d8519b7c49 <unknown>
#13 0x55d8519d4405 <unknown>
#14 0x55d85199d4ff <unknown>
#15 0x55d8519f8258 <unknown>
#16 0x55d8519f8432 <unknown>
#17 0x55d851a09fa3 <unknown>
#18 0x7fbf1829caa4 <unknown>
#19 0x7fbf18329c6c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55867079afba <unknown>
#1 0x55867021f6d0 <unknown>
#2 0x5586702712aa <unknown>
#3 0x558670271541 <unknown>
#4 0x5586702bf6c4 <unknown>
#5 0x558670296e5d <unknown>
#6 0x5586702bcb54 <unknown>
#7 0x558670296c03 <unknown>
#8 0x5586702637a8 <unknown>
#9 0x558670264421 <unknown>
#10 0x55867075fb28 <unknown>
#11 0x55867076387f <unknown>
#12 0x558670747c49 <unknown>
#13 0x558670764405 <unknown>
#14 0x55867072d4ff <unknown>
#15 0x558670788258 <unknown>
#16 0x558670788432 <unknown>
#17 0x558670799fa3 <unknown>
#18 0x7f873769caa4 <unknown>
#19 0x7f8737729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55d980975fba <unknown>
#1 0x55d9803fa6d0 <unknown>
#2 0x55d98044c2aa <unknown>
#3 0x55d98044c541 <unknown>
#4 0x55d98049a6c4 <unknown>
#5 0x55d980471e5d <unknown>
#6 0x55d980497b54 <unknown>
#7 0x55d980471c03 <unknown>
#8 0x55d98043e7a8 <unknown>
#9 0x55d98043f421 <unknown>
#10 0x55d98093ab28 <unknown>
#11 0x55d98093e87f <unknown>
#12 0x55d980922c49 <unknown>
#13 0x55d98093f405 <unknown>
#14 0x55d9809084ff <unknown>
#15 0x55d980963258 <unknown>
#16 0x55d980963432 <unknown>
#17 0x55d980974fa3 <unknown>
#18 0x7f680bc9caa4 <unknown>
#19 0x7f680bd29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559a4ea9afba <unknown>
#1 0x559a4e51f6d0 <unknown>
#2 0x559a4e5712aa <unknown>
#3 0x559a4e571541 <unknown>
#4 0x559a4e5bf6c4 <unknown>
#5 0x559a4e596e5d <unknown>
#6 0x559a4e5bcb54 <unknown>
#7 0x559a4e596c03 <unknown>
#8 0x559a4e5637a8 <unknown>
#9 0x559a4e564421 <unknown>
#10 0x559a4ea5fb28 <unknown>
#11 0x559a4ea6387f <unknown>
#12 0x559a4ea47c49 <unknown>
#13 0x559a4ea64405 <unknown>
#14 0x559a4ea2d4ff <unknown>
#15 0x559a4ea88258 <unknown>
#16 0x559a4ea88432 <unknown>
#17 0x559a4ea99fa3 <unknown>
#18 0x7f379ca9caa4 <unknown>
#19 0x7f379cb29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5588db0f1fba <unknown>
#1 0x5588dab766d0 <unknown>
#2 0x5588dabc82aa <unknown>
#3 0x5588dabc8541 <unknown>
#4 0x5588dac166c4 <unknown>
#5 0x5588dabede5d <unknown>
#6 0x5588dac13b54 <unknown>
#7 0x5588dabedc03 <unknown>
#8 0x5588dabba7a8 <unknown>
#9 0x5588dabbb421 <unknown>
#10 0x5588db0b6b28 <unknown>
#11 0x5588db0ba87f <unknown>
#12 0x5588db09ec49 <unknown>
#13 0x5588db0bb405 <unknown>
#14 0x5588db0844ff <unknown>
#15 0x5588db0df258 <unknown>
#16 0x5588db0df432 <unknown>
#17 0x5588db0f0fa3 <unknown>
#18 0x7fe09f69caa4 <unknown>
#19 0x7fe09f729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5572773fffba <unknown>
#1 0x557276e846d0 <unknown>
#2 0x557276ed62aa <unknown>
#3 0x557276ed6541 <unknown>
#4 0x557276f246c4 <unknown>
#5 0x557276efbe5d <unknown>
#6 0x557276f21b54 <unknown>
#7 0x557276efbc03 <unknown>
#8 0x557276ec87a8 <unknown>
#9 0x557276ec9421 <unknown>
#10 0x5572773c4b28 <unknown>
#11 0x5572773c887f <unknown>
#12 0x5572773acc49 <unknown>
#13 0x5572773c9405 <unknown>
#14 0x5572773924ff <unknown>
#15 0x5572773ed258 <unknown>
#16 0x5572773ed432 <unknown>
#17 0x5572773fefa3 <unknown>
#18 0x7face129caa4 <unknown>
#19 0x7face1329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5599ccc3afba <unknown>
#1 0x5599cc6bf6d0 <unknown>
#2 0x5599cc7112aa <unknown>
#3 0x5599cc711541 <unknown>
#4 0x5599cc75f6c4 <unknown>
#5 0x5599cc736e5d <unknown>
#6 0x5599cc75cb54 <unknown>
#7 0x5599cc736c03 <unknown>
#8 0x5599cc7037a8 <unknown>
#9 0x5599cc704421 <unknown>
#10 0x5599ccbffb28 <unknown>
#11 0x5599ccc0387f <unknown>
#12 0x5599ccbe7c49 <unknown>
#13 0x5599ccc04405 <unknown>
#14 0x5599ccbcd4ff <unknown>
#15 0x5599ccc28258 <unknown>
#16 0x5599ccc28432 <unknown>
#17 0x5599ccc39fa3 <unknown>
#18 0x7ff7cd09caa4 <unknown>
#19 0x7ff7cd129c6c <unknown>
======================= 19 failed in 2384.13s (0:39:44) ========================
--------------------------------------------
Test Run Finished: 2025-10-15 04:28:56
Duration: 2387 seconds
Status: FAILURE
Exit Code: 1
============================================
========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-15 13:42:41
--------------------------------------------
ImportError while loading conftest '/home/runner/work/Mocha_accounting/Mocha_accounting/tests/test_signup_login/conftest.py'.
tests/test_signup_login/conftest.py:24: in <module>
    from utilities.signup_login_data_reader import SignupLoginDataReader
E   ModuleNotFoundError: No module named 'utilities'
--------------------------------------------
Test Run Finished: 2025-10-15 13:42:44
Duration: 3 seconds
Status: FAILURE
Exit Code: 4
============================================
