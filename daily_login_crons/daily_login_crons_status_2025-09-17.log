========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-17 03:43:36
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'Faker': '37.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: Faker-37.8.0, rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6b325d2937b97abefc93b8211ab91da1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6b325d2937b97abefc93b8211ab91da1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f0463986a20>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x561a3144794a <unknown>
E       #1 0x561a30ebc8a0 <unknown>
E       #2 0x561a30f0e540 <unknown>
E       #3 0x561a30f0e731 <unknown>
E       #4 0x561a30f5c824 <unknown>
E       #5 0x561a30f3405d <unknown>
E       #6 0x561a30f59c23 <unknown>
E       #7 0x561a30f33e03 <unknown>
E       #8 0x561a30f00968 <unknown>
E       #9 0x561a30f015e1 <unknown>
E       #10 0x561a3140b548 <unknown>
E       #11 0x561a3140f272 <unknown>
E       #12 0x561a313f2313 <unknown>
E       #13 0x561a3140fdc5 <unknown>
E       #14 0x561a313d749f <unknown>
E       #15 0x561a31434158 <unknown>
E       #16 0x561a31434332 <unknown>
E       #17 0x561a31446a53 <unknown>
E       #18 0x7f07bca9caa4 <unknown>
E       #19 0x7f07bcb29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 03:43:38,740 - INFO - Test data loaded successfully.
2025-09-17 03:43:38,740 - INFO - Starting test with Chrome browser
2025-09-17 03:43:38,740 - INFO - ====== WebDriver manager ======
2025-09-17 03:43:39,722 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:43:39,942 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:43:39,988 - INFO - There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
2025-09-17 03:43:39,989 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:43:40,114 - INFO - WebDriver version 140.0.7339.82 selected
2025-09-17 03:43:40,117 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-17 03:43:40,118 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-17 03:43:40,166 - INFO - Driver downloading response is 200
2025-09-17 03:43:40,246 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:43:40,403 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
2025-09-17 03:43:47,541 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.82 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-17 03:43:47,542 - INFO - Starting the test case for valid credentials
2025-09-17 03:43:47,800 - INFO - User enters the email-id
2025-09-17 03:43:49,502 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 03:45:51,156 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="cea3abe207cb0dbc264d386d0c77dcbb")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="cea3abe207cb0dbc264d386d0c77dcbb")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b1800>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e7ec37a94a <unknown>
E       #1 0x55e7ebdef8a0 <unknown>
E       #2 0x55e7ebe41540 <unknown>
E       #3 0x55e7ebe41731 <unknown>
E       #4 0x55e7ebe8f824 <unknown>
E       #5 0x55e7ebe6705d <unknown>
E       #6 0x55e7ebe8cc23 <unknown>
E       #7 0x55e7ebe66e03 <unknown>
E       #8 0x55e7ebe33968 <unknown>
E       #9 0x55e7ebe345e1 <unknown>
E       #10 0x55e7ec33e548 <unknown>
E       #11 0x55e7ec342272 <unknown>
E       #12 0x55e7ec325313 <unknown>
E       #13 0x55e7ec342dc5 <unknown>
E       #14 0x55e7ec30a49f <unknown>
E       #15 0x55e7ec367158 <unknown>
E       #16 0x55e7ec367332 <unknown>
E       #17 0x55e7ec379a53 <unknown>
E       #18 0x7fe710c9caa4 <unknown>
E       #19 0x7fe710d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 03:45:51,276 - INFO - Starting test with Chrome browser
2025-09-17 03:45:51,276 - INFO - ====== WebDriver manager ======
2025-09-17 03:45:51,341 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:45:51,387 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:45:51,449 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 03:45:52,307 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-17 03:45:52,308 - INFO - Starting the test case for valid credentials
2025-09-17 03:45:52,774 - INFO - User enters the email-id
2025-09-17 03:45:54,503 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 03:47:56,169 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7d652903b7abf6026f495d6708d31b58")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7d652903b7abf6026f495d6708d31b58")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04654be3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56260c4a794a <unknown>
E       #1 0x56260bf1c8a0 <unknown>
E       #2 0x56260bf6e540 <unknown>
E       #3 0x56260bf6e731 <unknown>
E       #4 0x56260bfbc824 <unknown>
E       #5 0x56260bf9405d <unknown>
E       #6 0x56260bfb9c23 <unknown>
E       #7 0x56260bf93e03 <unknown>
E       #8 0x56260bf60968 <unknown>
E       #9 0x56260bf615e1 <unknown>
E       #10 0x56260c46b548 <unknown>
E       #11 0x56260c46f272 <unknown>
E       #12 0x56260c452313 <unknown>
E       #13 0x56260c46fdc5 <unknown>
E       #14 0x56260c43749f <unknown>
E       #15 0x56260c494158 <unknown>
E       #16 0x56260c494332 <unknown>
E       #17 0x56260c4a6a53 <unknown>
E       #18 0x7f4bf789caa4 <unknown>
E       #19 0x7f4bf7929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 03:47:56,236 - INFO - Starting test with Chrome browser
2025-09-17 03:47:56,237 - INFO - ====== WebDriver manager ======
2025-09-17 03:47:56,301 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:47:56,349 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:47:56,394 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 03:47:57,705 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-17 03:47:57,706 - INFO - Starting the test case for valid credentials
2025-09-17 03:47:57,859 - INFO - User enters the email-id
2025-09-17 03:47:59,606 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 03:50:01,223 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f1e89f7a55e66cab7d0e962fc0aefcff")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f1e89f7a55e66cab7d0e962fc0aefcff")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b1620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b4351af94a <unknown>
E       #1 0x55b434c248a0 <unknown>
E       #2 0x55b434c76540 <unknown>
E       #3 0x55b434c76731 <unknown>
E       #4 0x55b434cc4824 <unknown>
E       #5 0x55b434c9c05d <unknown>
E       #6 0x55b434cc1c23 <unknown>
E       #7 0x55b434c9be03 <unknown>
E       #8 0x55b434c68968 <unknown>
E       #9 0x55b434c695e1 <unknown>
E       #10 0x55b435173548 <unknown>
E       #11 0x55b435177272 <unknown>
E       #12 0x55b43515a313 <unknown>
E       #13 0x55b435177dc5 <unknown>
E       #14 0x55b43513f49f <unknown>
E       #15 0x55b43519c158 <unknown>
E       #16 0x55b43519c332 <unknown>
E       #17 0x55b4351aea53 <unknown>
E       #18 0x7fad5c29caa4 <unknown>
E       #19 0x7fad5c329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 03:50:01,292 - INFO - Starting test with Chrome browser
2025-09-17 03:50:01,292 - INFO - ====== WebDriver manager ======
2025-09-17 03:50:01,357 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:50:01,405 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:50:01,450 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 03:50:02,840 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-17 03:50:02,841 - INFO - Starting the test case for valid credentials
2025-09-17 03:50:02,998 - INFO - User enters the email-id
2025-09-17 03:50:04,690 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 03:52:06,314 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8835b55957ce6198cef7f47255abd0b2")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8835b55957ce6198cef7f47255abd0b2")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b1ee0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5649919b194a <unknown>
E       #1 0x5649914268a0 <unknown>
E       #2 0x564991478540 <unknown>
E       #3 0x564991478731 <unknown>
E       #4 0x5649914c6824 <unknown>
E       #5 0x56499149e05d <unknown>
E       #6 0x5649914c3c23 <unknown>
E       #7 0x56499149de03 <unknown>
E       #8 0x56499146a968 <unknown>
E       #9 0x56499146b5e1 <unknown>
E       #10 0x564991975548 <unknown>
E       #11 0x564991979272 <unknown>
E       #12 0x56499195c313 <unknown>
E       #13 0x564991979dc5 <unknown>
E       #14 0x56499194149f <unknown>
E       #15 0x56499199e158 <unknown>
E       #16 0x56499199e332 <unknown>
E       #17 0x5649919b0a53 <unknown>
E       #18 0x7f2f3aa9caa4 <unknown>
E       #19 0x7f2f3ab29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 03:52:06,381 - INFO - Starting test with Chrome browser
2025-09-17 03:52:06,381 - INFO - ====== WebDriver manager ======
2025-09-17 03:52:06,446 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:52:06,498 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:52:06,544 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 03:52:08,382 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 03:54:10,113 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a65487ae8a089a44fcfdfb26fd9b971b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a65487ae8a089a44fcfdfb26fd9b971b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b1f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x555e5325494a <unknown>
E       #1 0x555e52cc98a0 <unknown>
E       #2 0x555e52d1b540 <unknown>
E       #3 0x555e52d1b731 <unknown>
E       #4 0x555e52d69824 <unknown>
E       #5 0x555e52d4105d <unknown>
E       #6 0x555e52d66c23 <unknown>
E       #7 0x555e52d40e03 <unknown>
E       #8 0x555e52d0d968 <unknown>
E       #9 0x555e52d0e5e1 <unknown>
E       #10 0x555e53218548 <unknown>
E       #11 0x555e5321c272 <unknown>
E       #12 0x555e531ff313 <unknown>
E       #13 0x555e5321cdc5 <unknown>
E       #14 0x555e531e449f <unknown>
E       #15 0x555e53241158 <unknown>
E       #16 0x555e53241332 <unknown>
E       #17 0x555e53253a53 <unknown>
E       #18 0x7f10f5c9caa4 <unknown>
E       #19 0x7f10f5d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 03:54:10,179 - INFO - Starting test with Chrome browser
2025-09-17 03:54:10,179 - INFO - ====== WebDriver manager ======
2025-09-17 03:54:10,244 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:54:10,289 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:54:10,340 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 03:54:11,930 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 03:56:13,694 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7c7bffb10ed3be0c141f8a19d3235c72")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7c7bffb10ed3be0c141f8a19d3235c72")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b1d00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564acbc2894a <unknown>
E       #1 0x564acb69d8a0 <unknown>
E       #2 0x564acb6ef540 <unknown>
E       #3 0x564acb6ef731 <unknown>
E       #4 0x564acb73d824 <unknown>
E       #5 0x564acb71505d <unknown>
E       #6 0x564acb73ac23 <unknown>
E       #7 0x564acb714e03 <unknown>
E       #8 0x564acb6e1968 <unknown>
E       #9 0x564acb6e25e1 <unknown>
E       #10 0x564acbbec548 <unknown>
E       #11 0x564acbbf0272 <unknown>
E       #12 0x564acbbd3313 <unknown>
E       #13 0x564acbbf0dc5 <unknown>
E       #14 0x564acbbb849f <unknown>
E       #15 0x564acbc15158 <unknown>
E       #16 0x564acbc15332 <unknown>
E       #17 0x564acbc27a53 <unknown>
E       #18 0x7f498b89caa4 <unknown>
E       #19 0x7f498b929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 03:56:13,759 - INFO - Starting test with Chrome browser
2025-09-17 03:56:13,760 - INFO - ====== WebDriver manager ======
2025-09-17 03:56:13,824 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:56:13,877 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:56:13,922 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 03:56:15,798 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 03:58:17,524 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5c87622650829ebc5adfbc9702a75a66")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5c87622650829ebc5adfbc9702a75a66")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b27a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b7c215994a <unknown>
E       #1 0x55b7c1bce8a0 <unknown>
E       #2 0x55b7c1c20540 <unknown>
E       #3 0x55b7c1c20731 <unknown>
E       #4 0x55b7c1c6e824 <unknown>
E       #5 0x55b7c1c4605d <unknown>
E       #6 0x55b7c1c6bc23 <unknown>
E       #7 0x55b7c1c45e03 <unknown>
E       #8 0x55b7c1c12968 <unknown>
E       #9 0x55b7c1c135e1 <unknown>
E       #10 0x55b7c211d548 <unknown>
E       #11 0x55b7c2121272 <unknown>
E       #12 0x55b7c2104313 <unknown>
E       #13 0x55b7c2121dc5 <unknown>
E       #14 0x55b7c20e949f <unknown>
E       #15 0x55b7c2146158 <unknown>
E       #16 0x55b7c2146332 <unknown>
E       #17 0x55b7c2158a53 <unknown>
E       #18 0x7f1cbfa9caa4 <unknown>
E       #19 0x7f1cbfb29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 03:58:17,588 - INFO - Starting test with Chrome browser
2025-09-17 03:58:17,588 - INFO - ====== WebDriver manager ======
2025-09-17 03:58:17,652 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:58:17,699 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 03:58:17,745 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 03:58:18,584 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 04:00:20,619 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8188cc70ff790b263d100b1584891e89")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8188cc70ff790b263d100b1584891e89")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b2ac0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562e25c5794a <unknown>
E       #1 0x562e256cc8a0 <unknown>
E       #2 0x562e2571e540 <unknown>
E       #3 0x562e2571e731 <unknown>
E       #4 0x562e2576c824 <unknown>
E       #5 0x562e2574405d <unknown>
E       #6 0x562e25769c23 <unknown>
E       #7 0x562e25743e03 <unknown>
E       #8 0x562e25710968 <unknown>
E       #9 0x562e257115e1 <unknown>
E       #10 0x562e25c1b548 <unknown>
E       #11 0x562e25c1f272 <unknown>
E       #12 0x562e25c02313 <unknown>
E       #13 0x562e25c1fdc5 <unknown>
E       #14 0x562e25be749f <unknown>
E       #15 0x562e25c44158 <unknown>
E       #16 0x562e25c44332 <unknown>
E       #17 0x562e25c56a53 <unknown>
E       #18 0x7fb49149caa4 <unknown>
E       #19 0x7fb491529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 04:00:20,685 - INFO - Starting test with Chrome browser
2025-09-17 04:00:20,685 - INFO - ====== WebDriver manager ======
2025-09-17 04:00:20,750 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 04:00:20,798 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 04:00:20,843 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 04:00:22,751 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 04:02:26,101 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="87c8f86e1de79d9cd0396132b60d78f9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="87c8f86e1de79d9cd0396132b60d78f9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b2840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ed6923094a <unknown>
E       #1 0x55ed68ca58a0 <unknown>
E       #2 0x55ed68cf7540 <unknown>
E       #3 0x55ed68cf7731 <unknown>
E       #4 0x55ed68d45824 <unknown>
E       #5 0x55ed68d1d05d <unknown>
E       #6 0x55ed68d42c23 <unknown>
E       #7 0x55ed68d1ce03 <unknown>
E       #8 0x55ed68ce9968 <unknown>
E       #9 0x55ed68cea5e1 <unknown>
E       #10 0x55ed691f4548 <unknown>
E       #11 0x55ed691f8272 <unknown>
E       #12 0x55ed691db313 <unknown>
E       #13 0x55ed691f8dc5 <unknown>
E       #14 0x55ed691c049f <unknown>
E       #15 0x55ed6921d158 <unknown>
E       #16 0x55ed6921d332 <unknown>
E       #17 0x55ed6922fa53 <unknown>
E       #18 0x7f2109e9caa4 <unknown>
E       #19 0x7f2109f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 04:02:26,168 - INFO - Starting test with Chrome browser
2025-09-17 04:02:26,168 - INFO - ====== WebDriver manager ======
2025-09-17 04:02:26,234 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 04:02:26,281 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 04:02:26,326 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 04:02:28,160 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 04:04:31,442 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="92e8e322f436cf4822784267160c72c1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="92e8e322f436cf4822784267160c72c1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b22a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f1d28fa94a <unknown>
E       #1 0x55f1d236f8a0 <unknown>
E       #2 0x55f1d23c1540 <unknown>
E       #3 0x55f1d23c1731 <unknown>
E       #4 0x55f1d240f824 <unknown>
E       #5 0x55f1d23e705d <unknown>
E       #6 0x55f1d240cc23 <unknown>
E       #7 0x55f1d23e6e03 <unknown>
E       #8 0x55f1d23b3968 <unknown>
E       #9 0x55f1d23b45e1 <unknown>
E       #10 0x55f1d28be548 <unknown>
E       #11 0x55f1d28c2272 <unknown>
E       #12 0x55f1d28a5313 <unknown>
E       #13 0x55f1d28c2dc5 <unknown>
E       #14 0x55f1d288a49f <unknown>
E       #15 0x55f1d28e7158 <unknown>
E       #16 0x55f1d28e7332 <unknown>
E       #17 0x55f1d28f9a53 <unknown>
E       #18 0x7f0ff009caa4 <unknown>
E       #19 0x7f0ff0129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 04:04:31,507 - INFO - Starting test with Chrome browser
2025-09-17 04:04:31,507 - INFO - ====== WebDriver manager ======
2025-09-17 04:04:31,572 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 04:04:31,618 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 04:04:31,663 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 04:04:33,474 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 04:06:36,861 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="25b245e2d22631ceab3a8cc46f213fb3")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="25b245e2d22631ceab3a8cc46f213fb3")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f04639b1620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5634ffa6f94a <unknown>
E       #1 0x5634ff4e48a0 <unknown>
E       #2 0x5634ff536540 <unknown>
E       #3 0x5634ff536731 <unknown>
E       #4 0x5634ff584824 <unknown>
E       #5 0x5634ff55c05d <unknown>
E       #6 0x5634ff581c23 <unknown>
E       #7 0x5634ff55be03 <unknown>
E       #8 0x5634ff528968 <unknown>
E       #9 0x5634ff5295e1 <unknown>
E       #10 0x5634ffa33548 <unknown>
E       #11 0x5634ffa37272 <unknown>
E       #12 0x5634ffa1a313 <unknown>
E       #13 0x5634ffa37dc5 <unknown>
E       #14 0x5634ff9ff49f <unknown>
E       #15 0x5634ffa5c158 <unknown>
E       #16 0x5634ffa5c332 <unknown>
E       #17 0x5634ffa6ea53 <unknown>
E       #18 0x7f23dd29caa4 <unknown>
E       #19 0x7f23dd329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-17 04:06:37,918 - INFO - Starting test with Chrome browser
2025-09-17 04:06:37,919 - INFO - ====== WebDriver manager ======
2025-09-17 04:06:37,984 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 04:06:38,031 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-17 04:06:38,077 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-17 04:06:41,238 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-17 04:08:44,567 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250917_034338/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x561a3144794a <unknown>
#1 0x561a30ebc8a0 <unknown>
#2 0x561a30f0e540 <unknown>
#3 0x561a30f0e731 <unknown>
#4 0x561a30f5c824 <unknown>
#5 0x561a30f3405d <unknown>
#6 0x561a30f59c23 <unknown>
#7 0x561a30f33e03 <unknown>
#8 0x561a30f00968 <unknown>
#9 0x561a30f015e1 <unknown>
#10 0x561a3140b548 <unknown>
#11 0x561a3140f272 <unknown>
#12 0x561a313f2313 <unknown>
#13 0x561a3140fdc5 <unknown>
#14 0x561a313d749f <unknown>
#15 0x561a31434158 <unknown>
#16 0x561a31434332 <unknown>
#17 0x561a31446a53 <unknown>
#18 0x7f07bca9caa4 <unknown>
#19 0x7f07bcb29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e7ec37a94a <unknown>
#1 0x55e7ebdef8a0 <unknown>
#2 0x55e7ebe41540 <unknown>
#3 0x55e7ebe41731 <unknown>
#4 0x55e7ebe8f824 <unknown>
#5 0x55e7ebe6705d <unknown>
#6 0x55e7ebe8cc23 <unknown>
#7 0x55e7ebe66e03 <unknown>
#8 0x55e7ebe33968 <unknown>
#9 0x55e7ebe345e1 <unknown>
#10 0x55e7ec33e548 <unknown>
#11 0x55e7ec342272 <unknown>
#12 0x55e7ec325313 <unknown>
#13 0x55e7ec342dc5 <unknown>
#14 0x55e7ec30a49f <unknown>
#15 0x55e7ec367158 <unknown>
#16 0x55e7ec367332 <unknown>
#17 0x55e7ec379a53 <unknown>
#18 0x7fe710c9caa4 <unknown>
#19 0x7fe710d29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56260c4a794a <unknown>
#1 0x56260bf1c8a0 <unknown>
#2 0x56260bf6e540 <unknown>
#3 0x56260bf6e731 <unknown>
#4 0x56260bfbc824 <unknown>
#5 0x56260bf9405d <unknown>
#6 0x56260bfb9c23 <unknown>
#7 0x56260bf93e03 <unknown>
#8 0x56260bf60968 <unknown>
#9 0x56260bf615e1 <unknown>
#10 0x56260c46b548 <unknown>
#11 0x56260c46f272 <unknown>
#12 0x56260c452313 <unknown>
#13 0x56260c46fdc5 <unknown>
#14 0x56260c43749f <unknown>
#15 0x56260c494158 <unknown>
#16 0x56260c494332 <unknown>
#17 0x56260c4a6a53 <unknown>
#18 0x7f4bf789caa4 <unknown>
#19 0x7f4bf7929c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b4351af94a <unknown>
#1 0x55b434c248a0 <unknown>
#2 0x55b434c76540 <unknown>
#3 0x55b434c76731 <unknown>
#4 0x55b434cc4824 <unknown>
#5 0x55b434c9c05d <unknown>
#6 0x55b434cc1c23 <unknown>
#7 0x55b434c9be03 <unknown>
#8 0x55b434c68968 <unknown>
#9 0x55b434c695e1 <unknown>
#10 0x55b435173548 <unknown>
#11 0x55b435177272 <unknown>
#12 0x55b43515a313 <unknown>
#13 0x55b435177dc5 <unknown>
#14 0x55b43513f49f <unknown>
#15 0x55b43519c158 <unknown>
#16 0x55b43519c332 <unknown>
#17 0x55b4351aea53 <unknown>
#18 0x7fad5c29caa4 <unknown>
#19 0x7fad5c329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5649919b194a <unknown>
#1 0x5649914268a0 <unknown>
#2 0x564991478540 <unknown>
#3 0x564991478731 <unknown>
#4 0x5649914c6824 <unknown>
#5 0x56499149e05d <unknown>
#6 0x5649914c3c23 <unknown>
#7 0x56499149de03 <unknown>
#8 0x56499146a968 <unknown>
#9 0x56499146b5e1 <unknown>
#10 0x564991975548 <unknown>
#11 0x564991979272 <unknown>
#12 0x56499195c313 <unknown>
#13 0x564991979dc5 <unknown>
#14 0x56499194149f <unknown>
#15 0x56499199e158 <unknown>
#16 0x56499199e332 <unknown>
#17 0x5649919b0a53 <unknown>
#18 0x7f2f3aa9caa4 <unknown>
#19 0x7f2f3ab29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x555e5325494a <unknown>
#1 0x555e52cc98a0 <unknown>
#2 0x555e52d1b540 <unknown>
#3 0x555e52d1b731 <unknown>
#4 0x555e52d69824 <unknown>
#5 0x555e52d4105d <unknown>
#6 0x555e52d66c23 <unknown>
#7 0x555e52d40e03 <unknown>
#8 0x555e52d0d968 <unknown>
#9 0x555e52d0e5e1 <unknown>
#10 0x555e53218548 <unknown>
#11 0x555e5321c272 <unknown>
#12 0x555e531ff313 <unknown>
#13 0x555e5321cdc5 <unknown>
#14 0x555e531e449f <unknown>
#15 0x555e53241158 <unknown>
#16 0x555e53241332 <unknown>
#17 0x555e53253a53 <unknown>
#18 0x7f10f5c9caa4 <unknown>
#19 0x7f10f5d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564acbc2894a <unknown>
#1 0x564acb69d8a0 <unknown>
#2 0x564acb6ef540 <unknown>
#3 0x564acb6ef731 <unknown>
#4 0x564acb73d824 <unknown>
#5 0x564acb71505d <unknown>
#6 0x564acb73ac23 <unknown>
#7 0x564acb714e03 <unknown>
#8 0x564acb6e1968 <unknown>
#9 0x564acb6e25e1 <unknown>
#10 0x564acbbec548 <unknown>
#11 0x564acbbf0272 <unknown>
#12 0x564acbbd3313 <unknown>
#13 0x564acbbf0dc5 <unknown>
#14 0x564acbbb849f <unknown>
#15 0x564acbc15158 <unknown>
#16 0x564acbc15332 <unknown>
#17 0x564acbc27a53 <unknown>
#18 0x7f498b89caa4 <unknown>
#19 0x7f498b929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b7c215994a <unknown>
#1 0x55b7c1bce8a0 <unknown>
#2 0x55b7c1c20540 <unknown>
#3 0x55b7c1c20731 <unknown>
#4 0x55b7c1c6e824 <unknown>
#5 0x55b7c1c4605d <unknown>
#6 0x55b7c1c6bc23 <unknown>
#7 0x55b7c1c45e03 <unknown>
#8 0x55b7c1c12968 <unknown>
#9 0x55b7c1c135e1 <unknown>
#10 0x55b7c211d548 <unknown>
#11 0x55b7c2121272 <unknown>
#12 0x55b7c2104313 <unknown>
#13 0x55b7c2121dc5 <unknown>
#14 0x55b7c20e949f <unknown>
#15 0x55b7c2146158 <unknown>
#16 0x55b7c2146332 <unknown>
#17 0x55b7c2158a53 <unknown>
#18 0x7f1cbfa9caa4 <unknown>
#19 0x7f1cbfb29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562e25c5794a <unknown>
#1 0x562e256cc8a0 <unknown>
#2 0x562e2571e540 <unknown>
#3 0x562e2571e731 <unknown>
#4 0x562e2576c824 <unknown>
#5 0x562e2574405d <unknown>
#6 0x562e25769c23 <unknown>
#7 0x562e25743e03 <unknown>
#8 0x562e25710968 <unknown>
#9 0x562e257115e1 <unknown>
#10 0x562e25c1b548 <unknown>
#11 0x562e25c1f272 <unknown>
#12 0x562e25c02313 <unknown>
#13 0x562e25c1fdc5 <unknown>
#14 0x562e25be749f <unknown>
#15 0x562e25c44158 <unknown>
#16 0x562e25c44332 <unknown>
#17 0x562e25c56a53 <unknown>
#18 0x7fb49149caa4 <unknown>
#19 0x7fb491529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ed6923094a <unknown>
#1 0x55ed68ca58a0 <unknown>
#2 0x55ed68cf7540 <unknown>
#3 0x55ed68cf7731 <unknown>
#4 0x55ed68d45824 <unknown>
#5 0x55ed68d1d05d <unknown>
#6 0x55ed68d42c23 <unknown>
#7 0x55ed68d1ce03 <unknown>
#8 0x55ed68ce9968 <unknown>
#9 0x55ed68cea5e1 <unknown>
#10 0x55ed691f4548 <unknown>
#11 0x55ed691f8272 <unknown>
#12 0x55ed691db313 <unknown>
#13 0x55ed691f8dc5 <unknown>
#14 0x55ed691c049f <unknown>
#15 0x55ed6921d158 <unknown>
#16 0x55ed6921d332 <unknown>
#17 0x55ed6922fa53 <unknown>
#18 0x7f2109e9caa4 <unknown>
#19 0x7f2109f29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f1d28fa94a <unknown>
#1 0x55f1d236f8a0 <unknown>
#2 0x55f1d23c1540 <unknown>
#3 0x55f1d23c1731 <unknown>
#4 0x55f1d240f824 <unknown>
#5 0x55f1d23e705d <unknown>
#6 0x55f1d240cc23 <unknown>
#7 0x55f1d23e6e03 <unknown>
#8 0x55f1d23b3968 <unknown>
#9 0x55f1d23b45e1 <unknown>
#10 0x55f1d28be548 <unknown>
#11 0x55f1d28c2272 <unknown>
#12 0x55f1d28a5313 <unknown>
#13 0x55f1d28c2dc5 <unknown>
#14 0x55f1d288a49f <unknown>
#15 0x55f1d28e7158 <unknown>
#16 0x55f1d28e7332 <unknown>
#17 0x55f1d28f9a53 <unknown>
#18 0x7f0ff009caa4 <unknown>
#19 0x7f0ff0129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5634ffa6f94a <unknown>
#1 0x5634ff4e48a0 <unknown>
#2 0x5634ff536540 <unknown>
#3 0x5634ff536731 <unknown>
#4 0x5634ff584824 <unknown>
#5 0x5634ff55c05d <unknown>
#6 0x5634ff581c23 <unknown>
#7 0x5634ff55be03 <unknown>
#8 0x5634ff528968 <unknown>
#9 0x5634ff5295e1 <unknown>
#10 0x5634ffa33548 <unknown>
#11 0x5634ffa37272 <unknown>
#12 0x5634ffa1a313 <unknown>
#13 0x5634ffa37dc5 <unknown>
#14 0x5634ff9ff49f <unknown>
#15 0x5634ffa5c158 <unknown>
#16 0x5634ffa5c332 <unknown>
#17 0x5634ffa6ea53 <unknown>
#18 0x7f23dd29caa4 <unknown>
#19 0x7f23dd329c3c <unknown>
================== 12 failed, 7 passed in 1524.84s (0:25:24) ===================
--------------------------------------------
Test Run Finished: 2025-09-17 04:09:03
Duration: 1527 seconds
Status: FAILURE
Exit Code: 1
============================================
