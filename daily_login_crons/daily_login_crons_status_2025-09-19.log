========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-19 03:46:32
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'Faker': '37.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: Faker-37.8.0, rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="4021ccc3ae5fe14077e95b211ce2e02e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4021ccc3ae5fe14077e95b211ce2e02e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998b268900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564f42dbbcba <unknown>
E       #1 0x564f428308e0 <unknown>
E       #2 0x564f42882580 <unknown>
E       #3 0x564f42882771 <unknown>
E       #4 0x564f428d0864 <unknown>
E       #5 0x564f428a809d <unknown>
E       #6 0x564f428cdc63 <unknown>
E       #7 0x564f428a7e43 <unknown>
E       #8 0x564f428749a8 <unknown>
E       #9 0x564f42875621 <unknown>
E       #10 0x564f42d7f8b8 <unknown>
E       #11 0x564f42d835e2 <unknown>
E       #12 0x564f42d66683 <unknown>
E       #13 0x564f42d84135 <unknown>
E       #14 0x564f42d4b80f <unknown>
E       #15 0x564f42da84c8 <unknown>
E       #16 0x564f42da86a2 <unknown>
E       #17 0x564f42dbadc3 <unknown>
E       #18 0x7f2140e9caa4 <unknown>
E       #19 0x7f2140f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 03:46:34,966 - INFO - Test data loaded successfully.
2025-09-19 03:46:34,966 - INFO - Starting test with Chrome browser
2025-09-19 03:46:34,966 - INFO - ====== WebDriver manager ======
2025-09-19 03:46:36,008 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:46:36,129 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:46:36,212 - INFO - There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
2025-09-19 03:46:36,213 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:46:36,440 - INFO - WebDriver version 140.0.7339.185 selected
2025-09-19 03:46:36,444 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-19 03:46:36,444 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-19 03:46:36,513 - INFO - Driver downloading response is 200
2025-09-19 03:46:36,619 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:46:36,862 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
2025-09-19 03:46:44,561 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.185 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-19 03:46:44,562 - INFO - Starting the test case for valid credentials
2025-09-19 03:46:44,819 - INFO - User enters the email-id
2025-09-19 03:46:46,451 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 03:48:48,167 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c86da5d397ba04c4790e9351f5b09221")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c86da5d397ba04c4790e9351f5b09221")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c6318a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559d830b5cba <unknown>
E       #1 0x559d82b2a8e0 <unknown>
E       #2 0x559d82b7c580 <unknown>
E       #3 0x559d82b7c771 <unknown>
E       #4 0x559d82bca864 <unknown>
E       #5 0x559d82ba209d <unknown>
E       #6 0x559d82bc7c63 <unknown>
E       #7 0x559d82ba1e43 <unknown>
E       #8 0x559d82b6e9a8 <unknown>
E       #9 0x559d82b6f621 <unknown>
E       #10 0x559d830798b8 <unknown>
E       #11 0x559d8307d5e2 <unknown>
E       #12 0x559d83060683 <unknown>
E       #13 0x559d8307e135 <unknown>
E       #14 0x559d8304580f <unknown>
E       #15 0x559d830a24c8 <unknown>
E       #16 0x559d830a26a2 <unknown>
E       #17 0x559d830b4dc3 <unknown>
E       #18 0x7f03a7c9caa4 <unknown>
E       #19 0x7f03a7d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 03:48:48,288 - INFO - Starting test with Chrome browser
2025-09-19 03:48:48,288 - INFO - ====== WebDriver manager ======
2025-09-19 03:48:48,357 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:48:48,448 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:48:48,546 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 03:48:50,316 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-19 03:48:50,317 - INFO - Starting the test case for valid credentials
2025-09-19 03:48:50,464 - INFO - User enters the email-id
2025-09-19 03:48:52,095 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 03:50:53,775 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8dfd645aa4e47f0fa9e5e98d4879ca2f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8dfd645aa4e47f0fa9e5e98d4879ca2f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998e13e3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560dd8fd2cba <unknown>
E       #1 0x560dd8a478e0 <unknown>
E       #2 0x560dd8a99580 <unknown>
E       #3 0x560dd8a99771 <unknown>
E       #4 0x560dd8ae7864 <unknown>
E       #5 0x560dd8abf09d <unknown>
E       #6 0x560dd8ae4c63 <unknown>
E       #7 0x560dd8abee43 <unknown>
E       #8 0x560dd8a8b9a8 <unknown>
E       #9 0x560dd8a8c621 <unknown>
E       #10 0x560dd8f968b8 <unknown>
E       #11 0x560dd8f9a5e2 <unknown>
E       #12 0x560dd8f7d683 <unknown>
E       #13 0x560dd8f9b135 <unknown>
E       #14 0x560dd8f6280f <unknown>
E       #15 0x560dd8fbf4c8 <unknown>
E       #16 0x560dd8fbf6a2 <unknown>
E       #17 0x560dd8fd1dc3 <unknown>
E       #18 0x7f5bbbe9caa4 <unknown>
E       #19 0x7f5bbbf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 03:50:53,843 - INFO - Starting test with Chrome browser
2025-09-19 03:50:53,843 - INFO - ====== WebDriver manager ======
2025-09-19 03:50:53,911 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:50:53,993 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:50:54,076 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 03:50:56,131 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-19 03:50:56,132 - INFO - Starting the test case for valid credentials
2025-09-19 03:50:56,284 - INFO - User enters the email-id
2025-09-19 03:50:57,919 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 03:52:59,612 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bb61eddd1bafc60f587063612e730394")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="bb61eddd1bafc60f587063612e730394")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c6316c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5558a7ce7cba <unknown>
E       #1 0x5558a775c8e0 <unknown>
E       #2 0x5558a77ae580 <unknown>
E       #3 0x5558a77ae771 <unknown>
E       #4 0x5558a77fc864 <unknown>
E       #5 0x5558a77d409d <unknown>
E       #6 0x5558a77f9c63 <unknown>
E       #7 0x5558a77d3e43 <unknown>
E       #8 0x5558a77a09a8 <unknown>
E       #9 0x5558a77a1621 <unknown>
E       #10 0x5558a7cab8b8 <unknown>
E       #11 0x5558a7caf5e2 <unknown>
E       #12 0x5558a7c92683 <unknown>
E       #13 0x5558a7cb0135 <unknown>
E       #14 0x5558a7c7780f <unknown>
E       #15 0x5558a7cd44c8 <unknown>
E       #16 0x5558a7cd46a2 <unknown>
E       #17 0x5558a7ce6dc3 <unknown>
E       #18 0x7fb68ae9caa4 <unknown>
E       #19 0x7fb68af29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 03:52:59,679 - INFO - Starting test with Chrome browser
2025-09-19 03:52:59,679 - INFO - ====== WebDriver manager ======
2025-09-19 03:52:59,749 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:52:59,833 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:52:59,917 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 03:53:01,513 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-19 03:53:01,514 - INFO - Starting the test case for valid credentials
2025-09-19 03:53:01,676 - INFO - User enters the email-id
2025-09-19 03:53:03,322 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 03:55:04,963 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b5142d6a11013668efb0669f322ebf89")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b5142d6a11013668efb0669f322ebf89")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c631f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b0e754ecba <unknown>
E       #1 0x55b0e6fc38e0 <unknown>
E       #2 0x55b0e7015580 <unknown>
E       #3 0x55b0e7015771 <unknown>
E       #4 0x55b0e7063864 <unknown>
E       #5 0x55b0e703b09d <unknown>
E       #6 0x55b0e7060c63 <unknown>
E       #7 0x55b0e703ae43 <unknown>
E       #8 0x55b0e70079a8 <unknown>
E       #9 0x55b0e7008621 <unknown>
E       #10 0x55b0e75128b8 <unknown>
E       #11 0x55b0e75165e2 <unknown>
E       #12 0x55b0e74f9683 <unknown>
E       #13 0x55b0e7517135 <unknown>
E       #14 0x55b0e74de80f <unknown>
E       #15 0x55b0e753b4c8 <unknown>
E       #16 0x55b0e753b6a2 <unknown>
E       #17 0x55b0e754ddc3 <unknown>
E       #18 0x7f2abd49caa4 <unknown>
E       #19 0x7f2abd529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 03:55:05,029 - INFO - Starting test with Chrome browser
2025-09-19 03:55:05,029 - INFO - ====== WebDriver manager ======
2025-09-19 03:55:05,098 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:55:05,191 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:55:05,276 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 03:55:07,194 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 03:57:08,967 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0dcdee419054c2ea3880ecb8c22c16df")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0dcdee419054c2ea3880ecb8c22c16df")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c632020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564265700cba <unknown>
E       #1 0x5642651758e0 <unknown>
E       #2 0x5642651c7580 <unknown>
E       #3 0x5642651c7771 <unknown>
E       #4 0x564265215864 <unknown>
E       #5 0x5642651ed09d <unknown>
E       #6 0x564265212c63 <unknown>
E       #7 0x5642651ece43 <unknown>
E       #8 0x5642651b99a8 <unknown>
E       #9 0x5642651ba621 <unknown>
E       #10 0x5642656c48b8 <unknown>
E       #11 0x5642656c85e2 <unknown>
E       #12 0x5642656ab683 <unknown>
E       #13 0x5642656c9135 <unknown>
E       #14 0x56426569080f <unknown>
E       #15 0x5642656ed4c8 <unknown>
E       #16 0x5642656ed6a2 <unknown>
E       #17 0x5642656ffdc3 <unknown>
E       #18 0x7fcbc149caa4 <unknown>
E       #19 0x7fcbc1529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 03:57:10,032 - INFO - Starting test with Chrome browser
2025-09-19 03:57:10,032 - INFO - ====== WebDriver manager ======
2025-09-19 03:57:10,101 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:57:10,185 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:57:10,278 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 03:57:11,928 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 03:59:13,723 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="abfc2ecb031baf40cab9d375f1edd3b0")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="abfc2ecb031baf40cab9d375f1edd3b0")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c631da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b0f9c19cba <unknown>
E       #1 0x55b0f968e8e0 <unknown>
E       #2 0x55b0f96e0580 <unknown>
E       #3 0x55b0f96e0771 <unknown>
E       #4 0x55b0f972e864 <unknown>
E       #5 0x55b0f970609d <unknown>
E       #6 0x55b0f972bc63 <unknown>
E       #7 0x55b0f9705e43 <unknown>
E       #8 0x55b0f96d29a8 <unknown>
E       #9 0x55b0f96d3621 <unknown>
E       #10 0x55b0f9bdd8b8 <unknown>
E       #11 0x55b0f9be15e2 <unknown>
E       #12 0x55b0f9bc4683 <unknown>
E       #13 0x55b0f9be2135 <unknown>
E       #14 0x55b0f9ba980f <unknown>
E       #15 0x55b0f9c064c8 <unknown>
E       #16 0x55b0f9c066a2 <unknown>
E       #17 0x55b0f9c18dc3 <unknown>
E       #18 0x7f1ef269caa4 <unknown>
E       #19 0x7f1ef2729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 03:59:13,789 - INFO - Starting test with Chrome browser
2025-09-19 03:59:13,789 - INFO - ====== WebDriver manager ======
2025-09-19 03:59:13,856 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:59:13,940 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 03:59:14,067 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 03:59:15,929 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 04:01:17,673 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="579f974a8e03dba8929f079dacc8fe6e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="579f974a8e03dba8929f079dacc8fe6e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c632840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f432084cba <unknown>
E       #1 0x55f431af98e0 <unknown>
E       #2 0x55f431b4b580 <unknown>
E       #3 0x55f431b4b771 <unknown>
E       #4 0x55f431b99864 <unknown>
E       #5 0x55f431b7109d <unknown>
E       #6 0x55f431b96c63 <unknown>
E       #7 0x55f431b70e43 <unknown>
E       #8 0x55f431b3d9a8 <unknown>
E       #9 0x55f431b3e621 <unknown>
E       #10 0x55f4320488b8 <unknown>
E       #11 0x55f43204c5e2 <unknown>
E       #12 0x55f43202f683 <unknown>
E       #13 0x55f43204d135 <unknown>
E       #14 0x55f43201480f <unknown>
E       #15 0x55f4320714c8 <unknown>
E       #16 0x55f4320716a2 <unknown>
E       #17 0x55f432083dc3 <unknown>
E       #18 0x7fc554a9caa4 <unknown>
E       #19 0x7fc554b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 04:01:17,738 - INFO - Starting test with Chrome browser
2025-09-19 04:01:17,738 - INFO - ====== WebDriver manager ======
2025-09-19 04:01:17,805 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:01:17,889 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:01:17,975 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 04:01:20,099 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 04:03:21,889 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ad9fa54a205efe9c60d235e022da7081")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ad9fa54a205efe9c60d235e022da7081")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c632b60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55cf41aa5cba <unknown>
E       #1 0x55cf4151a8e0 <unknown>
E       #2 0x55cf4156c580 <unknown>
E       #3 0x55cf4156c771 <unknown>
E       #4 0x55cf415ba864 <unknown>
E       #5 0x55cf4159209d <unknown>
E       #6 0x55cf415b7c63 <unknown>
E       #7 0x55cf41591e43 <unknown>
E       #8 0x55cf4155e9a8 <unknown>
E       #9 0x55cf4155f621 <unknown>
E       #10 0x55cf41a698b8 <unknown>
E       #11 0x55cf41a6d5e2 <unknown>
E       #12 0x55cf41a50683 <unknown>
E       #13 0x55cf41a6e135 <unknown>
E       #14 0x55cf41a3580f <unknown>
E       #15 0x55cf41a924c8 <unknown>
E       #16 0x55cf41a926a2 <unknown>
E       #17 0x55cf41aa4dc3 <unknown>
E       #18 0x7f92a789caa4 <unknown>
E       #19 0x7f92a7929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 04:03:21,955 - INFO - Starting test with Chrome browser
2025-09-19 04:03:21,955 - INFO - ====== WebDriver manager ======
2025-09-19 04:03:22,022 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:03:22,107 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:03:22,190 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 04:03:23,982 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 04:05:27,437 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="6fd229b947383de12ed4c0bdaf1a2d4a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="6fd229b947383de12ed4c0bdaf1a2d4a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c6328e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ee65879cba <unknown>
E       #1 0x55ee652ee8e0 <unknown>
E       #2 0x55ee65340580 <unknown>
E       #3 0x55ee65340771 <unknown>
E       #4 0x55ee6538e864 <unknown>
E       #5 0x55ee6536609d <unknown>
E       #6 0x55ee6538bc63 <unknown>
E       #7 0x55ee65365e43 <unknown>
E       #8 0x55ee653329a8 <unknown>
E       #9 0x55ee65333621 <unknown>
E       #10 0x55ee6583d8b8 <unknown>
E       #11 0x55ee658415e2 <unknown>
E       #12 0x55ee65824683 <unknown>
E       #13 0x55ee65842135 <unknown>
E       #14 0x55ee6580980f <unknown>
E       #15 0x55ee658664c8 <unknown>
E       #16 0x55ee658666a2 <unknown>
E       #17 0x55ee65878dc3 <unknown>
E       #18 0x7ffb41c9caa4 <unknown>
E       #19 0x7ffb41d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 04:05:28,494 - INFO - Starting test with Chrome browser
2025-09-19 04:05:28,495 - INFO - ====== WebDriver manager ======
2025-09-19 04:05:28,562 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:05:28,644 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:05:28,738 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 04:05:30,565 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 04:07:34,009 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fa894f2c745b51c0bdeb67773c6388d7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="fa894f2c745b51c0bdeb67773c6388d7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c631da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55557ad0ecba <unknown>
E       #1 0x55557a7838e0 <unknown>
E       #2 0x55557a7d5580 <unknown>
E       #3 0x55557a7d5771 <unknown>
E       #4 0x55557a823864 <unknown>
E       #5 0x55557a7fb09d <unknown>
E       #6 0x55557a820c63 <unknown>
E       #7 0x55557a7fae43 <unknown>
E       #8 0x55557a7c79a8 <unknown>
E       #9 0x55557a7c8621 <unknown>
E       #10 0x55557acd28b8 <unknown>
E       #11 0x55557acd65e2 <unknown>
E       #12 0x55557acb9683 <unknown>
E       #13 0x55557acd7135 <unknown>
E       #14 0x55557ac9e80f <unknown>
E       #15 0x55557acfb4c8 <unknown>
E       #16 0x55557acfb6a2 <unknown>
E       #17 0x55557ad0ddc3 <unknown>
E       #18 0x7f762f09caa4 <unknown>
E       #19 0x7f762f129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 04:07:34,091 - INFO - Starting test with Chrome browser
2025-09-19 04:07:34,092 - INFO - ====== WebDriver manager ======
2025-09-19 04:07:34,161 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:07:34,252 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:07:34,336 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 04:07:36,606 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 04:09:39,996 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fe6a7aa06fbf131b29d1c43e3b4e1b45")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="fe6a7aa06fbf131b29d1c43e3b4e1b45")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f998c631940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55db292fbcba <unknown>
E       #1 0x55db28d708e0 <unknown>
E       #2 0x55db28dc2580 <unknown>
E       #3 0x55db28dc2771 <unknown>
E       #4 0x55db28e10864 <unknown>
E       #5 0x55db28de809d <unknown>
E       #6 0x55db28e0dc63 <unknown>
E       #7 0x55db28de7e43 <unknown>
E       #8 0x55db28db49a8 <unknown>
E       #9 0x55db28db5621 <unknown>
E       #10 0x55db292bf8b8 <unknown>
E       #11 0x55db292c35e2 <unknown>
E       #12 0x55db292a6683 <unknown>
E       #13 0x55db292c4135 <unknown>
E       #14 0x55db2928b80f <unknown>
E       #15 0x55db292e84c8 <unknown>
E       #16 0x55db292e86a2 <unknown>
E       #17 0x55db292fadc3 <unknown>
E       #18 0x7f759b49caa4 <unknown>
E       #19 0x7f759b529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-19 04:09:40,064 - INFO - Starting test with Chrome browser
2025-09-19 04:09:40,065 - INFO - ====== WebDriver manager ======
2025-09-19 04:09:40,134 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:09:40,236 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-19 04:09:40,318 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-19 04:09:41,383 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-19 04:11:44,998 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250919_034634/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564f42dbbcba <unknown>
#1 0x564f428308e0 <unknown>
#2 0x564f42882580 <unknown>
#3 0x564f42882771 <unknown>
#4 0x564f428d0864 <unknown>
#5 0x564f428a809d <unknown>
#6 0x564f428cdc63 <unknown>
#7 0x564f428a7e43 <unknown>
#8 0x564f428749a8 <unknown>
#9 0x564f42875621 <unknown>
#10 0x564f42d7f8b8 <unknown>
#11 0x564f42d835e2 <unknown>
#12 0x564f42d66683 <unknown>
#13 0x564f42d84135 <unknown>
#14 0x564f42d4b80f <unknown>
#15 0x564f42da84c8 <unknown>
#16 0x564f42da86a2 <unknown>
#17 0x564f42dbadc3 <unknown>
#18 0x7f2140e9caa4 <unknown>
#19 0x7f2140f29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559d830b5cba <unknown>
#1 0x559d82b2a8e0 <unknown>
#2 0x559d82b7c580 <unknown>
#3 0x559d82b7c771 <unknown>
#4 0x559d82bca864 <unknown>
#5 0x559d82ba209d <unknown>
#6 0x559d82bc7c63 <unknown>
#7 0x559d82ba1e43 <unknown>
#8 0x559d82b6e9a8 <unknown>
#9 0x559d82b6f621 <unknown>
#10 0x559d830798b8 <unknown>
#11 0x559d8307d5e2 <unknown>
#12 0x559d83060683 <unknown>
#13 0x559d8307e135 <unknown>
#14 0x559d8304580f <unknown>
#15 0x559d830a24c8 <unknown>
#16 0x559d830a26a2 <unknown>
#17 0x559d830b4dc3 <unknown>
#18 0x7f03a7c9caa4 <unknown>
#19 0x7f03a7d29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560dd8fd2cba <unknown>
#1 0x560dd8a478e0 <unknown>
#2 0x560dd8a99580 <unknown>
#3 0x560dd8a99771 <unknown>
#4 0x560dd8ae7864 <unknown>
#5 0x560dd8abf09d <unknown>
#6 0x560dd8ae4c63 <unknown>
#7 0x560dd8abee43 <unknown>
#8 0x560dd8a8b9a8 <unknown>
#9 0x560dd8a8c621 <unknown>
#10 0x560dd8f968b8 <unknown>
#11 0x560dd8f9a5e2 <unknown>
#12 0x560dd8f7d683 <unknown>
#13 0x560dd8f9b135 <unknown>
#14 0x560dd8f6280f <unknown>
#15 0x560dd8fbf4c8 <unknown>
#16 0x560dd8fbf6a2 <unknown>
#17 0x560dd8fd1dc3 <unknown>
#18 0x7f5bbbe9caa4 <unknown>
#19 0x7f5bbbf29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5558a7ce7cba <unknown>
#1 0x5558a775c8e0 <unknown>
#2 0x5558a77ae580 <unknown>
#3 0x5558a77ae771 <unknown>
#4 0x5558a77fc864 <unknown>
#5 0x5558a77d409d <unknown>
#6 0x5558a77f9c63 <unknown>
#7 0x5558a77d3e43 <unknown>
#8 0x5558a77a09a8 <unknown>
#9 0x5558a77a1621 <unknown>
#10 0x5558a7cab8b8 <unknown>
#11 0x5558a7caf5e2 <unknown>
#12 0x5558a7c92683 <unknown>
#13 0x5558a7cb0135 <unknown>
#14 0x5558a7c7780f <unknown>
#15 0x5558a7cd44c8 <unknown>
#16 0x5558a7cd46a2 <unknown>
#17 0x5558a7ce6dc3 <unknown>
#18 0x7fb68ae9caa4 <unknown>
#19 0x7fb68af29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b0e754ecba <unknown>
#1 0x55b0e6fc38e0 <unknown>
#2 0x55b0e7015580 <unknown>
#3 0x55b0e7015771 <unknown>
#4 0x55b0e7063864 <unknown>
#5 0x55b0e703b09d <unknown>
#6 0x55b0e7060c63 <unknown>
#7 0x55b0e703ae43 <unknown>
#8 0x55b0e70079a8 <unknown>
#9 0x55b0e7008621 <unknown>
#10 0x55b0e75128b8 <unknown>
#11 0x55b0e75165e2 <unknown>
#12 0x55b0e74f9683 <unknown>
#13 0x55b0e7517135 <unknown>
#14 0x55b0e74de80f <unknown>
#15 0x55b0e753b4c8 <unknown>
#16 0x55b0e753b6a2 <unknown>
#17 0x55b0e754ddc3 <unknown>
#18 0x7f2abd49caa4 <unknown>
#19 0x7f2abd529c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564265700cba <unknown>
#1 0x5642651758e0 <unknown>
#2 0x5642651c7580 <unknown>
#3 0x5642651c7771 <unknown>
#4 0x564265215864 <unknown>
#5 0x5642651ed09d <unknown>
#6 0x564265212c63 <unknown>
#7 0x5642651ece43 <unknown>
#8 0x5642651b99a8 <unknown>
#9 0x5642651ba621 <unknown>
#10 0x5642656c48b8 <unknown>
#11 0x5642656c85e2 <unknown>
#12 0x5642656ab683 <unknown>
#13 0x5642656c9135 <unknown>
#14 0x56426569080f <unknown>
#15 0x5642656ed4c8 <unknown>
#16 0x5642656ed6a2 <unknown>
#17 0x5642656ffdc3 <unknown>
#18 0x7fcbc149caa4 <unknown>
#19 0x7fcbc1529c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b0f9c19cba <unknown>
#1 0x55b0f968e8e0 <unknown>
#2 0x55b0f96e0580 <unknown>
#3 0x55b0f96e0771 <unknown>
#4 0x55b0f972e864 <unknown>
#5 0x55b0f970609d <unknown>
#6 0x55b0f972bc63 <unknown>
#7 0x55b0f9705e43 <unknown>
#8 0x55b0f96d29a8 <unknown>
#9 0x55b0f96d3621 <unknown>
#10 0x55b0f9bdd8b8 <unknown>
#11 0x55b0f9be15e2 <unknown>
#12 0x55b0f9bc4683 <unknown>
#13 0x55b0f9be2135 <unknown>
#14 0x55b0f9ba980f <unknown>
#15 0x55b0f9c064c8 <unknown>
#16 0x55b0f9c066a2 <unknown>
#17 0x55b0f9c18dc3 <unknown>
#18 0x7f1ef269caa4 <unknown>
#19 0x7f1ef2729c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f432084cba <unknown>
#1 0x55f431af98e0 <unknown>
#2 0x55f431b4b580 <unknown>
#3 0x55f431b4b771 <unknown>
#4 0x55f431b99864 <unknown>
#5 0x55f431b7109d <unknown>
#6 0x55f431b96c63 <unknown>
#7 0x55f431b70e43 <unknown>
#8 0x55f431b3d9a8 <unknown>
#9 0x55f431b3e621 <unknown>
#10 0x55f4320488b8 <unknown>
#11 0x55f43204c5e2 <unknown>
#12 0x55f43202f683 <unknown>
#13 0x55f43204d135 <unknown>
#14 0x55f43201480f <unknown>
#15 0x55f4320714c8 <unknown>
#16 0x55f4320716a2 <unknown>
#17 0x55f432083dc3 <unknown>
#18 0x7fc554a9caa4 <unknown>
#19 0x7fc554b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55cf41aa5cba <unknown>
#1 0x55cf4151a8e0 <unknown>
#2 0x55cf4156c580 <unknown>
#3 0x55cf4156c771 <unknown>
#4 0x55cf415ba864 <unknown>
#5 0x55cf4159209d <unknown>
#6 0x55cf415b7c63 <unknown>
#7 0x55cf41591e43 <unknown>
#8 0x55cf4155e9a8 <unknown>
#9 0x55cf4155f621 <unknown>
#10 0x55cf41a698b8 <unknown>
#11 0x55cf41a6d5e2 <unknown>
#12 0x55cf41a50683 <unknown>
#13 0x55cf41a6e135 <unknown>
#14 0x55cf41a3580f <unknown>
#15 0x55cf41a924c8 <unknown>
#16 0x55cf41a926a2 <unknown>
#17 0x55cf41aa4dc3 <unknown>
#18 0x7f92a789caa4 <unknown>
#19 0x7f92a7929c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ee65879cba <unknown>
#1 0x55ee652ee8e0 <unknown>
#2 0x55ee65340580 <unknown>
#3 0x55ee65340771 <unknown>
#4 0x55ee6538e864 <unknown>
#5 0x55ee6536609d <unknown>
#6 0x55ee6538bc63 <unknown>
#7 0x55ee65365e43 <unknown>
#8 0x55ee653329a8 <unknown>
#9 0x55ee65333621 <unknown>
#10 0x55ee6583d8b8 <unknown>
#11 0x55ee658415e2 <unknown>
#12 0x55ee65824683 <unknown>
#13 0x55ee65842135 <unknown>
#14 0x55ee6580980f <unknown>
#15 0x55ee658664c8 <unknown>
#16 0x55ee658666a2 <unknown>
#17 0x55ee65878dc3 <unknown>
#18 0x7ffb41c9caa4 <unknown>
#19 0x7ffb41d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55557ad0ecba <unknown>
#1 0x55557a7838e0 <unknown>
#2 0x55557a7d5580 <unknown>
#3 0x55557a7d5771 <unknown>
#4 0x55557a823864 <unknown>
#5 0x55557a7fb09d <unknown>
#6 0x55557a820c63 <unknown>
#7 0x55557a7fae43 <unknown>
#8 0x55557a7c79a8 <unknown>
#9 0x55557a7c8621 <unknown>
#10 0x55557acd28b8 <unknown>
#11 0x55557acd65e2 <unknown>
#12 0x55557acb9683 <unknown>
#13 0x55557acd7135 <unknown>
#14 0x55557ac9e80f <unknown>
#15 0x55557acfb4c8 <unknown>
#16 0x55557acfb6a2 <unknown>
#17 0x55557ad0ddc3 <unknown>
#18 0x7f762f09caa4 <unknown>
#19 0x7f762f129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55db292fbcba <unknown>
#1 0x55db28d708e0 <unknown>
#2 0x55db28dc2580 <unknown>
#3 0x55db28dc2771 <unknown>
#4 0x55db28e10864 <unknown>
#5 0x55db28de809d <unknown>
#6 0x55db28e0dc63 <unknown>
#7 0x55db28de7e43 <unknown>
#8 0x55db28db49a8 <unknown>
#9 0x55db28db5621 <unknown>
#10 0x55db292bf8b8 <unknown>
#11 0x55db292c35e2 <unknown>
#12 0x55db292a6683 <unknown>
#13 0x55db292c4135 <unknown>
#14 0x55db2928b80f <unknown>
#15 0x55db292e84c8 <unknown>
#16 0x55db292e86a2 <unknown>
#17 0x55db292fadc3 <unknown>
#18 0x7f759b49caa4 <unknown>
#19 0x7f759b529c3c <unknown>
================== 12 failed, 7 passed in 1525.96s (0:25:25) ===================
--------------------------------------------
Test Run Finished: 2025-09-19 04:12:00
Duration: 1528 seconds
Status: FAILURE
Exit Code: 1
============================================
