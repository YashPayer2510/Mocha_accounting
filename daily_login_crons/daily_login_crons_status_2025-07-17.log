========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-07-17 04:10:28
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.5/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.5', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'rerunfailures': '15.1', 'Faker': '37.4.2', 'xdist': '3.8.0', 'html': '4.1.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: rerunfailures-15.1, Faker-37.4.2, xdist-3.8.0, html-4.1.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d8f8de2d5acca4b8f4a6fed8977664b1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
>       login_page.enter_username(username)

tests/test_login.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:28: in enter_username
    self.actions.wait_for_element(self.login_username)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b1099940>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55fbf2f87af6 \\u003Cunknown>\\n#18 0x7f9d4f69caa4 \\u003Cunknown>\\n#19 0x7f9d4f729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55fbf2f887da <unknown>
E       #1 0x55fbf2a2d2e0 <unknown>
E       #2 0x55fbf2a33f28 <unknown>
E       #3 0x55fbf2a36a6a <unknown>
E       #4 0x55fbf2acb75e <unknown>
E       #5 0x55fbf2aa48b2 <unknown>
E       #6 0x55fbf2aca71c <unknown>
E       #7 0x55fbf2aa4683 <unknown>
E       #8 0x55fbf2a70b5b <unknown>
E       #9 0x55fbf2a71f31 <unknown>
E       #10 0x55fbf2f4d72b <unknown>
E       #11 0x55fbf2f51534 <unknown>
E       #12 0x55fbf2f34229 <unknown>
E       #13 0x55fbf2f520d8 <unknown>
E       #14 0x55fbf2f1861f <unknown>
E       #15 0x55fbf2f75dd8 <unknown>
E       #16 0x55fbf2f75fb6 <unknown>
E       #17 0x55fbf2f87af6 <unknown>
E       #18 0x7f9d4f69caa4 <unknown>
E       #19 0x7f9d4f729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:10:30,968 - INFO - Test data loaded successfully.
2025-07-17 04:10:30,969 - INFO - Starting test with Chrome browser
2025-07-17 04:10:30,969 - INFO - ====== WebDriver manager ======
2025-07-17 04:10:32,285 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:10:32,320 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:10:32,342 - INFO - There is no [linux64] chromedriver "138.0.7204.157" for browser google-chrome "138.0.7204" in cache
2025-07-17 04:10:32,342 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:10:32,413 - INFO - WebDriver version 138.0.7204.157 selected
2025-07-17 04:10:32,417 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.157/linux64/chromedriver-linux64.zip
2025-07-17 04:10:32,417 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.157/linux64/chromedriver-linux64.zip
2025-07-17 04:10:32,456 - INFO - Driver downloading response is 200
2025-07-17 04:10:32,526 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:10:32,660 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157]
2025-07-17 04:12:37,327 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "138.0.7204.157" for browser google-chrome "138.0.7204" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 138.0.7204.157 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.157/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.157/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-17 04:12:37,328 - INFO - Starting the test case for valid credentials
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:12:37,439 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="baca9f6139ae63e60e88bfdad721480c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b10ccf50>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55e5209e1af6 \\u003Cunknown>\\n#18 0x7efe22c9caa4 \\u003Cunknown>\\n#19 0x7efe22d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55e5209e27da <unknown>
E       #1 0x55e5204872e0 <unknown>
E       #2 0x55e52048df28 <unknown>
E       #3 0x55e520490a6a <unknown>
E       #4 0x55e52052575e <unknown>
E       #5 0x55e5204fe8b2 <unknown>
E       #6 0x55e52052471c <unknown>
E       #7 0x55e5204fe683 <unknown>
E       #8 0x55e5204cab5b <unknown>
E       #9 0x55e5204cbf31 <unknown>
E       #10 0x55e5209a772b <unknown>
E       #11 0x55e5209ab534 <unknown>
E       #12 0x55e52098e229 <unknown>
E       #13 0x55e5209ac0d8 <unknown>
E       #14 0x55e52097261f <unknown>
E       #15 0x55e5209cfdd8 <unknown>
E       #16 0x55e5209cffb6 <unknown>
E       #17 0x55e5209e1af6 <unknown>
E       #18 0x7efe22c9caa4 <unknown>
E       #19 0x7efe22d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:12:37,658 - INFO - Starting test with Chrome browser
2025-07-17 04:12:37,658 - INFO - ====== WebDriver manager ======
2025-07-17 04:12:37,766 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:37,791 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:37,825 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:12:39,483 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-17 04:12:39,484 - INFO - Starting the test case for valid credentials
2025-07-17 04:12:39,785 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:12:40,473 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="70d1c5d6c261deccaea112d64a493085")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b116c410>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x5586cd862af6 \\u003Cunknown>\\n#18 0x7f10a329caa4 \\u003Cunknown>\\n#19 0x7f10a3329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x5586cd8637da <unknown>
E       #1 0x5586cd3082e0 <unknown>
E       #2 0x5586cd30ef28 <unknown>
E       #3 0x5586cd311a6a <unknown>
E       #4 0x5586cd3a675e <unknown>
E       #5 0x5586cd37f8b2 <unknown>
E       #6 0x5586cd3a571c <unknown>
E       #7 0x5586cd37f683 <unknown>
E       #8 0x5586cd34bb5b <unknown>
E       #9 0x5586cd34cf31 <unknown>
E       #10 0x5586cd82872b <unknown>
E       #11 0x5586cd82c534 <unknown>
E       #12 0x5586cd80f229 <unknown>
E       #13 0x5586cd82d0d8 <unknown>
E       #14 0x5586cd7f361f <unknown>
E       #15 0x5586cd850dd8 <unknown>
E       #16 0x5586cd850fb6 <unknown>
E       #17 0x5586cd862af6 <unknown>
E       #18 0x7f10a329caa4 <unknown>
E       #19 0x7f10a3329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:12:40,574 - INFO - Starting test with Chrome browser
2025-07-17 04:12:40,575 - INFO - ====== WebDriver manager ======
2025-07-17 04:12:40,685 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:40,709 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:40,731 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:12:42,568 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-17 04:12:42,569 - INFO - Starting the test case for valid credentials
2025-07-17 04:12:42,793 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:12:43,447 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="92c97f0201fe120b4efdfb716c65d780")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
>       login_page.enter_password(password)

tests/test_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b1108050>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x562824e78af6 \\u003Cunknown>\\n#18 0x7f7a0c89caa4 \\u003Cunknown>\\n#19 0x7f7a0c929c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x562824e797da <unknown>
E       #1 0x56282491e2e0 <unknown>
E       #2 0x562824924f28 <unknown>
E       #3 0x562824927a6a <unknown>
E       #4 0x5628249bc75e <unknown>
E       #5 0x5628249958b2 <unknown>
E       #6 0x5628249bb71c <unknown>
E       #7 0x562824995683 <unknown>
E       #8 0x562824961b5b <unknown>
E       #9 0x562824962f31 <unknown>
E       #10 0x562824e3e72b <unknown>
E       #11 0x562824e42534 <unknown>
E       #12 0x562824e25229 <unknown>
E       #13 0x562824e430d8 <unknown>
E       #14 0x562824e0961f <unknown>
E       #15 0x562824e66dd8 <unknown>
E       #16 0x562824e66fb6 <unknown>
E       #17 0x562824e78af6 <unknown>
E       #18 0x7f7a0c89caa4 <unknown>
E       #19 0x7f7a0c929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:12:43,529 - INFO - Starting test with Chrome browser
2025-07-17 04:12:43,529 - INFO - ====== WebDriver manager ======
2025-07-17 04:12:43,638 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:43,660 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:43,682 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:12:45,437 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-07-17 04:12:45,438 - INFO - Starting the test case for valid credentials
2025-07-17 04:12:45,692 - INFO - User enters the email-id
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:12:46,338 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="753ab6f6f7f9fa955b72723963601035")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b1108d60>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x559716cd9af6 \\u003Cunknown>\\n#18 0x7f51ebe9caa4 \\u003Cunknown>\\n#19 0x7f51ebf29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x559716cda7da <unknown>
E       #1 0x55971677f2e0 <unknown>
E       #2 0x559716785f28 <unknown>
E       #3 0x559716788a6a <unknown>
E       #4 0x55971681d75e <unknown>
E       #5 0x5597167f68b2 <unknown>
E       #6 0x55971681c71c <unknown>
E       #7 0x5597167f6683 <unknown>
E       #8 0x5597167c2b5b <unknown>
E       #9 0x5597167c3f31 <unknown>
E       #10 0x559716c9f72b <unknown>
E       #11 0x559716ca3534 <unknown>
E       #12 0x559716c86229 <unknown>
E       #13 0x559716ca40d8 <unknown>
E       #14 0x559716c6a61f <unknown>
E       #15 0x559716cc7dd8 <unknown>
E       #16 0x559716cc7fb6 <unknown>
E       #17 0x559716cd9af6 <unknown>
E       #18 0x7f51ebe9caa4 <unknown>
E       #19 0x7f51ebf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:12:46,437 - INFO - Starting test with Chrome browser
2025-07-17 04:12:46,437 - INFO - ====== WebDriver manager ======
2025-07-17 04:12:46,546 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:46,573 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:46,604 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:12:48,385 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:12:49,184 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3cf0bd75c70eb4f56784d76f682d1d35")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b10c05f0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55b9d4405af6 \\u003Cunknown>\\n#18 0x7f60ad69caa4 \\u003Cunknown>\\n#19 0x7f60ad729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55b9d44067da <unknown>
E       #1 0x55b9d3eab2e0 <unknown>
E       #2 0x55b9d3eb1f28 <unknown>
E       #3 0x55b9d3eb4a6a <unknown>
E       #4 0x55b9d3f4975e <unknown>
E       #5 0x55b9d3f228b2 <unknown>
E       #6 0x55b9d3f4871c <unknown>
E       #7 0x55b9d3f22683 <unknown>
E       #8 0x55b9d3eeeb5b <unknown>
E       #9 0x55b9d3eeff31 <unknown>
E       #10 0x55b9d43cb72b <unknown>
E       #11 0x55b9d43cf534 <unknown>
E       #12 0x55b9d43b2229 <unknown>
E       #13 0x55b9d43d00d8 <unknown>
E       #14 0x55b9d439661f <unknown>
E       #15 0x55b9d43f3dd8 <unknown>
E       #16 0x55b9d43f3fb6 <unknown>
E       #17 0x55b9d4405af6 <unknown>
E       #18 0x7f60ad69caa4 <unknown>
E       #19 0x7f60ad729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:12:49,270 - INFO - Starting test with Chrome browser
2025-07-17 04:12:49,270 - INFO - ====== WebDriver manager ======
2025-07-17 04:12:49,379 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:49,402 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:49,425 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:12:51,185 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:12:52,002 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bf93c7409b6e040eff5e5274db2ca5a6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b1215590>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55cb77366af6 \\u003Cunknown>\\n#18 0x7f34d4a9caa4 \\u003Cunknown>\\n#19 0x7f34d4b29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55cb773677da <unknown>
E       #1 0x55cb76e0c2e0 <unknown>
E       #2 0x55cb76e12f28 <unknown>
E       #3 0x55cb76e15a6a <unknown>
E       #4 0x55cb76eaa75e <unknown>
E       #5 0x55cb76e838b2 <unknown>
E       #6 0x55cb76ea971c <unknown>
E       #7 0x55cb76e83683 <unknown>
E       #8 0x55cb76e4fb5b <unknown>
E       #9 0x55cb76e50f31 <unknown>
E       #10 0x55cb7732c72b <unknown>
E       #11 0x55cb77330534 <unknown>
E       #12 0x55cb77313229 <unknown>
E       #13 0x55cb773310d8 <unknown>
E       #14 0x55cb772f761f <unknown>
E       #15 0x55cb77354dd8 <unknown>
E       #16 0x55cb77354fb6 <unknown>
E       #17 0x55cb77366af6 <unknown>
E       #18 0x7f34d4a9caa4 <unknown>
E       #19 0x7f34d4b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:12:52,085 - INFO - Starting test with Chrome browser
2025-07-17 04:12:52,085 - INFO - ====== WebDriver manager ======
2025-07-17 04:12:52,193 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:52,215 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:52,237 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:12:54,063 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:12:54,892 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="fd9fc2a35f3def2ae0d4317fa3f5b0db")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:45: in click_loginbutton
    self.actions.click(self.login_button)
actions/actions.py:22: in click
    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate
    element = visibility_of(target)(driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate
    return _element_if_visible(element)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b1216470>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x563037249af6 \\u003Cunknown>\\n#18 0x7f07d3e9caa4 \\u003Cunknown>\\n#19 0x7f07d3f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x56303724a7da <unknown>
E       #1 0x563036cef2e0 <unknown>
E       #2 0x563036cf5f28 <unknown>
E       #3 0x563036cf8a6a <unknown>
E       #4 0x563036d8d75e <unknown>
E       #5 0x563036d668b2 <unknown>
E       #6 0x563036d8c71c <unknown>
E       #7 0x563036d66683 <unknown>
E       #8 0x563036d32b5b <unknown>
E       #9 0x563036d33f31 <unknown>
E       #10 0x56303720f72b <unknown>
E       #11 0x563037213534 <unknown>
E       #12 0x5630371f6229 <unknown>
E       #13 0x5630372140d8 <unknown>
E       #14 0x5630371da61f <unknown>
E       #15 0x563037237dd8 <unknown>
E       #16 0x563037237fb6 <unknown>
E       #17 0x563037249af6 <unknown>
E       #18 0x7f07d3e9caa4 <unknown>
E       #19 0x7f07d3f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:12:54,995 - INFO - Starting test with Chrome browser
2025-07-17 04:12:54,995 - INFO - ====== WebDriver manager ======
2025-07-17 04:12:55,104 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:55,128 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:55,151 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:12:56,877 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:12:57,681 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c128080affbe23b4e6c79c43fef9640e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b112cd50>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x556ba4e0eaf6 \\u003Cunknown>\\n#18 0x7f2465e9caa4 \\u003Cunknown>\\n#19 0x7f2465f29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x556ba4e0f7da <unknown>
E       #1 0x556ba48b42e0 <unknown>
E       #2 0x556ba48baf28 <unknown>
E       #3 0x556ba48bda6a <unknown>
E       #4 0x556ba495275e <unknown>
E       #5 0x556ba492b8b2 <unknown>
E       #6 0x556ba495171c <unknown>
E       #7 0x556ba492b683 <unknown>
E       #8 0x556ba48f7b5b <unknown>
E       #9 0x556ba48f8f31 <unknown>
E       #10 0x556ba4dd472b <unknown>
E       #11 0x556ba4dd8534 <unknown>
E       #12 0x556ba4dbb229 <unknown>
E       #13 0x556ba4dd90d8 <unknown>
E       #14 0x556ba4d9f61f <unknown>
E       #15 0x556ba4dfcdd8 <unknown>
E       #16 0x556ba4dfcfb6 <unknown>
E       #17 0x556ba4e0eaf6 <unknown>
E       #18 0x7f2465e9caa4 <unknown>
E       #19 0x7f2465f29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:12:57,781 - INFO - Starting test with Chrome browser
2025-07-17 04:12:57,781 - INFO - ====== WebDriver manager ======
2025-07-17 04:12:57,891 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:57,917 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:12:57,946 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:12:59,801 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:13:00,784 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7ee16e97b829ee5a8695f77ddb4513f1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b112e050>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x560fbbc0caf6 \\u003Cunknown>\\n#18 0x7f102429caa4 \\u003Cunknown>\\n#19 0x7f1024329c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x560fbbc0d7da <unknown>
E       #1 0x560fbb6b22e0 <unknown>
E       #2 0x560fbb6b8f28 <unknown>
E       #3 0x560fbb6bba6a <unknown>
E       #4 0x560fbb75075e <unknown>
E       #5 0x560fbb7298b2 <unknown>
E       #6 0x560fbb74f71c <unknown>
E       #7 0x560fbb729683 <unknown>
E       #8 0x560fbb6f5b5b <unknown>
E       #9 0x560fbb6f6f31 <unknown>
E       #10 0x560fbbbd272b <unknown>
E       #11 0x560fbbbd6534 <unknown>
E       #12 0x560fbbbb9229 <unknown>
E       #13 0x560fbbbd70d8 <unknown>
E       #14 0x560fbbb9d61f <unknown>
E       #15 0x560fbbbfadd8 <unknown>
E       #16 0x560fbbbfafb6 <unknown>
E       #17 0x560fbbc0caf6 <unknown>
E       #18 0x7f102429caa4 <unknown>
E       #19 0x7f1024329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:13:00,885 - INFO - Starting test with Chrome browser
2025-07-17 04:13:00,885 - INFO - ====== WebDriver manager ======
2025-07-17 04:13:00,997 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:01,020 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:01,042 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:13:02,900 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:13:03,793 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="10553d520690a4b3b6949adad602eec1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b12245f0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x56376dfc3af6 \\u003Cunknown>\\n#18 0x7f730709caa4 \\u003Cunknown>\\n#19 0x7f7307129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x56376dfc47da <unknown>
E       #1 0x56376da692e0 <unknown>
E       #2 0x56376da6ff28 <unknown>
E       #3 0x56376da72a6a <unknown>
E       #4 0x56376db0775e <unknown>
E       #5 0x56376dae08b2 <unknown>
E       #6 0x56376db0671c <unknown>
E       #7 0x56376dae0683 <unknown>
E       #8 0x56376daacb5b <unknown>
E       #9 0x56376daadf31 <unknown>
E       #10 0x56376df8972b <unknown>
E       #11 0x56376df8d534 <unknown>
E       #12 0x56376df70229 <unknown>
E       #13 0x56376df8e0d8 <unknown>
E       #14 0x56376df5461f <unknown>
E       #15 0x56376dfb1dd8 <unknown>
E       #16 0x56376dfb1fb6 <unknown>
E       #17 0x56376dfc3af6 <unknown>
E       #18 0x7f730709caa4 <unknown>
E       #19 0x7f7307129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:13:03,876 - INFO - Starting test with Chrome browser
2025-07-17 04:13:03,877 - INFO - ====== WebDriver manager ======
2025-07-17 04:13:03,986 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:04,009 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:04,032 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:13:04,796 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:13:06,507 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bbfa873030c43b5b412bab34d1789a58")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.enter_password(password)

tests/test_login.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:36: in enter_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b10c7f20>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55828e59caf6 \\u003Cunknown>\\n#18 0x7f1a4149caa4 \\u003Cunknown>\\n#19 0x7f1a41529c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55828e59d7da <unknown>
E       #1 0x55828e0422e0 <unknown>
E       #2 0x55828e048f28 <unknown>
E       #3 0x55828e04ba6a <unknown>
E       #4 0x55828e0e075e <unknown>
E       #5 0x55828e0b98b2 <unknown>
E       #6 0x55828e0df71c <unknown>
E       #7 0x55828e0b9683 <unknown>
E       #8 0x55828e085b5b <unknown>
E       #9 0x55828e086f31 <unknown>
E       #10 0x55828e56272b <unknown>
E       #11 0x55828e566534 <unknown>
E       #12 0x55828e549229 <unknown>
E       #13 0x55828e5670d8 <unknown>
E       #14 0x55828e52d61f <unknown>
E       #15 0x55828e58add8 <unknown>
E       #16 0x55828e58afb6 <unknown>
E       #17 0x55828e59caf6 <unknown>
E       #18 0x7f1a4149caa4 <unknown>
E       #19 0x7f1a41529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:13:06,594 - INFO - Starting test with Chrome browser
2025-07-17 04:13:06,594 - INFO - ====== WebDriver manager ======
2025-07-17 04:13:06,704 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:06,728 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:06,751 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:13:08,529 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:13:09,452 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b49f2883486e36608f3d4913b310b32a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
>       login_page.click_password()

tests/test_login.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:40: in click_password
    self.actions.wait_for_element(self.login_password)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b1111fd0>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55604ceceaf6 \\u003Cunknown>\\n#18 0x7f049569caa4 \\u003Cunknown>\\n#19 0x7f0495729c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55604cecf7da <unknown>
E       #1 0x55604c9742e0 <unknown>
E       #2 0x55604c97af28 <unknown>
E       #3 0x55604c97da6a <unknown>
E       #4 0x55604ca1275e <unknown>
E       #5 0x55604c9eb8b2 <unknown>
E       #6 0x55604ca1171c <unknown>
E       #7 0x55604c9eb683 <unknown>
E       #8 0x55604c9b7b5b <unknown>
E       #9 0x55604c9b8f31 <unknown>
E       #10 0x55604ce9472b <unknown>
E       #11 0x55604ce98534 <unknown>
E       #12 0x55604ce7b229 <unknown>
E       #13 0x55604ce990d8 <unknown>
E       #14 0x55604ce5f61f <unknown>
E       #15 0x55604cebcdd8 <unknown>
E       #16 0x55604cebcfb6 <unknown>
E       #17 0x55604ceceaf6 <unknown>
E       #18 0x7f049569caa4 <unknown>
E       #19 0x7f0495729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:13:12,809 - INFO - Starting test with Chrome browser
2025-07-17 04:13:12,809 - INFO - ====== WebDriver manager ======
2025-07-17 04:13:12,920 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:12,943 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:12,965 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:13:14,488 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:13:15,445 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="53299ca9b848ceaeeaf7d8ee9a5049d4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b107ab10>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x55adb62f4af6 \\u003Cunknown>\\n#18 0x7f159bc9caa4 \\u003Cunknown>\\n#19 0x7f159bd29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x55adb62f57da <unknown>
E       #1 0x55adb5d9a2e0 <unknown>
E       #2 0x55adb5da0f28 <unknown>
E       #3 0x55adb5da3a6a <unknown>
E       #4 0x55adb5e3875e <unknown>
E       #5 0x55adb5e118b2 <unknown>
E       #6 0x55adb5e3771c <unknown>
E       #7 0x55adb5e11683 <unknown>
E       #8 0x55adb5dddb5b <unknown>
E       #9 0x55adb5ddef31 <unknown>
E       #10 0x55adb62ba72b <unknown>
E       #11 0x55adb62be534 <unknown>
E       #12 0x55adb62a1229 <unknown>
E       #13 0x55adb62bf0d8 <unknown>
E       #14 0x55adb628561f <unknown>
E       #15 0x55adb62e2dd8 <unknown>
E       #16 0x55adb62e2fb6 <unknown>
E       #17 0x55adb62f4af6 <unknown>
E       #18 0x7f159bc9caa4 <unknown>
E       #19 0x7f159bd29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:13:17,736 - INFO - Starting test with Chrome browser
2025-07-17 04:13:17,737 - INFO - ====== WebDriver manager ======
2025-07-17 04:13:17,846 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:17,869 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:17,891 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:13:19,624 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:13:20,274 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3e89c0000ff02292e1eb506d1b66d9d4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b335d700>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x56297c5edaf6 \\u003Cunknown>\\n#18 0x7fb6dca9caa4 \\u003Cunknown>\\n#19 0x7fb6dcb29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x56297c5ee7da <unknown>
E       #1 0x56297c0932e0 <unknown>
E       #2 0x56297c099f28 <unknown>
E       #3 0x56297c09ca6a <unknown>
E       #4 0x56297c13175e <unknown>
E       #5 0x56297c10a8b2 <unknown>
E       #6 0x56297c13071c <unknown>
E       #7 0x56297c10a683 <unknown>
E       #8 0x56297c0d6b5b <unknown>
E       #9 0x56297c0d7f31 <unknown>
E       #10 0x56297c5b372b <unknown>
E       #11 0x56297c5b7534 <unknown>
E       #12 0x56297c59a229 <unknown>
E       #13 0x56297c5b80d8 <unknown>
E       #14 0x56297c57e61f <unknown>
E       #15 0x56297c5dbdd8 <unknown>
E       #16 0x56297c5dbfb6 <unknown>
E       #17 0x56297c5edaf6 <unknown>
E       #18 0x7fb6dca9caa4 <unknown>
E       #19 0x7fb6dcb29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:13:22,423 - INFO - Starting test with Chrome browser
2025-07-17 04:13:22,423 - INFO - ====== WebDriver manager ======
2025-07-17 04:13:22,532 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:22,554 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:22,576 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:13:24,371 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:13:24,982 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="15c9f469a4f713dea5432b75a276c86c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
>       login_page.disabled_click_login_button()

tests/test_login.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:48: in disabled_click_login_button
    self.actions.wait_for_element(self.disabled_login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:137: in until
    value = method(self._driver)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate
    return _element_if_visible(driver.find_element(*locator))
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible
    return element if element.is_displayed() == visibility else False
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed
    return self.parent.execute_script(f"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);", self)
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script
    return self.execute(command, {"script": script, "args": converted_args})["value"]
/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f98b335df40>
response = {'status': 500, 'value': '{"value":{"error":"javascript error","message":"javascript error: Cannot read properties of ...\\n#17 0x559397a68af6 \\u003Cunknown>\\n#18 0x7f8f6609caa4 \\u003Cunknown>\\n#19 0x7f8f66129c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
E         (Session info: chrome=138.0.7204.100)
E       Stacktrace:
E       #0 0x559397a697da <unknown>
E       #1 0x55939750e2e0 <unknown>
E       #2 0x559397514f28 <unknown>
E       #3 0x559397517a6a <unknown>
E       #4 0x5593975ac75e <unknown>
E       #5 0x5593975858b2 <unknown>
E       #6 0x5593975ab71c <unknown>
E       #7 0x559397585683 <unknown>
E       #8 0x559397551b5b <unknown>
E       #9 0x559397552f31 <unknown>
E       #10 0x559397a2e72b <unknown>
E       #11 0x559397a32534 <unknown>
E       #12 0x559397a15229 <unknown>
E       #13 0x559397a330d8 <unknown>
E       #14 0x5593979f961f <unknown>
E       #15 0x559397a56dd8 <unknown>
E       #16 0x559397a56fb6 <unknown>
E       #17 0x559397a68af6 <unknown>
E       #18 0x7f8f6609caa4 <unknown>
E       #19 0x7f8f66129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException
---------------------------- Captured stderr setup -----------------------------
2025-07-17 04:13:25,065 - INFO - Starting test with Chrome browser
2025-07-17 04:13:25,066 - INFO - ====== WebDriver manager ======
2025-07-17 04:13:25,173 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:25,196 - INFO - Get LATEST chromedriver version for google-chrome
2025-07-17 04:13:25,217 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
2025-07-17 04:13:27,331 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/138.0.7204.157/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-07-17 04:13:27,767 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250717_041030/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55fbf2f887da <unknown>
#1 0x55fbf2a2d2e0 <unknown>
#2 0x55fbf2a33f28 <unknown>
#3 0x55fbf2a36a6a <unknown>
#4 0x55fbf2acb75e <unknown>
#5 0x55fbf2aa48b2 <unknown>
#6 0x55fbf2aca71c <unknown>
#7 0x55fbf2aa4683 <unknown>
#8 0x55fbf2a70b5b <unknown>
#9 0x55fbf2a71f31 <unknown>
#10 0x55fbf2f4d72b <unknown>
#11 0x55fbf2f51534 <unknown>
#12 0x55fbf2f34229 <unknown>
#13 0x55fbf2f520d8 <unknown>
#14 0x55fbf2f1861f <unknown>
#15 0x55fbf2f75dd8 <unknown>
#16 0x55fbf2f75fb6 <unknown>
#17 0x55fbf2f87af6 <unknown>
#18 0x7f9d4f69caa4 <unknown>
#19 0x7f9d4f729c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55e5209e27da <unknown>
#1 0x55e5204872e0 <unknown>
#2 0x55e52048df28 <unknown>
#3 0x55e520490a6a <unknown>
#4 0x55e52052575e <unknown>
#5 0x55e5204fe8b2 <unknown>
#6 0x55e52052471c <unknown>
#7 0x55e5204fe683 <unknown>
#8 0x55e5204cab5b <unknown>
#9 0x55e5204cbf31 <unknown>
#10 0x55e5209a772b <unknown>
#11 0x55e5209ab534 <unknown>
#12 0x55e52098e229 <unknown>
#13 0x55e5209ac0d8 <unknown>
#14 0x55e52097261f <unknown>
#15 0x55e5209cfdd8 <unknown>
#16 0x55e5209cffb6 <unknown>
#17 0x55e5209e1af6 <unknown>
#18 0x7efe22c9caa4 <unknown>
#19 0x7efe22d29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x5586cd8637da <unknown>
#1 0x5586cd3082e0 <unknown>
#2 0x5586cd30ef28 <unknown>
#3 0x5586cd311a6a <unknown>
#4 0x5586cd3a675e <unknown>
#5 0x5586cd37f8b2 <unknown>
#6 0x5586cd3a571c <unknown>
#7 0x5586cd37f683 <unknown>
#8 0x5586cd34bb5b <unknown>
#9 0x5586cd34cf31 <unknown>
#10 0x5586cd82872b <unknown>
#11 0x5586cd82c534 <unknown>
#12 0x5586cd80f229 <unknown>
#13 0x5586cd82d0d8 <unknown>
#14 0x5586cd7f361f <unknown>
#15 0x5586cd850dd8 <unknown>
#16 0x5586cd850fb6 <unknown>
#17 0x5586cd862af6 <unknown>
#18 0x7f10a329caa4 <unknown>
#19 0x7f10a3329c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x562824e797da <unknown>
#1 0x56282491e2e0 <unknown>
#2 0x562824924f28 <unknown>
#3 0x562824927a6a <unknown>
#4 0x5628249bc75e <unknown>
#5 0x5628249958b2 <unknown>
#6 0x5628249bb71c <unknown>
#7 0x562824995683 <unknown>
#8 0x562824961b5b <unknown>
#9 0x562824962f31 <unknown>
#10 0x562824e3e72b <unknown>
#11 0x562824e42534 <unknown>
#12 0x562824e25229 <unknown>
#13 0x562824e430d8 <unknown>
#14 0x562824e0961f <unknown>
#15 0x562824e66dd8 <unknown>
#16 0x562824e66fb6 <unknown>
#17 0x562824e78af6 <unknown>
#18 0x7f7a0c89caa4 <unknown>
#19 0x7f7a0c929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x559716cda7da <unknown>
#1 0x55971677f2e0 <unknown>
#2 0x559716785f28 <unknown>
#3 0x559716788a6a <unknown>
#4 0x55971681d75e <unknown>
#5 0x5597167f68b2 <unknown>
#6 0x55971681c71c <unknown>
#7 0x5597167f6683 <unknown>
#8 0x5597167c2b5b <unknown>
#9 0x5597167c3f31 <unknown>
#10 0x559716c9f72b <unknown>
#11 0x559716ca3534 <unknown>
#12 0x559716c86229 <unknown>
#13 0x559716ca40d8 <unknown>
#14 0x559716c6a61f <unknown>
#15 0x559716cc7dd8 <unknown>
#16 0x559716cc7fb6 <unknown>
#17 0x559716cd9af6 <unknown>
#18 0x7f51ebe9caa4 <unknown>
#19 0x7f51ebf29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55b9d44067da <unknown>
#1 0x55b9d3eab2e0 <unknown>
#2 0x55b9d3eb1f28 <unknown>
#3 0x55b9d3eb4a6a <unknown>
#4 0x55b9d3f4975e <unknown>
#5 0x55b9d3f228b2 <unknown>
#6 0x55b9d3f4871c <unknown>
#7 0x55b9d3f22683 <unknown>
#8 0x55b9d3eeeb5b <unknown>
#9 0x55b9d3eeff31 <unknown>
#10 0x55b9d43cb72b <unknown>
#11 0x55b9d43cf534 <unknown>
#12 0x55b9d43b2229 <unknown>
#13 0x55b9d43d00d8 <unknown>
#14 0x55b9d439661f <unknown>
#15 0x55b9d43f3dd8 <unknown>
#16 0x55b9d43f3fb6 <unknown>
#17 0x55b9d4405af6 <unknown>
#18 0x7f60ad69caa4 <unknown>
#19 0x7f60ad729c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55cb773677da <unknown>
#1 0x55cb76e0c2e0 <unknown>
#2 0x55cb76e12f28 <unknown>
#3 0x55cb76e15a6a <unknown>
#4 0x55cb76eaa75e <unknown>
#5 0x55cb76e838b2 <unknown>
#6 0x55cb76ea971c <unknown>
#7 0x55cb76e83683 <unknown>
#8 0x55cb76e4fb5b <unknown>
#9 0x55cb76e50f31 <unknown>
#10 0x55cb7732c72b <unknown>
#11 0x55cb77330534 <unknown>
#12 0x55cb77313229 <unknown>
#13 0x55cb773310d8 <unknown>
#14 0x55cb772f761f <unknown>
#15 0x55cb77354dd8 <unknown>
#16 0x55cb77354fb6 <unknown>
#17 0x55cb77366af6 <unknown>
#18 0x7f34d4a9caa4 <unknown>
#19 0x7f34d4b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x56303724a7da <unknown>
#1 0x563036cef2e0 <unknown>
#2 0x563036cf5f28 <unknown>
#3 0x563036cf8a6a <unknown>
#4 0x563036d8d75e <unknown>
#5 0x563036d668b2 <unknown>
#6 0x563036d8c71c <unknown>
#7 0x563036d66683 <unknown>
#8 0x563036d32b5b <unknown>
#9 0x563036d33f31 <unknown>
#10 0x56303720f72b <unknown>
#11 0x563037213534 <unknown>
#12 0x5630371f6229 <unknown>
#13 0x5630372140d8 <unknown>
#14 0x5630371da61f <unknown>
#15 0x563037237dd8 <unknown>
#16 0x563037237fb6 <unknown>
#17 0x563037249af6 <unknown>
#18 0x7f07d3e9caa4 <unknown>
#19 0x7f07d3f29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x556ba4e0f7da <unknown>
#1 0x556ba48b42e0 <unknown>
#2 0x556ba48baf28 <unknown>
#3 0x556ba48bda6a <unknown>
#4 0x556ba495275e <unknown>
#5 0x556ba492b8b2 <unknown>
#6 0x556ba495171c <unknown>
#7 0x556ba492b683 <unknown>
#8 0x556ba48f7b5b <unknown>
#9 0x556ba48f8f31 <unknown>
#10 0x556ba4dd472b <unknown>
#11 0x556ba4dd8534 <unknown>
#12 0x556ba4dbb229 <unknown>
#13 0x556ba4dd90d8 <unknown>
#14 0x556ba4d9f61f <unknown>
#15 0x556ba4dfcdd8 <unknown>
#16 0x556ba4dfcfb6 <unknown>
#17 0x556ba4e0eaf6 <unknown>
#18 0x7f2465e9caa4 <unknown>
#19 0x7f2465f29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x560fbbc0d7da <unknown>
#1 0x560fbb6b22e0 <unknown>
#2 0x560fbb6b8f28 <unknown>
#3 0x560fbb6bba6a <unknown>
#4 0x560fbb75075e <unknown>
#5 0x560fbb7298b2 <unknown>
#6 0x560fbb74f71c <unknown>
#7 0x560fbb729683 <unknown>
#8 0x560fbb6f5b5b <unknown>
#9 0x560fbb6f6f31 <unknown>
#10 0x560fbbbd272b <unknown>
#11 0x560fbbbd6534 <unknown>
#12 0x560fbbbb9229 <unknown>
#13 0x560fbbbd70d8 <unknown>
#14 0x560fbbb9d61f <unknown>
#15 0x560fbbbfadd8 <unknown>
#16 0x560fbbbfafb6 <unknown>
#17 0x560fbbc0caf6 <unknown>
#18 0x7f102429caa4 <unknown>
#19 0x7f1024329c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x56376dfc47da <unknown>
#1 0x56376da692e0 <unknown>
#2 0x56376da6ff28 <unknown>
#3 0x56376da72a6a <unknown>
#4 0x56376db0775e <unknown>
#5 0x56376dae08b2 <unknown>
#6 0x56376db0671c <unknown>
#7 0x56376dae0683 <unknown>
#8 0x56376daacb5b <unknown>
#9 0x56376daadf31 <unknown>
#10 0x56376df8972b <unknown>
#11 0x56376df8d534 <unknown>
#12 0x56376df70229 <unknown>
#13 0x56376df8e0d8 <unknown>
#14 0x56376df5461f <unknown>
#15 0x56376dfb1dd8 <unknown>
#16 0x56376dfb1fb6 <unknown>
#17 0x56376dfc3af6 <unknown>
#18 0x7f730709caa4 <unknown>
#19 0x7f7307129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55828e59d7da <unknown>
#1 0x55828e0422e0 <unknown>
#2 0x55828e048f28 <unknown>
#3 0x55828e04ba6a <unknown>
#4 0x55828e0e075e <unknown>
#5 0x55828e0b98b2 <unknown>
#6 0x55828e0df71c <unknown>
#7 0x55828e0b9683 <unknown>
#8 0x55828e085b5b <unknown>
#9 0x55828e086f31 <unknown>
#10 0x55828e56272b <unknown>
#11 0x55828e566534 <unknown>
#12 0x55828e549229 <unknown>
#13 0x55828e5670d8 <unknown>
#14 0x55828e52d61f <unknown>
#15 0x55828e58add8 <unknown>
#16 0x55828e58afb6 <unknown>
#17 0x55828e59caf6 <unknown>
#18 0x7f1a4149caa4 <unknown>
#19 0x7f1a41529c3c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55604cecf7da <unknown>
#1 0x55604c9742e0 <unknown>
#2 0x55604c97af28 <unknown>
#3 0x55604c97da6a <unknown>
#4 0x55604ca1275e <unknown>
#5 0x55604c9eb8b2 <unknown>
#6 0x55604ca1171c <unknown>
#7 0x55604c9eb683 <unknown>
#8 0x55604c9b7b5b <unknown>
#9 0x55604c9b8f31 <unknown>
#10 0x55604ce9472b <unknown>
#11 0x55604ce98534 <unknown>
#12 0x55604ce7b229 <unknown>
#13 0x55604ce990d8 <unknown>
#14 0x55604ce5f61f <unknown>
#15 0x55604cebcdd8 <unknown>
#16 0x55604cebcfb6 <unknown>
#17 0x55604ceceaf6 <unknown>
#18 0x7f049569caa4 <unknown>
#19 0x7f0495729c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x55adb62f57da <unknown>
#1 0x55adb5d9a2e0 <unknown>
#2 0x55adb5da0f28 <unknown>
#3 0x55adb5da3a6a <unknown>
#4 0x55adb5e3875e <unknown>
#5 0x55adb5e118b2 <unknown>
#6 0x55adb5e3771c <unknown>
#7 0x55adb5e11683 <unknown>
#8 0x55adb5dddb5b <unknown>
#9 0x55adb5ddef31 <unknown>
#10 0x55adb62ba72b <unknown>
#11 0x55adb62be534 <unknown>
#12 0x55adb62a1229 <unknown>
#13 0x55adb62bf0d8 <unknown>
#14 0x55adb628561f <unknown>
#15 0x55adb62e2dd8 <unknown>
#16 0x55adb62e2fb6 <unknown>
#17 0x55adb62f4af6 <unknown>
#18 0x7f159bc9caa4 <unknown>
#19 0x7f159bd29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x56297c5ee7da <unknown>
#1 0x56297c0932e0 <unknown>
#2 0x56297c099f28 <unknown>
#3 0x56297c09ca6a <unknown>
#4 0x56297c13175e <unknown>
#5 0x56297c10a8b2 <unknown>
#6 0x56297c13071c <unknown>
#7 0x56297c10a683 <unknown>
#8 0x56297c0d6b5b <unknown>
#9 0x56297c0d7f31 <unknown>
#10 0x56297c5b372b <unknown>
#11 0x56297c5b7534 <unknown>
#12 0x56297c59a229 <unknown>
#13 0x56297c5b80d8 <unknown>
#14 0x56297c57e61f <unknown>
#15 0x56297c5dbdd8 <unknown>
#16 0x56297c5dbfb6 <unknown>
#17 0x56297c5edaf6 <unknown>
#18 0x7fb6dca9caa4 <unknown>
#19 0x7fb6dcb29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of undefined (reading 'call')
  (Session info: chrome=138.0.7204.100)
Stacktrace:
#0 0x559397a697da <unknown>
#1 0x55939750e2e0 <unknown>
#2 0x559397514f28 <unknown>
#3 0x559397517a6a <unknown>
#4 0x5593975ac75e <unknown>
#5 0x5593975858b2 <unknown>
#6 0x5593975ab71c <unknown>
#7 0x559397585683 <unknown>
#8 0x559397551b5b <unknown>
#9 0x559397552f31 <unknown>
#10 0x559397a2e72b <unknown>
#11 0x559397a32534 <unknown>
#12 0x559397a15229 <unknown>
#13 0x559397a330d8 <unknown>
#14 0x5593979f961f <unknown>
#15 0x559397a56dd8 <unknown>
#16 0x559397a56fb6 <unknown>
#17 0x559397a68af6 <unknown>
#18 0x7f8f6609caa4 <unknown>
#19 0x7f8f66129c3c <unknown>
=================== 16 failed, 3 passed in 176.98s (0:02:56) ===================
--------------------------------------------
Test Run Finished: 2025-07-17 04:13:27
Duration: 179 seconds
Status: FAILURE
Exit Code: 1
============================================
