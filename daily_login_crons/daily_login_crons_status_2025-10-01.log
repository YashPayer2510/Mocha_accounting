========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-01 03:52:43
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ea3df8c44f2617e1fb01fbabf6208a54")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ea3df8c44f2617e1fb01fbabf6208a54")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4a678900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5582306c9fba <unknown>
E       #1 0x55823014e6d0 <unknown>
E       #2 0x5582301a02aa <unknown>
E       #3 0x5582301a0541 <unknown>
E       #4 0x5582301ee6c4 <unknown>
E       #5 0x5582301c5e5d <unknown>
E       #6 0x5582301ebb54 <unknown>
E       #7 0x5582301c5c03 <unknown>
E       #8 0x5582301927a8 <unknown>
E       #9 0x558230193421 <unknown>
E       #10 0x55823068eb28 <unknown>
E       #11 0x55823069287f <unknown>
E       #12 0x558230676c49 <unknown>
E       #13 0x558230693405 <unknown>
E       #14 0x55823065c4ff <unknown>
E       #15 0x5582306b7258 <unknown>
E       #16 0x5582306b7432 <unknown>
E       #17 0x5582306c8fa3 <unknown>
E       #18 0x7f9bb189caa4 <unknown>
E       #19 0x7f9bb1929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 03:52:46,091 - INFO - Test data loaded successfully.
2025-10-01 03:52:46,091 - INFO - Starting test with Chrome browser
2025-10-01 03:52:46,091 - INFO - ====== WebDriver manager ======
2025-10-01 03:52:47,467 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:52:47,519 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:52:47,551 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-01 03:52:47,551 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:52:47,647 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-01 03:52:47,650 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-01 03:52:47,651 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-01 03:52:47,702 - INFO - Driver downloading response is 200
2025-10-01 03:52:47,756 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:52:47,900 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-01 03:52:56,880 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-01 03:52:56,880 - INFO - Starting the test case for valid credentials
2025-10-01 03:52:57,175 - INFO - User enters the email-id
2025-10-01 03:52:58,919 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 03:55:00,629 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="45d57e4b8c242c6d807aaa1a0a14ef28")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="45d57e4b8c242c6d807aaa1a0a14ef28")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb258a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5568f7e01fba <unknown>
E       #1 0x5568f78866d0 <unknown>
E       #2 0x5568f78d82aa <unknown>
E       #3 0x5568f78d8541 <unknown>
E       #4 0x5568f79266c4 <unknown>
E       #5 0x5568f78fde5d <unknown>
E       #6 0x5568f7923b54 <unknown>
E       #7 0x5568f78fdc03 <unknown>
E       #8 0x5568f78ca7a8 <unknown>
E       #9 0x5568f78cb421 <unknown>
E       #10 0x5568f7dc6b28 <unknown>
E       #11 0x5568f7dca87f <unknown>
E       #12 0x5568f7daec49 <unknown>
E       #13 0x5568f7dcb405 <unknown>
E       #14 0x5568f7d944ff <unknown>
E       #15 0x5568f7def258 <unknown>
E       #16 0x5568f7def432 <unknown>
E       #17 0x5568f7e00fa3 <unknown>
E       #18 0x7f8bf9a9caa4 <unknown>
E       #19 0x7f8bf9b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 03:55:00,765 - INFO - Starting test with Chrome browser
2025-10-01 03:55:00,765 - INFO - ====== WebDriver manager ======
2025-10-01 03:55:00,828 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:55:00,861 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:55:00,909 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 03:55:02,325 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-01 03:55:02,326 - INFO - Starting the test case for valid credentials
2025-10-01 03:55:02,468 - INFO - User enters the email-id
2025-10-01 03:55:04,129 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 03:57:05,783 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2ecdc8d01d3c508df916fe7ddac5532d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2ecdc8d01d3c508df916fe7ddac5532d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4aefa3e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56332524bfba <unknown>
E       #1 0x563324cd06d0 <unknown>
E       #2 0x563324d222aa <unknown>
E       #3 0x563324d22541 <unknown>
E       #4 0x563324d706c4 <unknown>
E       #5 0x563324d47e5d <unknown>
E       #6 0x563324d6db54 <unknown>
E       #7 0x563324d47c03 <unknown>
E       #8 0x563324d147a8 <unknown>
E       #9 0x563324d15421 <unknown>
E       #10 0x563325210b28 <unknown>
E       #11 0x56332521487f <unknown>
E       #12 0x5633251f8c49 <unknown>
E       #13 0x563325215405 <unknown>
E       #14 0x5633251de4ff <unknown>
E       #15 0x563325239258 <unknown>
E       #16 0x563325239432 <unknown>
E       #17 0x56332524afa3 <unknown>
E       #18 0x7fe55f69caa4 <unknown>
E       #19 0x7fe55f729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 03:57:05,841 - INFO - Starting test with Chrome browser
2025-10-01 03:57:05,841 - INFO - ====== WebDriver manager ======
2025-10-01 03:57:05,905 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:57:05,941 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:57:05,978 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 03:57:07,367 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-01 03:57:07,368 - INFO - Starting the test case for valid credentials
2025-10-01 03:57:07,510 - INFO - User enters the email-id
2025-10-01 03:57:09,158 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 03:59:10,779 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3d18fbeab3ca2ca976d57bf36f754cfe")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3d18fbeab3ca2ca976d57bf36f754cfe")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb256c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5621f169dfba <unknown>
E       #1 0x5621f11226d0 <unknown>
E       #2 0x5621f11742aa <unknown>
E       #3 0x5621f1174541 <unknown>
E       #4 0x5621f11c26c4 <unknown>
E       #5 0x5621f1199e5d <unknown>
E       #6 0x5621f11bfb54 <unknown>
E       #7 0x5621f1199c03 <unknown>
E       #8 0x5621f11667a8 <unknown>
E       #9 0x5621f1167421 <unknown>
E       #10 0x5621f1662b28 <unknown>
E       #11 0x5621f166687f <unknown>
E       #12 0x5621f164ac49 <unknown>
E       #13 0x5621f1667405 <unknown>
E       #14 0x5621f16304ff <unknown>
E       #15 0x5621f168b258 <unknown>
E       #16 0x5621f168b432 <unknown>
E       #17 0x5621f169cfa3 <unknown>
E       #18 0x7fbe8a49caa4 <unknown>
E       #19 0x7fbe8a529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 03:59:10,845 - INFO - Starting test with Chrome browser
2025-10-01 03:59:10,846 - INFO - ====== WebDriver manager ======
2025-10-01 03:59:10,909 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:59:10,943 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 03:59:10,974 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 03:59:12,356 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-01 03:59:12,356 - INFO - Starting the test case for valid credentials
2025-10-01 03:59:12,514 - INFO - User enters the email-id
2025-10-01 03:59:14,209 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 04:01:15,841 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c4c6ff0eefab96d8ca0a4b61635a1e19")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c4c6ff0eefab96d8ca0a4b61635a1e19")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb25f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b0a4de2fba <unknown>
E       #1 0x55b0a48676d0 <unknown>
E       #2 0x55b0a48b92aa <unknown>
E       #3 0x55b0a48b9541 <unknown>
E       #4 0x55b0a49076c4 <unknown>
E       #5 0x55b0a48dee5d <unknown>
E       #6 0x55b0a4904b54 <unknown>
E       #7 0x55b0a48dec03 <unknown>
E       #8 0x55b0a48ab7a8 <unknown>
E       #9 0x55b0a48ac421 <unknown>
E       #10 0x55b0a4da7b28 <unknown>
E       #11 0x55b0a4dab87f <unknown>
E       #12 0x55b0a4d8fc49 <unknown>
E       #13 0x55b0a4dac405 <unknown>
E       #14 0x55b0a4d754ff <unknown>
E       #15 0x55b0a4dd0258 <unknown>
E       #16 0x55b0a4dd0432 <unknown>
E       #17 0x55b0a4de1fa3 <unknown>
E       #18 0x7f136349caa4 <unknown>
E       #19 0x7f1363529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 04:01:15,907 - INFO - Starting test with Chrome browser
2025-10-01 04:01:15,907 - INFO - ====== WebDriver manager ======
2025-10-01 04:01:15,971 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:01:16,006 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:01:16,037 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 04:01:17,351 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 04:03:19,128 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="08c67782fce5868d5a7e90fefa1a85ff")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="08c67782fce5868d5a7e90fefa1a85ff")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb26020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562bc18ccfba <unknown>
E       #1 0x562bc13516d0 <unknown>
E       #2 0x562bc13a32aa <unknown>
E       #3 0x562bc13a3541 <unknown>
E       #4 0x562bc13f16c4 <unknown>
E       #5 0x562bc13c8e5d <unknown>
E       #6 0x562bc13eeb54 <unknown>
E       #7 0x562bc13c8c03 <unknown>
E       #8 0x562bc13957a8 <unknown>
E       #9 0x562bc1396421 <unknown>
E       #10 0x562bc1891b28 <unknown>
E       #11 0x562bc189587f <unknown>
E       #12 0x562bc1879c49 <unknown>
E       #13 0x562bc1896405 <unknown>
E       #14 0x562bc185f4ff <unknown>
E       #15 0x562bc18ba258 <unknown>
E       #16 0x562bc18ba432 <unknown>
E       #17 0x562bc18cbfa3 <unknown>
E       #18 0x7f9c2ca9caa4 <unknown>
E       #19 0x7f9c2cb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 04:03:19,186 - INFO - Starting test with Chrome browser
2025-10-01 04:03:19,187 - INFO - ====== WebDriver manager ======
2025-10-01 04:03:19,251 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:03:19,284 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:03:19,319 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 04:03:20,673 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 04:05:22,434 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="71027972ddae39148db88720d71a468e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="71027972ddae39148db88720d71a468e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb25da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560f41a9cfba <unknown>
E       #1 0x560f415216d0 <unknown>
E       #2 0x560f415732aa <unknown>
E       #3 0x560f41573541 <unknown>
E       #4 0x560f415c16c4 <unknown>
E       #5 0x560f41598e5d <unknown>
E       #6 0x560f415beb54 <unknown>
E       #7 0x560f41598c03 <unknown>
E       #8 0x560f415657a8 <unknown>
E       #9 0x560f41566421 <unknown>
E       #10 0x560f41a61b28 <unknown>
E       #11 0x560f41a6587f <unknown>
E       #12 0x560f41a49c49 <unknown>
E       #13 0x560f41a66405 <unknown>
E       #14 0x560f41a2f4ff <unknown>
E       #15 0x560f41a8a258 <unknown>
E       #16 0x560f41a8a432 <unknown>
E       #17 0x560f41a9bfa3 <unknown>
E       #18 0x7f092469caa4 <unknown>
E       #19 0x7f0924729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 04:05:22,499 - INFO - Starting test with Chrome browser
2025-10-01 04:05:22,499 - INFO - ====== WebDriver manager ======
2025-10-01 04:05:22,563 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:05:22,596 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:05:22,629 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 04:05:23,642 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 04:07:25,671 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5d4afd8f1ab506e7677b094bf86fe594")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5d4afd8f1ab506e7677b094bf86fe594")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb26840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560fb38dffba <unknown>
E       #1 0x560fb33646d0 <unknown>
E       #2 0x560fb33b62aa <unknown>
E       #3 0x560fb33b6541 <unknown>
E       #4 0x560fb34046c4 <unknown>
E       #5 0x560fb33dbe5d <unknown>
E       #6 0x560fb3401b54 <unknown>
E       #7 0x560fb33dbc03 <unknown>
E       #8 0x560fb33a87a8 <unknown>
E       #9 0x560fb33a9421 <unknown>
E       #10 0x560fb38a4b28 <unknown>
E       #11 0x560fb38a887f <unknown>
E       #12 0x560fb388cc49 <unknown>
E       #13 0x560fb38a9405 <unknown>
E       #14 0x560fb38724ff <unknown>
E       #15 0x560fb38cd258 <unknown>
E       #16 0x560fb38cd432 <unknown>
E       #17 0x560fb38defa3 <unknown>
E       #18 0x7fdd0e29caa4 <unknown>
E       #19 0x7fdd0e329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 04:07:25,737 - INFO - Starting test with Chrome browser
2025-10-01 04:07:25,738 - INFO - ====== WebDriver manager ======
2025-10-01 04:07:25,802 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:07:25,835 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:07:25,867 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 04:07:27,482 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 04:09:29,260 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="66477f4eb13b49acd9c801f18084fb7e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="66477f4eb13b49acd9c801f18084fb7e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb26b60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e72af44fba <unknown>
E       #1 0x55e72a9c96d0 <unknown>
E       #2 0x55e72aa1b2aa <unknown>
E       #3 0x55e72aa1b541 <unknown>
E       #4 0x55e72aa696c4 <unknown>
E       #5 0x55e72aa40e5d <unknown>
E       #6 0x55e72aa66b54 <unknown>
E       #7 0x55e72aa40c03 <unknown>
E       #8 0x55e72aa0d7a8 <unknown>
E       #9 0x55e72aa0e421 <unknown>
E       #10 0x55e72af09b28 <unknown>
E       #11 0x55e72af0d87f <unknown>
E       #12 0x55e72aef1c49 <unknown>
E       #13 0x55e72af0e405 <unknown>
E       #14 0x55e72aed74ff <unknown>
E       #15 0x55e72af32258 <unknown>
E       #16 0x55e72af32432 <unknown>
E       #17 0x55e72af43fa3 <unknown>
E       #18 0x7f19cca9caa4 <unknown>
E       #19 0x7f19ccb29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 04:09:29,325 - INFO - Starting test with Chrome browser
2025-10-01 04:09:29,325 - INFO - ====== WebDriver manager ======
2025-10-01 04:09:29,390 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:09:29,423 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:09:29,456 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 04:09:30,839 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 04:11:34,309 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f2f27dd7781682b79282366ac183d99f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f2f27dd7781682b79282366ac183d99f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb268e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ed5186cfba <unknown>
E       #1 0x55ed512f16d0 <unknown>
E       #2 0x55ed513432aa <unknown>
E       #3 0x55ed51343541 <unknown>
E       #4 0x55ed513916c4 <unknown>
E       #5 0x55ed51368e5d <unknown>
E       #6 0x55ed5138eb54 <unknown>
E       #7 0x55ed51368c03 <unknown>
E       #8 0x55ed513357a8 <unknown>
E       #9 0x55ed51336421 <unknown>
E       #10 0x55ed51831b28 <unknown>
E       #11 0x55ed5183587f <unknown>
E       #12 0x55ed51819c49 <unknown>
E       #13 0x55ed51836405 <unknown>
E       #14 0x55ed517ff4ff <unknown>
E       #15 0x55ed5185a258 <unknown>
E       #16 0x55ed5185a432 <unknown>
E       #17 0x55ed5186bfa3 <unknown>
E       #18 0x7fdb91e9caa4 <unknown>
E       #19 0x7fdb91f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 04:11:34,368 - INFO - Starting test with Chrome browser
2025-10-01 04:11:34,368 - INFO - ====== WebDriver manager ======
2025-10-01 04:11:34,433 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:11:34,467 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:11:34,499 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 04:11:35,828 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 04:13:39,281 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="741e7839f6c1e928003334efea91235c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="741e7839f6c1e928003334efea91235c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb25da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56462be63fba <unknown>
E       #1 0x56462b8e86d0 <unknown>
E       #2 0x56462b93a2aa <unknown>
E       #3 0x56462b93a541 <unknown>
E       #4 0x56462b9886c4 <unknown>
E       #5 0x56462b95fe5d <unknown>
E       #6 0x56462b985b54 <unknown>
E       #7 0x56462b95fc03 <unknown>
E       #8 0x56462b92c7a8 <unknown>
E       #9 0x56462b92d421 <unknown>
E       #10 0x56462be28b28 <unknown>
E       #11 0x56462be2c87f <unknown>
E       #12 0x56462be10c49 <unknown>
E       #13 0x56462be2d405 <unknown>
E       #14 0x56462bdf64ff <unknown>
E       #15 0x56462be51258 <unknown>
E       #16 0x56462be51432 <unknown>
E       #17 0x56462be62fa3 <unknown>
E       #18 0x7f8a5b89caa4 <unknown>
E       #19 0x7f8a5b929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 04:13:40,339 - INFO - Starting test with Chrome browser
2025-10-01 04:13:40,339 - INFO - ====== WebDriver manager ======
2025-10-01 04:13:40,404 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:13:40,439 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:13:40,473 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 04:13:42,264 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 04:15:45,754 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="53b3c3c344c49c40d90435bcec8ac539")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="53b3c3c344c49c40d90435bcec8ac539")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f8d4bb25940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x560642b20fba <unknown>
E       #1 0x5606425a56d0 <unknown>
E       #2 0x5606425f72aa <unknown>
E       #3 0x5606425f7541 <unknown>
E       #4 0x5606426456c4 <unknown>
E       #5 0x56064261ce5d <unknown>
E       #6 0x560642642b54 <unknown>
E       #7 0x56064261cc03 <unknown>
E       #8 0x5606425e97a8 <unknown>
E       #9 0x5606425ea421 <unknown>
E       #10 0x560642ae5b28 <unknown>
E       #11 0x560642ae987f <unknown>
E       #12 0x560642acdc49 <unknown>
E       #13 0x560642aea405 <unknown>
E       #14 0x560642ab34ff <unknown>
E       #15 0x560642b0e258 <unknown>
E       #16 0x560642b0e432 <unknown>
E       #17 0x560642b1ffa3 <unknown>
E       #18 0x7f36c469caa4 <unknown>
E       #19 0x7f36c4729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-01 04:15:45,819 - INFO - Starting test with Chrome browser
2025-10-01 04:15:45,819 - INFO - ====== WebDriver manager ======
2025-10-01 04:15:45,883 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:15:45,916 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-01 04:15:45,947 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-01 04:15:47,225 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-01 04:17:50,716 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251001_035245/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5582306c9fba <unknown>
#1 0x55823014e6d0 <unknown>
#2 0x5582301a02aa <unknown>
#3 0x5582301a0541 <unknown>
#4 0x5582301ee6c4 <unknown>
#5 0x5582301c5e5d <unknown>
#6 0x5582301ebb54 <unknown>
#7 0x5582301c5c03 <unknown>
#8 0x5582301927a8 <unknown>
#9 0x558230193421 <unknown>
#10 0x55823068eb28 <unknown>
#11 0x55823069287f <unknown>
#12 0x558230676c49 <unknown>
#13 0x558230693405 <unknown>
#14 0x55823065c4ff <unknown>
#15 0x5582306b7258 <unknown>
#16 0x5582306b7432 <unknown>
#17 0x5582306c8fa3 <unknown>
#18 0x7f9bb189caa4 <unknown>
#19 0x7f9bb1929c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5568f7e01fba <unknown>
#1 0x5568f78866d0 <unknown>
#2 0x5568f78d82aa <unknown>
#3 0x5568f78d8541 <unknown>
#4 0x5568f79266c4 <unknown>
#5 0x5568f78fde5d <unknown>
#6 0x5568f7923b54 <unknown>
#7 0x5568f78fdc03 <unknown>
#8 0x5568f78ca7a8 <unknown>
#9 0x5568f78cb421 <unknown>
#10 0x5568f7dc6b28 <unknown>
#11 0x5568f7dca87f <unknown>
#12 0x5568f7daec49 <unknown>
#13 0x5568f7dcb405 <unknown>
#14 0x5568f7d944ff <unknown>
#15 0x5568f7def258 <unknown>
#16 0x5568f7def432 <unknown>
#17 0x5568f7e00fa3 <unknown>
#18 0x7f8bf9a9caa4 <unknown>
#19 0x7f8bf9b29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56332524bfba <unknown>
#1 0x563324cd06d0 <unknown>
#2 0x563324d222aa <unknown>
#3 0x563324d22541 <unknown>
#4 0x563324d706c4 <unknown>
#5 0x563324d47e5d <unknown>
#6 0x563324d6db54 <unknown>
#7 0x563324d47c03 <unknown>
#8 0x563324d147a8 <unknown>
#9 0x563324d15421 <unknown>
#10 0x563325210b28 <unknown>
#11 0x56332521487f <unknown>
#12 0x5633251f8c49 <unknown>
#13 0x563325215405 <unknown>
#14 0x5633251de4ff <unknown>
#15 0x563325239258 <unknown>
#16 0x563325239432 <unknown>
#17 0x56332524afa3 <unknown>
#18 0x7fe55f69caa4 <unknown>
#19 0x7fe55f729c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5621f169dfba <unknown>
#1 0x5621f11226d0 <unknown>
#2 0x5621f11742aa <unknown>
#3 0x5621f1174541 <unknown>
#4 0x5621f11c26c4 <unknown>
#5 0x5621f1199e5d <unknown>
#6 0x5621f11bfb54 <unknown>
#7 0x5621f1199c03 <unknown>
#8 0x5621f11667a8 <unknown>
#9 0x5621f1167421 <unknown>
#10 0x5621f1662b28 <unknown>
#11 0x5621f166687f <unknown>
#12 0x5621f164ac49 <unknown>
#13 0x5621f1667405 <unknown>
#14 0x5621f16304ff <unknown>
#15 0x5621f168b258 <unknown>
#16 0x5621f168b432 <unknown>
#17 0x5621f169cfa3 <unknown>
#18 0x7fbe8a49caa4 <unknown>
#19 0x7fbe8a529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b0a4de2fba <unknown>
#1 0x55b0a48676d0 <unknown>
#2 0x55b0a48b92aa <unknown>
#3 0x55b0a48b9541 <unknown>
#4 0x55b0a49076c4 <unknown>
#5 0x55b0a48dee5d <unknown>
#6 0x55b0a4904b54 <unknown>
#7 0x55b0a48dec03 <unknown>
#8 0x55b0a48ab7a8 <unknown>
#9 0x55b0a48ac421 <unknown>
#10 0x55b0a4da7b28 <unknown>
#11 0x55b0a4dab87f <unknown>
#12 0x55b0a4d8fc49 <unknown>
#13 0x55b0a4dac405 <unknown>
#14 0x55b0a4d754ff <unknown>
#15 0x55b0a4dd0258 <unknown>
#16 0x55b0a4dd0432 <unknown>
#17 0x55b0a4de1fa3 <unknown>
#18 0x7f136349caa4 <unknown>
#19 0x7f1363529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562bc18ccfba <unknown>
#1 0x562bc13516d0 <unknown>
#2 0x562bc13a32aa <unknown>
#3 0x562bc13a3541 <unknown>
#4 0x562bc13f16c4 <unknown>
#5 0x562bc13c8e5d <unknown>
#6 0x562bc13eeb54 <unknown>
#7 0x562bc13c8c03 <unknown>
#8 0x562bc13957a8 <unknown>
#9 0x562bc1396421 <unknown>
#10 0x562bc1891b28 <unknown>
#11 0x562bc189587f <unknown>
#12 0x562bc1879c49 <unknown>
#13 0x562bc1896405 <unknown>
#14 0x562bc185f4ff <unknown>
#15 0x562bc18ba258 <unknown>
#16 0x562bc18ba432 <unknown>
#17 0x562bc18cbfa3 <unknown>
#18 0x7f9c2ca9caa4 <unknown>
#19 0x7f9c2cb29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560f41a9cfba <unknown>
#1 0x560f415216d0 <unknown>
#2 0x560f415732aa <unknown>
#3 0x560f41573541 <unknown>
#4 0x560f415c16c4 <unknown>
#5 0x560f41598e5d <unknown>
#6 0x560f415beb54 <unknown>
#7 0x560f41598c03 <unknown>
#8 0x560f415657a8 <unknown>
#9 0x560f41566421 <unknown>
#10 0x560f41a61b28 <unknown>
#11 0x560f41a6587f <unknown>
#12 0x560f41a49c49 <unknown>
#13 0x560f41a66405 <unknown>
#14 0x560f41a2f4ff <unknown>
#15 0x560f41a8a258 <unknown>
#16 0x560f41a8a432 <unknown>
#17 0x560f41a9bfa3 <unknown>
#18 0x7f092469caa4 <unknown>
#19 0x7f0924729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560fb38dffba <unknown>
#1 0x560fb33646d0 <unknown>
#2 0x560fb33b62aa <unknown>
#3 0x560fb33b6541 <unknown>
#4 0x560fb34046c4 <unknown>
#5 0x560fb33dbe5d <unknown>
#6 0x560fb3401b54 <unknown>
#7 0x560fb33dbc03 <unknown>
#8 0x560fb33a87a8 <unknown>
#9 0x560fb33a9421 <unknown>
#10 0x560fb38a4b28 <unknown>
#11 0x560fb38a887f <unknown>
#12 0x560fb388cc49 <unknown>
#13 0x560fb38a9405 <unknown>
#14 0x560fb38724ff <unknown>
#15 0x560fb38cd258 <unknown>
#16 0x560fb38cd432 <unknown>
#17 0x560fb38defa3 <unknown>
#18 0x7fdd0e29caa4 <unknown>
#19 0x7fdd0e329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e72af44fba <unknown>
#1 0x55e72a9c96d0 <unknown>
#2 0x55e72aa1b2aa <unknown>
#3 0x55e72aa1b541 <unknown>
#4 0x55e72aa696c4 <unknown>
#5 0x55e72aa40e5d <unknown>
#6 0x55e72aa66b54 <unknown>
#7 0x55e72aa40c03 <unknown>
#8 0x55e72aa0d7a8 <unknown>
#9 0x55e72aa0e421 <unknown>
#10 0x55e72af09b28 <unknown>
#11 0x55e72af0d87f <unknown>
#12 0x55e72aef1c49 <unknown>
#13 0x55e72af0e405 <unknown>
#14 0x55e72aed74ff <unknown>
#15 0x55e72af32258 <unknown>
#16 0x55e72af32432 <unknown>
#17 0x55e72af43fa3 <unknown>
#18 0x7f19cca9caa4 <unknown>
#19 0x7f19ccb29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ed5186cfba <unknown>
#1 0x55ed512f16d0 <unknown>
#2 0x55ed513432aa <unknown>
#3 0x55ed51343541 <unknown>
#4 0x55ed513916c4 <unknown>
#5 0x55ed51368e5d <unknown>
#6 0x55ed5138eb54 <unknown>
#7 0x55ed51368c03 <unknown>
#8 0x55ed513357a8 <unknown>
#9 0x55ed51336421 <unknown>
#10 0x55ed51831b28 <unknown>
#11 0x55ed5183587f <unknown>
#12 0x55ed51819c49 <unknown>
#13 0x55ed51836405 <unknown>
#14 0x55ed517ff4ff <unknown>
#15 0x55ed5185a258 <unknown>
#16 0x55ed5185a432 <unknown>
#17 0x55ed5186bfa3 <unknown>
#18 0x7fdb91e9caa4 <unknown>
#19 0x7fdb91f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56462be63fba <unknown>
#1 0x56462b8e86d0 <unknown>
#2 0x56462b93a2aa <unknown>
#3 0x56462b93a541 <unknown>
#4 0x56462b9886c4 <unknown>
#5 0x56462b95fe5d <unknown>
#6 0x56462b985b54 <unknown>
#7 0x56462b95fc03 <unknown>
#8 0x56462b92c7a8 <unknown>
#9 0x56462b92d421 <unknown>
#10 0x56462be28b28 <unknown>
#11 0x56462be2c87f <unknown>
#12 0x56462be10c49 <unknown>
#13 0x56462be2d405 <unknown>
#14 0x56462bdf64ff <unknown>
#15 0x56462be51258 <unknown>
#16 0x56462be51432 <unknown>
#17 0x56462be62fa3 <unknown>
#18 0x7f8a5b89caa4 <unknown>
#19 0x7f8a5b929c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x560642b20fba <unknown>
#1 0x5606425a56d0 <unknown>
#2 0x5606425f72aa <unknown>
#3 0x5606425f7541 <unknown>
#4 0x5606426456c4 <unknown>
#5 0x56064261ce5d <unknown>
#6 0x560642642b54 <unknown>
#7 0x56064261cc03 <unknown>
#8 0x5606425e97a8 <unknown>
#9 0x5606425ea421 <unknown>
#10 0x560642ae5b28 <unknown>
#11 0x560642ae987f <unknown>
#12 0x560642acdc49 <unknown>
#13 0x560642aea405 <unknown>
#14 0x560642ab34ff <unknown>
#15 0x560642b0e258 <unknown>
#16 0x560642b0e432 <unknown>
#17 0x560642b1ffa3 <unknown>
#18 0x7f36c469caa4 <unknown>
#19 0x7f36c4729c6c <unknown>
================== 12 failed, 7 passed in 1519.26s (0:25:19) ===================
--------------------------------------------
Test Run Finished: 2025-10-01 04:18:05
Duration: 1522 seconds
Status: FAILURE
Exit Code: 1
============================================
