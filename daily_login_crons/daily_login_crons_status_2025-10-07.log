========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-07 03:46:08
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'Faker': '37.8.0', 'xdist': '3.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, Faker-37.8.0, xdist-3.8.0, rerunfailures-16.0.1, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2345ff5841fe8080cd308fe2d3934f68")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2345ff5841fe8080cd308fe2d3934f68")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb633794900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55afbfd64fba <unknown>
E       #1 0x55afbf7e96d0 <unknown>
E       #2 0x55afbf83b2aa <unknown>
E       #3 0x55afbf83b541 <unknown>
E       #4 0x55afbf8896c4 <unknown>
E       #5 0x55afbf860e5d <unknown>
E       #6 0x55afbf886b54 <unknown>
E       #7 0x55afbf860c03 <unknown>
E       #8 0x55afbf82d7a8 <unknown>
E       #9 0x55afbf82e421 <unknown>
E       #10 0x55afbfd29b28 <unknown>
E       #11 0x55afbfd2d87f <unknown>
E       #12 0x55afbfd11c49 <unknown>
E       #13 0x55afbfd2e405 <unknown>
E       #14 0x55afbfcf74ff <unknown>
E       #15 0x55afbfd52258 <unknown>
E       #16 0x55afbfd52432 <unknown>
E       #17 0x55afbfd63fa3 <unknown>
E       #18 0x7fb3fb29caa4 <unknown>
E       #19 0x7fb3fb329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 03:46:11,246 - INFO - Test data loaded successfully.
2025-10-07 03:46:11,247 - INFO - Starting test with Chrome browser
2025-10-07 03:46:11,247 - INFO - ====== WebDriver manager ======
2025-10-07 03:46:12,668 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:46:12,710 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:46:12,749 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-07 03:46:12,749 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:46:12,859 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-07 03:46:12,866 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-07 03:46:12,866 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-07 03:46:12,923 - INFO - Driver downloading response is 200
2025-10-07 03:46:12,981 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:46:13,138 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-07 03:46:23,231 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-07 03:46:23,232 - INFO - Starting the test case for valid credentials
2025-10-07 03:46:23,581 - INFO - User enters the email-id
2025-10-07 03:46:25,197 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 03:48:26,811 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f842687b2a1837649ffa9d3fb4e92c34")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f842687b2a1837649ffa9d3fb4e92c34")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb6330518a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x564374244fba <unknown>
E       #1 0x564373cc96d0 <unknown>
E       #2 0x564373d1b2aa <unknown>
E       #3 0x564373d1b541 <unknown>
E       #4 0x564373d696c4 <unknown>
E       #5 0x564373d40e5d <unknown>
E       #6 0x564373d66b54 <unknown>
E       #7 0x564373d40c03 <unknown>
E       #8 0x564373d0d7a8 <unknown>
E       #9 0x564373d0e421 <unknown>
E       #10 0x564374209b28 <unknown>
E       #11 0x56437420d87f <unknown>
E       #12 0x5643741f1c49 <unknown>
E       #13 0x56437420e405 <unknown>
E       #14 0x5643741d74ff <unknown>
E       #15 0x564374232258 <unknown>
E       #16 0x564374232432 <unknown>
E       #17 0x564374243fa3 <unknown>
E       #18 0x7fc074e9caa4 <unknown>
E       #19 0x7fc074f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 03:48:26,946 - INFO - Starting test with Chrome browser
2025-10-07 03:48:26,947 - INFO - ====== WebDriver manager ======
2025-10-07 03:48:27,012 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:48:27,045 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:48:27,099 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 03:48:28,816 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-07 03:48:28,816 - INFO - Starting the test case for valid credentials
2025-10-07 03:48:28,961 - INFO - User enters the email-id
2025-10-07 03:48:30,583 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 03:50:32,269 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0478c67511f50c268c5a552a7f5a03ac")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0478c67511f50c268c5a552a7f5a03ac")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb6340263e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56543621efba <unknown>
E       #1 0x565435ca36d0 <unknown>
E       #2 0x565435cf52aa <unknown>
E       #3 0x565435cf5541 <unknown>
E       #4 0x565435d436c4 <unknown>
E       #5 0x565435d1ae5d <unknown>
E       #6 0x565435d40b54 <unknown>
E       #7 0x565435d1ac03 <unknown>
E       #8 0x565435ce77a8 <unknown>
E       #9 0x565435ce8421 <unknown>
E       #10 0x5654361e3b28 <unknown>
E       #11 0x5654361e787f <unknown>
E       #12 0x5654361cbc49 <unknown>
E       #13 0x5654361e8405 <unknown>
E       #14 0x5654361b14ff <unknown>
E       #15 0x56543620c258 <unknown>
E       #16 0x56543620c432 <unknown>
E       #17 0x56543621dfa3 <unknown>
E       #18 0x7f3d7309caa4 <unknown>
E       #19 0x7f3d73129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 03:50:32,334 - INFO - Starting test with Chrome browser
2025-10-07 03:50:32,334 - INFO - ====== WebDriver manager ======
2025-10-07 03:50:32,398 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:50:32,429 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:50:32,460 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 03:50:34,596 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-07 03:50:34,597 - INFO - Starting the test case for valid credentials
2025-10-07 03:50:34,739 - INFO - User enters the email-id
2025-10-07 03:50:36,371 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 03:52:37,991 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="316eac33c1163ae47119535907c8ff07")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="316eac33c1163ae47119535907c8ff07")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb6330516c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559b4ba8afba <unknown>
E       #1 0x559b4b50f6d0 <unknown>
E       #2 0x559b4b5612aa <unknown>
E       #3 0x559b4b561541 <unknown>
E       #4 0x559b4b5af6c4 <unknown>
E       #5 0x559b4b586e5d <unknown>
E       #6 0x559b4b5acb54 <unknown>
E       #7 0x559b4b586c03 <unknown>
E       #8 0x559b4b5537a8 <unknown>
E       #9 0x559b4b554421 <unknown>
E       #10 0x559b4ba4fb28 <unknown>
E       #11 0x559b4ba5387f <unknown>
E       #12 0x559b4ba37c49 <unknown>
E       #13 0x559b4ba54405 <unknown>
E       #14 0x559b4ba1d4ff <unknown>
E       #15 0x559b4ba78258 <unknown>
E       #16 0x559b4ba78432 <unknown>
E       #17 0x559b4ba89fa3 <unknown>
E       #18 0x7f2a1cc9caa4 <unknown>
E       #19 0x7f2a1cd29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 03:52:38,048 - INFO - Starting test with Chrome browser
2025-10-07 03:52:38,048 - INFO - ====== WebDriver manager ======
2025-10-07 03:52:38,112 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:52:38,144 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:52:38,182 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 03:52:40,056 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-07 03:52:40,057 - INFO - Starting the test case for valid credentials
2025-10-07 03:52:40,261 - INFO - User enters the email-id
2025-10-07 03:52:41,857 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 03:54:43,523 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ed4e4ccfc279fad0ec99fe7919383ba8")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ed4e4ccfc279fad0ec99fe7919383ba8")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb633051f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x556947030fba <unknown>
E       #1 0x556946ab56d0 <unknown>
E       #2 0x556946b072aa <unknown>
E       #3 0x556946b07541 <unknown>
E       #4 0x556946b556c4 <unknown>
E       #5 0x556946b2ce5d <unknown>
E       #6 0x556946b52b54 <unknown>
E       #7 0x556946b2cc03 <unknown>
E       #8 0x556946af97a8 <unknown>
E       #9 0x556946afa421 <unknown>
E       #10 0x556946ff5b28 <unknown>
E       #11 0x556946ff987f <unknown>
E       #12 0x556946fddc49 <unknown>
E       #13 0x556946ffa405 <unknown>
E       #14 0x556946fc34ff <unknown>
E       #15 0x55694701e258 <unknown>
E       #16 0x55694701e432 <unknown>
E       #17 0x55694702ffa3 <unknown>
E       #18 0x7ff7ac69caa4 <unknown>
E       #19 0x7ff7ac729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 03:54:43,607 - INFO - Starting test with Chrome browser
2025-10-07 03:54:43,607 - INFO - ====== WebDriver manager ======
2025-10-07 03:54:43,682 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:54:43,717 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:54:43,750 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 03:54:45,427 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 03:56:47,177 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="957142cf0b453243d43febffeab1d462")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="957142cf0b453243d43febffeab1d462")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb633052020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a20982bfba <unknown>
E       #1 0x55a2092b06d0 <unknown>
E       #2 0x55a2093022aa <unknown>
E       #3 0x55a209302541 <unknown>
E       #4 0x55a2093506c4 <unknown>
E       #5 0x55a209327e5d <unknown>
E       #6 0x55a20934db54 <unknown>
E       #7 0x55a209327c03 <unknown>
E       #8 0x55a2092f47a8 <unknown>
E       #9 0x55a2092f5421 <unknown>
E       #10 0x55a2097f0b28 <unknown>
E       #11 0x55a2097f487f <unknown>
E       #12 0x55a2097d8c49 <unknown>
E       #13 0x55a2097f5405 <unknown>
E       #14 0x55a2097be4ff <unknown>
E       #15 0x55a209819258 <unknown>
E       #16 0x55a209819432 <unknown>
E       #17 0x55a20982afa3 <unknown>
E       #18 0x7f4be6e9caa4 <unknown>
E       #19 0x7f4be6f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 03:56:47,242 - INFO - Starting test with Chrome browser
2025-10-07 03:56:47,242 - INFO - ====== WebDriver manager ======
2025-10-07 03:56:47,307 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:56:47,338 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:56:47,371 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 03:56:49,098 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 03:58:50,909 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5f8730efd902072ad6cbd90e1cae1a3b")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5f8730efd902072ad6cbd90e1cae1a3b")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb633051da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55afd2767fba <unknown>
E       #1 0x55afd21ec6d0 <unknown>
E       #2 0x55afd223e2aa <unknown>
E       #3 0x55afd223e541 <unknown>
E       #4 0x55afd228c6c4 <unknown>
E       #5 0x55afd2263e5d <unknown>
E       #6 0x55afd2289b54 <unknown>
E       #7 0x55afd2263c03 <unknown>
E       #8 0x55afd22307a8 <unknown>
E       #9 0x55afd2231421 <unknown>
E       #10 0x55afd272cb28 <unknown>
E       #11 0x55afd273087f <unknown>
E       #12 0x55afd2714c49 <unknown>
E       #13 0x55afd2731405 <unknown>
E       #14 0x55afd26fa4ff <unknown>
E       #15 0x55afd2755258 <unknown>
E       #16 0x55afd2755432 <unknown>
E       #17 0x55afd2766fa3 <unknown>
E       #18 0x7f0fdac9caa4 <unknown>
E       #19 0x7f0fdad29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 03:58:50,975 - INFO - Starting test with Chrome browser
2025-10-07 03:58:50,975 - INFO - ====== WebDriver manager ======
2025-10-07 03:58:51,040 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:58:51,071 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 03:58:51,121 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 03:58:52,817 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 04:00:54,612 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="aea491c409398af17bbf075b10b74826")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="aea491c409398af17bbf075b10b74826")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb633052840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557ff6f61fba <unknown>
E       #1 0x557ff69e66d0 <unknown>
E       #2 0x557ff6a382aa <unknown>
E       #3 0x557ff6a38541 <unknown>
E       #4 0x557ff6a866c4 <unknown>
E       #5 0x557ff6a5de5d <unknown>
E       #6 0x557ff6a83b54 <unknown>
E       #7 0x557ff6a5dc03 <unknown>
E       #8 0x557ff6a2a7a8 <unknown>
E       #9 0x557ff6a2b421 <unknown>
E       #10 0x557ff6f26b28 <unknown>
E       #11 0x557ff6f2a87f <unknown>
E       #12 0x557ff6f0ec49 <unknown>
E       #13 0x557ff6f2b405 <unknown>
E       #14 0x557ff6ef44ff <unknown>
E       #15 0x557ff6f4f258 <unknown>
E       #16 0x557ff6f4f432 <unknown>
E       #17 0x557ff6f60fa3 <unknown>
E       #18 0x7fe10ee9caa4 <unknown>
E       #19 0x7fe10ef29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 04:00:54,715 - INFO - Starting test with Chrome browser
2025-10-07 04:00:54,715 - INFO - ====== WebDriver manager ======
2025-10-07 04:00:54,787 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:00:54,840 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:00:54,872 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 04:00:56,117 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 04:02:58,208 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="36fd465d0de2a4e11a89122a6219d791")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="36fd465d0de2a4e11a89122a6219d791")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb633052b60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55dda1ffffba <unknown>
E       #1 0x55dda1a846d0 <unknown>
E       #2 0x55dda1ad62aa <unknown>
E       #3 0x55dda1ad6541 <unknown>
E       #4 0x55dda1b246c4 <unknown>
E       #5 0x55dda1afbe5d <unknown>
E       #6 0x55dda1b21b54 <unknown>
E       #7 0x55dda1afbc03 <unknown>
E       #8 0x55dda1ac87a8 <unknown>
E       #9 0x55dda1ac9421 <unknown>
E       #10 0x55dda1fc4b28 <unknown>
E       #11 0x55dda1fc887f <unknown>
E       #12 0x55dda1facc49 <unknown>
E       #13 0x55dda1fc9405 <unknown>
E       #14 0x55dda1f924ff <unknown>
E       #15 0x55dda1fed258 <unknown>
E       #16 0x55dda1fed432 <unknown>
E       #17 0x55dda1ffefa3 <unknown>
E       #18 0x7f95ca29caa4 <unknown>
E       #19 0x7f95ca329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 04:02:58,276 - INFO - Starting test with Chrome browser
2025-10-07 04:02:58,277 - INFO - ====== WebDriver manager ======
2025-10-07 04:02:58,351 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:02:58,392 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:02:58,444 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 04:03:00,243 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 04:05:03,752 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="40e4284a6d16da542b3f533e52003f2e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="40e4284a6d16da542b3f533e52003f2e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb6330528e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5562633edfba <unknown>
E       #1 0x556262e726d0 <unknown>
E       #2 0x556262ec42aa <unknown>
E       #3 0x556262ec4541 <unknown>
E       #4 0x556262f126c4 <unknown>
E       #5 0x556262ee9e5d <unknown>
E       #6 0x556262f0fb54 <unknown>
E       #7 0x556262ee9c03 <unknown>
E       #8 0x556262eb67a8 <unknown>
E       #9 0x556262eb7421 <unknown>
E       #10 0x5562633b2b28 <unknown>
E       #11 0x5562633b687f <unknown>
E       #12 0x55626339ac49 <unknown>
E       #13 0x5562633b7405 <unknown>
E       #14 0x5562633804ff <unknown>
E       #15 0x5562633db258 <unknown>
E       #16 0x5562633db432 <unknown>
E       #17 0x5562633ecfa3 <unknown>
E       #18 0x7f5104c9caa4 <unknown>
E       #19 0x7f5104d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 04:05:03,809 - INFO - Starting test with Chrome browser
2025-10-07 04:05:03,809 - INFO - ====== WebDriver manager ======
2025-10-07 04:05:03,874 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:05:03,907 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:05:03,943 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 04:05:05,622 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 04:07:09,108 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="eea050f15a95c49917afd6cdddf0b93e")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="eea050f15a95c49917afd6cdddf0b93e")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb633051da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55e3d0a68fba <unknown>
E       #1 0x55e3d04ed6d0 <unknown>
E       #2 0x55e3d053f2aa <unknown>
E       #3 0x55e3d053f541 <unknown>
E       #4 0x55e3d058d6c4 <unknown>
E       #5 0x55e3d0564e5d <unknown>
E       #6 0x55e3d058ab54 <unknown>
E       #7 0x55e3d0564c03 <unknown>
E       #8 0x55e3d05317a8 <unknown>
E       #9 0x55e3d0532421 <unknown>
E       #10 0x55e3d0a2db28 <unknown>
E       #11 0x55e3d0a3187f <unknown>
E       #12 0x55e3d0a15c49 <unknown>
E       #13 0x55e3d0a32405 <unknown>
E       #14 0x55e3d09fb4ff <unknown>
E       #15 0x55e3d0a56258 <unknown>
E       #16 0x55e3d0a56432 <unknown>
E       #17 0x55e3d0a67fa3 <unknown>
E       #18 0x7fb5b409caa4 <unknown>
E       #19 0x7fb5b4129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 04:07:09,173 - INFO - Starting test with Chrome browser
2025-10-07 04:07:09,174 - INFO - ====== WebDriver manager ======
2025-10-07 04:07:09,237 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:07:09,273 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:07:09,313 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 04:07:11,148 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 04:09:14,661 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8c9e53ea907638928e4984ceae70d5a0")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8c9e53ea907638928e4984ceae70d5a0")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fb633051940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55aeca151fba <unknown>
E       #1 0x55aec9bd66d0 <unknown>
E       #2 0x55aec9c282aa <unknown>
E       #3 0x55aec9c28541 <unknown>
E       #4 0x55aec9c766c4 <unknown>
E       #5 0x55aec9c4de5d <unknown>
E       #6 0x55aec9c73b54 <unknown>
E       #7 0x55aec9c4dc03 <unknown>
E       #8 0x55aec9c1a7a8 <unknown>
E       #9 0x55aec9c1b421 <unknown>
E       #10 0x55aeca116b28 <unknown>
E       #11 0x55aeca11a87f <unknown>
E       #12 0x55aeca0fec49 <unknown>
E       #13 0x55aeca11b405 <unknown>
E       #14 0x55aeca0e44ff <unknown>
E       #15 0x55aeca13f258 <unknown>
E       #16 0x55aeca13f432 <unknown>
E       #17 0x55aeca150fa3 <unknown>
E       #18 0x7fe4b929caa4 <unknown>
E       #19 0x7fe4b9329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-07 04:09:14,728 - INFO - Starting test with Chrome browser
2025-10-07 04:09:14,729 - INFO - ====== WebDriver manager ======
2025-10-07 04:09:14,794 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:09:14,838 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-07 04:09:14,869 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-07 04:09:16,543 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-07 04:11:20,033 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251007_034611/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55afbfd64fba <unknown>
#1 0x55afbf7e96d0 <unknown>
#2 0x55afbf83b2aa <unknown>
#3 0x55afbf83b541 <unknown>
#4 0x55afbf8896c4 <unknown>
#5 0x55afbf860e5d <unknown>
#6 0x55afbf886b54 <unknown>
#7 0x55afbf860c03 <unknown>
#8 0x55afbf82d7a8 <unknown>
#9 0x55afbf82e421 <unknown>
#10 0x55afbfd29b28 <unknown>
#11 0x55afbfd2d87f <unknown>
#12 0x55afbfd11c49 <unknown>
#13 0x55afbfd2e405 <unknown>
#14 0x55afbfcf74ff <unknown>
#15 0x55afbfd52258 <unknown>
#16 0x55afbfd52432 <unknown>
#17 0x55afbfd63fa3 <unknown>
#18 0x7fb3fb29caa4 <unknown>
#19 0x7fb3fb329c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x564374244fba <unknown>
#1 0x564373cc96d0 <unknown>
#2 0x564373d1b2aa <unknown>
#3 0x564373d1b541 <unknown>
#4 0x564373d696c4 <unknown>
#5 0x564373d40e5d <unknown>
#6 0x564373d66b54 <unknown>
#7 0x564373d40c03 <unknown>
#8 0x564373d0d7a8 <unknown>
#9 0x564373d0e421 <unknown>
#10 0x564374209b28 <unknown>
#11 0x56437420d87f <unknown>
#12 0x5643741f1c49 <unknown>
#13 0x56437420e405 <unknown>
#14 0x5643741d74ff <unknown>
#15 0x564374232258 <unknown>
#16 0x564374232432 <unknown>
#17 0x564374243fa3 <unknown>
#18 0x7fc074e9caa4 <unknown>
#19 0x7fc074f29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56543621efba <unknown>
#1 0x565435ca36d0 <unknown>
#2 0x565435cf52aa <unknown>
#3 0x565435cf5541 <unknown>
#4 0x565435d436c4 <unknown>
#5 0x565435d1ae5d <unknown>
#6 0x565435d40b54 <unknown>
#7 0x565435d1ac03 <unknown>
#8 0x565435ce77a8 <unknown>
#9 0x565435ce8421 <unknown>
#10 0x5654361e3b28 <unknown>
#11 0x5654361e787f <unknown>
#12 0x5654361cbc49 <unknown>
#13 0x5654361e8405 <unknown>
#14 0x5654361b14ff <unknown>
#15 0x56543620c258 <unknown>
#16 0x56543620c432 <unknown>
#17 0x56543621dfa3 <unknown>
#18 0x7f3d7309caa4 <unknown>
#19 0x7f3d73129c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559b4ba8afba <unknown>
#1 0x559b4b50f6d0 <unknown>
#2 0x559b4b5612aa <unknown>
#3 0x559b4b561541 <unknown>
#4 0x559b4b5af6c4 <unknown>
#5 0x559b4b586e5d <unknown>
#6 0x559b4b5acb54 <unknown>
#7 0x559b4b586c03 <unknown>
#8 0x559b4b5537a8 <unknown>
#9 0x559b4b554421 <unknown>
#10 0x559b4ba4fb28 <unknown>
#11 0x559b4ba5387f <unknown>
#12 0x559b4ba37c49 <unknown>
#13 0x559b4ba54405 <unknown>
#14 0x559b4ba1d4ff <unknown>
#15 0x559b4ba78258 <unknown>
#16 0x559b4ba78432 <unknown>
#17 0x559b4ba89fa3 <unknown>
#18 0x7f2a1cc9caa4 <unknown>
#19 0x7f2a1cd29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x556947030fba <unknown>
#1 0x556946ab56d0 <unknown>
#2 0x556946b072aa <unknown>
#3 0x556946b07541 <unknown>
#4 0x556946b556c4 <unknown>
#5 0x556946b2ce5d <unknown>
#6 0x556946b52b54 <unknown>
#7 0x556946b2cc03 <unknown>
#8 0x556946af97a8 <unknown>
#9 0x556946afa421 <unknown>
#10 0x556946ff5b28 <unknown>
#11 0x556946ff987f <unknown>
#12 0x556946fddc49 <unknown>
#13 0x556946ffa405 <unknown>
#14 0x556946fc34ff <unknown>
#15 0x55694701e258 <unknown>
#16 0x55694701e432 <unknown>
#17 0x55694702ffa3 <unknown>
#18 0x7ff7ac69caa4 <unknown>
#19 0x7ff7ac729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a20982bfba <unknown>
#1 0x55a2092b06d0 <unknown>
#2 0x55a2093022aa <unknown>
#3 0x55a209302541 <unknown>
#4 0x55a2093506c4 <unknown>
#5 0x55a209327e5d <unknown>
#6 0x55a20934db54 <unknown>
#7 0x55a209327c03 <unknown>
#8 0x55a2092f47a8 <unknown>
#9 0x55a2092f5421 <unknown>
#10 0x55a2097f0b28 <unknown>
#11 0x55a2097f487f <unknown>
#12 0x55a2097d8c49 <unknown>
#13 0x55a2097f5405 <unknown>
#14 0x55a2097be4ff <unknown>
#15 0x55a209819258 <unknown>
#16 0x55a209819432 <unknown>
#17 0x55a20982afa3 <unknown>
#18 0x7f4be6e9caa4 <unknown>
#19 0x7f4be6f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55afd2767fba <unknown>
#1 0x55afd21ec6d0 <unknown>
#2 0x55afd223e2aa <unknown>
#3 0x55afd223e541 <unknown>
#4 0x55afd228c6c4 <unknown>
#5 0x55afd2263e5d <unknown>
#6 0x55afd2289b54 <unknown>
#7 0x55afd2263c03 <unknown>
#8 0x55afd22307a8 <unknown>
#9 0x55afd2231421 <unknown>
#10 0x55afd272cb28 <unknown>
#11 0x55afd273087f <unknown>
#12 0x55afd2714c49 <unknown>
#13 0x55afd2731405 <unknown>
#14 0x55afd26fa4ff <unknown>
#15 0x55afd2755258 <unknown>
#16 0x55afd2755432 <unknown>
#17 0x55afd2766fa3 <unknown>
#18 0x7f0fdac9caa4 <unknown>
#19 0x7f0fdad29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557ff6f61fba <unknown>
#1 0x557ff69e66d0 <unknown>
#2 0x557ff6a382aa <unknown>
#3 0x557ff6a38541 <unknown>
#4 0x557ff6a866c4 <unknown>
#5 0x557ff6a5de5d <unknown>
#6 0x557ff6a83b54 <unknown>
#7 0x557ff6a5dc03 <unknown>
#8 0x557ff6a2a7a8 <unknown>
#9 0x557ff6a2b421 <unknown>
#10 0x557ff6f26b28 <unknown>
#11 0x557ff6f2a87f <unknown>
#12 0x557ff6f0ec49 <unknown>
#13 0x557ff6f2b405 <unknown>
#14 0x557ff6ef44ff <unknown>
#15 0x557ff6f4f258 <unknown>
#16 0x557ff6f4f432 <unknown>
#17 0x557ff6f60fa3 <unknown>
#18 0x7fe10ee9caa4 <unknown>
#19 0x7fe10ef29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55dda1ffffba <unknown>
#1 0x55dda1a846d0 <unknown>
#2 0x55dda1ad62aa <unknown>
#3 0x55dda1ad6541 <unknown>
#4 0x55dda1b246c4 <unknown>
#5 0x55dda1afbe5d <unknown>
#6 0x55dda1b21b54 <unknown>
#7 0x55dda1afbc03 <unknown>
#8 0x55dda1ac87a8 <unknown>
#9 0x55dda1ac9421 <unknown>
#10 0x55dda1fc4b28 <unknown>
#11 0x55dda1fc887f <unknown>
#12 0x55dda1facc49 <unknown>
#13 0x55dda1fc9405 <unknown>
#14 0x55dda1f924ff <unknown>
#15 0x55dda1fed258 <unknown>
#16 0x55dda1fed432 <unknown>
#17 0x55dda1ffefa3 <unknown>
#18 0x7f95ca29caa4 <unknown>
#19 0x7f95ca329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5562633edfba <unknown>
#1 0x556262e726d0 <unknown>
#2 0x556262ec42aa <unknown>
#3 0x556262ec4541 <unknown>
#4 0x556262f126c4 <unknown>
#5 0x556262ee9e5d <unknown>
#6 0x556262f0fb54 <unknown>
#7 0x556262ee9c03 <unknown>
#8 0x556262eb67a8 <unknown>
#9 0x556262eb7421 <unknown>
#10 0x5562633b2b28 <unknown>
#11 0x5562633b687f <unknown>
#12 0x55626339ac49 <unknown>
#13 0x5562633b7405 <unknown>
#14 0x5562633804ff <unknown>
#15 0x5562633db258 <unknown>
#16 0x5562633db432 <unknown>
#17 0x5562633ecfa3 <unknown>
#18 0x7f5104c9caa4 <unknown>
#19 0x7f5104d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55e3d0a68fba <unknown>
#1 0x55e3d04ed6d0 <unknown>
#2 0x55e3d053f2aa <unknown>
#3 0x55e3d053f541 <unknown>
#4 0x55e3d058d6c4 <unknown>
#5 0x55e3d0564e5d <unknown>
#6 0x55e3d058ab54 <unknown>
#7 0x55e3d0564c03 <unknown>
#8 0x55e3d05317a8 <unknown>
#9 0x55e3d0532421 <unknown>
#10 0x55e3d0a2db28 <unknown>
#11 0x55e3d0a3187f <unknown>
#12 0x55e3d0a15c49 <unknown>
#13 0x55e3d0a32405 <unknown>
#14 0x55e3d09fb4ff <unknown>
#15 0x55e3d0a56258 <unknown>
#16 0x55e3d0a56432 <unknown>
#17 0x55e3d0a67fa3 <unknown>
#18 0x7fb5b409caa4 <unknown>
#19 0x7fb5b4129c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55aeca151fba <unknown>
#1 0x55aec9bd66d0 <unknown>
#2 0x55aec9c282aa <unknown>
#3 0x55aec9c28541 <unknown>
#4 0x55aec9c766c4 <unknown>
#5 0x55aec9c4de5d <unknown>
#6 0x55aec9c73b54 <unknown>
#7 0x55aec9c4dc03 <unknown>
#8 0x55aec9c1a7a8 <unknown>
#9 0x55aec9c1b421 <unknown>
#10 0x55aeca116b28 <unknown>
#11 0x55aeca11a87f <unknown>
#12 0x55aeca0fec49 <unknown>
#13 0x55aeca11b405 <unknown>
#14 0x55aeca0e44ff <unknown>
#15 0x55aeca13f258 <unknown>
#16 0x55aeca13f432 <unknown>
#17 0x55aeca150fa3 <unknown>
#18 0x7fe4b929caa4 <unknown>
#19 0x7fe4b9329c6c <unknown>
================== 12 failed, 7 passed in 1524.04s (0:25:24) ===================
--------------------------------------------
Test Run Finished: 2025-10-07 04:11:35
Duration: 1527 seconds
Status: FAILURE
Exit Code: 1
============================================
