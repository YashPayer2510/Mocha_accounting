========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-21 03:49:40
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'Faker': '37.8.0', 'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: Faker-37.8.0, rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3cc0afc5799c86549cd111b6b496a9f7")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3cc0afc5799c86549cd111b6b496a9f7")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2a2f4900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5599e1b07cba <unknown>
E       #1 0x5599e157c8e0 <unknown>
E       #2 0x5599e15ce580 <unknown>
E       #3 0x5599e15ce771 <unknown>
E       #4 0x5599e161c864 <unknown>
E       #5 0x5599e15f409d <unknown>
E       #6 0x5599e1619c63 <unknown>
E       #7 0x5599e15f3e43 <unknown>
E       #8 0x5599e15c09a8 <unknown>
E       #9 0x5599e15c1621 <unknown>
E       #10 0x5599e1acb8b8 <unknown>
E       #11 0x5599e1acf5e2 <unknown>
E       #12 0x5599e1ab2683 <unknown>
E       #13 0x5599e1ad0135 <unknown>
E       #14 0x5599e1a9780f <unknown>
E       #15 0x5599e1af44c8 <unknown>
E       #16 0x5599e1af46a2 <unknown>
E       #17 0x5599e1b06dc3 <unknown>
E       #18 0x7fccbd69caa4 <unknown>
E       #19 0x7fccbd729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 03:49:42,882 - INFO - Test data loaded successfully.
2025-09-21 03:49:42,883 - INFO - Starting test with Chrome browser
2025-09-21 03:49:42,883 - INFO - ====== WebDriver manager ======
2025-09-21 03:49:43,916 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:49:48,957 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:49:48,989 - INFO - There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
2025-09-21 03:49:48,989 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:49:49,092 - INFO - WebDriver version 140.0.7339.185 selected
2025-09-21 03:49:49,096 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-21 03:49:49,097 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
2025-09-21 03:49:49,162 - INFO - Driver downloading response is 200
2025-09-21 03:49:49,215 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:49:49,406 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
2025-09-21 03:49:57,049 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.185" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.185 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.185/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-21 03:49:57,049 - INFO - Starting the test case for valid credentials
2025-09-21 03:49:57,289 - INFO - User enters the email-id
2025-09-21 03:49:58,879 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 03:52:00,536 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a745baaeabf53b524612a5a0752d2859")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a745baaeabf53b524612a5a0752d2859")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6b98a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5560d15bfcba <unknown>
E       #1 0x5560d10348e0 <unknown>
E       #2 0x5560d1086580 <unknown>
E       #3 0x5560d1086771 <unknown>
E       #4 0x5560d10d4864 <unknown>
E       #5 0x5560d10ac09d <unknown>
E       #6 0x5560d10d1c63 <unknown>
E       #7 0x5560d10abe43 <unknown>
E       #8 0x5560d10789a8 <unknown>
E       #9 0x5560d1079621 <unknown>
E       #10 0x5560d15838b8 <unknown>
E       #11 0x5560d15875e2 <unknown>
E       #12 0x5560d156a683 <unknown>
E       #13 0x5560d1588135 <unknown>
E       #14 0x5560d154f80f <unknown>
E       #15 0x5560d15ac4c8 <unknown>
E       #16 0x5560d15ac6a2 <unknown>
E       #17 0x5560d15bedc3 <unknown>
E       #18 0x7f510f09caa4 <unknown>
E       #19 0x7f510f129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 03:52:00,657 - INFO - Starting test with Chrome browser
2025-09-21 03:52:00,658 - INFO - ====== WebDriver manager ======
2025-09-21 03:52:00,722 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:52:00,761 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:52:00,807 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 03:52:02,712 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-21 03:52:02,713 - INFO - Starting the test case for valid credentials
2025-09-21 03:52:02,851 - INFO - User enters the email-id
2025-09-21 03:52:04,459 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 03:54:06,098 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="34f0e002774b59b9bc290c75313000db")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="34f0e002774b59b9bc290c75313000db")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2d1c63e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ca37a3dcba <unknown>
E       #1 0x55ca374b28e0 <unknown>
E       #2 0x55ca37504580 <unknown>
E       #3 0x55ca37504771 <unknown>
E       #4 0x55ca37552864 <unknown>
E       #5 0x55ca3752a09d <unknown>
E       #6 0x55ca3754fc63 <unknown>
E       #7 0x55ca37529e43 <unknown>
E       #8 0x55ca374f69a8 <unknown>
E       #9 0x55ca374f7621 <unknown>
E       #10 0x55ca37a018b8 <unknown>
E       #11 0x55ca37a055e2 <unknown>
E       #12 0x55ca379e8683 <unknown>
E       #13 0x55ca37a06135 <unknown>
E       #14 0x55ca379cd80f <unknown>
E       #15 0x55ca37a2a4c8 <unknown>
E       #16 0x55ca37a2a6a2 <unknown>
E       #17 0x55ca37a3cdc3 <unknown>
E       #18 0x7f2375c9caa4 <unknown>
E       #19 0x7f2375d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 03:54:07,156 - INFO - Starting test with Chrome browser
2025-09-21 03:54:07,156 - INFO - ====== WebDriver manager ======
2025-09-21 03:54:07,222 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:54:07,254 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:54:07,286 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 03:54:08,830 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-21 03:54:08,831 - INFO - Starting the test case for valid credentials
2025-09-21 03:54:08,971 - INFO - User enters the email-id
2025-09-21 03:54:15,768 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 03:56:17,444 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="861a4865936c8fa7552d3e71a64af320")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="861a4865936c8fa7552d3e71a64af320")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6b96c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55bc54567cba <unknown>
E       #1 0x55bc53fdc8e0 <unknown>
E       #2 0x55bc5402e580 <unknown>
E       #3 0x55bc5402e771 <unknown>
E       #4 0x55bc5407c864 <unknown>
E       #5 0x55bc5405409d <unknown>
E       #6 0x55bc54079c63 <unknown>
E       #7 0x55bc54053e43 <unknown>
E       #8 0x55bc540209a8 <unknown>
E       #9 0x55bc54021621 <unknown>
E       #10 0x55bc5452b8b8 <unknown>
E       #11 0x55bc5452f5e2 <unknown>
E       #12 0x55bc54512683 <unknown>
E       #13 0x55bc54530135 <unknown>
E       #14 0x55bc544f780f <unknown>
E       #15 0x55bc545544c8 <unknown>
E       #16 0x55bc545546a2 <unknown>
E       #17 0x55bc54566dc3 <unknown>
E       #18 0x7f254f29caa4 <unknown>
E       #19 0x7f254f329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 03:56:18,501 - INFO - Starting test with Chrome browser
2025-09-21 03:56:18,501 - INFO - ====== WebDriver manager ======
2025-09-21 03:56:18,566 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:56:18,598 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:56:18,630 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 03:56:20,243 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-21 03:56:20,244 - INFO - Starting the test case for valid credentials
2025-09-21 03:56:20,404 - INFO - User enters the email-id
2025-09-21 03:56:22,044 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 03:58:23,626 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="42afcc5e276659b11a98c8a95e31bf0f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="42afcc5e276659b11a98c8a95e31bf0f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6b9f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5617706a6cba <unknown>
E       #1 0x56177011b8e0 <unknown>
E       #2 0x56177016d580 <unknown>
E       #3 0x56177016d771 <unknown>
E       #4 0x5617701bb864 <unknown>
E       #5 0x56177019309d <unknown>
E       #6 0x5617701b8c63 <unknown>
E       #7 0x561770192e43 <unknown>
E       #8 0x56177015f9a8 <unknown>
E       #9 0x561770160621 <unknown>
E       #10 0x56177066a8b8 <unknown>
E       #11 0x56177066e5e2 <unknown>
E       #12 0x561770651683 <unknown>
E       #13 0x56177066f135 <unknown>
E       #14 0x56177063680f <unknown>
E       #15 0x5617706934c8 <unknown>
E       #16 0x5617706936a2 <unknown>
E       #17 0x5617706a5dc3 <unknown>
E       #18 0x7f271e69caa4 <unknown>
E       #19 0x7f271e729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 03:58:23,690 - INFO - Starting test with Chrome browser
2025-09-21 03:58:23,690 - INFO - ====== WebDriver manager ======
2025-09-21 03:58:23,754 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:58:23,786 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 03:58:23,818 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 03:58:30,523 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 04:00:32,225 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="eb42807ea98fd3e39d5c9dac30deaa35")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="eb42807ea98fd3e39d5c9dac30deaa35")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6ba020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x557b0e3f0cba <unknown>
E       #1 0x557b0de658e0 <unknown>
E       #2 0x557b0deb7580 <unknown>
E       #3 0x557b0deb7771 <unknown>
E       #4 0x557b0df05864 <unknown>
E       #5 0x557b0dedd09d <unknown>
E       #6 0x557b0df02c63 <unknown>
E       #7 0x557b0dedce43 <unknown>
E       #8 0x557b0dea99a8 <unknown>
E       #9 0x557b0deaa621 <unknown>
E       #10 0x557b0e3b48b8 <unknown>
E       #11 0x557b0e3b85e2 <unknown>
E       #12 0x557b0e39b683 <unknown>
E       #13 0x557b0e3b9135 <unknown>
E       #14 0x557b0e38080f <unknown>
E       #15 0x557b0e3dd4c8 <unknown>
E       #16 0x557b0e3dd6a2 <unknown>
E       #17 0x557b0e3efdc3 <unknown>
E       #18 0x7fd7d889caa4 <unknown>
E       #19 0x7fd7d8929c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 04:00:32,286 - INFO - Starting test with Chrome browser
2025-09-21 04:00:32,286 - INFO - ====== WebDriver manager ======
2025-09-21 04:00:32,351 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:00:32,384 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:00:32,415 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 04:00:36,492 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 04:02:38,293 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ac13ff516e2154c7b4c22a50a8234a3f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ac13ff516e2154c7b4c22a50a8234a3f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6b9da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ab46530cba <unknown>
E       #1 0x55ab45fa58e0 <unknown>
E       #2 0x55ab45ff7580 <unknown>
E       #3 0x55ab45ff7771 <unknown>
E       #4 0x55ab46045864 <unknown>
E       #5 0x55ab4601d09d <unknown>
E       #6 0x55ab46042c63 <unknown>
E       #7 0x55ab4601ce43 <unknown>
E       #8 0x55ab45fe99a8 <unknown>
E       #9 0x55ab45fea621 <unknown>
E       #10 0x55ab464f48b8 <unknown>
E       #11 0x55ab464f85e2 <unknown>
E       #12 0x55ab464db683 <unknown>
E       #13 0x55ab464f9135 <unknown>
E       #14 0x55ab464c080f <unknown>
E       #15 0x55ab4651d4c8 <unknown>
E       #16 0x55ab4651d6a2 <unknown>
E       #17 0x55ab4652fdc3 <unknown>
E       #18 0x7f259a09caa4 <unknown>
E       #19 0x7f259a129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 04:02:39,359 - INFO - Starting test with Chrome browser
2025-09-21 04:02:39,359 - INFO - ====== WebDriver manager ======
2025-09-21 04:02:39,425 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:02:39,459 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:02:39,490 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 04:02:41,052 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 04:04:42,813 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="e71aa42239576234ce6ee76efb775813")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="e71aa42239576234ce6ee76efb775813")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6ba840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a7e177ecba <unknown>
E       #1 0x55a7e11f38e0 <unknown>
E       #2 0x55a7e1245580 <unknown>
E       #3 0x55a7e1245771 <unknown>
E       #4 0x55a7e1293864 <unknown>
E       #5 0x55a7e126b09d <unknown>
E       #6 0x55a7e1290c63 <unknown>
E       #7 0x55a7e126ae43 <unknown>
E       #8 0x55a7e12379a8 <unknown>
E       #9 0x55a7e1238621 <unknown>
E       #10 0x55a7e17428b8 <unknown>
E       #11 0x55a7e17465e2 <unknown>
E       #12 0x55a7e1729683 <unknown>
E       #13 0x55a7e1747135 <unknown>
E       #14 0x55a7e170e80f <unknown>
E       #15 0x55a7e176b4c8 <unknown>
E       #16 0x55a7e176b6a2 <unknown>
E       #17 0x55a7e177ddc3 <unknown>
E       #18 0x7f1455c9caa4 <unknown>
E       #19 0x7f1455d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 04:04:42,878 - INFO - Starting test with Chrome browser
2025-09-21 04:04:42,878 - INFO - ====== WebDriver manager ======
2025-09-21 04:04:42,941 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:04:42,977 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:04:43,010 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 04:04:44,645 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 04:06:46,335 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="327661c04f5f1a180430b8c766ea5135")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="327661c04f5f1a180430b8c766ea5135")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6bab60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5560ad15bcba <unknown>
E       #1 0x5560acbd08e0 <unknown>
E       #2 0x5560acc22580 <unknown>
E       #3 0x5560acc22771 <unknown>
E       #4 0x5560acc70864 <unknown>
E       #5 0x5560acc4809d <unknown>
E       #6 0x5560acc6dc63 <unknown>
E       #7 0x5560acc47e43 <unknown>
E       #8 0x5560acc149a8 <unknown>
E       #9 0x5560acc15621 <unknown>
E       #10 0x5560ad11f8b8 <unknown>
E       #11 0x5560ad1235e2 <unknown>
E       #12 0x5560ad106683 <unknown>
E       #13 0x5560ad124135 <unknown>
E       #14 0x5560ad0eb80f <unknown>
E       #15 0x5560ad1484c8 <unknown>
E       #16 0x5560ad1486a2 <unknown>
E       #17 0x5560ad15adc3 <unknown>
E       #18 0x7fad6b49caa4 <unknown>
E       #19 0x7fad6b529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 04:06:46,393 - INFO - Starting test with Chrome browser
2025-09-21 04:06:46,394 - INFO - ====== WebDriver manager ======
2025-09-21 04:06:46,458 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:06:46,492 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:06:46,530 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 04:06:48,107 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 04:08:51,550 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="a5e6588539993b93664de8837dc659ca")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a5e6588539993b93664de8837dc659ca")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6ba8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ec2ff86cba <unknown>
E       #1 0x55ec2f9fb8e0 <unknown>
E       #2 0x55ec2fa4d580 <unknown>
E       #3 0x55ec2fa4d771 <unknown>
E       #4 0x55ec2fa9b864 <unknown>
E       #5 0x55ec2fa7309d <unknown>
E       #6 0x55ec2fa98c63 <unknown>
E       #7 0x55ec2fa72e43 <unknown>
E       #8 0x55ec2fa3f9a8 <unknown>
E       #9 0x55ec2fa40621 <unknown>
E       #10 0x55ec2ff4a8b8 <unknown>
E       #11 0x55ec2ff4e5e2 <unknown>
E       #12 0x55ec2ff31683 <unknown>
E       #13 0x55ec2ff4f135 <unknown>
E       #14 0x55ec2ff1680f <unknown>
E       #15 0x55ec2ff734c8 <unknown>
E       #16 0x55ec2ff736a2 <unknown>
E       #17 0x55ec2ff85dc3 <unknown>
E       #18 0x7f6c6909caa4 <unknown>
E       #19 0x7f6c69129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 04:08:51,615 - INFO - Starting test with Chrome browser
2025-09-21 04:08:51,615 - INFO - ====== WebDriver manager ======
2025-09-21 04:08:51,680 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:08:51,718 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:08:51,751 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 04:08:53,343 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 04:10:56,780 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="71c4e27dcde38616e73866bb42c10fed")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="71c4e27dcde38616e73866bb42c10fed")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6b9da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563200cc0cba <unknown>
E       #1 0x5632007358e0 <unknown>
E       #2 0x563200787580 <unknown>
E       #3 0x563200787771 <unknown>
E       #4 0x5632007d5864 <unknown>
E       #5 0x5632007ad09d <unknown>
E       #6 0x5632007d2c63 <unknown>
E       #7 0x5632007ace43 <unknown>
E       #8 0x5632007799a8 <unknown>
E       #9 0x56320077a621 <unknown>
E       #10 0x563200c848b8 <unknown>
E       #11 0x563200c885e2 <unknown>
E       #12 0x563200c6b683 <unknown>
E       #13 0x563200c89135 <unknown>
E       #14 0x563200c5080f <unknown>
E       #15 0x563200cad4c8 <unknown>
E       #16 0x563200cad6a2 <unknown>
E       #17 0x563200cbfdc3 <unknown>
E       #18 0x7f6afe69caa4 <unknown>
E       #19 0x7f6afe729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 04:10:56,844 - INFO - Starting test with Chrome browser
2025-09-21 04:10:56,844 - INFO - ====== WebDriver manager ======
2025-09-21 04:10:56,909 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:10:56,945 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:10:56,978 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 04:10:58,817 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 04:13:02,249 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="cab76588c271ddbde7de18996c17c096")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="cab76588c271ddbde7de18996c17c096")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7fec2b6b9940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55b2ecc2bcba <unknown>
E       #1 0x55b2ec6a08e0 <unknown>
E       #2 0x55b2ec6f2580 <unknown>
E       #3 0x55b2ec6f2771 <unknown>
E       #4 0x55b2ec740864 <unknown>
E       #5 0x55b2ec71809d <unknown>
E       #6 0x55b2ec73dc63 <unknown>
E       #7 0x55b2ec717e43 <unknown>
E       #8 0x55b2ec6e49a8 <unknown>
E       #9 0x55b2ec6e5621 <unknown>
E       #10 0x55b2ecbef8b8 <unknown>
E       #11 0x55b2ecbf35e2 <unknown>
E       #12 0x55b2ecbd6683 <unknown>
E       #13 0x55b2ecbf4135 <unknown>
E       #14 0x55b2ecbbb80f <unknown>
E       #15 0x55b2ecc184c8 <unknown>
E       #16 0x55b2ecc186a2 <unknown>
E       #17 0x55b2ecc2adc3 <unknown>
E       #18 0x7fba1fe9caa4 <unknown>
E       #19 0x7fba1ff29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-21 04:13:02,316 - INFO - Starting test with Chrome browser
2025-09-21 04:13:02,316 - INFO - ====== WebDriver manager ======
2025-09-21 04:13:02,380 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:13:02,413 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-21 04:13:02,445 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
2025-09-21 04:13:04,014 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.185/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-21 04:15:07,380 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250921_034942/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5599e1b07cba <unknown>
#1 0x5599e157c8e0 <unknown>
#2 0x5599e15ce580 <unknown>
#3 0x5599e15ce771 <unknown>
#4 0x5599e161c864 <unknown>
#5 0x5599e15f409d <unknown>
#6 0x5599e1619c63 <unknown>
#7 0x5599e15f3e43 <unknown>
#8 0x5599e15c09a8 <unknown>
#9 0x5599e15c1621 <unknown>
#10 0x5599e1acb8b8 <unknown>
#11 0x5599e1acf5e2 <unknown>
#12 0x5599e1ab2683 <unknown>
#13 0x5599e1ad0135 <unknown>
#14 0x5599e1a9780f <unknown>
#15 0x5599e1af44c8 <unknown>
#16 0x5599e1af46a2 <unknown>
#17 0x5599e1b06dc3 <unknown>
#18 0x7fccbd69caa4 <unknown>
#19 0x7fccbd729c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5560d15bfcba <unknown>
#1 0x5560d10348e0 <unknown>
#2 0x5560d1086580 <unknown>
#3 0x5560d1086771 <unknown>
#4 0x5560d10d4864 <unknown>
#5 0x5560d10ac09d <unknown>
#6 0x5560d10d1c63 <unknown>
#7 0x5560d10abe43 <unknown>
#8 0x5560d10789a8 <unknown>
#9 0x5560d1079621 <unknown>
#10 0x5560d15838b8 <unknown>
#11 0x5560d15875e2 <unknown>
#12 0x5560d156a683 <unknown>
#13 0x5560d1588135 <unknown>
#14 0x5560d154f80f <unknown>
#15 0x5560d15ac4c8 <unknown>
#16 0x5560d15ac6a2 <unknown>
#17 0x5560d15bedc3 <unknown>
#18 0x7f510f09caa4 <unknown>
#19 0x7f510f129c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ca37a3dcba <unknown>
#1 0x55ca374b28e0 <unknown>
#2 0x55ca37504580 <unknown>
#3 0x55ca37504771 <unknown>
#4 0x55ca37552864 <unknown>
#5 0x55ca3752a09d <unknown>
#6 0x55ca3754fc63 <unknown>
#7 0x55ca37529e43 <unknown>
#8 0x55ca374f69a8 <unknown>
#9 0x55ca374f7621 <unknown>
#10 0x55ca37a018b8 <unknown>
#11 0x55ca37a055e2 <unknown>
#12 0x55ca379e8683 <unknown>
#13 0x55ca37a06135 <unknown>
#14 0x55ca379cd80f <unknown>
#15 0x55ca37a2a4c8 <unknown>
#16 0x55ca37a2a6a2 <unknown>
#17 0x55ca37a3cdc3 <unknown>
#18 0x7f2375c9caa4 <unknown>
#19 0x7f2375d29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55bc54567cba <unknown>
#1 0x55bc53fdc8e0 <unknown>
#2 0x55bc5402e580 <unknown>
#3 0x55bc5402e771 <unknown>
#4 0x55bc5407c864 <unknown>
#5 0x55bc5405409d <unknown>
#6 0x55bc54079c63 <unknown>
#7 0x55bc54053e43 <unknown>
#8 0x55bc540209a8 <unknown>
#9 0x55bc54021621 <unknown>
#10 0x55bc5452b8b8 <unknown>
#11 0x55bc5452f5e2 <unknown>
#12 0x55bc54512683 <unknown>
#13 0x55bc54530135 <unknown>
#14 0x55bc544f780f <unknown>
#15 0x55bc545544c8 <unknown>
#16 0x55bc545546a2 <unknown>
#17 0x55bc54566dc3 <unknown>
#18 0x7f254f29caa4 <unknown>
#19 0x7f254f329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5617706a6cba <unknown>
#1 0x56177011b8e0 <unknown>
#2 0x56177016d580 <unknown>
#3 0x56177016d771 <unknown>
#4 0x5617701bb864 <unknown>
#5 0x56177019309d <unknown>
#6 0x5617701b8c63 <unknown>
#7 0x561770192e43 <unknown>
#8 0x56177015f9a8 <unknown>
#9 0x561770160621 <unknown>
#10 0x56177066a8b8 <unknown>
#11 0x56177066e5e2 <unknown>
#12 0x561770651683 <unknown>
#13 0x56177066f135 <unknown>
#14 0x56177063680f <unknown>
#15 0x5617706934c8 <unknown>
#16 0x5617706936a2 <unknown>
#17 0x5617706a5dc3 <unknown>
#18 0x7f271e69caa4 <unknown>
#19 0x7f271e729c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x557b0e3f0cba <unknown>
#1 0x557b0de658e0 <unknown>
#2 0x557b0deb7580 <unknown>
#3 0x557b0deb7771 <unknown>
#4 0x557b0df05864 <unknown>
#5 0x557b0dedd09d <unknown>
#6 0x557b0df02c63 <unknown>
#7 0x557b0dedce43 <unknown>
#8 0x557b0dea99a8 <unknown>
#9 0x557b0deaa621 <unknown>
#10 0x557b0e3b48b8 <unknown>
#11 0x557b0e3b85e2 <unknown>
#12 0x557b0e39b683 <unknown>
#13 0x557b0e3b9135 <unknown>
#14 0x557b0e38080f <unknown>
#15 0x557b0e3dd4c8 <unknown>
#16 0x557b0e3dd6a2 <unknown>
#17 0x557b0e3efdc3 <unknown>
#18 0x7fd7d889caa4 <unknown>
#19 0x7fd7d8929c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ab46530cba <unknown>
#1 0x55ab45fa58e0 <unknown>
#2 0x55ab45ff7580 <unknown>
#3 0x55ab45ff7771 <unknown>
#4 0x55ab46045864 <unknown>
#5 0x55ab4601d09d <unknown>
#6 0x55ab46042c63 <unknown>
#7 0x55ab4601ce43 <unknown>
#8 0x55ab45fe99a8 <unknown>
#9 0x55ab45fea621 <unknown>
#10 0x55ab464f48b8 <unknown>
#11 0x55ab464f85e2 <unknown>
#12 0x55ab464db683 <unknown>
#13 0x55ab464f9135 <unknown>
#14 0x55ab464c080f <unknown>
#15 0x55ab4651d4c8 <unknown>
#16 0x55ab4651d6a2 <unknown>
#17 0x55ab4652fdc3 <unknown>
#18 0x7f259a09caa4 <unknown>
#19 0x7f259a129c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a7e177ecba <unknown>
#1 0x55a7e11f38e0 <unknown>
#2 0x55a7e1245580 <unknown>
#3 0x55a7e1245771 <unknown>
#4 0x55a7e1293864 <unknown>
#5 0x55a7e126b09d <unknown>
#6 0x55a7e1290c63 <unknown>
#7 0x55a7e126ae43 <unknown>
#8 0x55a7e12379a8 <unknown>
#9 0x55a7e1238621 <unknown>
#10 0x55a7e17428b8 <unknown>
#11 0x55a7e17465e2 <unknown>
#12 0x55a7e1729683 <unknown>
#13 0x55a7e1747135 <unknown>
#14 0x55a7e170e80f <unknown>
#15 0x55a7e176b4c8 <unknown>
#16 0x55a7e176b6a2 <unknown>
#17 0x55a7e177ddc3 <unknown>
#18 0x7f1455c9caa4 <unknown>
#19 0x7f1455d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5560ad15bcba <unknown>
#1 0x5560acbd08e0 <unknown>
#2 0x5560acc22580 <unknown>
#3 0x5560acc22771 <unknown>
#4 0x5560acc70864 <unknown>
#5 0x5560acc4809d <unknown>
#6 0x5560acc6dc63 <unknown>
#7 0x5560acc47e43 <unknown>
#8 0x5560acc149a8 <unknown>
#9 0x5560acc15621 <unknown>
#10 0x5560ad11f8b8 <unknown>
#11 0x5560ad1235e2 <unknown>
#12 0x5560ad106683 <unknown>
#13 0x5560ad124135 <unknown>
#14 0x5560ad0eb80f <unknown>
#15 0x5560ad1484c8 <unknown>
#16 0x5560ad1486a2 <unknown>
#17 0x5560ad15adc3 <unknown>
#18 0x7fad6b49caa4 <unknown>
#19 0x7fad6b529c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ec2ff86cba <unknown>
#1 0x55ec2f9fb8e0 <unknown>
#2 0x55ec2fa4d580 <unknown>
#3 0x55ec2fa4d771 <unknown>
#4 0x55ec2fa9b864 <unknown>
#5 0x55ec2fa7309d <unknown>
#6 0x55ec2fa98c63 <unknown>
#7 0x55ec2fa72e43 <unknown>
#8 0x55ec2fa3f9a8 <unknown>
#9 0x55ec2fa40621 <unknown>
#10 0x55ec2ff4a8b8 <unknown>
#11 0x55ec2ff4e5e2 <unknown>
#12 0x55ec2ff31683 <unknown>
#13 0x55ec2ff4f135 <unknown>
#14 0x55ec2ff1680f <unknown>
#15 0x55ec2ff734c8 <unknown>
#16 0x55ec2ff736a2 <unknown>
#17 0x55ec2ff85dc3 <unknown>
#18 0x7f6c6909caa4 <unknown>
#19 0x7f6c69129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x563200cc0cba <unknown>
#1 0x5632007358e0 <unknown>
#2 0x563200787580 <unknown>
#3 0x563200787771 <unknown>
#4 0x5632007d5864 <unknown>
#5 0x5632007ad09d <unknown>
#6 0x5632007d2c63 <unknown>
#7 0x5632007ace43 <unknown>
#8 0x5632007799a8 <unknown>
#9 0x56320077a621 <unknown>
#10 0x563200c848b8 <unknown>
#11 0x563200c885e2 <unknown>
#12 0x563200c6b683 <unknown>
#13 0x563200c89135 <unknown>
#14 0x563200c5080f <unknown>
#15 0x563200cad4c8 <unknown>
#16 0x563200cad6a2 <unknown>
#17 0x563200cbfdc3 <unknown>
#18 0x7f6afe69caa4 <unknown>
#19 0x7f6afe729c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55b2ecc2bcba <unknown>
#1 0x55b2ec6a08e0 <unknown>
#2 0x55b2ec6f2580 <unknown>
#3 0x55b2ec6f2771 <unknown>
#4 0x55b2ec740864 <unknown>
#5 0x55b2ec71809d <unknown>
#6 0x55b2ec73dc63 <unknown>
#7 0x55b2ec717e43 <unknown>
#8 0x55b2ec6e49a8 <unknown>
#9 0x55b2ec6e5621 <unknown>
#10 0x55b2ecbef8b8 <unknown>
#11 0x55b2ecbf35e2 <unknown>
#12 0x55b2ecbd6683 <unknown>
#13 0x55b2ecbf4135 <unknown>
#14 0x55b2ecbbb80f <unknown>
#15 0x55b2ecc184c8 <unknown>
#16 0x55b2ecc186a2 <unknown>
#17 0x55b2ecc2adc3 <unknown>
#18 0x7fba1fe9caa4 <unknown>
#19 0x7fba1ff29c3c <unknown>
================== 12 failed, 7 passed in 1540.30s (0:25:40) ===================
--------------------------------------------
Test Run Finished: 2025-09-21 04:15:23
Duration: 1543 seconds
Status: FAILURE
Exit Code: 1
============================================
