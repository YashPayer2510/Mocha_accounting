========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-09-15 03:50:39
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'rerunfailures': '16.0.1', 'metadata': '3.1.1', 'xdist': '3.8.0', 'html': '4.1.1', 'Faker': '37.6.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: rerunfailures-16.0.1, metadata-3.1.1, xdist-3.8.0, html-4.1.1, Faker-37.6.0
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation PASSED               [ 68%]
tests/test_login.py::test_blank_password_validation PASSED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] PASSED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] PASSED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] PASSED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] PASSED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] PASSED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="251b6558276878aea88b64e10b765318")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="251b6558276878aea88b64e10b765318")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a86a20>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5635b06e394a <unknown>
E       #1 0x5635b01588a0 <unknown>
E       #2 0x5635b01aa540 <unknown>
E       #3 0x5635b01aa731 <unknown>
E       #4 0x5635b01f8824 <unknown>
E       #5 0x5635b01d005d <unknown>
E       #6 0x5635b01f5c23 <unknown>
E       #7 0x5635b01cfe03 <unknown>
E       #8 0x5635b019c968 <unknown>
E       #9 0x5635b019d5e1 <unknown>
E       #10 0x5635b06a7548 <unknown>
E       #11 0x5635b06ab272 <unknown>
E       #12 0x5635b068e313 <unknown>
E       #13 0x5635b06abdc5 <unknown>
E       #14 0x5635b067349f <unknown>
E       #15 0x5635b06d0158 <unknown>
E       #16 0x5635b06d0332 <unknown>
E       #17 0x5635b06e2a53 <unknown>
E       #18 0x7f7fbce9caa4 <unknown>
E       #19 0x7f7fbcf29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 03:50:44,307 - INFO - Test data loaded successfully.
2025-09-15 03:50:44,307 - INFO - Starting test with Chrome browser
2025-09-15 03:50:44,308 - INFO - ====== WebDriver manager ======
2025-09-15 03:50:50,303 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:50:50,346 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:50:50,387 - INFO - There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
2025-09-15 03:50:50,387 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:50:50,496 - INFO - WebDriver version 140.0.7339.82 selected
2025-09-15 03:50:50,506 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-15 03:50:50,507 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
2025-09-15 03:50:50,552 - INFO - Driver downloading response is 200
2025-09-15 03:50:51,273 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:50:51,439 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
2025-09-15 03:51:38,089 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.82" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.82 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.82/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-15 03:51:38,090 - INFO - Starting the test case for valid credentials
2025-09-15 03:51:38,565 - INFO - User enters the email-id
2025-09-15 03:51:40,244 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 03:53:41,855 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="b72afa31256a3eb1524506207a8e8356")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b72afa31256a3eb1524506207a8e8356")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a89800>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55ef0f4bb94a <unknown>
E       #1 0x55ef0ef308a0 <unknown>
E       #2 0x55ef0ef82540 <unknown>
E       #3 0x55ef0ef82731 <unknown>
E       #4 0x55ef0efd0824 <unknown>
E       #5 0x55ef0efa805d <unknown>
E       #6 0x55ef0efcdc23 <unknown>
E       #7 0x55ef0efa7e03 <unknown>
E       #8 0x55ef0ef74968 <unknown>
E       #9 0x55ef0ef755e1 <unknown>
E       #10 0x55ef0f47f548 <unknown>
E       #11 0x55ef0f483272 <unknown>
E       #12 0x55ef0f466313 <unknown>
E       #13 0x55ef0f483dc5 <unknown>
E       #14 0x55ef0f44b49f <unknown>
E       #15 0x55ef0f4a8158 <unknown>
E       #16 0x55ef0f4a8332 <unknown>
E       #17 0x55ef0f4baa53 <unknown>
E       #18 0x7f45ed09caa4 <unknown>
E       #19 0x7f45ed129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 03:53:42,536 - INFO - Starting test with Chrome browser
2025-09-15 03:53:42,537 - INFO - ====== WebDriver manager ======
2025-09-15 03:53:42,612 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:53:42,650 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:53:42,769 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 03:53:44,523 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-15 03:53:44,524 - INFO - Starting the test case for valid credentials
2025-09-15 03:53:44,687 - INFO - User enters the email-id
2025-09-15 03:53:46,287 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 03:55:47,939 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5f7ad5dff21df7beb54820707ea5fdda")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5f7ad5dff21df7beb54820707ea5fdda")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f38c63e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55adab57694a <unknown>
E       #1 0x55adaafeb8a0 <unknown>
E       #2 0x55adab03d540 <unknown>
E       #3 0x55adab03d731 <unknown>
E       #4 0x55adab08b824 <unknown>
E       #5 0x55adab06305d <unknown>
E       #6 0x55adab088c23 <unknown>
E       #7 0x55adab062e03 <unknown>
E       #8 0x55adab02f968 <unknown>
E       #9 0x55adab0305e1 <unknown>
E       #10 0x55adab53a548 <unknown>
E       #11 0x55adab53e272 <unknown>
E       #12 0x55adab521313 <unknown>
E       #13 0x55adab53edc5 <unknown>
E       #14 0x55adab50649f <unknown>
E       #15 0x55adab563158 <unknown>
E       #16 0x55adab563332 <unknown>
E       #17 0x55adab575a53 <unknown>
E       #18 0x7ff87e29caa4 <unknown>
E       #19 0x7ff87e329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 03:55:48,172 - INFO - Starting test with Chrome browser
2025-09-15 03:55:48,172 - INFO - ====== WebDriver manager ======
2025-09-15 03:55:48,255 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:55:48,303 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:55:48,344 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 03:55:50,092 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-15 03:55:50,093 - INFO - Starting the test case for valid credentials
2025-09-15 03:55:50,265 - INFO - User enters the email-id
2025-09-15 03:55:51,985 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 03:57:53,642 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="1a8ec314628088e96c4696d158a857ff")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="1a8ec314628088e96c4696d158a857ff")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a89620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a57570494a <unknown>
E       #1 0x55a5751798a0 <unknown>
E       #2 0x55a5751cb540 <unknown>
E       #3 0x55a5751cb731 <unknown>
E       #4 0x55a575219824 <unknown>
E       #5 0x55a5751f105d <unknown>
E       #6 0x55a575216c23 <unknown>
E       #7 0x55a5751f0e03 <unknown>
E       #8 0x55a5751bd968 <unknown>
E       #9 0x55a5751be5e1 <unknown>
E       #10 0x55a5756c8548 <unknown>
E       #11 0x55a5756cc272 <unknown>
E       #12 0x55a5756af313 <unknown>
E       #13 0x55a5756ccdc5 <unknown>
E       #14 0x55a57569449f <unknown>
E       #15 0x55a5756f1158 <unknown>
E       #16 0x55a5756f1332 <unknown>
E       #17 0x55a575703a53 <unknown>
E       #18 0x7fd50949caa4 <unknown>
E       #19 0x7fd509529c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 03:57:53,712 - INFO - Starting test with Chrome browser
2025-09-15 03:57:53,712 - INFO - ====== WebDriver manager ======
2025-09-15 03:57:53,794 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:57:53,832 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:57:53,873 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 03:57:55,751 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-09-15 03:57:55,751 - INFO - Starting the test case for valid credentials
2025-09-15 03:57:55,937 - INFO - User enters the email-id
2025-09-15 03:57:57,642 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 03:59:59,273 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="0abaed262257278fef6a13bdaf0ab90c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0abaed262257278fef6a13bdaf0ab90c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a89ee0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56261b5b294a <unknown>
E       #1 0x56261b0278a0 <unknown>
E       #2 0x56261b079540 <unknown>
E       #3 0x56261b079731 <unknown>
E       #4 0x56261b0c7824 <unknown>
E       #5 0x56261b09f05d <unknown>
E       #6 0x56261b0c4c23 <unknown>
E       #7 0x56261b09ee03 <unknown>
E       #8 0x56261b06b968 <unknown>
E       #9 0x56261b06c5e1 <unknown>
E       #10 0x56261b576548 <unknown>
E       #11 0x56261b57a272 <unknown>
E       #12 0x56261b55d313 <unknown>
E       #13 0x56261b57adc5 <unknown>
E       #14 0x56261b54249f <unknown>
E       #15 0x56261b59f158 <unknown>
E       #16 0x56261b59f332 <unknown>
E       #17 0x56261b5b1a53 <unknown>
E       #18 0x7f884629caa4 <unknown>
E       #19 0x7f8846329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 03:59:59,357 - INFO - Starting test with Chrome browser
2025-09-15 03:59:59,357 - INFO - ====== WebDriver manager ======
2025-09-15 03:59:59,442 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:59:59,483 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 03:59:59,517 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 04:00:01,651 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 04:02:03,545 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="71bf9c538043bdc89c851671d6747a67")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="71bf9c538043bdc89c851671d6747a67")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a89f80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562be5e3594a <unknown>
E       #1 0x562be58aa8a0 <unknown>
E       #2 0x562be58fc540 <unknown>
E       #3 0x562be58fc731 <unknown>
E       #4 0x562be594a824 <unknown>
E       #5 0x562be592205d <unknown>
E       #6 0x562be5947c23 <unknown>
E       #7 0x562be5921e03 <unknown>
E       #8 0x562be58ee968 <unknown>
E       #9 0x562be58ef5e1 <unknown>
E       #10 0x562be5df9548 <unknown>
E       #11 0x562be5dfd272 <unknown>
E       #12 0x562be5de0313 <unknown>
E       #13 0x562be5dfddc5 <unknown>
E       #14 0x562be5dc549f <unknown>
E       #15 0x562be5e22158 <unknown>
E       #16 0x562be5e22332 <unknown>
E       #17 0x562be5e34a53 <unknown>
E       #18 0x7f123ca9caa4 <unknown>
E       #19 0x7f123cb29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 04:02:03,630 - INFO - Starting test with Chrome browser
2025-09-15 04:02:03,630 - INFO - ====== WebDriver manager ======
2025-09-15 04:02:03,718 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:02:03,762 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:02:03,798 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 04:02:05,524 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 04:04:07,330 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5669f69305c97fa49567ef118e64734d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5669f69305c97fa49567ef118e64734d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a89d00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5612d12a994a <unknown>
E       #1 0x5612d0d1e8a0 <unknown>
E       #2 0x5612d0d70540 <unknown>
E       #3 0x5612d0d70731 <unknown>
E       #4 0x5612d0dbe824 <unknown>
E       #5 0x5612d0d9605d <unknown>
E       #6 0x5612d0dbbc23 <unknown>
E       #7 0x5612d0d95e03 <unknown>
E       #8 0x5612d0d62968 <unknown>
E       #9 0x5612d0d635e1 <unknown>
E       #10 0x5612d126d548 <unknown>
E       #11 0x5612d1271272 <unknown>
E       #12 0x5612d1254313 <unknown>
E       #13 0x5612d1271dc5 <unknown>
E       #14 0x5612d123949f <unknown>
E       #15 0x5612d1296158 <unknown>
E       #16 0x5612d1296332 <unknown>
E       #17 0x5612d12a8a53 <unknown>
E       #18 0x7f6196a9caa4 <unknown>
E       #19 0x7f6196b29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 04:04:07,434 - INFO - Starting test with Chrome browser
2025-09-15 04:04:07,434 - INFO - ====== WebDriver manager ======
2025-09-15 04:04:07,533 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:04:07,573 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:04:07,616 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 04:04:09,459 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 04:06:11,235 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c5784bf682f3606f57217d208b58d3fc")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c5784bf682f3606f57217d208b58d3fc")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a8a7a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5620969ef94a <unknown>
E       #1 0x5620964648a0 <unknown>
E       #2 0x5620964b6540 <unknown>
E       #3 0x5620964b6731 <unknown>
E       #4 0x562096504824 <unknown>
E       #5 0x5620964dc05d <unknown>
E       #6 0x562096501c23 <unknown>
E       #7 0x5620964dbe03 <unknown>
E       #8 0x5620964a8968 <unknown>
E       #9 0x5620964a95e1 <unknown>
E       #10 0x5620969b3548 <unknown>
E       #11 0x5620969b7272 <unknown>
E       #12 0x56209699a313 <unknown>
E       #13 0x5620969b7dc5 <unknown>
E       #14 0x56209697f49f <unknown>
E       #15 0x5620969dc158 <unknown>
E       #16 0x5620969dc332 <unknown>
E       #17 0x5620969eea53 <unknown>
E       #18 0x7f4df029caa4 <unknown>
E       #19 0x7f4df0329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 04:06:11,320 - INFO - Starting test with Chrome browser
2025-09-15 04:06:11,321 - INFO - ====== WebDriver manager ======
2025-09-15 04:06:11,410 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:06:11,457 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:06:11,527 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 04:06:13,260 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 04:08:15,032 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="09fb44f5a1d9ec164c8c301f9a0dd9e9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="09fb44f5a1d9ec164c8c301f9a0dd9e9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a8aac0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55eeb0b1194a <unknown>
E       #1 0x55eeb05868a0 <unknown>
E       #2 0x55eeb05d8540 <unknown>
E       #3 0x55eeb05d8731 <unknown>
E       #4 0x55eeb0626824 <unknown>
E       #5 0x55eeb05fe05d <unknown>
E       #6 0x55eeb0623c23 <unknown>
E       #7 0x55eeb05fde03 <unknown>
E       #8 0x55eeb05ca968 <unknown>
E       #9 0x55eeb05cb5e1 <unknown>
E       #10 0x55eeb0ad5548 <unknown>
E       #11 0x55eeb0ad9272 <unknown>
E       #12 0x55eeb0abc313 <unknown>
E       #13 0x55eeb0ad9dc5 <unknown>
E       #14 0x55eeb0aa149f <unknown>
E       #15 0x55eeb0afe158 <unknown>
E       #16 0x55eeb0afe332 <unknown>
E       #17 0x55eeb0b10a53 <unknown>
E       #18 0x7f7640c9caa4 <unknown>
E       #19 0x7f7640d29c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 04:08:15,117 - INFO - Starting test with Chrome browser
2025-09-15 04:08:15,118 - INFO - ====== WebDriver manager ======
2025-09-15 04:08:15,208 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:08:15,253 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:08:15,288 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 04:08:17,445 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 04:10:20,889 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="2361ca8f0d2f509244c96228a1333edc")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="2361ca8f0d2f509244c96228a1333edc")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a8a840>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x56111c72d94a <unknown>
E       #1 0x56111c1a28a0 <unknown>
E       #2 0x56111c1f4540 <unknown>
E       #3 0x56111c1f4731 <unknown>
E       #4 0x56111c242824 <unknown>
E       #5 0x56111c21a05d <unknown>
E       #6 0x56111c23fc23 <unknown>
E       #7 0x56111c219e03 <unknown>
E       #8 0x56111c1e6968 <unknown>
E       #9 0x56111c1e75e1 <unknown>
E       #10 0x56111c6f1548 <unknown>
E       #11 0x56111c6f5272 <unknown>
E       #12 0x56111c6d8313 <unknown>
E       #13 0x56111c6f5dc5 <unknown>
E       #14 0x56111c6bd49f <unknown>
E       #15 0x56111c71a158 <unknown>
E       #16 0x56111c71a332 <unknown>
E       #17 0x56111c72ca53 <unknown>
E       #18 0x7f717c09caa4 <unknown>
E       #19 0x7f717c129c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 04:10:20,975 - INFO - Starting test with Chrome browser
2025-09-15 04:10:20,975 - INFO - ====== WebDriver manager ======
2025-09-15 04:10:21,062 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:10:21,113 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:10:21,148 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 04:10:22,949 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 04:12:26,471 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7eacc7e306db644cfe9d4cb65fc3e60c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7eacc7e306db644cfe9d4cb65fc3e60c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a8a2a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x561098d7094a <unknown>
E       #1 0x5610987e58a0 <unknown>
E       #2 0x561098837540 <unknown>
E       #3 0x561098837731 <unknown>
E       #4 0x561098885824 <unknown>
E       #5 0x56109885d05d <unknown>
E       #6 0x561098882c23 <unknown>
E       #7 0x56109885ce03 <unknown>
E       #8 0x561098829968 <unknown>
E       #9 0x56109882a5e1 <unknown>
E       #10 0x561098d34548 <unknown>
E       #11 0x561098d38272 <unknown>
E       #12 0x561098d1b313 <unknown>
E       #13 0x561098d38dc5 <unknown>
E       #14 0x561098d0049f <unknown>
E       #15 0x561098d5d158 <unknown>
E       #16 0x561098d5d332 <unknown>
E       #17 0x561098d6fa53 <unknown>
E       #18 0x7fb8cf69caa4 <unknown>
E       #19 0x7fb8cf729c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 04:12:26,556 - INFO - Starting test with Chrome browser
2025-09-15 04:12:26,556 - INFO - ====== WebDriver manager ======
2025-09-15 04:12:26,639 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:12:26,680 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:12:26,721 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 04:12:28,593 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 04:14:32,007 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f64565ecf63c11ff15c51d20319af4ce")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f64565ecf63c11ff15c51d20319af4ce")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7ff0f2a89620>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562830b3994a <unknown>
E       #1 0x5628305ae8a0 <unknown>
E       #2 0x562830600540 <unknown>
E       #3 0x562830600731 <unknown>
E       #4 0x56283064e824 <unknown>
E       #5 0x56283062605d <unknown>
E       #6 0x56283064bc23 <unknown>
E       #7 0x562830625e03 <unknown>
E       #8 0x5628305f2968 <unknown>
E       #9 0x5628305f35e1 <unknown>
E       #10 0x562830afd548 <unknown>
E       #11 0x562830b01272 <unknown>
E       #12 0x562830ae4313 <unknown>
E       #13 0x562830b01dc5 <unknown>
E       #14 0x562830ac949f <unknown>
E       #15 0x562830b26158 <unknown>
E       #16 0x562830b26332 <unknown>
E       #17 0x562830b38a53 <unknown>
E       #18 0x7fdd3929caa4 <unknown>
E       #19 0x7fdd39329c3c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-09-15 04:14:32,091 - INFO - Starting test with Chrome browser
2025-09-15 04:14:32,092 - INFO - ====== WebDriver manager ======
2025-09-15 04:14:32,181 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:14:32,225 - INFO - Get LATEST chromedriver version for google-chrome
2025-09-15 04:14:32,263 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
2025-09-15 04:14:34,119 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.82/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-09-15 04:16:37,687 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20250915_035043/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5635b06e394a <unknown>
#1 0x5635b01588a0 <unknown>
#2 0x5635b01aa540 <unknown>
#3 0x5635b01aa731 <unknown>
#4 0x5635b01f8824 <unknown>
#5 0x5635b01d005d <unknown>
#6 0x5635b01f5c23 <unknown>
#7 0x5635b01cfe03 <unknown>
#8 0x5635b019c968 <unknown>
#9 0x5635b019d5e1 <unknown>
#10 0x5635b06a7548 <unknown>
#11 0x5635b06ab272 <unknown>
#12 0x5635b068e313 <unknown>
#13 0x5635b06abdc5 <unknown>
#14 0x5635b067349f <unknown>
#15 0x5635b06d0158 <unknown>
#16 0x5635b06d0332 <unknown>
#17 0x5635b06e2a53 <unknown>
#18 0x7f7fbce9caa4 <unknown>
#19 0x7f7fbcf29c3c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55ef0f4bb94a <unknown>
#1 0x55ef0ef308a0 <unknown>
#2 0x55ef0ef82540 <unknown>
#3 0x55ef0ef82731 <unknown>
#4 0x55ef0efd0824 <unknown>
#5 0x55ef0efa805d <unknown>
#6 0x55ef0efcdc23 <unknown>
#7 0x55ef0efa7e03 <unknown>
#8 0x55ef0ef74968 <unknown>
#9 0x55ef0ef755e1 <unknown>
#10 0x55ef0f47f548 <unknown>
#11 0x55ef0f483272 <unknown>
#12 0x55ef0f466313 <unknown>
#13 0x55ef0f483dc5 <unknown>
#14 0x55ef0f44b49f <unknown>
#15 0x55ef0f4a8158 <unknown>
#16 0x55ef0f4a8332 <unknown>
#17 0x55ef0f4baa53 <unknown>
#18 0x7f45ed09caa4 <unknown>
#19 0x7f45ed129c3c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55adab57694a <unknown>
#1 0x55adaafeb8a0 <unknown>
#2 0x55adab03d540 <unknown>
#3 0x55adab03d731 <unknown>
#4 0x55adab08b824 <unknown>
#5 0x55adab06305d <unknown>
#6 0x55adab088c23 <unknown>
#7 0x55adab062e03 <unknown>
#8 0x55adab02f968 <unknown>
#9 0x55adab0305e1 <unknown>
#10 0x55adab53a548 <unknown>
#11 0x55adab53e272 <unknown>
#12 0x55adab521313 <unknown>
#13 0x55adab53edc5 <unknown>
#14 0x55adab50649f <unknown>
#15 0x55adab563158 <unknown>
#16 0x55adab563332 <unknown>
#17 0x55adab575a53 <unknown>
#18 0x7ff87e29caa4 <unknown>
#19 0x7ff87e329c3c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a57570494a <unknown>
#1 0x55a5751798a0 <unknown>
#2 0x55a5751cb540 <unknown>
#3 0x55a5751cb731 <unknown>
#4 0x55a575219824 <unknown>
#5 0x55a5751f105d <unknown>
#6 0x55a575216c23 <unknown>
#7 0x55a5751f0e03 <unknown>
#8 0x55a5751bd968 <unknown>
#9 0x55a5751be5e1 <unknown>
#10 0x55a5756c8548 <unknown>
#11 0x55a5756cc272 <unknown>
#12 0x55a5756af313 <unknown>
#13 0x55a5756ccdc5 <unknown>
#14 0x55a57569449f <unknown>
#15 0x55a5756f1158 <unknown>
#16 0x55a5756f1332 <unknown>
#17 0x55a575703a53 <unknown>
#18 0x7fd50949caa4 <unknown>
#19 0x7fd509529c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56261b5b294a <unknown>
#1 0x56261b0278a0 <unknown>
#2 0x56261b079540 <unknown>
#3 0x56261b079731 <unknown>
#4 0x56261b0c7824 <unknown>
#5 0x56261b09f05d <unknown>
#6 0x56261b0c4c23 <unknown>
#7 0x56261b09ee03 <unknown>
#8 0x56261b06b968 <unknown>
#9 0x56261b06c5e1 <unknown>
#10 0x56261b576548 <unknown>
#11 0x56261b57a272 <unknown>
#12 0x56261b55d313 <unknown>
#13 0x56261b57adc5 <unknown>
#14 0x56261b54249f <unknown>
#15 0x56261b59f158 <unknown>
#16 0x56261b59f332 <unknown>
#17 0x56261b5b1a53 <unknown>
#18 0x7f884629caa4 <unknown>
#19 0x7f8846329c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562be5e3594a <unknown>
#1 0x562be58aa8a0 <unknown>
#2 0x562be58fc540 <unknown>
#3 0x562be58fc731 <unknown>
#4 0x562be594a824 <unknown>
#5 0x562be592205d <unknown>
#6 0x562be5947c23 <unknown>
#7 0x562be5921e03 <unknown>
#8 0x562be58ee968 <unknown>
#9 0x562be58ef5e1 <unknown>
#10 0x562be5df9548 <unknown>
#11 0x562be5dfd272 <unknown>
#12 0x562be5de0313 <unknown>
#13 0x562be5dfddc5 <unknown>
#14 0x562be5dc549f <unknown>
#15 0x562be5e22158 <unknown>
#16 0x562be5e22332 <unknown>
#17 0x562be5e34a53 <unknown>
#18 0x7f123ca9caa4 <unknown>
#19 0x7f123cb29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5612d12a994a <unknown>
#1 0x5612d0d1e8a0 <unknown>
#2 0x5612d0d70540 <unknown>
#3 0x5612d0d70731 <unknown>
#4 0x5612d0dbe824 <unknown>
#5 0x5612d0d9605d <unknown>
#6 0x5612d0dbbc23 <unknown>
#7 0x5612d0d95e03 <unknown>
#8 0x5612d0d62968 <unknown>
#9 0x5612d0d635e1 <unknown>
#10 0x5612d126d548 <unknown>
#11 0x5612d1271272 <unknown>
#12 0x5612d1254313 <unknown>
#13 0x5612d1271dc5 <unknown>
#14 0x5612d123949f <unknown>
#15 0x5612d1296158 <unknown>
#16 0x5612d1296332 <unknown>
#17 0x5612d12a8a53 <unknown>
#18 0x7f6196a9caa4 <unknown>
#19 0x7f6196b29c3c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5620969ef94a <unknown>
#1 0x5620964648a0 <unknown>
#2 0x5620964b6540 <unknown>
#3 0x5620964b6731 <unknown>
#4 0x562096504824 <unknown>
#5 0x5620964dc05d <unknown>
#6 0x562096501c23 <unknown>
#7 0x5620964dbe03 <unknown>
#8 0x5620964a8968 <unknown>
#9 0x5620964a95e1 <unknown>
#10 0x5620969b3548 <unknown>
#11 0x5620969b7272 <unknown>
#12 0x56209699a313 <unknown>
#13 0x5620969b7dc5 <unknown>
#14 0x56209697f49f <unknown>
#15 0x5620969dc158 <unknown>
#16 0x5620969dc332 <unknown>
#17 0x5620969eea53 <unknown>
#18 0x7f4df029caa4 <unknown>
#19 0x7f4df0329c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55eeb0b1194a <unknown>
#1 0x55eeb05868a0 <unknown>
#2 0x55eeb05d8540 <unknown>
#3 0x55eeb05d8731 <unknown>
#4 0x55eeb0626824 <unknown>
#5 0x55eeb05fe05d <unknown>
#6 0x55eeb0623c23 <unknown>
#7 0x55eeb05fde03 <unknown>
#8 0x55eeb05ca968 <unknown>
#9 0x55eeb05cb5e1 <unknown>
#10 0x55eeb0ad5548 <unknown>
#11 0x55eeb0ad9272 <unknown>
#12 0x55eeb0abc313 <unknown>
#13 0x55eeb0ad9dc5 <unknown>
#14 0x55eeb0aa149f <unknown>
#15 0x55eeb0afe158 <unknown>
#16 0x55eeb0afe332 <unknown>
#17 0x55eeb0b10a53 <unknown>
#18 0x7f7640c9caa4 <unknown>
#19 0x7f7640d29c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x56111c72d94a <unknown>
#1 0x56111c1a28a0 <unknown>
#2 0x56111c1f4540 <unknown>
#3 0x56111c1f4731 <unknown>
#4 0x56111c242824 <unknown>
#5 0x56111c21a05d <unknown>
#6 0x56111c23fc23 <unknown>
#7 0x56111c219e03 <unknown>
#8 0x56111c1e6968 <unknown>
#9 0x56111c1e75e1 <unknown>
#10 0x56111c6f1548 <unknown>
#11 0x56111c6f5272 <unknown>
#12 0x56111c6d8313 <unknown>
#13 0x56111c6f5dc5 <unknown>
#14 0x56111c6bd49f <unknown>
#15 0x56111c71a158 <unknown>
#16 0x56111c71a332 <unknown>
#17 0x56111c72ca53 <unknown>
#18 0x7f717c09caa4 <unknown>
#19 0x7f717c129c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x561098d7094a <unknown>
#1 0x5610987e58a0 <unknown>
#2 0x561098837540 <unknown>
#3 0x561098837731 <unknown>
#4 0x561098885824 <unknown>
#5 0x56109885d05d <unknown>
#6 0x561098882c23 <unknown>
#7 0x56109885ce03 <unknown>
#8 0x561098829968 <unknown>
#9 0x56109882a5e1 <unknown>
#10 0x561098d34548 <unknown>
#11 0x561098d38272 <unknown>
#12 0x561098d1b313 <unknown>
#13 0x561098d38dc5 <unknown>
#14 0x561098d0049f <unknown>
#15 0x561098d5d158 <unknown>
#16 0x561098d5d332 <unknown>
#17 0x561098d6fa53 <unknown>
#18 0x7fb8cf69caa4 <unknown>
#19 0x7fb8cf729c3c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562830b3994a <unknown>
#1 0x5628305ae8a0 <unknown>
#2 0x562830600540 <unknown>
#3 0x562830600731 <unknown>
#4 0x56283064e824 <unknown>
#5 0x56283062605d <unknown>
#6 0x56283064bc23 <unknown>
#7 0x562830625e03 <unknown>
#8 0x5628305f2968 <unknown>
#9 0x5628305f35e1 <unknown>
#10 0x562830afd548 <unknown>
#11 0x562830b01272 <unknown>
#12 0x562830ae4313 <unknown>
#13 0x562830b01dc5 <unknown>
#14 0x562830ac949f <unknown>
#15 0x562830b26158 <unknown>
#16 0x562830b26332 <unknown>
#17 0x562830b38a53 <unknown>
#18 0x7fdd3929caa4 <unknown>
#19 0x7fdd39329c3c <unknown>
================== 12 failed, 7 passed in 1572.12s (0:26:12) ===================
--------------------------------------------
Test Run Finished: 2025-09-15 04:16:56
Duration: 1577 seconds
Status: FAILURE
Exit Code: 1
============================================
