========== Linting Errors ==========
0
========== End of Linting ==========
============================================
Test Run Started: 2025-10-14 03:46:48
--------------------------------------------
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.3.5, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.13.7', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.3.5', 'pluggy': '1.6.0'}, 'Plugins': {'html': '4.1.1', 'rerunfailures': '16.1', 'Faker': '37.11.0', 'xdist': '3.8.0', 'metadata': '3.1.1'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
rootdir: /home/runner/work/Mocha_accounting/Mocha_accounting
plugins: html-4.1.1, rerunfailures-16.1, Faker-37.11.0, xdist-3.8.0, metadata-3.1.1
collecting ... collected 19 items

tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] FAILED [  5%]
tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] FAILED [ 10%]
tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] FAILED [ 15%]
tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] FAILED [ 21%]
tests/test_login.py::test_invalid_email_login[username0] FAILED          [ 26%]
tests/test_login.py::test_invalid_email_login[username1] FAILED          [ 31%]
tests/test_login.py::test_invalid_email_login[username2] FAILED          [ 36%]
tests/test_login.py::test_invalid_email_login[username3] FAILED          [ 42%]
tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] FAILED [ 47%]
tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] FAILED [ 52%]
tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] FAILED [ 57%]
tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] FAILED [ 63%]
tests/test_login.py::test_blank_username_validation FAILED               [ 68%]
tests/test_login.py::test_blank_password_validation FAILED               [ 73%]
tests/test_login.py::test_invalid_email_validation[username0] FAILED     [ 78%]
tests/test_login.py::test_invalid_email_validation[username1] FAILED     [ 84%]
tests/test_login.py::test_invalid_email_validation[username2] FAILED     [ 89%]
tests/test_login.py::test_invalid_email_validation[username3] FAILED     [ 94%]
tests/test_login.py::test_invalid_email_validation[username4] FAILED     [100%]

=================================== FAILURES ===================================
________ test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="d6cdac2c445ec5d7d68cf071b2874254")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Ais@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d6cdac2c445ec5d7d68cf071b2874254")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f35254900>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5561b44fcfba <unknown>
E       #1 0x5561b3f816d0 <unknown>
E       #2 0x5561b3fd32aa <unknown>
E       #3 0x5561b3fd3541 <unknown>
E       #4 0x5561b40216c4 <unknown>
E       #5 0x5561b3ff8e5d <unknown>
E       #6 0x5561b401eb54 <unknown>
E       #7 0x5561b3ff8c03 <unknown>
E       #8 0x5561b3fc57a8 <unknown>
E       #9 0x5561b3fc6421 <unknown>
E       #10 0x5561b44c1b28 <unknown>
E       #11 0x5561b44c587f <unknown>
E       #12 0x5561b44a9c49 <unknown>
E       #13 0x5561b44c6405 <unknown>
E       #14 0x5561b448f4ff <unknown>
E       #15 0x5561b44ea258 <unknown>
E       #16 0x5561b44ea432 <unknown>
E       #17 0x5561b44fbfa3 <unknown>
E       #18 0x7f2d69a9caa4 <unknown>
E       #19 0x7f2d69b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 03:46:51,412 - INFO - Test data loaded successfully.
2025-10-14 03:46:51,412 - INFO - Starting test with Chrome browser
2025-10-14 03:46:51,413 - INFO - ====== WebDriver manager ======
2025-10-14 03:46:52,673 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:46:52,726 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:46:52,763 - INFO - There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
2025-10-14 03:46:52,763 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:46:52,868 - INFO - WebDriver version 140.0.7339.207 selected
2025-10-14 03:46:52,871 - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-14 03:46:52,871 - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
2025-10-14 03:46:52,912 - INFO - Driver downloading response is 200
2025-10-14 03:46:52,964 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:46:53,108 - INFO - Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
2025-10-14 03:47:01,570 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:79 Test data loaded successfully.
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 There is no [linux64] chromedriver "140.0.7339.207" for browser google-chrome "140.0.7339" in cache
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 WebDriver version 140.0.7339.207 selected
INFO     WDM:logger.py:11 Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
INFO     WDM:logger.py:11 Driver downloading response is 200
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver has been saved in cache [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207]
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-14 03:47:01,571 - INFO - Starting the test case for valid credentials
2025-10-14 03:47:01,837 - INFO - User enters the email-id
2025-10-14 03:47:03,356 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 03:49:04,990 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________ test_valid_login[samatakamble9@gmail.com-Samata@16] ______________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ce178879c6a87241fb1c677c8e0609e1")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Samata@16'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ce178879c6a87241fb1c677c8e0609e1")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345f9940>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x565228869fba <unknown>
E       #1 0x5652282ee6d0 <unknown>
E       #2 0x5652283402aa <unknown>
E       #3 0x565228340541 <unknown>
E       #4 0x56522838e6c4 <unknown>
E       #5 0x565228365e5d <unknown>
E       #6 0x56522838bb54 <unknown>
E       #7 0x565228365c03 <unknown>
E       #8 0x5652283327a8 <unknown>
E       #9 0x565228333421 <unknown>
E       #10 0x56522882eb28 <unknown>
E       #11 0x56522883287f <unknown>
E       #12 0x565228816c49 <unknown>
E       #13 0x565228833405 <unknown>
E       #14 0x5652287fc4ff <unknown>
E       #15 0x565228857258 <unknown>
E       #16 0x565228857432 <unknown>
E       #17 0x565228868fa3 <unknown>
E       #18 0x7fed2a09caa4 <unknown>
E       #19 0x7fed2a129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 03:49:05,110 - INFO - Starting test with Chrome browser
2025-10-14 03:49:05,110 - INFO - ====== WebDriver manager ======
2025-10-14 03:49:05,176 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:49:05,215 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:49:05,265 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 03:49:06,600 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-14 03:49:06,600 - INFO - Starting the test case for valid credentials
2025-10-14 03:49:06,739 - INFO - User enters the email-id
2025-10-14 03:49:08,253 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 03:51:09,975 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________ test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] ____________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="44a073d5b3c9412f6b9368b18b9aaa01")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Shubham@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="44a073d5b3c9412f6b9368b18b9aaa01")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f356ddf80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f4871ecfba <unknown>
E       #1 0x55f486c716d0 <unknown>
E       #2 0x55f486cc32aa <unknown>
E       #3 0x55f486cc3541 <unknown>
E       #4 0x55f486d116c4 <unknown>
E       #5 0x55f486ce8e5d <unknown>
E       #6 0x55f486d0eb54 <unknown>
E       #7 0x55f486ce8c03 <unknown>
E       #8 0x55f486cb57a8 <unknown>
E       #9 0x55f486cb6421 <unknown>
E       #10 0x55f4871b1b28 <unknown>
E       #11 0x55f4871b587f <unknown>
E       #12 0x55f487199c49 <unknown>
E       #13 0x55f4871b6405 <unknown>
E       #14 0x55f48717f4ff <unknown>
E       #15 0x55f4871da258 <unknown>
E       #16 0x55f4871da432 <unknown>
E       #17 0x55f4871ebfa3 <unknown>
E       #18 0x7f0a4a89caa4 <unknown>
E       #19 0x7f0a4a929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 03:51:10,034 - INFO - Starting test with Chrome browser
2025-10-14 03:51:10,034 - INFO - ====== WebDriver manager ======
2025-10-14 03:51:10,101 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:51:10,146 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:51:10,183 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 03:51:11,331 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-14 03:51:11,332 - INFO - Starting the test case for valid credentials
2025-10-14 03:51:11,473 - INFO - User enters the email-id
2025-10-14 03:51:13,029 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 03:53:14,631 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
______ test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="8df0af7e532c3d2dce567186b776b973")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'Hrishikesh@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, valid_password))
    def test_valid_login(setup, login_test_data, username, password):
       # expectedmessage = login_test_data['expectederrormsg']
        driver = setup
        login_page = LoginPage(driver)
        logger.info("Starting the test case for valid credentials")
        login_page.enter_username(username)
        logger.info("User enters the email-id")
        login_page.enter_password(password)
        logger.info("User enters the password")
>       login_page.click_loginbutton()

tests/test_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="8df0af7e532c3d2dce567186b776b973")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345f99e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559b3166efba <unknown>
E       #1 0x559b310f36d0 <unknown>
E       #2 0x559b311452aa <unknown>
E       #3 0x559b31145541 <unknown>
E       #4 0x559b311936c4 <unknown>
E       #5 0x559b3116ae5d <unknown>
E       #6 0x559b31190b54 <unknown>
E       #7 0x559b3116ac03 <unknown>
E       #8 0x559b311377a8 <unknown>
E       #9 0x559b31138421 <unknown>
E       #10 0x559b31633b28 <unknown>
E       #11 0x559b3163787f <unknown>
E       #12 0x559b3161bc49 <unknown>
E       #13 0x559b31638405 <unknown>
E       #14 0x559b316014ff <unknown>
E       #15 0x559b3165c258 <unknown>
E       #16 0x559b3165c432 <unknown>
E       #17 0x559b3166dfa3 <unknown>
E       #18 0x7fb0f109caa4 <unknown>
E       #19 0x7fb0f1129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 03:53:14,692 - INFO - Starting test with Chrome browser
2025-10-14 03:53:14,692 - INFO - ====== WebDriver manager ======
2025-10-14 03:53:14,756 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:53:14,793 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:53:14,829 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 03:53:16,211 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
----------------------------- Captured stderr call -----------------------------
2025-10-14 03:53:16,212 - INFO - Starting the test case for valid credentials
2025-10-14 03:53:16,362 - INFO - User enters the email-id
2025-10-14 03:53:17,893 - INFO - User enters the password
------------------------------ Captured log call -------------------------------
INFO     tests.test_login:test_login.py:36 Starting the test case for valid credentials
INFO     tests.test_login:test_login.py:38 User enters the email-id
INFO     tests.test_login:test_login.py:40 User enters the password
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 03:55:19,493 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username0] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="5cab85f70338bdcb3792060fb6becc8f")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="5cab85f70338bdcb3792060fb6becc8f")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fa020>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55c2026cdfba <unknown>
E       #1 0x55c2021526d0 <unknown>
E       #2 0x55c2021a42aa <unknown>
E       #3 0x55c2021a4541 <unknown>
E       #4 0x55c2021f26c4 <unknown>
E       #5 0x55c2021c9e5d <unknown>
E       #6 0x55c2021efb54 <unknown>
E       #7 0x55c2021c9c03 <unknown>
E       #8 0x55c2021967a8 <unknown>
E       #9 0x55c202197421 <unknown>
E       #10 0x55c202692b28 <unknown>
E       #11 0x55c20269687f <unknown>
E       #12 0x55c20267ac49 <unknown>
E       #13 0x55c202697405 <unknown>
E       #14 0x55c2026604ff <unknown>
E       #15 0x55c2026bb258 <unknown>
E       #16 0x55c2026bb432 <unknown>
E       #17 0x55c2026ccfa3 <unknown>
E       #18 0x7f1dc8c9caa4 <unknown>
E       #19 0x7f1dc8d29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 03:55:19,559 - INFO - Starting test with Chrome browser
2025-10-14 03:55:19,560 - INFO - ====== WebDriver manager ======
2025-10-14 03:55:19,623 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:55:19,659 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:55:19,694 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 03:55:21,058 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 03:57:22,822 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username1] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="ff9032fac1aad12ee49c51132cf0b95c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash@1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ff9032fac1aad12ee49c51132cf0b95c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fa0c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x562ae404cfba <unknown>
E       #1 0x562ae3ad16d0 <unknown>
E       #2 0x562ae3b232aa <unknown>
E       #3 0x562ae3b23541 <unknown>
E       #4 0x562ae3b716c4 <unknown>
E       #5 0x562ae3b48e5d <unknown>
E       #6 0x562ae3b6eb54 <unknown>
E       #7 0x562ae3b48c03 <unknown>
E       #8 0x562ae3b157a8 <unknown>
E       #9 0x562ae3b16421 <unknown>
E       #10 0x562ae4011b28 <unknown>
E       #11 0x562ae401587f <unknown>
E       #12 0x562ae3ff9c49 <unknown>
E       #13 0x562ae4016405 <unknown>
E       #14 0x562ae3fdf4ff <unknown>
E       #15 0x562ae403a258 <unknown>
E       #16 0x562ae403a432 <unknown>
E       #17 0x562ae404bfa3 <unknown>
E       #18 0x7fab7749caa4 <unknown>
E       #19 0x7fab77529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 03:57:22,888 - INFO - Starting test with Chrome browser
2025-10-14 03:57:22,888 - INFO - ====== WebDriver manager ======
2025-10-14 03:57:22,951 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:57:22,988 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:57:23,021 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 03:57:24,896 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 03:59:26,686 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username2] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="37d9cdd78bd0691403ae7644e664deee")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payerash10@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="37d9cdd78bd0691403ae7644e664deee")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345f9da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55aef1fcbfba <unknown>
E       #1 0x55aef1a506d0 <unknown>
E       #2 0x55aef1aa22aa <unknown>
E       #3 0x55aef1aa2541 <unknown>
E       #4 0x55aef1af06c4 <unknown>
E       #5 0x55aef1ac7e5d <unknown>
E       #6 0x55aef1aedb54 <unknown>
E       #7 0x55aef1ac7c03 <unknown>
E       #8 0x55aef1a947a8 <unknown>
E       #9 0x55aef1a95421 <unknown>
E       #10 0x55aef1f90b28 <unknown>
E       #11 0x55aef1f9487f <unknown>
E       #12 0x55aef1f78c49 <unknown>
E       #13 0x55aef1f95405 <unknown>
E       #14 0x55aef1f5e4ff <unknown>
E       #15 0x55aef1fb9258 <unknown>
E       #16 0x55aef1fb9432 <unknown>
E       #17 0x55aef1fcafa3 <unknown>
E       #18 0x7f530729caa4 <unknown>
E       #19 0x7f5307329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 03:59:26,744 - INFO - Starting test with Chrome browser
2025-10-14 03:59:26,744 - INFO - ====== WebDriver manager ======
2025-10-14 03:59:26,808 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:59:26,854 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 03:59:26,889 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 03:59:28,057 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:01:29,807 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_____________________ test_invalid_email_login[username3] ______________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="af571d0c564e838998ac089713a4faae")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payer@gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_username))
    def test_invalid_email_login(setup, login_test_data,username):
        driver= setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        #login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="af571d0c564e838998ac089713a4faae")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fa8e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55f493cc2fba <unknown>
E       #1 0x55f4937476d0 <unknown>
E       #2 0x55f4937992aa <unknown>
E       #3 0x55f493799541 <unknown>
E       #4 0x55f4937e76c4 <unknown>
E       #5 0x55f4937bee5d <unknown>
E       #6 0x55f4937e4b54 <unknown>
E       #7 0x55f4937bec03 <unknown>
E       #8 0x55f49378b7a8 <unknown>
E       #9 0x55f49378c421 <unknown>
E       #10 0x55f493c87b28 <unknown>
E       #11 0x55f493c8b87f <unknown>
E       #12 0x55f493c6fc49 <unknown>
E       #13 0x55f493c8c405 <unknown>
E       #14 0x55f493c554ff <unknown>
E       #15 0x55f493cb0258 <unknown>
E       #16 0x55f493cb0432 <unknown>
E       #17 0x55f493cc1fa3 <unknown>
E       #18 0x7fb994e9caa4 <unknown>
E       #19 0x7fb994f29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:01:29,865 - INFO - Starting test with Chrome browser
2025-10-14 04:01:29,866 - INFO - ====== WebDriver manager ======
2025-10-14 04:01:29,930 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:01:29,971 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:01:30,009 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:01:31,217 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:03:32,970 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_ test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] _

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="86f032535b7c48d766f9757f8931a4c4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'ranjeet.gupta@mochatechnologies.com', password = 'Password@123'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="86f032535b7c48d766f9757f8931a4c4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345f9da0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a25e792fba <unknown>
E       #1 0x55a25e2176d0 <unknown>
E       #2 0x55a25e2692aa <unknown>
E       #3 0x55a25e269541 <unknown>
E       #4 0x55a25e2b76c4 <unknown>
E       #5 0x55a25e28ee5d <unknown>
E       #6 0x55a25e2b4b54 <unknown>
E       #7 0x55a25e28ec03 <unknown>
E       #8 0x55a25e25b7a8 <unknown>
E       #9 0x55a25e25c421 <unknown>
E       #10 0x55a25e757b28 <unknown>
E       #11 0x55a25e75b87f <unknown>
E       #12 0x55a25e73fc49 <unknown>
E       #13 0x55a25e75c405 <unknown>
E       #14 0x55a25e7254ff <unknown>
E       #15 0x55a25e780258 <unknown>
E       #16 0x55a25e780432 <unknown>
E       #17 0x55a25e791fa3 <unknown>
E       #18 0x7f47c129caa4 <unknown>
E       #19 0x7f47c1329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:03:33,035 - INFO - Starting test with Chrome browser
2025-10-14 04:03:33,035 - INFO - ====== WebDriver manager ======
2025-10-14 04:03:33,100 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:03:33,137 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:03:33,173 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:03:34,429 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:05:37,725 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
_______ test_invalid_password_login[samatakamble9@gmail.com-Password@12] _______

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="bb3bc4ae15e5ac1d3d24b8b311f46a5c")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'samatakamble9@gmail.com', password = 'Password@12'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="bb3bc4ae15e5ac1d3d24b8b311f46a5c")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fa5c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x565033a49fba <unknown>
E       #1 0x5650334ce6d0 <unknown>
E       #2 0x5650335202aa <unknown>
E       #3 0x565033520541 <unknown>
E       #4 0x56503356e6c4 <unknown>
E       #5 0x565033545e5d <unknown>
E       #6 0x56503356bb54 <unknown>
E       #7 0x565033545c03 <unknown>
E       #8 0x5650335127a8 <unknown>
E       #9 0x565033513421 <unknown>
E       #10 0x565033a0eb28 <unknown>
E       #11 0x565033a1287f <unknown>
E       #12 0x5650339f6c49 <unknown>
E       #13 0x565033a13405 <unknown>
E       #14 0x5650339dc4ff <unknown>
E       #15 0x565033a37258 <unknown>
E       #16 0x565033a37432 <unknown>
E       #17 0x565033a48fa3 <unknown>
E       #18 0x7fdf2429caa4 <unknown>
E       #19 0x7fdf24329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:05:37,789 - INFO - Starting test with Chrome browser
2025-10-14 04:05:37,789 - INFO - ====== WebDriver manager ======
2025-10-14 04:05:37,853 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:05:37,889 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:05:37,926 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:05:39,103 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:07:42,301 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________ test_invalid_password_login[shubhamdabir07@gmail.com-Password] ________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="763e42f8deaf4264d1017b6d093a8c86")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'shubhamdabir07@gmail.com', password = 'Password'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="763e42f8deaf4264d1017b6d093a8c86")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345f9c60>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5629c95bcfba <unknown>
E       #1 0x5629c90416d0 <unknown>
E       #2 0x5629c90932aa <unknown>
E       #3 0x5629c9093541 <unknown>
E       #4 0x5629c90e16c4 <unknown>
E       #5 0x5629c90b8e5d <unknown>
E       #6 0x5629c90deb54 <unknown>
E       #7 0x5629c90b8c03 <unknown>
E       #8 0x5629c90857a8 <unknown>
E       #9 0x5629c9086421 <unknown>
E       #10 0x5629c9581b28 <unknown>
E       #11 0x5629c958587f <unknown>
E       #12 0x5629c9569c49 <unknown>
E       #13 0x5629c9586405 <unknown>
E       #14 0x5629c954f4ff <unknown>
E       #15 0x5629c95aa258 <unknown>
E       #16 0x5629c95aa432 <unknown>
E       #17 0x5629c95bbfa3 <unknown>
E       #18 0x7f073d69caa4 <unknown>
E       #19 0x7f073d729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:07:42,362 - INFO - Starting test with Chrome browser
2025-10-14 04:07:42,362 - INFO - ====== WebDriver manager ======
2025-10-14 04:07:42,426 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:07:42,464 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:07:42,500 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:07:43,819 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:09:47,024 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___ test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] ____

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="22ad2c20548a2eddda096685e00e7069")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = 'hrishikesh.shinde1607@gmail.com', password = 'payer@1234'

    @pytest.mark.parametrize("username, password", zip(valid_username, invalid_password))
    def test_invalid_password_login(setup, login_test_data,username, password ):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.enter_password(password)
>       login_page.click_loginbutton()

tests/test_login.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:44: in click_loginbutton
    self.actions.wait_for_element(self.login_button)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="22ad2c20548a2eddda096685e00e7069")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345f9760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55767dfdbfba <unknown>
E       #1 0x55767da606d0 <unknown>
E       #2 0x55767dab22aa <unknown>
E       #3 0x55767dab2541 <unknown>
E       #4 0x55767db006c4 <unknown>
E       #5 0x55767dad7e5d <unknown>
E       #6 0x55767dafdb54 <unknown>
E       #7 0x55767dad7c03 <unknown>
E       #8 0x55767daa47a8 <unknown>
E       #9 0x55767daa5421 <unknown>
E       #10 0x55767dfa0b28 <unknown>
E       #11 0x55767dfa487f <unknown>
E       #12 0x55767df88c49 <unknown>
E       #13 0x55767dfa5405 <unknown>
E       #14 0x55767df6e4ff <unknown>
E       #15 0x55767dfc9258 <unknown>
E       #16 0x55767dfc9432 <unknown>
E       #17 0x55767dfdafa3 <unknown>
E       #18 0x7fbdf109caa4 <unknown>
E       #19 0x7fbdf1129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:09:47,088 - INFO - Starting test with Chrome browser
2025-10-14 04:09:47,089 - INFO - ====== WebDriver manager ======
2025-10-14 04:09:47,153 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:09:47,189 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:09:47,224 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:09:48,647 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:11:51,899 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_username_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="16ceafd871a85c0ef50c13247e236c4d")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_username_validation(setup, login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        #login_page.enter_password(valid_password[0])
        login_page.click_username()
        login_page.disabled_click_login_button()
>       login_page.username_blank_validation(login_test_data)

tests/test_login.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:72: in username_blank_validation
    self.actions.wait_for_element(self.username_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="16ceafd871a85c0ef50c13247e236c4d")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fade0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x556deedc0fba <unknown>
E       #1 0x556dee8456d0 <unknown>
E       #2 0x556dee8972aa <unknown>
E       #3 0x556dee897541 <unknown>
E       #4 0x556dee8e56c4 <unknown>
E       #5 0x556dee8bce5d <unknown>
E       #6 0x556dee8e2b54 <unknown>
E       #7 0x556dee8bcc03 <unknown>
E       #8 0x556dee8897a8 <unknown>
E       #9 0x556dee88a421 <unknown>
E       #10 0x556deed85b28 <unknown>
E       #11 0x556deed8987f <unknown>
E       #12 0x556deed6dc49 <unknown>
E       #13 0x556deed8a405 <unknown>
E       #14 0x556deed534ff <unknown>
E       #15 0x556deedae258 <unknown>
E       #16 0x556deedae432 <unknown>
E       #17 0x556deedbffa3 <unknown>
E       #18 0x7f497489caa4 <unknown>
E       #19 0x7f4974929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:11:51,964 - INFO - Starting test with Chrome browser
2025-10-14 04:11:51,964 - INFO - ====== WebDriver manager ======
2025-10-14 04:11:52,028 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:11:52,067 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:11:52,103 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:11:53,373 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:13:55,150 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
________________________ test_blank_password_validation ________________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="7f753a8577823c91a86cea217139306a")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}

    def test_blank_password_validation(setup,login_test_data):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(valid_username[0])
        login_page.click_password()
        login_page.disabled_click_login_button()
>       login_page.password_blank_validation(login_test_data)

tests/test_login.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:78: in password_blank_validation
    self.actions.wait_for_element(self.password_validation)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="7f753a8577823c91a86cea217139306a")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fb4c0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a79110ffba <unknown>
E       #1 0x55a790b946d0 <unknown>
E       #2 0x55a790be62aa <unknown>
E       #3 0x55a790be6541 <unknown>
E       #4 0x55a790c346c4 <unknown>
E       #5 0x55a790c0be5d <unknown>
E       #6 0x55a790c31b54 <unknown>
E       #7 0x55a790c0bc03 <unknown>
E       #8 0x55a790bd87a8 <unknown>
E       #9 0x55a790bd9421 <unknown>
E       #10 0x55a7910d4b28 <unknown>
E       #11 0x55a7910d887f <unknown>
E       #12 0x55a7910bcc49 <unknown>
E       #13 0x55a7910d9405 <unknown>
E       #14 0x55a7910a24ff <unknown>
E       #15 0x55a7910fd258 <unknown>
E       #16 0x55a7910fd432 <unknown>
E       #17 0x55a79110efa3 <unknown>
E       #18 0x7f3c4b69caa4 <unknown>
E       #19 0x7f3c4b729c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:13:55,218 - INFO - Starting test with Chrome browser
2025-10-14 04:13:55,218 - INFO - ====== WebDriver manager ======
2025-10-14 04:13:55,282 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:13:55,320 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:13:55,356 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:13:56,457 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:15:59,786 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username0] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="607f926f7e07aa8a3dbbc5f65567b0c4")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('yash10%gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="607f926f7e07aa8a3dbbc5f65567b0c4")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fa480>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x559892493fba <unknown>
E       #1 0x559891f186d0 <unknown>
E       #2 0x559891f6a2aa <unknown>
E       #3 0x559891f6a541 <unknown>
E       #4 0x559891fb86c4 <unknown>
E       #5 0x559891f8fe5d <unknown>
E       #6 0x559891fb5b54 <unknown>
E       #7 0x559891f8fc03 <unknown>
E       #8 0x559891f5c7a8 <unknown>
E       #9 0x559891f5d421 <unknown>
E       #10 0x559892458b28 <unknown>
E       #11 0x55989245c87f <unknown>
E       #12 0x559892440c49 <unknown>
E       #13 0x55989245d405 <unknown>
E       #14 0x5598924264ff <unknown>
E       #15 0x559892481258 <unknown>
E       #16 0x559892481432 <unknown>
E       #17 0x559892492fa3 <unknown>
E       #18 0x7f3e8c49caa4 <unknown>
E       #19 0x7f3e8c529c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:15:59,850 - INFO - Starting test with Chrome browser
2025-10-14 04:15:59,850 - INFO - ====== WebDriver manager ======
2025-10-14 04:15:59,912 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:15:59,947 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:15:59,981 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:16:01,204 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:18:03,025 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username1] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="f8af94bf0164cdf2d37d22b406725bfe")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash1gmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="f8af94bf0164cdf2d37d22b406725bfe")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345faca0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5610cb303fba <unknown>
E       #1 0x5610cad886d0 <unknown>
E       #2 0x5610cadda2aa <unknown>
E       #3 0x5610cadda541 <unknown>
E       #4 0x5610cae286c4 <unknown>
E       #5 0x5610cadffe5d <unknown>
E       #6 0x5610cae25b54 <unknown>
E       #7 0x5610cadffc03 <unknown>
E       #8 0x5610cadcc7a8 <unknown>
E       #9 0x5610cadcd421 <unknown>
E       #10 0x5610cb2c8b28 <unknown>
E       #11 0x5610cb2cc87f <unknown>
E       #12 0x5610cb2b0c49 <unknown>
E       #13 0x5610cb2cd405 <unknown>
E       #14 0x5610cb2964ff <unknown>
E       #15 0x5610cb2f1258 <unknown>
E       #16 0x5610cb2f1432 <unknown>
E       #17 0x5610cb302fa3 <unknown>
E       #18 0x7f803b29caa4 <unknown>
E       #19 0x7f803b329c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:18:03,084 - INFO - Starting test with Chrome browser
2025-10-14 04:18:03,084 - INFO - ====== WebDriver manager ======
2025-10-14 04:18:03,149 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:18:03,193 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:18:03,228 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:18:04,460 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:20:06,327 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username2] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="3c802a663b82fbc65cce079074e23573")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = (' payeryash10@gmai|com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="3c802a663b82fbc65cce079074e23573")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fb2e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5634bed2dfba <unknown>
E       #1 0x5634be7b26d0 <unknown>
E       #2 0x5634be8042aa <unknown>
E       #3 0x5634be804541 <unknown>
E       #4 0x5634be8526c4 <unknown>
E       #5 0x5634be829e5d <unknown>
E       #6 0x5634be84fb54 <unknown>
E       #7 0x5634be829c03 <unknown>
E       #8 0x5634be7f67a8 <unknown>
E       #9 0x5634be7f7421 <unknown>
E       #10 0x5634becf2b28 <unknown>
E       #11 0x5634becf687f <unknown>
E       #12 0x5634becdac49 <unknown>
E       #13 0x5634becf7405 <unknown>
E       #14 0x5634becc04ff <unknown>
E       #15 0x5634bed1b258 <unknown>
E       #16 0x5634bed1b432 <unknown>
E       #17 0x5634bed2cfa3 <unknown>
E       #18 0x7fabf109caa4 <unknown>
E       #19 0x7fabf1129c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:20:06,386 - INFO - Starting test with Chrome browser
2025-10-14 04:20:06,386 - INFO - ====== WebDriver manager ======
2025-10-14 04:20:06,451 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:20:06,487 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:20:06,522 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:20:07,822 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:22:09,714 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username3] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="68f54ebc3a54941d91806d4bcf6520a6")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payergmail.com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="68f54ebc3a54941d91806d4bcf6520a6")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fb600>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5558d3b28fba <unknown>
E       #1 0x5558d35ad6d0 <unknown>
E       #2 0x5558d35ff2aa <unknown>
E       #3 0x5558d35ff541 <unknown>
E       #4 0x5558d364d6c4 <unknown>
E       #5 0x5558d3624e5d <unknown>
E       #6 0x5558d364ab54 <unknown>
E       #7 0x5558d3624c03 <unknown>
E       #8 0x5558d35f17a8 <unknown>
E       #9 0x5558d35f2421 <unknown>
E       #10 0x5558d3aedb28 <unknown>
E       #11 0x5558d3af187f <unknown>
E       #12 0x5558d3ad5c49 <unknown>
E       #13 0x5558d3af2405 <unknown>
E       #14 0x5558d3abb4ff <unknown>
E       #15 0x5558d3b16258 <unknown>
E       #16 0x5558d3b16432 <unknown>
E       #17 0x5558d3b27fa3 <unknown>
E       #18 0x7f3103a9caa4 <unknown>
E       #19 0x7f3103b29c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:22:09,772 - INFO - Starting test with Chrome browser
2025-10-14 04:22:09,772 - INFO - ====== WebDriver manager ======
2025-10-14 04:22:09,835 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:22:09,870 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:22:09,906 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:22:11,162 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:24:12,972 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
___________________ test_invalid_email_validation[username4] ___________________

setup = <selenium.webdriver.chrome.webdriver.WebDriver (session="c05e1b8c516cd09afc2bacc203721fc9")>
login_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': "Please check your email address. If you don't have an account, you can create one.", ...}
username = ('payeryash10@gmail/com',)

    @pytest.mark.parametrize("username", zip(invalid_format_username))
    def test_invalid_email_validation(setup, login_test_data, username):
        driver = setup
        login_page = LoginPage(driver)
        login_page.enter_username(username)
        login_page.disabled_click_login_button()
>       login_page.invalid_email_validation(login_test_data)

tests/test_login.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/login_page.py:90: in invalid_email_validation
    self.actions.wait_for_element(self.invalid_email_verification_msg)
actions/actions.py:71: in wait_for_element
    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="c05e1b8c516cd09afc2bacc203721fc9")>
method = <function visibility_of_element_located.<locals>._predicate at 0x7f6f345fb880>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55986e59cfba <unknown>
E       #1 0x55986e0216d0 <unknown>
E       #2 0x55986e0732aa <unknown>
E       #3 0x55986e073541 <unknown>
E       #4 0x55986e0c16c4 <unknown>
E       #5 0x55986e098e5d <unknown>
E       #6 0x55986e0beb54 <unknown>
E       #7 0x55986e098c03 <unknown>
E       #8 0x55986e0657a8 <unknown>
E       #9 0x55986e066421 <unknown>
E       #10 0x55986e561b28 <unknown>
E       #11 0x55986e56587f <unknown>
E       #12 0x55986e549c49 <unknown>
E       #13 0x55986e566405 <unknown>
E       #14 0x55986e52f4ff <unknown>
E       #15 0x55986e58a258 <unknown>
E       #16 0x55986e58a432 <unknown>
E       #17 0x55986e59bfa3 <unknown>
E       #18 0x7f29c289caa4 <unknown>
E       #19 0x7f29c2929c6c <unknown>

/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException
---------------------------- Captured stderr setup -----------------------------
2025-10-14 04:24:13,031 - INFO - Starting test with Chrome browser
2025-10-14 04:24:13,031 - INFO - ====== WebDriver manager ======
2025-10-14 04:24:13,095 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:24:13,130 - INFO - Get LATEST chromedriver version for google-chrome
2025-10-14 04:24:13,165 - INFO - Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
2025-10-14 04:24:14,521 - INFO - Navigated to URL: https://app.mochaaccounting.com/login
------------------------------ Captured log setup ------------------------------
INFO     conftest:conftest.py:90 Starting test with Chrome browser
INFO     WDM:logger.py:11 ====== WebDriver manager ======
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Get LATEST chromedriver version for google-chrome
INFO     WDM:logger.py:11 Driver [/home/runner/.wdm/drivers/chromedriver/linux64/140.0.7339.207/chromedriver-linux64/chromedriver] found in cache
INFO     conftest:conftest.py:118 Navigated to URL: https://app.mochaaccounting.com/login
--------------------------- Captured stderr teardown ---------------------------
2025-10-14 04:26:16,337 - INFO - Closing browser
---------------------------- Captured log teardown -----------------------------
INFO     conftest:conftest.py:132 Closing browser
- Generated html report: file:///home/runner/work/Mocha_accounting/Mocha_accounting/C%3A%5CUsers%5CTaurus13%5CPycharmProjects%5CPythonProject%5Creports/20251014_034651/report.html -
=========================== short test summary info ============================
FAILED tests/test_login.py::test_valid_login[ranjeet.gupta@mochatechnologies.com-Ais@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5561b44fcfba <unknown>
#1 0x5561b3f816d0 <unknown>
#2 0x5561b3fd32aa <unknown>
#3 0x5561b3fd3541 <unknown>
#4 0x5561b40216c4 <unknown>
#5 0x5561b3ff8e5d <unknown>
#6 0x5561b401eb54 <unknown>
#7 0x5561b3ff8c03 <unknown>
#8 0x5561b3fc57a8 <unknown>
#9 0x5561b3fc6421 <unknown>
#10 0x5561b44c1b28 <unknown>
#11 0x5561b44c587f <unknown>
#12 0x5561b44a9c49 <unknown>
#13 0x5561b44c6405 <unknown>
#14 0x5561b448f4ff <unknown>
#15 0x5561b44ea258 <unknown>
#16 0x5561b44ea432 <unknown>
#17 0x5561b44fbfa3 <unknown>
#18 0x7f2d69a9caa4 <unknown>
#19 0x7f2d69b29c6c <unknown>
FAILED tests/test_login.py::test_valid_login[samatakamble9@gmail.com-Samata@16] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x565228869fba <unknown>
#1 0x5652282ee6d0 <unknown>
#2 0x5652283402aa <unknown>
#3 0x565228340541 <unknown>
#4 0x56522838e6c4 <unknown>
#5 0x565228365e5d <unknown>
#6 0x56522838bb54 <unknown>
#7 0x565228365c03 <unknown>
#8 0x5652283327a8 <unknown>
#9 0x565228333421 <unknown>
#10 0x56522882eb28 <unknown>
#11 0x56522883287f <unknown>
#12 0x565228816c49 <unknown>
#13 0x565228833405 <unknown>
#14 0x5652287fc4ff <unknown>
#15 0x565228857258 <unknown>
#16 0x565228857432 <unknown>
#17 0x565228868fa3 <unknown>
#18 0x7fed2a09caa4 <unknown>
#19 0x7fed2a129c6c <unknown>
FAILED tests/test_login.py::test_valid_login[shubhamdabir07@gmail.com-Shubham@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f4871ecfba <unknown>
#1 0x55f486c716d0 <unknown>
#2 0x55f486cc32aa <unknown>
#3 0x55f486cc3541 <unknown>
#4 0x55f486d116c4 <unknown>
#5 0x55f486ce8e5d <unknown>
#6 0x55f486d0eb54 <unknown>
#7 0x55f486ce8c03 <unknown>
#8 0x55f486cb57a8 <unknown>
#9 0x55f486cb6421 <unknown>
#10 0x55f4871b1b28 <unknown>
#11 0x55f4871b587f <unknown>
#12 0x55f487199c49 <unknown>
#13 0x55f4871b6405 <unknown>
#14 0x55f48717f4ff <unknown>
#15 0x55f4871da258 <unknown>
#16 0x55f4871da432 <unknown>
#17 0x55f4871ebfa3 <unknown>
#18 0x7f0a4a89caa4 <unknown>
#19 0x7f0a4a929c6c <unknown>
FAILED tests/test_login.py::test_valid_login[hrishikesh.shinde1607@gmail.com-Hrishikesh@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559b3166efba <unknown>
#1 0x559b310f36d0 <unknown>
#2 0x559b311452aa <unknown>
#3 0x559b31145541 <unknown>
#4 0x559b311936c4 <unknown>
#5 0x559b3116ae5d <unknown>
#6 0x559b31190b54 <unknown>
#7 0x559b3116ac03 <unknown>
#8 0x559b311377a8 <unknown>
#9 0x559b31138421 <unknown>
#10 0x559b31633b28 <unknown>
#11 0x559b3163787f <unknown>
#12 0x559b3161bc49 <unknown>
#13 0x559b31638405 <unknown>
#14 0x559b316014ff <unknown>
#15 0x559b3165c258 <unknown>
#16 0x559b3165c432 <unknown>
#17 0x559b3166dfa3 <unknown>
#18 0x7fb0f109caa4 <unknown>
#19 0x7fb0f1129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55c2026cdfba <unknown>
#1 0x55c2021526d0 <unknown>
#2 0x55c2021a42aa <unknown>
#3 0x55c2021a4541 <unknown>
#4 0x55c2021f26c4 <unknown>
#5 0x55c2021c9e5d <unknown>
#6 0x55c2021efb54 <unknown>
#7 0x55c2021c9c03 <unknown>
#8 0x55c2021967a8 <unknown>
#9 0x55c202197421 <unknown>
#10 0x55c202692b28 <unknown>
#11 0x55c20269687f <unknown>
#12 0x55c20267ac49 <unknown>
#13 0x55c202697405 <unknown>
#14 0x55c2026604ff <unknown>
#15 0x55c2026bb258 <unknown>
#16 0x55c2026bb432 <unknown>
#17 0x55c2026ccfa3 <unknown>
#18 0x7f1dc8c9caa4 <unknown>
#19 0x7f1dc8d29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x562ae404cfba <unknown>
#1 0x562ae3ad16d0 <unknown>
#2 0x562ae3b232aa <unknown>
#3 0x562ae3b23541 <unknown>
#4 0x562ae3b716c4 <unknown>
#5 0x562ae3b48e5d <unknown>
#6 0x562ae3b6eb54 <unknown>
#7 0x562ae3b48c03 <unknown>
#8 0x562ae3b157a8 <unknown>
#9 0x562ae3b16421 <unknown>
#10 0x562ae4011b28 <unknown>
#11 0x562ae401587f <unknown>
#12 0x562ae3ff9c49 <unknown>
#13 0x562ae4016405 <unknown>
#14 0x562ae3fdf4ff <unknown>
#15 0x562ae403a258 <unknown>
#16 0x562ae403a432 <unknown>
#17 0x562ae404bfa3 <unknown>
#18 0x7fab7749caa4 <unknown>
#19 0x7fab77529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55aef1fcbfba <unknown>
#1 0x55aef1a506d0 <unknown>
#2 0x55aef1aa22aa <unknown>
#3 0x55aef1aa2541 <unknown>
#4 0x55aef1af06c4 <unknown>
#5 0x55aef1ac7e5d <unknown>
#6 0x55aef1aedb54 <unknown>
#7 0x55aef1ac7c03 <unknown>
#8 0x55aef1a947a8 <unknown>
#9 0x55aef1a95421 <unknown>
#10 0x55aef1f90b28 <unknown>
#11 0x55aef1f9487f <unknown>
#12 0x55aef1f78c49 <unknown>
#13 0x55aef1f95405 <unknown>
#14 0x55aef1f5e4ff <unknown>
#15 0x55aef1fb9258 <unknown>
#16 0x55aef1fb9432 <unknown>
#17 0x55aef1fcafa3 <unknown>
#18 0x7f530729caa4 <unknown>
#19 0x7f5307329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_login[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55f493cc2fba <unknown>
#1 0x55f4937476d0 <unknown>
#2 0x55f4937992aa <unknown>
#3 0x55f493799541 <unknown>
#4 0x55f4937e76c4 <unknown>
#5 0x55f4937bee5d <unknown>
#6 0x55f4937e4b54 <unknown>
#7 0x55f4937bec03 <unknown>
#8 0x55f49378b7a8 <unknown>
#9 0x55f49378c421 <unknown>
#10 0x55f493c87b28 <unknown>
#11 0x55f493c8b87f <unknown>
#12 0x55f493c6fc49 <unknown>
#13 0x55f493c8c405 <unknown>
#14 0x55f493c554ff <unknown>
#15 0x55f493cb0258 <unknown>
#16 0x55f493cb0432 <unknown>
#17 0x55f493cc1fa3 <unknown>
#18 0x7fb994e9caa4 <unknown>
#19 0x7fb994f29c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[ranjeet.gupta@mochatechnologies.com-Password@123] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a25e792fba <unknown>
#1 0x55a25e2176d0 <unknown>
#2 0x55a25e2692aa <unknown>
#3 0x55a25e269541 <unknown>
#4 0x55a25e2b76c4 <unknown>
#5 0x55a25e28ee5d <unknown>
#6 0x55a25e2b4b54 <unknown>
#7 0x55a25e28ec03 <unknown>
#8 0x55a25e25b7a8 <unknown>
#9 0x55a25e25c421 <unknown>
#10 0x55a25e757b28 <unknown>
#11 0x55a25e75b87f <unknown>
#12 0x55a25e73fc49 <unknown>
#13 0x55a25e75c405 <unknown>
#14 0x55a25e7254ff <unknown>
#15 0x55a25e780258 <unknown>
#16 0x55a25e780432 <unknown>
#17 0x55a25e791fa3 <unknown>
#18 0x7f47c129caa4 <unknown>
#19 0x7f47c1329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[samatakamble9@gmail.com-Password@12] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x565033a49fba <unknown>
#1 0x5650334ce6d0 <unknown>
#2 0x5650335202aa <unknown>
#3 0x565033520541 <unknown>
#4 0x56503356e6c4 <unknown>
#5 0x565033545e5d <unknown>
#6 0x56503356bb54 <unknown>
#7 0x565033545c03 <unknown>
#8 0x5650335127a8 <unknown>
#9 0x565033513421 <unknown>
#10 0x565033a0eb28 <unknown>
#11 0x565033a1287f <unknown>
#12 0x5650339f6c49 <unknown>
#13 0x565033a13405 <unknown>
#14 0x5650339dc4ff <unknown>
#15 0x565033a37258 <unknown>
#16 0x565033a37432 <unknown>
#17 0x565033a48fa3 <unknown>
#18 0x7fdf2429caa4 <unknown>
#19 0x7fdf24329c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[shubhamdabir07@gmail.com-Password] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5629c95bcfba <unknown>
#1 0x5629c90416d0 <unknown>
#2 0x5629c90932aa <unknown>
#3 0x5629c9093541 <unknown>
#4 0x5629c90e16c4 <unknown>
#5 0x5629c90b8e5d <unknown>
#6 0x5629c90deb54 <unknown>
#7 0x5629c90b8c03 <unknown>
#8 0x5629c90857a8 <unknown>
#9 0x5629c9086421 <unknown>
#10 0x5629c9581b28 <unknown>
#11 0x5629c958587f <unknown>
#12 0x5629c9569c49 <unknown>
#13 0x5629c9586405 <unknown>
#14 0x5629c954f4ff <unknown>
#15 0x5629c95aa258 <unknown>
#16 0x5629c95aa432 <unknown>
#17 0x5629c95bbfa3 <unknown>
#18 0x7f073d69caa4 <unknown>
#19 0x7f073d729c6c <unknown>
FAILED tests/test_login.py::test_invalid_password_login[hrishikesh.shinde1607@gmail.com-payer@1234] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55767dfdbfba <unknown>
#1 0x55767da606d0 <unknown>
#2 0x55767dab22aa <unknown>
#3 0x55767dab2541 <unknown>
#4 0x55767db006c4 <unknown>
#5 0x55767dad7e5d <unknown>
#6 0x55767dafdb54 <unknown>
#7 0x55767dad7c03 <unknown>
#8 0x55767daa47a8 <unknown>
#9 0x55767daa5421 <unknown>
#10 0x55767dfa0b28 <unknown>
#11 0x55767dfa487f <unknown>
#12 0x55767df88c49 <unknown>
#13 0x55767dfa5405 <unknown>
#14 0x55767df6e4ff <unknown>
#15 0x55767dfc9258 <unknown>
#16 0x55767dfc9432 <unknown>
#17 0x55767dfdafa3 <unknown>
#18 0x7fbdf109caa4 <unknown>
#19 0x7fbdf1129c6c <unknown>
FAILED tests/test_login.py::test_blank_username_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x556deedc0fba <unknown>
#1 0x556dee8456d0 <unknown>
#2 0x556dee8972aa <unknown>
#3 0x556dee897541 <unknown>
#4 0x556dee8e56c4 <unknown>
#5 0x556dee8bce5d <unknown>
#6 0x556dee8e2b54 <unknown>
#7 0x556dee8bcc03 <unknown>
#8 0x556dee8897a8 <unknown>
#9 0x556dee88a421 <unknown>
#10 0x556deed85b28 <unknown>
#11 0x556deed8987f <unknown>
#12 0x556deed6dc49 <unknown>
#13 0x556deed8a405 <unknown>
#14 0x556deed534ff <unknown>
#15 0x556deedae258 <unknown>
#16 0x556deedae432 <unknown>
#17 0x556deedbffa3 <unknown>
#18 0x7f497489caa4 <unknown>
#19 0x7f4974929c6c <unknown>
FAILED tests/test_login.py::test_blank_password_validation - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55a79110ffba <unknown>
#1 0x55a790b946d0 <unknown>
#2 0x55a790be62aa <unknown>
#3 0x55a790be6541 <unknown>
#4 0x55a790c346c4 <unknown>
#5 0x55a790c0be5d <unknown>
#6 0x55a790c31b54 <unknown>
#7 0x55a790c0bc03 <unknown>
#8 0x55a790bd87a8 <unknown>
#9 0x55a790bd9421 <unknown>
#10 0x55a7910d4b28 <unknown>
#11 0x55a7910d887f <unknown>
#12 0x55a7910bcc49 <unknown>
#13 0x55a7910d9405 <unknown>
#14 0x55a7910a24ff <unknown>
#15 0x55a7910fd258 <unknown>
#16 0x55a7910fd432 <unknown>
#17 0x55a79110efa3 <unknown>
#18 0x7f3c4b69caa4 <unknown>
#19 0x7f3c4b729c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username0] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x559892493fba <unknown>
#1 0x559891f186d0 <unknown>
#2 0x559891f6a2aa <unknown>
#3 0x559891f6a541 <unknown>
#4 0x559891fb86c4 <unknown>
#5 0x559891f8fe5d <unknown>
#6 0x559891fb5b54 <unknown>
#7 0x559891f8fc03 <unknown>
#8 0x559891f5c7a8 <unknown>
#9 0x559891f5d421 <unknown>
#10 0x559892458b28 <unknown>
#11 0x55989245c87f <unknown>
#12 0x559892440c49 <unknown>
#13 0x55989245d405 <unknown>
#14 0x5598924264ff <unknown>
#15 0x559892481258 <unknown>
#16 0x559892481432 <unknown>
#17 0x559892492fa3 <unknown>
#18 0x7f3e8c49caa4 <unknown>
#19 0x7f3e8c529c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username1] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5610cb303fba <unknown>
#1 0x5610cad886d0 <unknown>
#2 0x5610cadda2aa <unknown>
#3 0x5610cadda541 <unknown>
#4 0x5610cae286c4 <unknown>
#5 0x5610cadffe5d <unknown>
#6 0x5610cae25b54 <unknown>
#7 0x5610cadffc03 <unknown>
#8 0x5610cadcc7a8 <unknown>
#9 0x5610cadcd421 <unknown>
#10 0x5610cb2c8b28 <unknown>
#11 0x5610cb2cc87f <unknown>
#12 0x5610cb2b0c49 <unknown>
#13 0x5610cb2cd405 <unknown>
#14 0x5610cb2964ff <unknown>
#15 0x5610cb2f1258 <unknown>
#16 0x5610cb2f1432 <unknown>
#17 0x5610cb302fa3 <unknown>
#18 0x7f803b29caa4 <unknown>
#19 0x7f803b329c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username2] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5634bed2dfba <unknown>
#1 0x5634be7b26d0 <unknown>
#2 0x5634be8042aa <unknown>
#3 0x5634be804541 <unknown>
#4 0x5634be8526c4 <unknown>
#5 0x5634be829e5d <unknown>
#6 0x5634be84fb54 <unknown>
#7 0x5634be829c03 <unknown>
#8 0x5634be7f67a8 <unknown>
#9 0x5634be7f7421 <unknown>
#10 0x5634becf2b28 <unknown>
#11 0x5634becf687f <unknown>
#12 0x5634becdac49 <unknown>
#13 0x5634becf7405 <unknown>
#14 0x5634becc04ff <unknown>
#15 0x5634bed1b258 <unknown>
#16 0x5634bed1b432 <unknown>
#17 0x5634bed2cfa3 <unknown>
#18 0x7fabf109caa4 <unknown>
#19 0x7fabf1129c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username3] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x5558d3b28fba <unknown>
#1 0x5558d35ad6d0 <unknown>
#2 0x5558d35ff2aa <unknown>
#3 0x5558d35ff541 <unknown>
#4 0x5558d364d6c4 <unknown>
#5 0x5558d3624e5d <unknown>
#6 0x5558d364ab54 <unknown>
#7 0x5558d3624c03 <unknown>
#8 0x5558d35f17a8 <unknown>
#9 0x5558d35f2421 <unknown>
#10 0x5558d3aedb28 <unknown>
#11 0x5558d3af187f <unknown>
#12 0x5558d3ad5c49 <unknown>
#13 0x5558d3af2405 <unknown>
#14 0x5558d3abb4ff <unknown>
#15 0x5558d3b16258 <unknown>
#16 0x5558d3b16432 <unknown>
#17 0x5558d3b27fa3 <unknown>
#18 0x7f3103a9caa4 <unknown>
#19 0x7f3103b29c6c <unknown>
FAILED tests/test_login.py::test_invalid_email_validation[username4] - selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
#0 0x55986e59cfba <unknown>
#1 0x55986e0216d0 <unknown>
#2 0x55986e0732aa <unknown>
#3 0x55986e073541 <unknown>
#4 0x55986e0c16c4 <unknown>
#5 0x55986e098e5d <unknown>
#6 0x55986e0beb54 <unknown>
#7 0x55986e098c03 <unknown>
#8 0x55986e0657a8 <unknown>
#9 0x55986e066421 <unknown>
#10 0x55986e561b28 <unknown>
#11 0x55986e56587f <unknown>
#12 0x55986e549c49 <unknown>
#13 0x55986e566405 <unknown>
#14 0x55986e52f4ff <unknown>
#15 0x55986e58a258 <unknown>
#16 0x55986e58a432 <unknown>
#17 0x55986e59bfa3 <unknown>
#18 0x7f29c289caa4 <unknown>
#19 0x7f29c2929c6c <unknown>
======================= 19 failed in 2365.09s (0:39:25) ========================
--------------------------------------------
Test Run Finished: 2025-10-14 04:26:16
Duration: 2368 seconds
Status: FAILURE
Exit Code: 1
============================================
