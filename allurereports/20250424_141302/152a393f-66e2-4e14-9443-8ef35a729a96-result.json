{"name": "test_blank_usernamepassword_validation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dddfe3ddc1ada2e80a1f464c89da72ee\")>\nlogin_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...ect_email_verification_msg': \"Please check your email address. If you don't have an account, you can create one.\", ...}\n\n    def test_blank_usernamepassword_validation(setup,login_test_data):\n        driver = setup\n        login_page = LoginPage(driver)\n>       login_page.click_loginbutton()\n\ntest_login.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\login_page.py:44: in click_loginbutton\n    self.actions.click(self.login_button)\n..\\actions\\actions.py:21: in click\n    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"dddfe3ddc1ada2e80a1f464c89da72ee\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000016E3C169800>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "attachments": [{"name": "log", "source": "067c676d-9b2d-4ff2-b386-2b10ecbbb959-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "4193f136-55c6-41cc-8353-5a57516c6b58-attachment.txt", "type": "text/plain"}], "start": 1745484190313, "stop": 1745484210492, "uuid": "f26078db-2a68-47cb-9deb-7daaa7e8c7f8", "historyId": "56a66a35adaa7a14bde46868ded35ef4", "testCaseId": "56a66a35adaa7a14bde46868ded35ef4", "fullName": "test_login#test_blank_usernamepassword_validation", "labels": [{"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-R01C5SG4"}, {"name": "thread", "value": "43808-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}