{"name": "test_create_invoice", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //div[contains(@class,'modal-content')]//div[contains(@class,'css-19bb58m')]//input(@id,'react-select')] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[contains(@class,'modal-content')]//div[contains(@class,'css-19bb58m')]//input(@id,'react-select')]' is not a valid XPath expression.\n  (Session info: chrome=135.0.7049.43); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00D98073+60707]\n\tGetHandleVerifier [0x00D980B4+60772]\n\t(No symbol) [0x00BC0683]\n\t(No symbol) [0x00BC6DE7]\n\t(No symbol) [0x00BC90DA]\n\t(No symbol) [0x00BC9157]\n\t(No symbol) [0x00C07EF4]\n\t(No symbol) [0x00C089FB]\n\t(No symbol) [0x00C51022]\n\t(No symbol) [0x00C2D094]\n\t(No symbol) [0x00C4E824]\n\t(No symbol) [0x00C2CE46]\n\t(No symbol) [0x00BFC5D3]\n\t(No symbol) [0x00BFD424]\n\tGetHandleVerifier [0x00FDBB53+2435075]\n\tGetHandleVerifier [0x00FD70F3+2416035]\n\tGetHandleVerifier [0x00FF349C+2531660]\n\tGetHandleVerifier [0x00DAF145+155125]\n\tGetHandleVerifier [0x00DB5AED+182173]\n\tGetHandleVerifier [0x00D9F948+91640]\n\tGetHandleVerifier [0x00D9FAF0+92064]\n\tGetHandleVerifier [0x00D8A5B0+4704]\n\tBaseThreadInitThunk [0x75EB7BA9+25]\n\tRtlInitializeExceptionChain [0x7727C2EB+107]\n\tRtlClearBits [0x7727C26F+191]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4ec892d526065145eb1a74fdf1786714\")>\ncreate_invoice_test_data = {'customer_name': 'Sachin Tendulkar', 'due_date': 'April 2025, April 10, 2025', 'invoice_date': 'March 2025, March 4, 2025', 'message_on_invoice': 'automation test', ...}\n\n    def test_create_invoice(setup, create_invoice_test_data):\n        driver = setup\n        create_invoice = Create_Invoice(driver)\n    \n        logger.info(\"Test case started for create invoice\")\n        create_invoice.inv_submod_Sales()\n        logger.info(\"Navigated to Sale module\")\n        create_invoice.inv_submod_invoice()\n        logger.info(\"Navigated to Invoice submodule\")\n        create_invoice.inv_create_invoice()\n        logger.info(\"clicked on create invoice button\")\n        time.sleep(3)\n        create_invoice.inv_select_customer(create_invoice_test_data)\n        logger.info(\"customer selected\")\n        time.sleep(2)\n        #create_invoice.inv_select_credit_terms(create_invoice_test_data)\n        logger.info(\"credit terms selected\")\n        #create_invoice.inv_location_of_sale(create_invoice_test_data)\n        logger.info(\"location of sale selected\")\n        #create_invoice.inv_dd_billing(create_invoice_test_data)\n        logger.info(\"billing address selected\")\n        #create_invoice.inv_shippingvia(create_invoice_test_data)\n        logger.info(\"shippingvia address selected\")\n        #create_invoice.inv_shipping_to(create_invoice_test_data)\n        logger.info(\"shippingto address selected\")\n        create_invoice.inv_invoice_date(create_invoice_test_data)\n        logger.info(\"invoice date selected\")\n        create_invoice.inv_shipping_date(create_invoice_test_data)\n        logger.info(\"shipping date selected\")\n        create_invoice.inv_due_date(create_invoice_test_data)\n        logger.info(\"due date selected\")\n        create_invoice.inv_click_additems()\n        logger.info(\"add items button clicked\")\n>       create_invoice.inv_select_productservice(create_invoice_test_data)\n\ntest_create_invoice.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\create_invoice.py:125: in inv_select_productservice\n    self.actions.wait_for_element(self.inv_dd_select_product)\n..\\actions\\actions.py:68: in wait_for_element\n    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:224: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016A5F29EE40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...dInitThunk [0x75EB7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7727C2EB+107]\\\\n\\\\tRtlClearBits [0x7727C26F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //div[contains(@class,'modal-content')]//div[contains(@class,'css-19bb58m')]//input(@id,'react-select')] because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[contains(@class,'modal-content')]//div[contains(@class,'css-19bb58m')]//input(@id,'react-select')]' is not a valid XPath expression.\nE         (Session info: chrome=135.0.7049.43); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00D98073+60707]\nE       \tGetHandleVerifier [0x00D980B4+60772]\nE       \t(No symbol) [0x00BC0683]\nE       \t(No symbol) [0x00BC6DE7]\nE       \t(No symbol) [0x00BC90DA]\nE       \t(No symbol) [0x00BC9157]\nE       \t(No symbol) [0x00C07EF4]\nE       \t(No symbol) [0x00C089FB]\nE       \t(No symbol) [0x00C51022]\nE       \t(No symbol) [0x00C2D094]\nE       \t(No symbol) [0x00C4E824]\nE       \t(No symbol) [0x00C2CE46]\nE       \t(No symbol) [0x00BFC5D3]\nE       \t(No symbol) [0x00BFD424]\nE       \tGetHandleVerifier [0x00FDBB53+2435075]\nE       \tGetHandleVerifier [0x00FD70F3+2416035]\nE       \tGetHandleVerifier [0x00FF349C+2531660]\nE       \tGetHandleVerifier [0x00DAF145+155125]\nE       \tGetHandleVerifier [0x00DB5AED+182173]\nE       \tGetHandleVerifier [0x00D9F948+91640]\nE       \tGetHandleVerifier [0x00D9FAF0+92064]\nE       \tGetHandleVerifier [0x00D8A5B0+4704]\nE       \tBaseThreadInitThunk [0x75EB7BA9+25]\nE       \tRtlInitializeExceptionChain [0x7727C2EB+107]\nE       \tRtlClearBits [0x7727C26F+191]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSelectorException"}, "attachments": [{"name": "log", "source": "afad46ac-a31f-4505-a4d9-3661a70a013b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7c69292a-d56d-4dab-93fc-8d54d80fe2de-attachment.txt", "type": "text/plain"}], "start": 1744988195821, "stop": 1744988222869, "uuid": "664ef37f-7e9a-4de7-8fd0-eafa3702a4ea", "historyId": "fc7b2251192f1c8c226df9a8539342f9", "testCaseId": "fc7b2251192f1c8c226df9a8539342f9", "fullName": "test_create_invoice#test_create_invoice", "labels": [{"name": "suite", "value": "test_create_invoice"}, {"name": "host", "value": "LAPTOP-R01C5SG4"}, {"name": "thread", "value": "66932-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_create_invoice"}]}