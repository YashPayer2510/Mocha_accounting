{"name": "test_blank_username_validation", "status": "failed", "statusDetails": {"message": "Failed: Driver setup failed: Message: session not created\nfrom disconnected: unable to connect to renderer\nStacktrace:\n\tGetHandleVerifier [0x00CB7FD3+60707]\n\tGetHandleVerifier [0x00CB8014+60772]\n\t(No symbol) [0x00AE0683]\n\t(No symbol) [0x00B19454]\n\t(No symbol) [0x00B1443C]\n\t(No symbol) [0x00B0F4A9]\n\t(No symbol) [0x00B58D63]\n\t(No symbol) [0x00B5877A]\n\t(No symbol) [0x00B4CE46]\n\t(No symbol) [0x00B1C5D3]\n\t(No symbol) [0x00B1D424]\n\tGetHandleVerifier [0x00EFBAB3+2435075]\n\tGetHandleVerifier [0x00EF7053+2416035]\n\tGetHandleVerifier [0x00F133FC+2531660]\n\tGetHandleVerifier [0x00CCF0A5+155125]\n\tGetHandleVerifier [0x00CD5A4D+182173]\n\tGetHandleVerifier [0x00CBF8A8+91640]\n\tGetHandleVerifier [0x00CBFA50+92064]\n\tGetHandleVerifier [0x00CAA510+4704]\n\tBaseThreadInitThunk [0x75EB7BA9+25]\n\tRtlInitializeExceptionChain [0x7727C2EB+107]\n\tRtlClearBits [0x7727C26F+191]", "trace": "@pytest.fixture(scope=\"function\")\n    def setup():\n        browser = BROWSER.lower()\n        driver = None\n        logger.info(f\"Starting test with {browser.capitalize()} browser\")\n    \n        try:\n            if browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--force-device-scale-factor=0.85\")\n                #options.add_argument(\"--headless=new\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--remote-debugging-port=9222\")\n                options.add_experimental_option(\"excludeSwitches\", [\"enable-logging\"])\n                options.set_capability(\"unhandledPromptBehavior\", \"accept\")\n                #options.add_argument(f\"--user-data-dir={mkdtemp()}\")\n>               driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n\nconftest.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029BE695EE40>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom disconnected: ...dInitThunk [0x75EB7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7727C2EB+107]\\\\n\\\\tRtlClearBits [0x7727C26F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from disconnected: unable to connect to renderer\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00CB7FD3+60707]\nE       \tGetHandleVerifier [0x00CB8014+60772]\nE       \t(No symbol) [0x00AE0683]\nE       \t(No symbol) [0x00B19454]\nE       \t(No symbol) [0x00B1443C]\nE       \t(No symbol) [0x00B0F4A9]\nE       \t(No symbol) [0x00B58D63]\nE       \t(No symbol) [0x00B5877A]\nE       \t(No symbol) [0x00B4CE46]\nE       \t(No symbol) [0x00B1C5D3]\nE       \t(No symbol) [0x00B1D424]\nE       \tGetHandleVerifier [0x00EFBAB3+2435075]\nE       \tGetHandleVerifier [0x00EF7053+2416035]\nE       \tGetHandleVerifier [0x00F133FC+2531660]\nE       \tGetHandleVerifier [0x00CCF0A5+155125]\nE       \tGetHandleVerifier [0x00CD5A4D+182173]\nE       \tGetHandleVerifier [0x00CBF8A8+91640]\nE       \tGetHandleVerifier [0x00CBFA50+92064]\nE       \tGetHandleVerifier [0x00CAA510+4704]\nE       \tBaseThreadInitThunk [0x75EB7BA9+25]\nE       \tRtlInitializeExceptionChain [0x7727C2EB+107]\nE       \tRtlClearBits [0x7727C26F+191]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope=\"function\")\n    def setup():\n        browser = BROWSER.lower()\n        driver = None\n        logger.info(f\"Starting test with {browser.capitalize()} browser\")\n    \n        try:\n            if browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--force-device-scale-factor=0.85\")\n                #options.add_argument(\"--headless=new\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--remote-debugging-port=9222\")\n                options.add_experimental_option(\"excludeSwitches\", [\"enable-logging\"])\n                options.set_capability(\"unhandledPromptBehavior\", \"accept\")\n                #options.add_argument(f\"--user-data-dir={mkdtemp()}\")\n                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n            elif browser == \"firefox\":\n                options = FirefoxOptions()\n                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n            elif browser == \"edge\":\n                options = EdgeOptions()\n                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n            else:\n                raise ValueError(f\"Unsupported browser: {browser}\")\n    \n            driver.maximize_window()\n            driver.implicitly_wait(30)\n            driver.get(URL)\n            logger.info(f\"Navigated to URL: {URL}\")\n    \n            if ENABLE_LOGIN:\n                login(driver)\n    \n            yield driver\n    \n        except Exception as e:\n            logger.error(f\"Driver setup failed: {e}\")\n>           pytest.fail(f\"Driver setup failed: {e}\")\nE           Failed: Driver setup failed: Message: session not created\nE           from disconnected: unable to connect to renderer\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00CB7FD3+60707]\nE           \tGetHandleVerifier [0x00CB8014+60772]\nE           \t(No symbol) [0x00AE0683]\nE           \t(No symbol) [0x00B19454]\nE           \t(No symbol) [0x00B1443C]\nE           \t(No symbol) [0x00B0F4A9]\nE           \t(No symbol) [0x00B58D63]\nE           \t(No symbol) [0x00B5877A]\nE           \t(No symbol) [0x00B4CE46]\nE           \t(No symbol) [0x00B1C5D3]\nE           \t(No symbol) [0x00B1D424]\nE           \tGetHandleVerifier [0x00EFBAB3+2435075]\nE           \tGetHandleVerifier [0x00EF7053+2416035]\nE           \tGetHandleVerifier [0x00F133FC+2531660]\nE           \tGetHandleVerifier [0x00CCF0A5+155125]\nE           \tGetHandleVerifier [0x00CD5A4D+182173]\nE           \tGetHandleVerifier [0x00CBF8A8+91640]\nE           \tGetHandleVerifier [0x00CBFA50+92064]\nE           \tGetHandleVerifier [0x00CAA510+4704]\nE           \tBaseThreadInitThunk [0x75EB7BA9+25]\nE           \tRtlInitializeExceptionChain [0x7727C2EB+107]\nE           \tRtlClearBits [0x7727C26F+191]\n\nconftest.py:143: Failed"}, "attachments": [{"name": "log", "source": "1844b7a3-f72f-4065-aec7-a4f016e547c6-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7cdbad35-9887-4871-8a9b-7f6af14098aa-attachment.txt", "type": "text/plain"}], "start": 1745420179339, "stop": 1745420179339, "uuid": "851b1d40-0a58-40ec-a3ad-182702b27112", "historyId": "680dcc6ee33f3a3e87e84deb123b29c8", "testCaseId": "680dcc6ee33f3a3e87e84deb123b29c8", "fullName": "test_login#test_blank_username_validation", "labels": [{"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-R01C5SG4"}, {"name": "thread", "value": "92020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}