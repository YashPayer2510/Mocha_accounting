{"name": "test_blank_username_validation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=135.0.7049.43)\nStacktrace:\n\tGetHandleVerifier [0x00D17FD3+60707]\n\tGetHandleVerifier [0x00D18014+60772]\n\t(No symbol) [0x00B40683]\n\t(No symbol) [0x00B2FED0]\n\t(No symbol) [0x00B4DD3F]\n\t(No symbol) [0x00BB3D7F]\n\t(No symbol) [0x00BCE129]\n\t(No symbol) [0x00BACE46]\n\t(No symbol) [0x00B7C5D3]\n\t(No symbol) [0x00B7D424]\n\tGetHandleVerifier [0x00F5BAB3+2435075]\n\tGetHandleVerifier [0x00F57053+2416035]\n\tGetHandleVerifier [0x00F733FC+2531660]\n\tGetHandleVerifier [0x00D2F0A5+155125]\n\tGetHandleVerifier [0x00D35A4D+182173]\n\tGetHandleVerifier [0x00D1F8A8+91640]\n\tGetHandleVerifier [0x00D1FA50+92064]\n\tGetHandleVerifier [0x00D0A510+4704]\n\tBaseThreadInitThunk [0x75EB7BA9+25]\n\tRtlInitializeExceptionChain [0x7727C2EB+107]\n\tRtlClearBits [0x7727C26F+191]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"50a61f6dbf620f3f93a273563a123888\")>\nlogin_test_data = {'expected_password_validation': 'Password is required', 'expected_username_validation': 'Email is required.', 'expect...lid_email_verification_msg': \"Please check your email address. If you don't have an account, you can create one.\", ...}\n\n    def test_blank_username_validation(setup, login_test_data):\n        driver = setup\n        login_page = LoginPage(driver)\n        #login_page.enter_password(valid_password[0])\n>       login_page.click_loginbutton()\n\ntest_login.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\login_page.py:43: in click_loginbutton\n    self.actions.click(self.login_button)\n..\\actions\\actions.py:21: in click\n    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable(locator)).click()\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E4EEA56CF0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...dInitThunk [0x75EB7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7727C2EB+107]\\\\n\\\\tRtlClearBits [0x7727C26F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=135.0.7049.43)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00D17FD3+60707]\nE       \tGetHandleVerifier [0x00D18014+60772]\nE       \t(No symbol) [0x00B40683]\nE       \t(No symbol) [0x00B2FED0]\nE       \t(No symbol) [0x00B4DD3F]\nE       \t(No symbol) [0x00BB3D7F]\nE       \t(No symbol) [0x00BCE129]\nE       \t(No symbol) [0x00BACE46]\nE       \t(No symbol) [0x00B7C5D3]\nE       \t(No symbol) [0x00B7D424]\nE       \tGetHandleVerifier [0x00F5BAB3+2435075]\nE       \tGetHandleVerifier [0x00F57053+2416035]\nE       \tGetHandleVerifier [0x00F733FC+2531660]\nE       \tGetHandleVerifier [0x00D2F0A5+155125]\nE       \tGetHandleVerifier [0x00D35A4D+182173]\nE       \tGetHandleVerifier [0x00D1F8A8+91640]\nE       \tGetHandleVerifier [0x00D1FA50+92064]\nE       \tGetHandleVerifier [0x00D0A510+4704]\nE       \tBaseThreadInitThunk [0x75EB7BA9+25]\nE       \tRtlInitializeExceptionChain [0x7727C2EB+107]\nE       \tRtlClearBits [0x7727C26F+191]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "start": 1745418745872, "stop": 1745418755499, "uuid": "f7823a9b-3b4a-41f0-b97a-e5bd8456edbc", "historyId": "680dcc6ee33f3a3e87e84deb123b29c8", "testCaseId": "680dcc6ee33f3a3e87e84deb123b29c8", "fullName": "test_login#test_blank_username_validation", "labels": [{"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-R01C5SG4"}, {"name": "thread", "value": "79360-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}