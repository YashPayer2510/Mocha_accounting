{"name": "test_valid_login[payeryash10@gmail.com-Password@1234]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=135.0.7049.43)\nStacktrace:\n\tGetHandleVerifier [0x00EE8073+60707]\n\tGetHandleVerifier [0x00EE80B4+60772]\n\t(No symbol) [0x00D10683]\n\t(No symbol) [0x00CEFBEE]\n\t(No symbol) [0x00D83C2E]\n\t(No symbol) [0x00D9E129]\n\t(No symbol) [0x00D7CE46]\n\t(No symbol) [0x00D4C5D3]\n\t(No symbol) [0x00D4D424]\n\tGetHandleVerifier [0x0112BB53+2435075]\n\tGetHandleVerifier [0x011270F3+2416035]\n\tGetHandleVerifier [0x0114349C+2531660]\n\tGetHandleVerifier [0x00EFF145+155125]\n\tGetHandleVerifier [0x00F05AED+182173]\n\tGetHandleVerifier [0x00EEF948+91640]\n\tGetHandleVerifier [0x00EEFAF0+92064]\n\tGetHandleVerifier [0x00EDA5B0+4704]\n\tBaseThreadInitThunk [0x75EB7BA9+25]\n\tRtlInitializeExceptionChain [0x7727C2EB+107]\n\tRtlClearBits [0x7727C26F+191]", "trace": "@pytest.fixture(scope=\"function\")\n    def setup():\n        browser = BROWSER.lower()\n        driver = None\n        logger.info(f\"Starting test with {browser.capitalize()} browser\")\n    \n        try:\n            if browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--force-device-scale-factor=0.85\")\n                options.set_capability(\"unhandledPromptBehavior\", \"accept\")\n                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n            elif browser == \"firefox\":\n                options = FirefoxOptions()\n                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n            elif browser == \"edge\":\n                options = EdgeOptions()\n                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n            else:\n                raise ValueError(f\"Unsupported browser: {browser}\")\n    \n            driver.maximize_window()\n            driver.implicitly_wait(30)\n            driver.get(URL)\n            logger.info(f\"Navigated to URL: {URL}\")\n    \n            if ENABLE_LOGIN:\n>               login(driver)\n\ntests\\conftest.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:150: in login\n    login_page.enter_username(USERNAME[0])\npages\\login_page.py:25: in enter_username\n    self.actions.wait_for_element(self.login_username)\nactions\\actions.py:68: in wait_for_element\n    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:224: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = None, visibility = True\n\n    def _element_if_visible(element: WebElement, visibility: bool = True) -> Union[Literal[False], WebElement]:\n        \"\"\"An expectation for checking that an element, known to be present on the\n        DOM of a page, is of the expected visibility.\n    \n        Parameters:\n        ----------\n        element : WebElement\n            The WebElement to check.\n        visibility : bool\n            The expected visibility of the element.\n    \n        Returns:\n        -------\n        WebElement : The WebElement once it is visible or not visible.\n        \"\"\"\n>       return element if element.is_displayed() == visibility else False\nE       AttributeError: 'NoneType' object has no attribute 'is_displayed'\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:280: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope=\"function\")\n    def setup():\n        browser = BROWSER.lower()\n        driver = None\n        logger.info(f\"Starting test with {browser.capitalize()} browser\")\n    \n        try:\n            if browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--force-device-scale-factor=0.85\")\n                options.set_capability(\"unhandledPromptBehavior\", \"accept\")\n                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n            elif browser == \"firefox\":\n                options = FirefoxOptions()\n                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n            elif browser == \"edge\":\n                options = EdgeOptions()\n                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n            else:\n                raise ValueError(f\"Unsupported browser: {browser}\")\n    \n            driver.maximize_window()\n            driver.implicitly_wait(30)\n            driver.get(URL)\n            logger.info(f\"Navigated to URL: {URL}\")\n    \n            if ENABLE_LOGIN:\n                login(driver)\n    \n            yield driver\n    \n        except Exception as e:\n            logger.error(f\"Driver setup failed: {e}\")\n>           pytest.fail(f\"Driver setup failed: {e}\")\nE           Failed: Driver setup failed: 'NoneType' object has no attribute 'is_displayed'\n\ntests\\conftest.py:137: Failed\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope=\"function\")\n    def setup():\n        browser = BROWSER.lower()\n        driver = None\n        logger.info(f\"Starting test with {browser.capitalize()} browser\")\n    \n        try:\n            if browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--force-device-scale-factor=0.85\")\n                options.set_capability(\"unhandledPromptBehavior\", \"accept\")\n                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n            elif browser == \"firefox\":\n                options = FirefoxOptions()\n                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n            elif browser == \"edge\":\n                options = EdgeOptions()\n                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n            else:\n                raise ValueError(f\"Unsupported browser: {browser}\")\n    \n            driver.maximize_window()\n            driver.implicitly_wait(30)\n            driver.get(URL)\n            logger.info(f\"Navigated to URL: {URL}\")\n    \n            if ENABLE_LOGIN:\n                login(driver)\n    \n            yield driver\n    \n        except Exception as e:\n            logger.error(f\"Driver setup failed: {e}\")\n            pytest.fail(f\"Driver setup failed: {e}\")\n        finally:\n            if driver:\n                if ENABLE_LOGIN:\n>                   logout(driver)\n\ntests\\conftest.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\conftest.py:163: in logout\n    logout_page.click_logged_out_profile()\npages\\login_page.py:50: in click_logged_out_profile\n    self.actions.wait_for_element(self.logged_out_profile)\nactions\\actions.py:68: in wait_for_element\n    WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:224: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023F5F7EEE40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75EB7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7727C2EB+107]\\\\n\\\\tRtlClearBits [0x7727C26F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=135.0.7049.43)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00EE8073+60707]\nE       \tGetHandleVerifier [0x00EE80B4+60772]\nE       \t(No symbol) [0x00D10683]\nE       \t(No symbol) [0x00CEFBEE]\nE       \t(No symbol) [0x00D83C2E]\nE       \t(No symbol) [0x00D9E129]\nE       \t(No symbol) [0x00D7CE46]\nE       \t(No symbol) [0x00D4C5D3]\nE       \t(No symbol) [0x00D4D424]\nE       \tGetHandleVerifier [0x0112BB53+2435075]\nE       \tGetHandleVerifier [0x011270F3+2416035]\nE       \tGetHandleVerifier [0x0114349C+2531660]\nE       \tGetHandleVerifier [0x00EFF145+155125]\nE       \tGetHandleVerifier [0x00F05AED+182173]\nE       \tGetHandleVerifier [0x00EEF948+91640]\nE       \tGetHandleVerifier [0x00EEFAF0+92064]\nE       \tGetHandleVerifier [0x00EDA5B0+4704]\nE       \tBaseThreadInitThunk [0x75EB7BA9+25]\nE       \tRtlInitializeExceptionChain [0x7727C2EB+107]\nE       \tRtlClearBits [0x7727C26F+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "f568964c-5fa6-4b79-8ee4-7d302d40185c-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "86612dab-5046-43dc-a0d4-3b061579c73a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'payeryash10@gmail.com'"}, {"name": "password", "value": "'Password@1234'"}], "start": 1745242597141, "stop": 1745242597141, "uuid": "70b30841-5887-4a7b-839f-91262fcb373f", "historyId": "197354266aa7b3e960a41334d235b436", "testCaseId": "ab68c09e23714aa68c720c2ca07c0ecf", "fullName": "tests.test_login#test_valid_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-R01C5SG4"}, {"name": "thread", "value": "30880-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}