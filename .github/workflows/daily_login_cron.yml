name: Mocha_Accounting_suite

on:
  schedule:
    # Runs daily at 9:00 AM IST (03:30 UTC)
    - cron: '30 3 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run-all-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip xvfb libnss3 libxss1 libasound2t64 libxtst6 fonts-liberation

    - name: Install Chrome
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest chromedriver-autoinstaller selenium
        # Add any other specific packages your tests need
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Debug environment info
      run: |
        echo "=== Environment Information ==="
        echo "Python: $(python --version)"
        echo "Chrome: $(google-chrome --version)"
        echo "Pytest: $(pytest --version)"
        echo "=== Test Files ==="
        find tests/ -name "*.py" | head -10
        echo "=== Current Directory ==="
        pwd
        ls -la

    - name: Setup ChromeDriver
      run: |
        echo "Setting up ChromeDriver..."
        python -c "import chromedriver_autoinstaller; chromedriver_autoinstaller.install()"
        echo "ChromeDriver setup completed"

    - name: Test ChromeDriver setup
      run: |
        python -c "
        import chromedriver_autoinstaller
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        
        # Setup Chrome options for headless mode
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-gpu')
        options.add_argument('--window-size=1920,1080')
        
        # Install and test ChromeDriver
        chromedriver_path = chromedriver_autoinstaller.install()
        print(f'ChromeDriver path: {chromedriver_path}')
        
        driver = webdriver.Chrome(options=options)
        driver.get('https://www.google.com')
        print(f'Page title: {driver.title}')
        driver.quit()
        print('âœ… ChromeDriver test passed!')
        "

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-html pytest-xdist webdriver-manager selenium python-dotenv beautifulsoup4 lxml
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Login Tests
      continue-on-error: true
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        set +e
        LOG_DIR=daily_test_logs
        LOG_FILE=$LOG_DIR/login_tests_$(date -u +'%Y-%m-%d').log
        mkdir -p $LOG_DIR

        START_TIME=$(date -u +"%Y-%m-%d %H:%M:%S")
        echo "=== LOGIN TESTS STARTED: $START_TIME ===" >> $LOG_FILE

        {
          echo "========== Environment Info =========="
          echo "Python: $(python --version)"
          echo "Chrome: $(google-chrome --version)"
          echo "Working directory: $(pwd)"
          echo "======================================"

          echo "========== Linting Check =========="
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exit-zero
          echo "========== End of Linting =========="

        echo "=== LOGIN TESTS COMPLETED ===" >> $LOG_FILE
        echo "Exit Code: $TEST_EXIT_CODE" >> $LOG_FILE
        echo "=== Login Tests Summary ==="
        tail -10 $LOG_FILE
        exit $TEST_EXIT_CODE

          echo "Running tests with detailed output..."
          # Run tests with detailed output
          pytest tests/test_signup_login/test_login.py -v --tb=long -rP
          TEST_EXIT_CODE=$?

        START_TIME=$(date -u +"%Y-%m-%d %H:%M:%S")
        echo "=== REGISTRATION TESTS STARTED: $START_TIME ===" >> $LOG_FILE

        xvfb-run pytest tests/test_signup_login/test_sign_up.py -v --tb=long -rP >> $LOG_FILE 2>&1
        TEST_EXIT_CODE=$?

        # Also print to console for immediate visibility
        echo "=== Test Summary ==="
        cat $LOG_FILE | tail -20
        
        echo "Test Summary: $STATUS"

        # Only commit and push if there are changes
        if git status --porcelain | grep -q $LOG_FILE; then
          git config user.name "YashPayer2510"
          git config user.email "yash.payer@mochatechnologies.com"
          git add $LOG_FILE
          git commit -m "Daily test results - $END_TIME - Status: $STATUS"
          git push
        else
          echo "No changes to commit"
        fi

        exit $TEST_EXIT_CODE

    - name: Upload test logs as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs
        path: daily_login_crons/
        retention-days: 30
