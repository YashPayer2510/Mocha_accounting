import logging
import time
import json
from datetime import datetime

#from telnetlib import EC

import pytest
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.support.wait import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.firefox import GeckoDriverManager
from webdriver_manager.microsoft import EdgeChromiumDriverManager
import sys
import os
from dotenv import load_dotenv
from selenium.webdriver.common.by import By
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from utilities.data_reader import DataReader  # Ensure this import works

# Add the project root to the Python path for module discovery


# Load environment variables
load_dotenv()





# Get credentials from .env file
USERNAME = os.getenv('VALIDLOGINUSERNAME').split(',')
PASSWORD = os.getenv('VALIDLOGINPASSWORD').split(',')
URL = os.getenv('URL')
BROWSER= os.getenv('BROWSER')
REPORT_DIR= os.getenv("REPORT_DIR")
LOGS_DIR = os.getenv("LOG_DIR")
ENABLE_LOGIN = os.getenv("ENABLE_LOGIN", "true").lower() == "true"
ENABLE_LOGOUT= os.getenv("ENABLE_LOGOUT","true").lower()=="true"


# Logging Configuration (your existing code)
log_file = os.path.join(LOGS_DIR, f"selenium_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
os.makedirs(LOGS_DIR, exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)

# HTML Report Configuration
os.makedirs(REPORT_DIR,exist_ok=True )
report_dir = os.path.join(REPORT_DIR, datetime.now().strftime("%Y%m%d_%H%M%S"))
os.makedirs(report_dir, exist_ok=True)
report_path = os.path.join(report_dir, "report.html")





# Hook into pytest to set HTML and Allure report paths
def pytest_configure(config):
    config.option.htmlpath = report_path

logger = logging.getLogger(__name__)

@pytest.fixture(scope="session")
def test_data():
    """Read test data from JSON."""
    try:
        data = DataReader.read_json("test_data.json")
        #logger.info("Test data loaded successfully.")
        return data
    except Exception as e:
        #logger.error(f"Failed to load test data: {e}")
        pytest.fail("Could not load test data.")


@pytest.fixture(scope="function")
def setup(test_data):
    """Set up WebDriver for tests."""
    browser = BROWSER.lower()
    driver = None
    logger.info(f"Starting test with {browser.capitalize()} browser")

    try:
        if browser == "chrome":
            options = ChromeOptions()
            options.add_argument("--disable-gpu")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--force-device-scale-factor=0.85")
            options.set_capability("unhandledPromptBehavior", "accept")
            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
            logger.info("Chrome driver initialized")
        elif browser == "firefox":
            options = FirefoxOptions()
            driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)
            logger.info("Firefox driver initialized")
        elif browser == "edge":
            options = EdgeOptions()
            driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)
            logger.info("Edge driver initialized")
        else:
            raise ValueError(f"Unsupported browser: {browser}")

        driver.maximize_window()
        driver.implicitly_wait(30)

        # Login to the application
        driver.get(URL)
        logger.info(f"Navigated to URL: {URL}")
        login(driver)

        # Use WebDriverWait instead of time.sleep for waiting
        #WebDriverWait(driver, 10).until(EC.title_contains("Dashboard"))  # Example of waiting for page title

        yield driver
    except Exception as e:
        #logger.error(f"Driver setup failed: {e}")
        pytest.fail(f"Driver setup failed: {e}")
    finally:
        if driver:
            logout(driver)
            #logger.info("Closing browser")
            driver.quit()


def login(driver):
    """Perform login using credentials from the .env file."""
    try:
        from pages.login_page import LoginPage

        login_page = LoginPage(driver)
        login_page.enter_username(USERNAME[0])
        login_page.enter_password(PASSWORD[0])
        login_page.click_loginbutton()

      #  WebDriverWait(driver, 10).until(EC.title_contains("Dashboard"))  # Adjust based on your app

        logger.info("Login successful.")
    except Exception as e:
        logger.error(f"Login failed: {e}")
        raise


def logout(driver):
    """Perform logout after each test."""
    try:
        from pages.login_page import LoginPage

        logged_out_page = LoginPage(driver)
        logged_out_page.click_logged_out_profile()
        logged_out_page.click_logged_out_button()

        #WebDriverWait(driver, 10).until(EC.title_contains("Login"))  # Adjust based on your app
        logger.info("Logout successful.")
    except Exception as e:
        logger.error(f"Logout failed: {e}")
        raise
